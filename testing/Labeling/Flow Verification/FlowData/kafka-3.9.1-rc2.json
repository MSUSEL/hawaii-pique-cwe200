{
  "209": [
    {
      "resultIndex": 0,
      "fileName": "JmxTool.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queries",
              "startLine": 245,
              "startColumn": 105,
              "endLine": 245,
              "endColumn": 112,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/JmxTool.java",
              "type": "List",
              "code": "        }\n\n        if (result.isEmpty()) {\n            throw new TerseException(String.format(\"No matched attributes for the queried objects %s.\", queries));\n        }\n        return result;\n    }"
            },
            {
              "step": 1,
              "variableName": "String.format(\"No matched attributes for the queried objects %s.\", queries)",
              "startLine": 245,
              "startColumn": 38,
              "endLine": 245,
              "endColumn": 113,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/JmxTool.java",
              "type": "Object[] [[]] : List",
              "code": "        }\n\n        if (result.isEmpty()) {\n            throw new TerseException(String.format(\"No matched attributes for the queried objects %s.\", queries));\n        }\n        return result;\n    }"
            },
            {
              "step": 2,
              "variableName": "String.format(\"No matched attributes for the queried objects %s.\", queries)",
              "startLine": 245,
              "startColumn": 38,
              "endLine": 245,
              "endColumn": 113,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/JmxTool.java",
              "type": "String",
              "code": "        }\n\n        if (result.isEmpty()) {\n            throw new TerseException(String.format(\"No matched attributes for the queried objects %s.\", queries));\n        }\n        return result;\n    }"
            },
            {
              "step": 3,
              "variableName": "new TerseException(String.format(\"No matched attributes for the queried objects %s.\", queries))",
              "startLine": 245,
              "startColumn": 19,
              "endLine": 245,
              "endColumn": 114,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/JmxTool.java",
              "type": "TerseException",
              "code": "        }\n\n        if (result.isEmpty()) {\n            throw new TerseException(String.format(\"No matched attributes for the queried objects %s.\", queries));\n        }\n        return result;\n    }"
            },
            {
              "step": 4,
              "variableName": "e.getMessage()",
              "startLine": 109,
              "startColumn": 32,
              "endLine": 109,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/JmxTool.java",
              "type": "",
              "code": "            }\n            Exit.exit(0);\n        } catch (TerseException e) {\n            System.err.println(e.getMessage());\n            Exit.exit(1);\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "214": [
    {
      "resultIndex": 1,
      "fileName": "Shell.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "startLine": 70,
              "startColumn": 52,
              "endLine": 70,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "                if (nodeSpec.latencyMs() < 0 || nodeSpec.rateLimitKbit() < 0) {\n                    throw new RuntimeException(\"Expected non-negative values for latencyMs and rateLimitKbit, but got \" + nodeSpec);\n                } else {\n                    enableTrafficControl(platform, device, nodeSpec.latencyMs(), nodeSpec.rateLimitKbit());\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "startLine": 108,
              "startColumn": 58,
              "endLine": 108,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Constructs the appropriate \"tc\" commands to apply latency and rate limiting, if they are non zero.\n     */\n    private void enableTrafficControl(Platform platform, String networkDevice, int delayMs, int rateLimitKbps) throws IOException {\n        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "startLine": 112,
              "startColumn": 25,
              "endLine": 112,
              "endColumn": 38,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 3,
              "variableName": "String networkDevice",
              "startLine": 135,
              "startColumn": 30,
              "endLine": 135,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "networkDevice",
              "startLine": 136,
              "startColumn": 56,
              "endLine": 136,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "startLine": 136,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 95,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Object[] [[]] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "startLine": 136,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 95,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Stream [<element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "consumer",
              "startLine": 136,
              "startColumn": 104,
              "endLine": 136,
              "endColumn": 112,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": ":... [post update] : new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 9,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 10,
              "variableName": "delay",
              "startLine": 114,
              "startColumn": 33,
              "endLine": 114,
              "endColumn": 38,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 11,
              "variableName": "delay.toArray(new String[0])",
              "startLine": 114,
              "startColumn": 33,
              "endLine": 114,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 12,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 14,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 15,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 16,
              "variableName": "String... cmd",
              "startLine": 251,
              "startColumn": 38,
              "endLine": 251,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "cmd",
              "startLine": 252,
              "startColumn": 28,
              "endLine": 252,
              "endColumn": 31,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 3,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 4,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 5,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 7,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 8,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 9,
              "variableName": "String... cmd",
              "startLine": 251,
              "startColumn": 38,
              "endLine": 251,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "cmd",
              "startLine": 252,
              "startColumn": 28,
              "endLine": 252,
              "endColumn": 31,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "startLine": 96,
              "startColumn": 21,
              "endLine": 96,
              "endColumn": 28,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        if (nodeSpec.networkDevice().isEmpty()) {\n            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {\n                if (!networkInterface.isLoopback()) {\n                    devices.add(networkInterface.getName());\n                }\n            }\n        } else {"
            },
            {
              "step": 1,
              "variableName": "devices",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 23,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "startLine": 84,
              "startColumn": 34,
              "endLine": 84,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 12,
              "variableName": "String... cmd",
              "startLine": 251,
              "startColumn": 38,
              "endLine": 251,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "cmd",
              "startLine": 252,
              "startColumn": 28,
              "endLine": 252,
              "endColumn": 31,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "startLine": 100,
              "startColumn": 13,
              "endLine": 100,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "                }\n            }\n        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }"
            },
            {
              "step": 1,
              "variableName": "devices",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 23,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "startLine": 84,
              "startColumn": 34,
              "endLine": 84,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 12,
              "variableName": "String... cmd",
              "startLine": 251,
              "startColumn": 38,
              "endLine": 251,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "cmd",
              "startLine": 252,
              "startColumn": 28,
              "endLine": 252,
              "endColumn": 31,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "LeaderElectionCommand.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "port",
              "startLine": 535,
              "startColumn": 17,
              "endLine": 535,
              "endColumn": 21,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "Number",
              "code": "            BrokerServer broker = entry.getValue();\n            ListenerName listenerName = nodes.externalListenerName();\n            int port = broker.boundPort(listenerName);\n            if (port <= 0) {\n                throw new RuntimeException(\"Broker \" + brokerId + \" does not yet \" +\n                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");"
            },
            {
              "step": 1,
              "variableName": "port",
              "startLine": 540,
              "startColumn": 60,
              "endLine": 540,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "Number",
              "code": "                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");\n            }\n            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();"
            },
            {
              "step": 2,
              "variableName": "bld.append(prefix).append(\"localhost:\")",
              "startLine": 540,
              "startColumn": 13,
              "endLine": 540,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "StringBuilder",
              "code": "                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");\n            }\n            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();"
            },
            {
              "step": 3,
              "variableName": "bld",
              "startLine": 543,
              "startColumn": 16,
              "endLine": 543,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "StringBuilder",
              "code": "            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();\n    }\n\n    public String bootstrapControllers() {"
            },
            {
              "step": 4,
              "variableName": "bld.toString()",
              "startLine": 543,
              "startColumn": 16,
              "endLine": 543,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "String",
              "code": "            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();\n    }\n\n    public String bootstrapControllers() {"
            },
            {
              "step": 5,
              "variableName": "clusterTestKit.bootstrapServers()",
              "startLine": 123,
              "startColumn": 20,
              "endLine": 123,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/test/junit/RaftClusterInvocationContext.java",
              "type": "String",
              "code": "\n        @Override\n        public String bootstrapServers() {\n            return clusterTestKit.bootstrapServers();\n        }\n\n        @Override"
            },
            {
              "step": 6,
              "variableName": "cluster.bootstrapServers()",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "        TestUtils.waitForOnlineBroker(client, broker3);\n\n        assertEquals(0, LeaderElectionCommand.mainNoExit(\n            \"--bootstrap-server\", cluster.bootstrapServers(),\n            \"--election-type\", \"unclean\",\n            \"--all-topic-partitions\"\n        ));"
            },
            {
              "step": 7,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "startLine": 107,
              "startColumn": 25,
              "endLine": 111,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "        cluster.startBroker(broker3);\n        TestUtils.waitForOnlineBroker(client, broker3);\n\n        assertEquals(0, LeaderElectionCommand.mainNoExit(\n            \"--bootstrap-server\", cluster.bootstrapServers(),\n            \"--election-type\", \"unclean\",\n            \"--all-topic-partitions\""
            },
            {
              "step": 8,
              "variableName": "String... args",
              "startLine": 72,
              "startColumn": 27,
              "endLine": 72,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 9,
              "variableName": "args",
              "startLine": 74,
              "startColumn": 43,
              "endLine": 74,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "port",
              "startLine": 535,
              "startColumn": 17,
              "endLine": 535,
              "endColumn": 21,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "Number",
              "code": "            BrokerServer broker = entry.getValue();\n            ListenerName listenerName = nodes.externalListenerName();\n            int port = broker.boundPort(listenerName);\n            if (port <= 0) {\n                throw new RuntimeException(\"Broker \" + brokerId + \" does not yet \" +\n                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");"
            },
            {
              "step": 1,
              "variableName": "port",
              "startLine": 540,
              "startColumn": 60,
              "endLine": 540,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "Number",
              "code": "                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");\n            }\n            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();"
            },
            {
              "step": 2,
              "variableName": "bld.append(prefix).append(\"localhost:\")",
              "startLine": 540,
              "startColumn": 13,
              "endLine": 540,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "StringBuilder",
              "code": "                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");\n            }\n            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();"
            },
            {
              "step": 3,
              "variableName": "bld",
              "startLine": 543,
              "startColumn": 16,
              "endLine": 543,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "StringBuilder",
              "code": "            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();\n    }\n\n    public String bootstrapControllers() {"
            },
            {
              "step": 4,
              "variableName": "bld.toString()",
              "startLine": 543,
              "startColumn": 16,
              "endLine": 543,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "String",
              "code": "            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();\n    }\n\n    public String bootstrapControllers() {"
            },
            {
              "step": 5,
              "variableName": "clusterTestKit.bootstrapServers()",
              "startLine": 123,
              "startColumn": 20,
              "endLine": 123,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/test/junit/RaftClusterInvocationContext.java",
              "type": "String",
              "code": "\n        @Override\n        public String bootstrapServers() {\n            return clusterTestKit.bootstrapServers();\n        }\n\n        @Override"
            },
            {
              "step": 6,
              "variableName": "cluster.bootstrapServers()",
              "startLine": 124,
              "startColumn": 39,
              "endLine": 124,
              "endColumn": 65,
              "uri": "kafka-3.9.1-rc2/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));"
            },
            {
              "step": 7,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "startLine": 123,
              "startColumn": 29,
              "endLine": 127,
              "endColumn": 14,
              "uri": "kafka-3.9.1-rc2/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()"
            },
            {
              "step": 8,
              "variableName": "String... args",
              "startLine": 72,
              "startColumn": 27,
              "endLine": 72,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 9,
              "variableName": "args",
              "startLine": 74,
              "startColumn": 43,
              "endLine": 74,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "port",
              "startLine": 540,
              "startColumn": 60,
              "endLine": 540,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "Number",
              "code": "                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");\n            }\n            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();"
            },
            {
              "step": 1,
              "variableName": "bld.append(prefix).append(\"localhost:\")",
              "startLine": 540,
              "startColumn": 13,
              "endLine": 540,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "StringBuilder",
              "code": "                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");\n            }\n            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();"
            },
            {
              "step": 2,
              "variableName": "bld",
              "startLine": 543,
              "startColumn": 16,
              "endLine": 543,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "StringBuilder",
              "code": "            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();\n    }\n\n    public String bootstrapControllers() {"
            },
            {
              "step": 3,
              "variableName": "bld.toString()",
              "startLine": 543,
              "startColumn": 16,
              "endLine": 543,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "String",
              "code": "            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();\n    }\n\n    public String bootstrapControllers() {"
            },
            {
              "step": 4,
              "variableName": "clusterTestKit.bootstrapServers()",
              "startLine": 123,
              "startColumn": 20,
              "endLine": 123,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/test/junit/RaftClusterInvocationContext.java",
              "type": "String",
              "code": "\n        @Override\n        public String bootstrapServers() {\n            return clusterTestKit.bootstrapServers();\n        }\n\n        @Override"
            },
            {
              "step": 5,
              "variableName": "cluster.bootstrapServers()",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "        TestUtils.waitForOnlineBroker(client, broker3);\n\n        assertEquals(0, LeaderElectionCommand.mainNoExit(\n            \"--bootstrap-server\", cluster.bootstrapServers(),\n            \"--election-type\", \"unclean\",\n            \"--all-topic-partitions\"\n        ));"
            },
            {
              "step": 6,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "startLine": 107,
              "startColumn": 25,
              "endLine": 111,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "        cluster.startBroker(broker3);\n        TestUtils.waitForOnlineBroker(client, broker3);\n\n        assertEquals(0, LeaderElectionCommand.mainNoExit(\n            \"--bootstrap-server\", cluster.bootstrapServers(),\n            \"--election-type\", \"unclean\",\n            \"--all-topic-partitions\""
            },
            {
              "step": 7,
              "variableName": "String... args",
              "startLine": 72,
              "startColumn": 27,
              "endLine": 72,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 8,
              "variableName": "args",
              "startLine": 74,
              "startColumn": 43,
              "endLine": 74,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "port",
              "startLine": 540,
              "startColumn": 60,
              "endLine": 540,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "Number",
              "code": "                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");\n            }\n            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();"
            },
            {
              "step": 1,
              "variableName": "bld.append(prefix).append(\"localhost:\")",
              "startLine": 540,
              "startColumn": 13,
              "endLine": 540,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "StringBuilder",
              "code": "                    \"have a bound port for \" + listenerName + \".  Did you start \" +\n                    \"the cluster yet?\");\n            }\n            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();"
            },
            {
              "step": 2,
              "variableName": "bld",
              "startLine": 543,
              "startColumn": 16,
              "endLine": 543,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "StringBuilder",
              "code": "            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();\n    }\n\n    public String bootstrapControllers() {"
            },
            {
              "step": 3,
              "variableName": "bld.toString()",
              "startLine": 543,
              "startColumn": 16,
              "endLine": 543,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/testkit/KafkaClusterTestKit.java",
              "type": "String",
              "code": "            bld.append(prefix).append(\"localhost:\").append(port);\n            prefix = \",\";\n        }\n        return bld.toString();\n    }\n\n    public String bootstrapControllers() {"
            },
            {
              "step": 4,
              "variableName": "clusterTestKit.bootstrapServers()",
              "startLine": 123,
              "startColumn": 20,
              "endLine": 123,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/core/src/test/java/kafka/test/junit/RaftClusterInvocationContext.java",
              "type": "String",
              "code": "\n        @Override\n        public String bootstrapServers() {\n            return clusterTestKit.bootstrapServers();\n        }\n\n        @Override"
            },
            {
              "step": 5,
              "variableName": "cluster.bootstrapServers()",
              "startLine": 124,
              "startColumn": 39,
              "endLine": 124,
              "endColumn": 65,
              "uri": "kafka-3.9.1-rc2/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));"
            },
            {
              "step": 6,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "startLine": 123,
              "startColumn": 29,
              "endLine": 127,
              "endColumn": 14,
              "uri": "kafka-3.9.1-rc2/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()"
            },
            {
              "step": 7,
              "variableName": "String... args",
              "startLine": 72,
              "startColumn": 27,
              "endLine": 72,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 8,
              "variableName": "args",
              "startLine": 74,
              "startColumn": 43,
              "endLine": 74,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "BasicPlatform.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "startLine": 70,
              "startColumn": 52,
              "endLine": 70,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "                if (nodeSpec.latencyMs() < 0 || nodeSpec.rateLimitKbit() < 0) {\n                    throw new RuntimeException(\"Expected non-negative values for latencyMs and rateLimitKbit, but got \" + nodeSpec);\n                } else {\n                    enableTrafficControl(platform, device, nodeSpec.latencyMs(), nodeSpec.rateLimitKbit());\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "startLine": 108,
              "startColumn": 58,
              "endLine": 108,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Constructs the appropriate \"tc\" commands to apply latency and rate limiting, if they are non zero.\n     */\n    private void enableTrafficControl(Platform platform, String networkDevice, int delayMs, int rateLimitKbps) throws IOException {\n        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "startLine": 112,
              "startColumn": 25,
              "endLine": 112,
              "endColumn": 38,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 3,
              "variableName": "String networkDevice",
              "startLine": 135,
              "startColumn": 30,
              "endLine": 135,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "networkDevice",
              "startLine": 136,
              "startColumn": 56,
              "endLine": 136,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "startLine": 136,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 95,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Object[] [[]] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "startLine": 136,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 95,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Stream [<element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "consumer",
              "startLine": 136,
              "startColumn": 104,
              "endLine": 136,
              "endColumn": 112,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": ":... [post update] : new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 9,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 10,
              "variableName": "delay",
              "startLine": 114,
              "startColumn": 33,
              "endLine": 114,
              "endColumn": 38,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 11,
              "variableName": "delay.toArray(new String[0])",
              "startLine": 114,
              "startColumn": 33,
              "endLine": 114,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 12,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 14,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 15,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 3,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 4,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 5,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 7,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 8,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "startLine": 96,
              "startColumn": 21,
              "endLine": 96,
              "endColumn": 28,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        if (nodeSpec.networkDevice().isEmpty()) {\n            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {\n                if (!networkInterface.isLoopback()) {\n                    devices.add(networkInterface.getName());\n                }\n            }\n        } else {"
            },
            {
              "step": 1,
              "variableName": "devices",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 23,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "startLine": 84,
              "startColumn": 34,
              "endLine": 84,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "startLine": 100,
              "startColumn": 13,
              "endLine": 100,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "                }\n            }\n        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }"
            },
            {
              "step": 1,
              "variableName": "devices",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 23,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "startLine": 84,
              "startColumn": 34,
              "endLine": 84,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 4,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 360,
              "startColumn": 21,
              "endLine": 360,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "            if (log.isDebugEnabled()) {\n                log.debug(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms): {}\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {"
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Cancelled in-flight {} request with correlation id {} due to ",
              "startLine": 358,
              "startColumn": 17,
              "endLine": 362,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        Iterable<InFlightRequest> inFlightRequests = this.inFlightRequests.clearAll(nodeId);\n        for (InFlightRequest request : inFlightRequests) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms): {}\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 4,
              "variableName": "log.debug(\"Cancelled in-flight {} request with correlation id {} due to ",
              "startLine": 358,
              "startColumn": 17,
              "endLine": 362,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "        Iterable<InFlightRequest> inFlightRequests = this.inFlightRequests.clearAll(nodeId);\n        for (InFlightRequest request : inFlightRequests) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms): {}\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 366,
              "startColumn": 21,
              "endLine": 366,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs);\n            }"
            },
            {
              "step": 3,
              "variableName": "log.info(\"Cancelled in-flight {} request with correlati",
              "startLine": 364,
              "startColumn": 17,
              "endLine": 368,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 4,
              "variableName": "log.info(\"Cancelled in-flight {} request with correlati",
              "startLine": 364,
              "startColumn": 17,
              "endLine": 368,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 526,
              "startColumn": 53,
              "endLine": 526,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),\n                        builder.latestAllowedVersion());"
            },
            {
              "step": 3,
              "variableName": "log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +",
              "startLine": 525,
              "startColumn": 21,
              "endLine": 526,
              "endColumn": 124,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "            if (versionInfo == null) {\n                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),"
            },
            {
              "step": 4,
              "variableName": "log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +",
              "startLine": 525,
              "startColumn": 21,
              "endLine": 526,
              "endColumn": 124,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "            if (versionInfo == null) {\n                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 557,
              "startColumn": 17,
              "endLine": 557,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);\n        InFlightRequest inFlightRequest = new InFlightRequest("
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",",
              "startLine": 556,
              "startColumn": 13,
              "endLine": 557,
              "endColumn": 104,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        String destination = clientRequest.destination();\n        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);"
            },
            {
              "step": 4,
              "variableName": "log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",",
              "startLine": 556,
              "startColumn": 13,
              "endLine": 557,
              "endColumn": 104,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "        String destination = clientRequest.destination();\n        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "req.header.apiKey()",
              "startLine": 955,
              "startColumn": 21,
              "endLine": 955,
              "endColumn": 40,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n\n            // If the received response includes a throttle delay, throttle the connection."
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Received {} response from node {} for request with h",
              "startLine": 954,
              "startColumn": 17,
              "endLine": 955,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "                throttleTimeSensor.record(response.throttleTimeMs(), now);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n"
            },
            {
              "step": 4,
              "variableName": "log.debug(\"Received {} response from node {} for request with h",
              "startLine": 954,
              "startColumn": 17,
              "endLine": 955,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "                throttleTimeSensor.record(response.throttleTimeMs(), now);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "KafkaRaftClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(response.data().apiKey())",
              "startLine": 2470,
              "startColumn": 20,
              "endLine": 2470,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "ApiKeys",
              "code": "\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "logger.error(\"Unexpected error {} in {} response: {}\",",
              "startLine": 2469,
              "startColumn": 9,
              "endLine": 2470,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "    }\n\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }"
            },
            {
              "step": 3,
              "variableName": "logger.error(\"Unexpected error {} in {} response: {}\",",
              "startLine": 2469,
              "startColumn": 9,
              "endLine": 2470,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "",
              "code": "    }\n\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 360,
              "startColumn": 21,
              "endLine": 360,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "            if (log.isDebugEnabled()) {\n                log.debug(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms): {}\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 366,
              "startColumn": 21,
              "endLine": 366,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs);\n            }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 526,
              "startColumn": 53,
              "endLine": 526,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),\n                        builder.latestAllowedVersion());"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 557,
              "startColumn": 17,
              "endLine": 557,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);\n        InFlightRequest inFlightRequest = new InFlightRequest("
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "NetworkClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "req.header.apiKey()",
              "startLine": 955,
              "startColumn": 21,
              "endLine": 955,
              "endColumn": 40,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "",
              "code": "\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n\n            // If the received response includes a throttle delay, throttle the connection."
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "Sender.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 496,
              "startColumn": 118,
              "endLine": 496,
              "endColumn": 141,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java",
              "type": "",
              "code": "                    return true;\n                }\n            } else if (coordinatorType != null) {\n                log.trace(\"Coordinator not known for {}, will retry {} after finding coordinator.\", coordinatorType, requestBuilder.apiKey());\n                maybeFindCoordinatorAndRetry(nextRequestHandler);\n                return true;\n            } else {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "AbstractConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword",
              "startLine": 314,
              "startColumn": 55,
              "endLine": 314,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "String",
              "code": "\n        if (securityProtocol != null && securityProtocol.contains(\"SSL\") && sslTruststoreLocation != null && sslTruststorePassword != null) {\n            props.put(SSL_TRUSTSTORE_LOCATION_CONFIG, sslTruststoreLocation);\n            props.put(SSL_TRUSTSTORE_PASSWORD_CONFIG, sslTruststorePassword);\n\n            if (sslKeystoreType != null && sslKeystoreLocation != null &&\n                    sslKeystorePassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "startLine": 314,
              "startColumn": 13,
              "endLine": 314,
              "endColumn": 18,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (securityProtocol != null && securityProtocol.contains(\"SSL\") && sslTruststoreLocation != null && sslTruststorePassword != null) {\n            props.put(SSL_TRUSTSTORE_LOCATION_CONFIG, sslTruststoreLocation);\n            props.put(SSL_TRUSTSTORE_PASSWORD_CONFIG, sslTruststorePassword);\n\n            if (sslKeystoreType != null && sslKeystoreLocation != null &&\n                    sslKeystorePassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 343,
              "startColumn": 42,
              "endLine": 343,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        props.put(KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        this.producer = getKafkaProducer(props);\n        LogLog.warn(\"log4j-appender is deprecated and will be removed in Kafka 4.0.\");\n        LogLog.debug(\"Kafka producer connected to \" + brokerList);\n        LogLog.debug(\"Logging for topic: \" + topic);"
            },
            {
              "step": 3,
              "variableName": "Properties props",
              "startLine": 349,
              "startColumn": 57,
              "endLine": 349,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "        LogLog.debug(\"Logging for topic: \" + topic);\n    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 350,
              "startColumn": 36,
              "endLine": 350,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Properties properties",
              "startLine": 308,
              "startColumn": 26,
              "endLine": 308,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * Note: after creating a {@code KafkaProducer} you must always {@link #close()} it to avoid resource leaks.\n     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "properties",
              "startLine": 309,
              "startColumn": 14,
              "endLine": 309,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "Properties properties",
              "startLine": 323,
              "startColumn": 26,
              "endLine": 323,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "properties",
              "startLine": 324,
              "startColumn": 31,
              "endLine": 324,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Properties properties",
              "startLine": 1479,
              "startColumn": 50,
              "endLine": 1479,
              "endColumn": 71,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties to be converted\n     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "properties",
              "startLine": 1480,
              "startColumn": 38,
              "endLine": 1480,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 12,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 13,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 14,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 15,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 16,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 17,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 18,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "castToStringObjectMap(properties)",
              "startLine": 1480,
              "startColumn": 16,
              "endLine": 1480,
              "endColumn": 49,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "Utils.propsToMap(properties)",
              "startLine": 324,
              "startColumn": 14,
              "endLine": 324,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Map<String, Object> configs",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 296,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }"
            },
            {
              "step": 22,
              "variableName": "configs",
              "startLine": 297,
              "startColumn": 73,
              "endLine": 297,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<String, Object> configs",
              "startLine": 623,
              "startColumn": 57,
              "endLine": 623,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    static Map<String, Object> appendSerializerToConfig(Map<String, Object> configs,\n            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value"
            },
            {
              "step": 24,
              "variableName": "configs",
              "startLine": 627,
              "startColumn": 56,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 25,
              "variableName": "new HashMap<>(configs)",
              "startLine": 627,
              "startColumn": 42,
              "endLine": 627,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 26,
              "variableName": "newConfigs",
              "startLine": 636,
              "startColumn": 16,
              "endLine": 636,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            newConfigs.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass());\n        else if (newConfigs.get(VALUE_SERIALIZER_CLASS_CONFIG) == null)\n            throw new ConfigException(VALUE_SERIALIZER_CLASS_CONFIG, null, \"must be non-null.\");\n        return newConfigs;\n    }\n\n    public ProducerConfig(Properties props) {"
            },
            {
              "step": 27,
              "variableName": "ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 113,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "Map<String, Object> props",
              "startLine": 643,
              "startColumn": 27,
              "endLine": 643,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        super(CONFIG, props);\n    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "props",
              "startLine": 644,
              "startColumn": 23,
              "endLine": 644,
              "endColumn": 28,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n\n    ProducerConfig(Map<?, ?> props, boolean doLog) {"
            },
            {
              "step": 30,
              "variableName": "Map<?, ?> originals",
              "startLine": 132,
              "startColumn": 49,
              "endLine": 132,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "originals",
              "startLine": 133,
              "startColumn": 26,
              "endLine": 133,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 35,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 36,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 37,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 38,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 39,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 40,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 41,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 43,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 45,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 46,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 47,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 48,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 49,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 50,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 51,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 52,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 53,
              "variableName": "this.originals",
              "startLine": 115,
              "startColumn": 40,
              "endLine": 115,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 54,
              "variableName": "Map<?, ?> props",
              "startLine": 514,
              "startColumn": 38,
              "endLine": 514,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 55,
              "variableName": "props",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 56,
              "variableName": "props.get(key.name)",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 58,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 59,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 60,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 61,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 62,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 63,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "startLine": 524,
              "startColumn": 34,
              "endLine": 524,
              "endColumn": 99,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 64,
              "variableName": "values",
              "startLine": 524,
              "startColumn": 13,
              "endLine": 524,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 65,
              "variableName": "values",
              "startLine": 525,
              "startColumn": 16,
              "endLine": 525,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 66,
              "variableName": "definition.parse(this.originals)",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 67,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 9,
              "endLine": 115,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 68,
              "variableName": "this",
              "startLine": 119,
              "startColumn": 9,
              "endLine": 119,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 69,
              "variableName": "logAll()",
              "startLine": 121,
              "startColumn": 13,
              "endLine": 121,
              "endColumn": 21,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 70,
              "variableName": "logAll",
              "startLine": 358,
              "startColumn": 18,
              "endLine": 358,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 71,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 66,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 72,
              "variableName": "this.values",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 73,
              "variableName": "new TreeMap<>(this.values)",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 74,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 74,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 75,
              "variableName": "entry",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 76,
              "variableName": "entry",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 77,
              "variableName": "entry.getValue()",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 38,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 78,
              "variableName": "b",
              "startLine": 368,
              "startColumn": 13,
              "endLine": 368,
              "endColumn": 14,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 79,
              "variableName": "b",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 80,
              "variableName": "b.toString()",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword",
              "startLine": 314,
              "startColumn": 55,
              "endLine": 314,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "String",
              "code": "\n        if (securityProtocol != null && securityProtocol.contains(\"SSL\") && sslTruststoreLocation != null && sslTruststorePassword != null) {\n            props.put(SSL_TRUSTSTORE_LOCATION_CONFIG, sslTruststoreLocation);\n            props.put(SSL_TRUSTSTORE_PASSWORD_CONFIG, sslTruststorePassword);\n\n            if (sslKeystoreType != null && sslKeystoreLocation != null &&\n                    sslKeystorePassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "startLine": 314,
              "startColumn": 13,
              "endLine": 314,
              "endColumn": 18,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (securityProtocol != null && securityProtocol.contains(\"SSL\") && sslTruststoreLocation != null && sslTruststorePassword != null) {\n            props.put(SSL_TRUSTSTORE_LOCATION_CONFIG, sslTruststoreLocation);\n            props.put(SSL_TRUSTSTORE_PASSWORD_CONFIG, sslTruststorePassword);\n\n            if (sslKeystoreType != null && sslKeystoreLocation != null &&\n                    sslKeystorePassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 343,
              "startColumn": 42,
              "endLine": 343,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        props.put(KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        this.producer = getKafkaProducer(props);\n        LogLog.warn(\"log4j-appender is deprecated and will be removed in Kafka 4.0.\");\n        LogLog.debug(\"Kafka producer connected to \" + brokerList);\n        LogLog.debug(\"Logging for topic: \" + topic);"
            },
            {
              "step": 3,
              "variableName": "Properties props",
              "startLine": 349,
              "startColumn": 57,
              "endLine": 349,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "        LogLog.debug(\"Logging for topic: \" + topic);\n    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 350,
              "startColumn": 36,
              "endLine": 350,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Properties properties",
              "startLine": 308,
              "startColumn": 26,
              "endLine": 308,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * Note: after creating a {@code KafkaProducer} you must always {@link #close()} it to avoid resource leaks.\n     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "properties",
              "startLine": 309,
              "startColumn": 14,
              "endLine": 309,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "Properties properties",
              "startLine": 323,
              "startColumn": 26,
              "endLine": 323,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "properties",
              "startLine": 324,
              "startColumn": 31,
              "endLine": 324,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Properties properties",
              "startLine": 1479,
              "startColumn": 50,
              "endLine": 1479,
              "endColumn": 71,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties to be converted\n     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "properties",
              "startLine": 1480,
              "startColumn": 38,
              "endLine": 1480,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 12,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 13,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 14,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 15,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 16,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 17,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 18,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "castToStringObjectMap(properties)",
              "startLine": 1480,
              "startColumn": 16,
              "endLine": 1480,
              "endColumn": 49,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "Utils.propsToMap(properties)",
              "startLine": 324,
              "startColumn": 14,
              "endLine": 324,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Map<String, Object> configs",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 296,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }"
            },
            {
              "step": 22,
              "variableName": "configs",
              "startLine": 297,
              "startColumn": 73,
              "endLine": 297,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<String, Object> configs",
              "startLine": 623,
              "startColumn": 57,
              "endLine": 623,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    static Map<String, Object> appendSerializerToConfig(Map<String, Object> configs,\n            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value"
            },
            {
              "step": 24,
              "variableName": "configs",
              "startLine": 627,
              "startColumn": 56,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 25,
              "variableName": "new HashMap<>(configs)",
              "startLine": 627,
              "startColumn": 42,
              "endLine": 627,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 26,
              "variableName": "newConfigs",
              "startLine": 636,
              "startColumn": 16,
              "endLine": 636,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            newConfigs.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass());\n        else if (newConfigs.get(VALUE_SERIALIZER_CLASS_CONFIG) == null)\n            throw new ConfigException(VALUE_SERIALIZER_CLASS_CONFIG, null, \"must be non-null.\");\n        return newConfigs;\n    }\n\n    public ProducerConfig(Properties props) {"
            },
            {
              "step": 27,
              "variableName": "ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 113,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "Map<String, Object> props",
              "startLine": 643,
              "startColumn": 27,
              "endLine": 643,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        super(CONFIG, props);\n    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "props",
              "startLine": 644,
              "startColumn": 23,
              "endLine": 644,
              "endColumn": 28,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n\n    ProducerConfig(Map<?, ?> props, boolean doLog) {"
            },
            {
              "step": 30,
              "variableName": "Map<?, ?> originals",
              "startLine": 132,
              "startColumn": 49,
              "endLine": 132,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "originals",
              "startLine": 133,
              "startColumn": 26,
              "endLine": 133,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 35,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 36,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 37,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 38,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 39,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 40,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 41,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 43,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 45,
              "variableName": "originals",
              "startLine": 528,
              "startColumn": 75,
              "endLine": 528,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 46,
              "variableName": "Map<?, ?> configMap",
              "startLine": 502,
              "startColumn": 59,
              "endLine": 502,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 47,
              "variableName": "configMap",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 48,
              "variableName": "configMap.entrySet()",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 49,
              "variableName": "entry",
              "startLine": 507,
              "startColumn": 17,
              "endLine": 507,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 50,
              "variableName": "entry",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 51,
              "variableName": "entry.getValue()",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 52,
              "variableName": "(String) entry.getValue()",
              "startLine": 508,
              "startColumn": 64,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 53,
              "variableName": "configMapAsString",
              "startLine": 508,
              "startColumn": 17,
              "endLine": 508,
              "endColumn": 34,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 54,
              "variableName": "configMapAsString",
              "startLine": 511,
              "startColumn": 16,
              "endLine": 511,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 55,
              "variableName": "extractPotentialVariables(originals)",
              "startLine": 528,
              "startColumn": 49,
              "endLine": 528,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 56,
              "variableName": "indirectVariables",
              "startLine": 544,
              "startColumn": 74,
              "endLine": 544,
              "endColumn": 91,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }"
            },
            {
              "step": 57,
              "variableName": "Map<String, String> configs",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param configs the configuration values to be transformed\n     * @return an instance of {@link ConfigTransformerResult}\n     */\n    public ConfigTransformerResult transform(Map<String, String> configs) {\n        Map<String, Map<String, Set<String>>> keysByProvider = new HashMap<>();\n        Map<String, Map<String, Map<String, String>>> lookupsByProvider = new HashMap<>();\n"
            },
            {
              "step": 58,
              "variableName": "configs",
              "startLine": 117,
              "startColumn": 50,
              "endLine": 117,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 59,
              "variableName": "new HashMap<>(configs)",
              "startLine": 117,
              "startColumn": 36,
              "endLine": 117,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 60,
              "variableName": "data",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 61,
              "variableName": "Map<String, String> data",
              "startLine": 37,
              "startColumn": 36,
              "endLine": 37,
              "endColumn": 60,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 62,
              "variableName": "data",
              "startLine": 38,
              "startColumn": 21,
              "endLine": 38,
              "endColumn": 25,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 63,
              "variableName": "this",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 64,
              "variableName": "new ConfigTransformerResult(data, ttls)",
              "startLine": 121,
              "startColumn": 16,
              "endLine": 121,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 65,
              "variableName": "configTransformer.transform(indirectVariables)",
              "startLine": 544,
              "startColumn": 46,
              "endLine": 544,
              "endColumn": 92,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }"
            },
            {
              "step": 66,
              "variableName": "result",
              "startLine": 546,
              "startColumn": 42,
              "endLine": 546,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }\n        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));"
            },
            {
              "step": 67,
              "variableName": "data",
              "startLine": 51,
              "startColumn": 32,
              "endLine": 51,
              "endColumn": 36,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "     *\n     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 70,
              "variableName": "result.data()",
              "startLine": 546,
              "startColumn": 42,
              "endLine": 546,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }\n        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));"
            },
            {
              "step": 71,
              "variableName": "resolvedOriginals",
              "startLine": 546,
              "startColumn": 17,
              "endLine": 546,
              "endColumn": 34,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }\n        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));"
            },
            {
              "step": 72,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 73,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 74,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 75,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 76,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 77,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 78,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 79,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 9,
              "endLine": 115,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 80,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 40,
              "endLine": 115,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 81,
              "variableName": "this.originals",
              "startLine": 115,
              "startColumn": 40,
              "endLine": 115,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 82,
              "variableName": "Map<?, ?> props",
              "startLine": 514,
              "startColumn": 38,
              "endLine": 514,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 83,
              "variableName": "props",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 84,
              "variableName": "props.get(key.name)",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 85,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 86,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 87,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 88,
              "variableName": "value",
              "startLine": 713,
              "startColumn": 32,
              "endLine": 713,
              "endColumn": 37,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:\n                    if (value instanceof Password)\n                        return value;\n                    else if (value instanceof String)\n                        return new Password(trimmed);\n                    else"
            },
            {
              "step": 89,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 90,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 91,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "startLine": 524,
              "startColumn": 34,
              "endLine": 524,
              "endColumn": 99,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 92,
              "variableName": "values",
              "startLine": 524,
              "startColumn": 13,
              "endLine": 524,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 93,
              "variableName": "values",
              "startLine": 525,
              "startColumn": 16,
              "endLine": 525,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 94,
              "variableName": "definition.parse(this.originals)",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 95,
              "variableName": "this.values",
              "startLine": 116,
              "startColumn": 97,
              "endLine": 116,
              "endColumn": 108,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;"
            },
            {
              "step": 96,
              "variableName": "Collections.unmodifiableMap(this.values)",
              "startLine": 116,
              "startColumn": 69,
              "endLine": 116,
              "endColumn": 109,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.value>] : String",
              "code": "\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;"
            },
            {
              "step": 97,
              "variableName": "final Map<String, Object> parsedValues",
              "startLine": 281,
              "startColumn": 59,
              "endLine": 281,
              "endColumn": 97,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    @Override\n    protected Map<String, Object> postProcessParsedConfig(final Map<String, Object> parsedValues) {\n        CommonClientConfigs.postValidateSaslMechanismConfig(this);\n        CommonClientConfigs.warnDisablingExponentialBackoff(this);\n        return CommonClientConfigs.postProcessReconnectBackoffConfigs(this, parsedValues);"
            },
            {
              "step": 98,
              "variableName": "parsedValues",
              "startLine": 284,
              "startColumn": 77,
              "endLine": 284,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "Map [<map.value>] : String",
              "code": "    protected Map<String, Object> postProcessParsedConfig(final Map<String, Object> parsedValues) {\n        CommonClientConfigs.postValidateSaslMechanismConfig(this);\n        CommonClientConfigs.warnDisablingExponentialBackoff(this);\n        return CommonClientConfigs.postProcessReconnectBackoffConfigs(this, parsedValues);\n    }\n\n    public AdminClientConfig(Map<?, ?> props) {"
            },
            {
              "step": 99,
              "variableName": "Map<String, Object> parsedValues",
              "startLine": 246,
              "startColumn": 74,
              "endLine": 246,
              "endColumn": 106,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "Map [<map.value>] : String",
              "code": "     * @return                          The new values which have been set as described in postProcessParsedConfig.\n     */\n    public static Map<String, Object> postProcessReconnectBackoffConfigs(AbstractConfig config,\n                                                                         Map<String, Object> parsedValues) {\n        HashMap<String, Object> rval = new HashMap<>();\n        Map<String, Object> originalConfig = config.originals();\n        if ((!originalConfig.containsKey(RECONNECT_BACKOFF_MAX_MS_CONFIG)) &&"
            },
            {
              "step": 100,
              "variableName": "parsedValues",
              "startLine": 253,
              "startColumn": 55,
              "endLine": 253,
              "endColumn": 67,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "Map [<map.value>] : String",
              "code": "            originalConfig.containsKey(RECONNECT_BACKOFF_MS_CONFIG)) {\n            log.warn(\"Disabling exponential reconnect backoff because {} is set, but {} is not.\",\n                    RECONNECT_BACKOFF_MS_CONFIG, RECONNECT_BACKOFF_MAX_MS_CONFIG);\n            rval.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG));\n        }\n        return rval;\n    }"
            },
            {
              "step": 101,
              "variableName": "parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG)",
              "startLine": 253,
              "startColumn": 55,
              "endLine": 253,
              "endColumn": 100,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "String",
              "code": "            originalConfig.containsKey(RECONNECT_BACKOFF_MS_CONFIG)) {\n            log.warn(\"Disabling exponential reconnect backoff because {} is set, but {} is not.\",\n                    RECONNECT_BACKOFF_MS_CONFIG, RECONNECT_BACKOFF_MAX_MS_CONFIG);\n            rval.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG));\n        }\n        return rval;\n    }"
            },
            {
              "step": 102,
              "variableName": "rval",
              "startLine": 253,
              "startColumn": 13,
              "endLine": 253,
              "endColumn": 17,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            originalConfig.containsKey(RECONNECT_BACKOFF_MS_CONFIG)) {\n            log.warn(\"Disabling exponential reconnect backoff because {} is set, but {} is not.\",\n                    RECONNECT_BACKOFF_MS_CONFIG, RECONNECT_BACKOFF_MAX_MS_CONFIG);\n            rval.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG));\n        }\n        return rval;\n    }"
            },
            {
              "step": 103,
              "variableName": "rval",
              "startLine": 255,
              "startColumn": 16,
              "endLine": 255,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                    RECONNECT_BACKOFF_MS_CONFIG, RECONNECT_BACKOFF_MAX_MS_CONFIG);\n            rval.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG));\n        }\n        return rval;\n    }\n\n    /**"
            },
            {
              "step": 104,
              "variableName": "CommonClientConfigs.postProcessReconnectBackoffConfigs(this, parsedValues)",
              "startLine": 284,
              "startColumn": 16,
              "endLine": 284,
              "endColumn": 90,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    protected Map<String, Object> postProcessParsedConfig(final Map<String, Object> parsedValues) {\n        CommonClientConfigs.postValidateSaslMechanismConfig(this);\n        CommonClientConfigs.warnDisablingExponentialBackoff(this);\n        return CommonClientConfigs.postProcessReconnectBackoffConfigs(this, parsedValues);\n    }\n\n    public AdminClientConfig(Map<?, ?> props) {"
            },
            {
              "step": 105,
              "variableName": "postProcessParsedConfig(Collections.unmodifiableMap(this.values))",
              "startLine": 116,
              "startColumn": 45,
              "endLine": 116,
              "endColumn": 110,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;"
            },
            {
              "step": 106,
              "variableName": "configUpdates",
              "startLine": 117,
              "startColumn": 28,
              "endLine": 117,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)"
            },
            {
              "step": 107,
              "variableName": "this.values",
              "startLine": 117,
              "startColumn": 9,
              "endLine": 117,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)"
            },
            {
              "step": 108,
              "variableName": "this",
              "startLine": 117,
              "startColumn": 9,
              "endLine": 117,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)"
            },
            {
              "step": 109,
              "variableName": "this",
              "startLine": 119,
              "startColumn": 9,
              "endLine": 119,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 110,
              "variableName": "logAll()",
              "startLine": 121,
              "startColumn": 13,
              "endLine": 121,
              "endColumn": 21,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 111,
              "variableName": "logAll",
              "startLine": 358,
              "startColumn": 18,
              "endLine": 358,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 112,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 66,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 113,
              "variableName": "this.values",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 114,
              "variableName": "new TreeMap<>(this.values)",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 74,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 115,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 116,
              "variableName": "entry",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 117,
              "variableName": "entry",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 118,
              "variableName": "entry.getValue()",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 38,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 119,
              "variableName": "b",
              "startLine": 368,
              "startColumn": 13,
              "endLine": 368,
              "endColumn": 14,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 120,
              "variableName": "b",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 121,
              "variableName": "b.toString()",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "sslKeystorePassword",
              "startLine": 320,
              "startColumn": 57,
              "endLine": 320,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "String",
              "code": "                    sslKeystorePassword != null) {\n                props.put(SSL_KEYSTORE_TYPE_CONFIG, sslKeystoreType);\n                props.put(SSL_KEYSTORE_LOCATION_CONFIG, sslKeystoreLocation);\n                props.put(SSL_KEYSTORE_PASSWORD_CONFIG, sslKeystorePassword);\n            }\n        }\n"
            },
            {
              "step": 1,
              "variableName": "props",
              "startLine": 320,
              "startColumn": 17,
              "endLine": 320,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "                    sslKeystorePassword != null) {\n                props.put(SSL_KEYSTORE_TYPE_CONFIG, sslKeystoreType);\n                props.put(SSL_KEYSTORE_LOCATION_CONFIG, sslKeystoreLocation);\n                props.put(SSL_KEYSTORE_PASSWORD_CONFIG, sslKeystorePassword);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 343,
              "startColumn": 42,
              "endLine": 343,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        props.put(KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        this.producer = getKafkaProducer(props);\n        LogLog.warn(\"log4j-appender is deprecated and will be removed in Kafka 4.0.\");\n        LogLog.debug(\"Kafka producer connected to \" + brokerList);\n        LogLog.debug(\"Logging for topic: \" + topic);"
            },
            {
              "step": 3,
              "variableName": "Properties props",
              "startLine": 349,
              "startColumn": 57,
              "endLine": 349,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "        LogLog.debug(\"Logging for topic: \" + topic);\n    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 350,
              "startColumn": 36,
              "endLine": 350,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Properties properties",
              "startLine": 308,
              "startColumn": 26,
              "endLine": 308,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * Note: after creating a {@code KafkaProducer} you must always {@link #close()} it to avoid resource leaks.\n     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "properties",
              "startLine": 309,
              "startColumn": 14,
              "endLine": 309,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "Properties properties",
              "startLine": 323,
              "startColumn": 26,
              "endLine": 323,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "properties",
              "startLine": 324,
              "startColumn": 31,
              "endLine": 324,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Properties properties",
              "startLine": 1479,
              "startColumn": 50,
              "endLine": 1479,
              "endColumn": 71,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties to be converted\n     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "properties",
              "startLine": 1480,
              "startColumn": 38,
              "endLine": 1480,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 12,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 13,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 14,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 15,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 16,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 17,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 18,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "castToStringObjectMap(properties)",
              "startLine": 1480,
              "startColumn": 16,
              "endLine": 1480,
              "endColumn": 49,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "Utils.propsToMap(properties)",
              "startLine": 324,
              "startColumn": 14,
              "endLine": 324,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Map<String, Object> configs",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 296,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }"
            },
            {
              "step": 22,
              "variableName": "configs",
              "startLine": 297,
              "startColumn": 73,
              "endLine": 297,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<String, Object> configs",
              "startLine": 623,
              "startColumn": 57,
              "endLine": 623,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    static Map<String, Object> appendSerializerToConfig(Map<String, Object> configs,\n            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value"
            },
            {
              "step": 24,
              "variableName": "configs",
              "startLine": 627,
              "startColumn": 56,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 25,
              "variableName": "new HashMap<>(configs)",
              "startLine": 627,
              "startColumn": 42,
              "endLine": 627,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 26,
              "variableName": "newConfigs",
              "startLine": 636,
              "startColumn": 16,
              "endLine": 636,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            newConfigs.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass());\n        else if (newConfigs.get(VALUE_SERIALIZER_CLASS_CONFIG) == null)\n            throw new ConfigException(VALUE_SERIALIZER_CLASS_CONFIG, null, \"must be non-null.\");\n        return newConfigs;\n    }\n\n    public ProducerConfig(Properties props) {"
            },
            {
              "step": 27,
              "variableName": "ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 113,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "Map<String, Object> props",
              "startLine": 643,
              "startColumn": 27,
              "endLine": 643,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        super(CONFIG, props);\n    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "props",
              "startLine": 644,
              "startColumn": 23,
              "endLine": 644,
              "endColumn": 28,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n\n    ProducerConfig(Map<?, ?> props, boolean doLog) {"
            },
            {
              "step": 30,
              "variableName": "Map<?, ?> originals",
              "startLine": 132,
              "startColumn": 49,
              "endLine": 132,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "originals",
              "startLine": 133,
              "startColumn": 26,
              "endLine": 133,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 35,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 36,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 37,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 38,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 39,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 40,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 41,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 43,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 45,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 46,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 47,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 48,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 49,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 50,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 51,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 52,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 53,
              "variableName": "this.originals",
              "startLine": 115,
              "startColumn": 40,
              "endLine": 115,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 54,
              "variableName": "Map<?, ?> props",
              "startLine": 514,
              "startColumn": 38,
              "endLine": 514,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 55,
              "variableName": "props",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 56,
              "variableName": "props.get(key.name)",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 58,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 59,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 60,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 61,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 62,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 63,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "startLine": 524,
              "startColumn": 34,
              "endLine": 524,
              "endColumn": 99,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 64,
              "variableName": "values",
              "startLine": 524,
              "startColumn": 13,
              "endLine": 524,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 65,
              "variableName": "values",
              "startLine": 525,
              "startColumn": 16,
              "endLine": 525,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 66,
              "variableName": "definition.parse(this.originals)",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 67,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 9,
              "endLine": 115,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 68,
              "variableName": "this",
              "startLine": 119,
              "startColumn": 9,
              "endLine": 119,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 69,
              "variableName": "logAll()",
              "startLine": 121,
              "startColumn": 13,
              "endLine": 121,
              "endColumn": 21,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 70,
              "variableName": "logAll",
              "startLine": 358,
              "startColumn": 18,
              "endLine": 358,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 71,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 66,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 72,
              "variableName": "this.values",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 73,
              "variableName": "new TreeMap<>(this.values)",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 74,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 74,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 75,
              "variableName": "entry",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 76,
              "variableName": "entry",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 77,
              "variableName": "entry.getValue()",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 38,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 78,
              "variableName": "b",
              "startLine": 368,
              "startColumn": 13,
              "endLine": 368,
              "endColumn": 14,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 79,
              "variableName": "b",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 80,
              "variableName": "b.toString()",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "sslKeystorePassword",
              "startLine": 320,
              "startColumn": 57,
              "endLine": 320,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "String",
              "code": "                    sslKeystorePassword != null) {\n                props.put(SSL_KEYSTORE_TYPE_CONFIG, sslKeystoreType);\n                props.put(SSL_KEYSTORE_LOCATION_CONFIG, sslKeystoreLocation);\n                props.put(SSL_KEYSTORE_PASSWORD_CONFIG, sslKeystorePassword);\n            }\n        }\n"
            },
            {
              "step": 1,
              "variableName": "props",
              "startLine": 320,
              "startColumn": 17,
              "endLine": 320,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "                    sslKeystorePassword != null) {\n                props.put(SSL_KEYSTORE_TYPE_CONFIG, sslKeystoreType);\n                props.put(SSL_KEYSTORE_LOCATION_CONFIG, sslKeystoreLocation);\n                props.put(SSL_KEYSTORE_PASSWORD_CONFIG, sslKeystorePassword);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 343,
              "startColumn": 42,
              "endLine": 343,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        props.put(KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        this.producer = getKafkaProducer(props);\n        LogLog.warn(\"log4j-appender is deprecated and will be removed in Kafka 4.0.\");\n        LogLog.debug(\"Kafka producer connected to \" + brokerList);\n        LogLog.debug(\"Logging for topic: \" + topic);"
            },
            {
              "step": 3,
              "variableName": "Properties props",
              "startLine": 349,
              "startColumn": 57,
              "endLine": 349,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "        LogLog.debug(\"Logging for topic: \" + topic);\n    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 350,
              "startColumn": 36,
              "endLine": 350,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Properties properties",
              "startLine": 308,
              "startColumn": 26,
              "endLine": 308,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * Note: after creating a {@code KafkaProducer} you must always {@link #close()} it to avoid resource leaks.\n     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "properties",
              "startLine": 309,
              "startColumn": 14,
              "endLine": 309,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "Properties properties",
              "startLine": 323,
              "startColumn": 26,
              "endLine": 323,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "properties",
              "startLine": 324,
              "startColumn": 31,
              "endLine": 324,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Properties properties",
              "startLine": 1479,
              "startColumn": 50,
              "endLine": 1479,
              "endColumn": 71,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties to be converted\n     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "properties",
              "startLine": 1480,
              "startColumn": 38,
              "endLine": 1480,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 12,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 13,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 14,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 15,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 16,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 17,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 18,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "castToStringObjectMap(properties)",
              "startLine": 1480,
              "startColumn": 16,
              "endLine": 1480,
              "endColumn": 49,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "Utils.propsToMap(properties)",
              "startLine": 324,
              "startColumn": 14,
              "endLine": 324,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Map<String, Object> configs",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 296,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }"
            },
            {
              "step": 22,
              "variableName": "configs",
              "startLine": 297,
              "startColumn": 73,
              "endLine": 297,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<String, Object> configs",
              "startLine": 623,
              "startColumn": 57,
              "endLine": 623,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    static Map<String, Object> appendSerializerToConfig(Map<String, Object> configs,\n            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value"
            },
            {
              "step": 24,
              "variableName": "configs",
              "startLine": 627,
              "startColumn": 56,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 25,
              "variableName": "new HashMap<>(configs)",
              "startLine": 627,
              "startColumn": 42,
              "endLine": 627,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 26,
              "variableName": "newConfigs",
              "startLine": 636,
              "startColumn": 16,
              "endLine": 636,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            newConfigs.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass());\n        else if (newConfigs.get(VALUE_SERIALIZER_CLASS_CONFIG) == null)\n            throw new ConfigException(VALUE_SERIALIZER_CLASS_CONFIG, null, \"must be non-null.\");\n        return newConfigs;\n    }\n\n    public ProducerConfig(Properties props) {"
            },
            {
              "step": 27,
              "variableName": "ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 113,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "Map<String, Object> props",
              "startLine": 643,
              "startColumn": 27,
              "endLine": 643,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        super(CONFIG, props);\n    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "props",
              "startLine": 644,
              "startColumn": 23,
              "endLine": 644,
              "endColumn": 28,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n\n    ProducerConfig(Map<?, ?> props, boolean doLog) {"
            },
            {
              "step": 30,
              "variableName": "Map<?, ?> originals",
              "startLine": 132,
              "startColumn": 49,
              "endLine": 132,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "originals",
              "startLine": 133,
              "startColumn": 26,
              "endLine": 133,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 35,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 36,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 37,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 38,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 39,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 40,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 41,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 43,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 45,
              "variableName": "originals",
              "startLine": 528,
              "startColumn": 75,
              "endLine": 528,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 46,
              "variableName": "Map<?, ?> configMap",
              "startLine": 502,
              "startColumn": 59,
              "endLine": 502,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 47,
              "variableName": "configMap",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 48,
              "variableName": "configMap.entrySet()",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 49,
              "variableName": "entry",
              "startLine": 507,
              "startColumn": 17,
              "endLine": 507,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 50,
              "variableName": "entry",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 51,
              "variableName": "entry.getValue()",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 52,
              "variableName": "(String) entry.getValue()",
              "startLine": 508,
              "startColumn": 64,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 53,
              "variableName": "configMapAsString",
              "startLine": 508,
              "startColumn": 17,
              "endLine": 508,
              "endColumn": 34,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 54,
              "variableName": "configMapAsString",
              "startLine": 511,
              "startColumn": 16,
              "endLine": 511,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 55,
              "variableName": "extractPotentialVariables(originals)",
              "startLine": 528,
              "startColumn": 49,
              "endLine": 528,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 56,
              "variableName": "indirectVariables",
              "startLine": 544,
              "startColumn": 74,
              "endLine": 544,
              "endColumn": 91,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }"
            },
            {
              "step": 57,
              "variableName": "Map<String, String> configs",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param configs the configuration values to be transformed\n     * @return an instance of {@link ConfigTransformerResult}\n     */\n    public ConfigTransformerResult transform(Map<String, String> configs) {\n        Map<String, Map<String, Set<String>>> keysByProvider = new HashMap<>();\n        Map<String, Map<String, Map<String, String>>> lookupsByProvider = new HashMap<>();\n"
            },
            {
              "step": 58,
              "variableName": "configs",
              "startLine": 117,
              "startColumn": 50,
              "endLine": 117,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 59,
              "variableName": "new HashMap<>(configs)",
              "startLine": 117,
              "startColumn": 36,
              "endLine": 117,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 60,
              "variableName": "data",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 61,
              "variableName": "Map<String, String> data",
              "startLine": 37,
              "startColumn": 36,
              "endLine": 37,
              "endColumn": 60,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 62,
              "variableName": "data",
              "startLine": 38,
              "startColumn": 21,
              "endLine": 38,
              "endColumn": 25,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 63,
              "variableName": "this",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 64,
              "variableName": "new ConfigTransformerResult(data, ttls)",
              "startLine": 121,
              "startColumn": 16,
              "endLine": 121,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 65,
              "variableName": "configTransformer.transform(indirectVariables)",
              "startLine": 544,
              "startColumn": 46,
              "endLine": 544,
              "endColumn": 92,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }"
            },
            {
              "step": 66,
              "variableName": "result",
              "startLine": 546,
              "startColumn": 42,
              "endLine": 546,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }\n        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));"
            },
            {
              "step": 67,
              "variableName": "data",
              "startLine": 51,
              "startColumn": 32,
              "endLine": 51,
              "endColumn": 36,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "     *\n     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.value>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 70,
              "variableName": "result.data()",
              "startLine": 546,
              "startColumn": 42,
              "endLine": 546,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }\n        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));"
            },
            {
              "step": 71,
              "variableName": "resolvedOriginals",
              "startLine": 546,
              "startColumn": 17,
              "endLine": 546,
              "endColumn": 34,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            ConfigTransformer configTransformer = new ConfigTransformer(providers);\n            ConfigTransformerResult result = configTransformer.transform(indirectVariables);\n            if (!result.data().isEmpty()) {\n                resolvedOriginals.putAll(result.data());\n            }\n        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));"
            },
            {
              "step": 72,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 73,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 74,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 75,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 76,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 77,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 78,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 79,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 9,
              "endLine": 115,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 80,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 40,
              "endLine": 115,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 81,
              "variableName": "this.originals",
              "startLine": 115,
              "startColumn": 40,
              "endLine": 115,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 82,
              "variableName": "Map<?, ?> props",
              "startLine": 514,
              "startColumn": 38,
              "endLine": 514,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 83,
              "variableName": "props",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 84,
              "variableName": "props.get(key.name)",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 85,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 86,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 87,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 88,
              "variableName": "value",
              "startLine": 713,
              "startColumn": 32,
              "endLine": 713,
              "endColumn": 37,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:\n                    if (value instanceof Password)\n                        return value;\n                    else if (value instanceof String)\n                        return new Password(trimmed);\n                    else"
            },
            {
              "step": 89,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 90,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 91,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "startLine": 524,
              "startColumn": 34,
              "endLine": 524,
              "endColumn": 99,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 92,
              "variableName": "values",
              "startLine": 524,
              "startColumn": 13,
              "endLine": 524,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 93,
              "variableName": "values",
              "startLine": 525,
              "startColumn": 16,
              "endLine": 525,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 94,
              "variableName": "definition.parse(this.originals)",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 95,
              "variableName": "this.values",
              "startLine": 116,
              "startColumn": 97,
              "endLine": 116,
              "endColumn": 108,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;"
            },
            {
              "step": 96,
              "variableName": "Collections.unmodifiableMap(this.values)",
              "startLine": 116,
              "startColumn": 69,
              "endLine": 116,
              "endColumn": 109,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.value>] : String",
              "code": "\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;"
            },
            {
              "step": 97,
              "variableName": "final Map<String, Object> parsedValues",
              "startLine": 281,
              "startColumn": 59,
              "endLine": 281,
              "endColumn": 97,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    @Override\n    protected Map<String, Object> postProcessParsedConfig(final Map<String, Object> parsedValues) {\n        CommonClientConfigs.postValidateSaslMechanismConfig(this);\n        CommonClientConfigs.warnDisablingExponentialBackoff(this);\n        return CommonClientConfigs.postProcessReconnectBackoffConfigs(this, parsedValues);"
            },
            {
              "step": 98,
              "variableName": "parsedValues",
              "startLine": 284,
              "startColumn": 77,
              "endLine": 284,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "Map [<map.value>] : String",
              "code": "    protected Map<String, Object> postProcessParsedConfig(final Map<String, Object> parsedValues) {\n        CommonClientConfigs.postValidateSaslMechanismConfig(this);\n        CommonClientConfigs.warnDisablingExponentialBackoff(this);\n        return CommonClientConfigs.postProcessReconnectBackoffConfigs(this, parsedValues);\n    }\n\n    public AdminClientConfig(Map<?, ?> props) {"
            },
            {
              "step": 99,
              "variableName": "Map<String, Object> parsedValues",
              "startLine": 246,
              "startColumn": 74,
              "endLine": 246,
              "endColumn": 106,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "Map [<map.value>] : String",
              "code": "     * @return                          The new values which have been set as described in postProcessParsedConfig.\n     */\n    public static Map<String, Object> postProcessReconnectBackoffConfigs(AbstractConfig config,\n                                                                         Map<String, Object> parsedValues) {\n        HashMap<String, Object> rval = new HashMap<>();\n        Map<String, Object> originalConfig = config.originals();\n        if ((!originalConfig.containsKey(RECONNECT_BACKOFF_MAX_MS_CONFIG)) &&"
            },
            {
              "step": 100,
              "variableName": "parsedValues",
              "startLine": 253,
              "startColumn": 55,
              "endLine": 253,
              "endColumn": 67,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "Map [<map.value>] : String",
              "code": "            originalConfig.containsKey(RECONNECT_BACKOFF_MS_CONFIG)) {\n            log.warn(\"Disabling exponential reconnect backoff because {} is set, but {} is not.\",\n                    RECONNECT_BACKOFF_MS_CONFIG, RECONNECT_BACKOFF_MAX_MS_CONFIG);\n            rval.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG));\n        }\n        return rval;\n    }"
            },
            {
              "step": 101,
              "variableName": "parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG)",
              "startLine": 253,
              "startColumn": 55,
              "endLine": 253,
              "endColumn": 100,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "String",
              "code": "            originalConfig.containsKey(RECONNECT_BACKOFF_MS_CONFIG)) {\n            log.warn(\"Disabling exponential reconnect backoff because {} is set, but {} is not.\",\n                    RECONNECT_BACKOFF_MS_CONFIG, RECONNECT_BACKOFF_MAX_MS_CONFIG);\n            rval.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG));\n        }\n        return rval;\n    }"
            },
            {
              "step": 102,
              "variableName": "rval",
              "startLine": 253,
              "startColumn": 13,
              "endLine": 253,
              "endColumn": 17,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            originalConfig.containsKey(RECONNECT_BACKOFF_MS_CONFIG)) {\n            log.warn(\"Disabling exponential reconnect backoff because {} is set, but {} is not.\",\n                    RECONNECT_BACKOFF_MS_CONFIG, RECONNECT_BACKOFF_MAX_MS_CONFIG);\n            rval.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG));\n        }\n        return rval;\n    }"
            },
            {
              "step": 103,
              "variableName": "rval",
              "startLine": 255,
              "startColumn": 16,
              "endLine": 255,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                    RECONNECT_BACKOFF_MS_CONFIG, RECONNECT_BACKOFF_MAX_MS_CONFIG);\n            rval.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, parsedValues.get(RECONNECT_BACKOFF_MS_CONFIG));\n        }\n        return rval;\n    }\n\n    /**"
            },
            {
              "step": 104,
              "variableName": "CommonClientConfigs.postProcessReconnectBackoffConfigs(this, parsedValues)",
              "startLine": 284,
              "startColumn": 16,
              "endLine": 284,
              "endColumn": 90,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    protected Map<String, Object> postProcessParsedConfig(final Map<String, Object> parsedValues) {\n        CommonClientConfigs.postValidateSaslMechanismConfig(this);\n        CommonClientConfigs.warnDisablingExponentialBackoff(this);\n        return CommonClientConfigs.postProcessReconnectBackoffConfigs(this, parsedValues);\n    }\n\n    public AdminClientConfig(Map<?, ?> props) {"
            },
            {
              "step": 105,
              "variableName": "postProcessParsedConfig(Collections.unmodifiableMap(this.values))",
              "startLine": 116,
              "startColumn": 45,
              "endLine": 116,
              "endColumn": 110,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;"
            },
            {
              "step": 106,
              "variableName": "configUpdates",
              "startLine": 117,
              "startColumn": 28,
              "endLine": 117,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)"
            },
            {
              "step": 107,
              "variableName": "this.values",
              "startLine": 117,
              "startColumn": 9,
              "endLine": 117,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)"
            },
            {
              "step": 108,
              "variableName": "this",
              "startLine": 117,
              "startColumn": 9,
              "endLine": 117,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)"
            },
            {
              "step": 109,
              "variableName": "this",
              "startLine": 119,
              "startColumn": 9,
              "endLine": 119,
              "endColumn": 13,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 110,
              "variableName": "logAll()",
              "startLine": 121,
              "startColumn": 13,
              "endLine": 121,
              "endColumn": 21,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 111,
              "variableName": "logAll",
              "startLine": 358,
              "startColumn": 18,
              "endLine": 358,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 112,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 66,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 113,
              "variableName": "this.values",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 114,
              "variableName": "new TreeMap<>(this.values)",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 74,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 115,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 116,
              "variableName": "entry",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 117,
              "variableName": "entry",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 118,
              "variableName": "entry.getValue()",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 38,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 119,
              "variableName": "b",
              "startLine": 368,
              "startColumn": 13,
              "endLine": 368,
              "endColumn": 14,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 120,
              "variableName": "b",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 121,
              "variableName": "b.toString()",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 17,
      "fileName": "AbstractConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword",
              "startLine": 314,
              "startColumn": 55,
              "endLine": 314,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "String",
              "code": "\n        if (securityProtocol != null && securityProtocol.contains(\"SSL\") && sslTruststoreLocation != null && sslTruststorePassword != null) {\n            props.put(SSL_TRUSTSTORE_LOCATION_CONFIG, sslTruststoreLocation);\n            props.put(SSL_TRUSTSTORE_PASSWORD_CONFIG, sslTruststorePassword);\n\n            if (sslKeystoreType != null && sslKeystoreLocation != null &&\n                    sslKeystorePassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "startLine": 314,
              "startColumn": 13,
              "endLine": 314,
              "endColumn": 18,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (securityProtocol != null && securityProtocol.contains(\"SSL\") && sslTruststoreLocation != null && sslTruststorePassword != null) {\n            props.put(SSL_TRUSTSTORE_LOCATION_CONFIG, sslTruststoreLocation);\n            props.put(SSL_TRUSTSTORE_PASSWORD_CONFIG, sslTruststorePassword);\n\n            if (sslKeystoreType != null && sslKeystoreLocation != null &&\n                    sslKeystorePassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 343,
              "startColumn": 42,
              "endLine": 343,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        props.put(KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        this.producer = getKafkaProducer(props);\n        LogLog.warn(\"log4j-appender is deprecated and will be removed in Kafka 4.0.\");\n        LogLog.debug(\"Kafka producer connected to \" + brokerList);\n        LogLog.debug(\"Logging for topic: \" + topic);"
            },
            {
              "step": 3,
              "variableName": "Properties props",
              "startLine": 349,
              "startColumn": 57,
              "endLine": 349,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "        LogLog.debug(\"Logging for topic: \" + topic);\n    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 350,
              "startColumn": 36,
              "endLine": 350,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Properties properties",
              "startLine": 308,
              "startColumn": 26,
              "endLine": 308,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * Note: after creating a {@code KafkaProducer} you must always {@link #close()} it to avoid resource leaks.\n     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "properties",
              "startLine": 309,
              "startColumn": 14,
              "endLine": 309,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "Properties properties",
              "startLine": 323,
              "startColumn": 26,
              "endLine": 323,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "properties",
              "startLine": 324,
              "startColumn": 31,
              "endLine": 324,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Properties properties",
              "startLine": 1479,
              "startColumn": 50,
              "endLine": 1479,
              "endColumn": 71,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties to be converted\n     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "properties",
              "startLine": 1480,
              "startColumn": 38,
              "endLine": 1480,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 12,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 13,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 14,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 15,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 16,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 17,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 18,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "castToStringObjectMap(properties)",
              "startLine": 1480,
              "startColumn": 16,
              "endLine": 1480,
              "endColumn": 49,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "Utils.propsToMap(properties)",
              "startLine": 324,
              "startColumn": 14,
              "endLine": 324,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Map<String, Object> configs",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 296,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }"
            },
            {
              "step": 22,
              "variableName": "configs",
              "startLine": 297,
              "startColumn": 73,
              "endLine": 297,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<String, Object> configs",
              "startLine": 623,
              "startColumn": 57,
              "endLine": 623,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    static Map<String, Object> appendSerializerToConfig(Map<String, Object> configs,\n            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value"
            },
            {
              "step": 24,
              "variableName": "configs",
              "startLine": 627,
              "startColumn": 56,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 25,
              "variableName": "new HashMap<>(configs)",
              "startLine": 627,
              "startColumn": 42,
              "endLine": 627,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 26,
              "variableName": "newConfigs",
              "startLine": 636,
              "startColumn": 16,
              "endLine": 636,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            newConfigs.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass());\n        else if (newConfigs.get(VALUE_SERIALIZER_CLASS_CONFIG) == null)\n            throw new ConfigException(VALUE_SERIALIZER_CLASS_CONFIG, null, \"must be non-null.\");\n        return newConfigs;\n    }\n\n    public ProducerConfig(Properties props) {"
            },
            {
              "step": 27,
              "variableName": "ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 113,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "Map<String, Object> props",
              "startLine": 643,
              "startColumn": 27,
              "endLine": 643,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        super(CONFIG, props);\n    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "props",
              "startLine": 644,
              "startColumn": 23,
              "endLine": 644,
              "endColumn": 28,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n\n    ProducerConfig(Map<?, ?> props, boolean doLog) {"
            },
            {
              "step": 30,
              "variableName": "Map<?, ?> originals",
              "startLine": 132,
              "startColumn": 49,
              "endLine": 132,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "originals",
              "startLine": 133,
              "startColumn": 26,
              "endLine": 133,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 35,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 36,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 37,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 38,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 39,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 40,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 41,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 43,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 45,
              "variableName": "originals",
              "startLine": 528,
              "startColumn": 75,
              "endLine": 528,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 46,
              "variableName": "Map<?, ?> configMap",
              "startLine": 502,
              "startColumn": 59,
              "endLine": 502,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 47,
              "variableName": "configMap",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 48,
              "variableName": "configMap.entrySet()",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 49,
              "variableName": "entry",
              "startLine": 507,
              "startColumn": 17,
              "endLine": 507,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 50,
              "variableName": "entry",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 51,
              "variableName": "entry.getValue()",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 52,
              "variableName": "(String) entry.getValue()",
              "startLine": 508,
              "startColumn": 64,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 53,
              "variableName": "configMapAsString",
              "startLine": 508,
              "startColumn": 17,
              "endLine": 508,
              "endColumn": 34,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 54,
              "variableName": "configMapAsString",
              "startLine": 511,
              "startColumn": 16,
              "endLine": 511,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 55,
              "variableName": "extractPotentialVariables(originals)",
              "startLine": 528,
              "startColumn": 49,
              "endLine": 528,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 56,
              "variableName": "providerConfigString",
              "startLine": 540,
              "startColumn": 76,
              "endLine": 540,
              "endColumn": 96,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 57,
              "variableName": "Map<String, String> indirectConfigs",
              "startLine": 589,
              "startColumn": 13,
              "endLine": 589,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 58,
              "variableName": "indirectConfigs",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 59,
              "variableName": "indirectConfigs.get(providerClass)",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 60,
              "variableName": "providerClassName",
              "startLine": 606,
              "startColumn": 47,
              "endLine": 606,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 61,
              "variableName": "providerMap",
              "startLine": 606,
              "startColumn": 21,
              "endLine": 606,
              "endColumn": 32,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 62,
              "variableName": "providerMap",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 63,
              "variableName": "providerMap.entrySet()",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 64,
              "variableName": "entry",
              "startLine": 617,
              "startColumn": 65,
              "endLine": 617,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 65,
              "variableName": "entry",
              "startLine": 623,
              "startColumn": 69,
              "endLine": 623,
              "endColumn": 74,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class \" + entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 66,
              "variableName": "entry.getValue()",
              "startLine": 623,
              "startColumn": 69,
              "endLine": 623,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class \" + entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 67,
              "variableName": "\"Could not load config provider class \" + entry.getValue()",
              "startLine": 623,
              "startColumn": 27,
              "endLine": 623,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class \" + entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "sslKeystorePassword",
              "startLine": 320,
              "startColumn": 57,
              "endLine": 320,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "String",
              "code": "                    sslKeystorePassword != null) {\n                props.put(SSL_KEYSTORE_TYPE_CONFIG, sslKeystoreType);\n                props.put(SSL_KEYSTORE_LOCATION_CONFIG, sslKeystoreLocation);\n                props.put(SSL_KEYSTORE_PASSWORD_CONFIG, sslKeystorePassword);\n            }\n        }\n"
            },
            {
              "step": 1,
              "variableName": "props",
              "startLine": 320,
              "startColumn": 17,
              "endLine": 320,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "                    sslKeystorePassword != null) {\n                props.put(SSL_KEYSTORE_TYPE_CONFIG, sslKeystoreType);\n                props.put(SSL_KEYSTORE_LOCATION_CONFIG, sslKeystoreLocation);\n                props.put(SSL_KEYSTORE_PASSWORD_CONFIG, sslKeystorePassword);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 343,
              "startColumn": 42,
              "endLine": 343,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        props.put(KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        this.producer = getKafkaProducer(props);\n        LogLog.warn(\"log4j-appender is deprecated and will be removed in Kafka 4.0.\");\n        LogLog.debug(\"Kafka producer connected to \" + brokerList);\n        LogLog.debug(\"Logging for topic: \" + topic);"
            },
            {
              "step": 3,
              "variableName": "Properties props",
              "startLine": 349,
              "startColumn": 57,
              "endLine": 349,
              "endColumn": 73,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "        LogLog.debug(\"Logging for topic: \" + topic);\n    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 350,
              "startColumn": 36,
              "endLine": 350,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/log4j-appender/src/main/java/org/apache/kafka/log4jappender/KafkaLog4jAppender.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected Producer<byte[], byte[]> getKafkaProducer(Properties props) {\n        return new KafkaProducer<>(props);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Properties properties",
              "startLine": 308,
              "startColumn": 26,
              "endLine": 308,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * Note: after creating a {@code KafkaProducer} you must always {@link #close()} it to avoid resource leaks.\n     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "properties",
              "startLine": 309,
              "startColumn": 14,
              "endLine": 309,
              "endColumn": 24,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties   The producer configs\n     */\n    public KafkaProducer(Properties properties) {\n        this(properties, null, null);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "Properties properties",
              "startLine": 323,
              "startColumn": 26,
              "endLine": 323,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "properties",
              "startLine": 324,
              "startColumn": 31,
              "endLine": 324,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "Properties [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Properties properties",
              "startLine": 1479,
              "startColumn": 50,
              "endLine": 1479,
              "endColumn": 71,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @param properties to be converted\n     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "properties",
              "startLine": 1480,
              "startColumn": 38,
              "endLine": 1480,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 12,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 13,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 14,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 15,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 16,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 17,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 18,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "castToStringObjectMap(properties)",
              "startLine": 1480,
              "startColumn": 16,
              "endLine": 1480,
              "endColumn": 49,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return a map including all elements in properties\n     */\n    public static Map<String, Object> propsToMap(Properties properties) {\n        return castToStringObjectMap(properties);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "Utils.propsToMap(properties)",
              "startLine": 324,
              "startColumn": 14,
              "endLine": 324,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Map<String, Object> configs",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 296,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }"
            },
            {
              "step": 22,
              "variableName": "configs",
              "startLine": 297,
              "startColumn": 73,
              "endLine": 297,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<String, Object> configs",
              "startLine": 623,
              "startColumn": 57,
              "endLine": 623,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    static Map<String, Object> appendSerializerToConfig(Map<String, Object> configs,\n            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value"
            },
            {
              "step": 24,
              "variableName": "configs",
              "startLine": 627,
              "startColumn": 56,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 25,
              "variableName": "new HashMap<>(configs)",
              "startLine": 627,
              "startColumn": 42,
              "endLine": 627,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 26,
              "variableName": "newConfigs",
              "startLine": 636,
              "startColumn": 16,
              "endLine": 636,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            newConfigs.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass());\n        else if (newConfigs.get(VALUE_SERIALIZER_CLASS_CONFIG) == null)\n            throw new ConfigException(VALUE_SERIALIZER_CLASS_CONFIG, null, \"must be non-null.\");\n        return newConfigs;\n    }\n\n    public ProducerConfig(Properties props) {"
            },
            {
              "step": 27,
              "variableName": "ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 113,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "Map<String, Object> props",
              "startLine": 643,
              "startColumn": 27,
              "endLine": 643,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        super(CONFIG, props);\n    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "props",
              "startLine": 644,
              "startColumn": 23,
              "endLine": 644,
              "endColumn": 28,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n\n    ProducerConfig(Map<?, ?> props, boolean doLog) {"
            },
            {
              "step": 30,
              "variableName": "Map<?, ?> originals",
              "startLine": 132,
              "startColumn": 49,
              "endLine": 132,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "originals",
              "startLine": 133,
              "startColumn": 26,
              "endLine": 133,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1489,
              "startColumn": 61,
              "endLine": 1489,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 35,
              "variableName": "inputMap",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 46,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 36,
              "variableName": "inputMap.entrySet()",
              "startLine": 1491,
              "startColumn": 38,
              "endLine": 1491,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 37,
              "variableName": "entry",
              "startLine": 1492,
              "startColumn": 17,
              "endLine": 1492,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 38,
              "variableName": "entry",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 39,
              "variableName": "entry.getValue()",
              "startLine": 1494,
              "startColumn": 28,
              "endLine": 1494,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 40,
              "variableName": "map",
              "startLine": 1494,
              "startColumn": 17,
              "endLine": 1494,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 41,
              "variableName": "map",
              "startLine": 1499,
              "startColumn": 16,
              "endLine": 1499,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 43,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 45,
              "variableName": "originals",
              "startLine": 528,
              "startColumn": 75,
              "endLine": 528,
              "endColumn": 84,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 46,
              "variableName": "Map<?, ?> configMap",
              "startLine": 502,
              "startColumn": 59,
              "endLine": 502,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 47,
              "variableName": "configMap",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 47,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 48,
              "variableName": "configMap.entrySet()",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 58,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 49,
              "variableName": "entry",
              "startLine": 507,
              "startColumn": 17,
              "endLine": 507,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 50,
              "variableName": "entry",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 51,
              "variableName": "entry.getValue()",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 52,
              "variableName": "(String) entry.getValue()",
              "startLine": 508,
              "startColumn": 64,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 53,
              "variableName": "configMapAsString",
              "startLine": 508,
              "startColumn": 17,
              "endLine": 508,
              "endColumn": 34,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 54,
              "variableName": "configMapAsString",
              "startLine": 511,
              "startColumn": 16,
              "endLine": 511,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 55,
              "variableName": "extractPotentialVariables(originals)",
              "startLine": 528,
              "startColumn": 49,
              "endLine": 528,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 56,
              "variableName": "providerConfigString",
              "startLine": 540,
              "startColumn": 76,
              "endLine": 540,
              "endColumn": 96,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 57,
              "variableName": "Map<String, String> indirectConfigs",
              "startLine": 589,
              "startColumn": 13,
              "endLine": 589,
              "endColumn": 48,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 58,
              "variableName": "indirectConfigs",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 59,
              "variableName": "indirectConfigs.get(providerClass)",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 60,
              "variableName": "providerClassName",
              "startLine": 606,
              "startColumn": 47,
              "endLine": 606,
              "endColumn": 64,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 61,
              "variableName": "providerMap",
              "startLine": 606,
              "startColumn": 21,
              "endLine": 606,
              "endColumn": 32,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 62,
              "variableName": "providerMap",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 63,
              "variableName": "providerMap.entrySet()",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 64,
              "variableName": "entry",
              "startLine": 617,
              "startColumn": 65,
              "endLine": 617,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 65,
              "variableName": "entry",
              "startLine": 623,
              "startColumn": 69,
              "endLine": 623,
              "endColumn": 74,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class \" + entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 66,
              "variableName": "entry.getValue()",
              "startLine": 623,
              "startColumn": 69,
              "endLine": 623,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class \" + entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 67,
              "variableName": "\"Could not load config provider class \" + entry.getValue()",
              "startLine": 623,
              "startColumn": 27,
              "endLine": 623,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class \" + entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 19,
      "fileName": "OAuthBearerSaslClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "saslToken",
              "startLine": 536,
              "startColumn": 110,
              "endLine": 536,
              "endColumn": 119,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/authenticator/SaslClientAuthenticator.java",
              "type": "byte[]",
              "code": "            if (isInitial && !saslClient.hasInitialResponse())\n                return saslToken;\n            else\n                return SecurityManagerCompatibility.get().callAs(subject, () -> saslClient.evaluateChallenge(saslToken));\n        } catch (CompletionException e) {\n            String error = \"An error: (\" + e + \") occurred when evaluating SASL token received from the Kafka Broker.\";\n            KerberosError kerberosError = KerberosError.fromException(e);"
            },
            {
              "step": 1,
              "variableName": "byte[] challenge",
              "startLine": 86,
              "startColumn": 37,
              "endLine": 86,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/oauthbearer/internals/OAuthBearerSaslClient.java",
              "type": "byte[]",
              "code": "    }\n\n    @Override\n    public byte[] evaluateChallenge(byte[] challenge) throws SaslException {\n        try {\n            OAuthBearerTokenCallback callback = new OAuthBearerTokenCallback();\n            switch (state) {"
            },
            {
              "step": 2,
              "variableName": "challenge",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/oauthbearer/internals/OAuthBearerSaslClient.java",
              "type": "byte[]",
              "code": "                    return new OAuthBearerClientInitialResponse(callback.token().value(), extensions).toBytes();\n                case RECEIVE_SERVER_FIRST_MESSAGE:\n                    if (challenge != null && challenge.length != 0) {\n                        String jsonErrorResponse = new String(challenge, StandardCharsets.UTF_8);\n                        if (log.isDebugEnabled())\n                            log.debug(\"Sending %%x01 response to server after receiving an error: {}\",\n                                    jsonErrorResponse);"
            },
            {
              "step": 3,
              "variableName": "new String(challenge, StandardCharsets.UTF_8)",
              "startLine": 101,
              "startColumn": 52,
              "endLine": 101,
              "endColumn": 97,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/oauthbearer/internals/OAuthBearerSaslClient.java",
              "type": "String",
              "code": "                    return new OAuthBearerClientInitialResponse(callback.token().value(), extensions).toBytes();\n                case RECEIVE_SERVER_FIRST_MESSAGE:\n                    if (challenge != null && challenge.length != 0) {\n                        String jsonErrorResponse = new String(challenge, StandardCharsets.UTF_8);\n                        if (log.isDebugEnabled())\n                            log.debug(\"Sending %%x01 response to server after receiving an error: {}\",\n                                    jsonErrorResponse);"
            },
            {
              "step": 4,
              "variableName": "jsonErrorResponse",
              "startLine": 104,
              "startColumn": 37,
              "endLine": 104,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/oauthbearer/internals/OAuthBearerSaslClient.java",
              "type": "",
              "code": "                        String jsonErrorResponse = new String(challenge, StandardCharsets.UTF_8);\n                        if (log.isDebugEnabled())\n                            log.debug(\"Sending %%x01 response to server after receiving an error: {}\",\n                                    jsonErrorResponse);\n                        setState(State.RECEIVE_SERVER_MESSAGE_AFTER_FAILURE);\n                        return new byte[] {BYTE_CONTROL_A};\n                    }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 20,
      "fileName": "ScramSaslServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "clientToken",
              "startLine": 427,
              "startColumn": 59,
              "endLine": 427,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/authenticator/SaslServerAuthenticator.java",
              "type": "byte[]",
              "code": "\n    private void handleSaslToken(byte[] clientToken) throws IOException {\n        if (!enableKafkaSaslAuthenticateHeaders) {\n            byte[] response = saslServer.evaluateResponse(clientToken);\n            if (saslServer.isComplete()) {\n                reauthInfo.calcCompletionTimesAndReturnSessionLifetimeMs();\n                if (reauthInfo.reauthenticating())"
            },
            {
              "step": 1,
              "variableName": "byte[] response",
              "startLine": 98,
              "startColumn": 36,
              "endLine": 98,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "byte[]",
              "code": "     * </p>\n     */\n    @Override\n    public byte[] evaluateResponse(byte[] response) throws SaslException, SaslAuthenticationException {\n        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:"
            },
            {
              "step": 2,
              "variableName": "response",
              "startLine": 102,
              "startColumn": 70,
              "endLine": 102,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "byte[]",
              "code": "        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\","
            },
            {
              "step": 3,
              "variableName": "byte[] messageBytes",
              "startLine": 81,
              "startColumn": 35,
              "endLine": 81,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        private final String nonce;\n        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())"
            },
            {
              "step": 4,
              "variableName": "messageBytes",
              "startLine": 82,
              "startColumn": 40,
              "endLine": 82,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);"
            },
            {
              "step": 5,
              "variableName": "byte[] messageBytes",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "            return toMessage().getBytes(StandardCharsets.UTF_8);\n        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }"
            },
            {
              "step": 6,
              "variableName": "messageBytes",
              "startLine": 55,
              "startColumn": 31,
              "endLine": 55,
              "endColumn": 43,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "new String(messageBytes, StandardCharsets.UTF_8)",
              "startLine": 55,
              "startColumn": 20,
              "endLine": 55,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "toMessage(messageBytes)",
              "startLine": 82,
              "startColumn": 30,
              "endLine": 82,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);"
            },
            {
              "step": 9,
              "variableName": "message",
              "startLine": 83,
              "startColumn": 47,
              "endLine": 83,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);\n            String authzid = matcher.group(\"authzid\");"
            },
            {
              "step": 10,
              "variableName": "PATTERN.matcher(message)",
              "startLine": 83,
              "startColumn": 31,
              "endLine": 83,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "Matcher",
              "code": "        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);\n            String authzid = matcher.group(\"authzid\");"
            },
            {
              "step": 11,
              "variableName": "matcher",
              "startLine": 90,
              "startColumn": 32,
              "endLine": 90,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "Matcher",
              "code": "            this.authorizationId = authzid != null ? authzid : \"\";\n            this.saslName = matcher.group(\"saslname\");\n            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }"
            },
            {
              "step": 12,
              "variableName": "matcher.group(\"extensions\")",
              "startLine": 90,
              "startColumn": 32,
              "endLine": 90,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.authorizationId = authzid != null ? authzid : \"\";\n            this.saslName = matcher.group(\"saslname\");\n            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }"
            },
            {
              "step": 13,
              "variableName": "extString",
              "startLine": 92,
              "startColumn": 79,
              "endLine": 92,
              "endColumn": 88,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 14,
              "variableName": "extString.substring(1)",
              "startLine": 92,
              "startColumn": 79,
              "endLine": 92,
              "endColumn": 101,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 15,
              "variableName": "String extensions",
              "startLine": 32,
              "startColumn": 28,
              "endLine": 32,
              "endColumn": 45,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "String",
              "code": "        this(Collections.emptyMap());\n    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "extensions",
              "startLine": 33,
              "startColumn": 29,
              "endLine": 33,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 17,
              "variableName": "String mapStr",
              "startLine": 623,
              "startColumn": 48,
              "endLine": 623,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "     *      {@code parseMap(\"key=hey,keyTwo=hi,keyThree=hello\", \"=\", \",\") => { key: \"hey\", keyTwo: \"hi\", keyThree: \"hello\" }}\n     *\n     */\n    public static Map<String, String> parseMap(String mapStr, String keyValueSeparator, String elementSeparator) {\n        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {"
            },
            {
              "step": 18,
              "variableName": "mapStr",
              "startLine": 627,
              "startColumn": 33,
              "endLine": 627,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);"
            },
            {
              "step": 19,
              "variableName": "mapStr.split(elementSeparator)",
              "startLine": 627,
              "startColumn": 33,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String[]",
              "code": "        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);"
            },
            {
              "step": 20,
              "variableName": "attrval",
              "startLine": 629,
              "startColumn": 34,
              "endLine": 629,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }"
            },
            {
              "step": 21,
              "variableName": "attrval.split(keyValueSeparator, 2)",
              "startLine": 629,
              "startColumn": 34,
              "endLine": 629,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String[]",
              "code": "        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }"
            },
            {
              "step": 22,
              "variableName": "array[0]",
              "startLine": 630,
              "startColumn": 25,
              "endLine": 630,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }\n        return map;"
            },
            {
              "step": 23,
              "variableName": "map",
              "startLine": 630,
              "startColumn": 17,
              "endLine": 630,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }\n        return map;"
            },
            {
              "step": 24,
              "variableName": "map",
              "startLine": 633,
              "startColumn": 16,
              "endLine": 633,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                map.put(array[0], array[1]);\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "Utils.parseMap(extensions, \"=\", \",\")",
              "startLine": 33,
              "startColumn": 14,
              "endLine": 33,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 26,
              "variableName": "Map<String, String> extensionMap",
              "startLine": 36,
              "startColumn": 28,
              "endLine": 36,
              "endColumn": 60,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "extensionMap",
              "startLine": 37,
              "startColumn": 15,
              "endLine": 37,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n\n    public boolean tokenAuthenticated() {"
            },
            {
              "step": 28,
              "variableName": "super(extensionMap);",
              "startLine": 37,
              "startColumn": 9,
              "endLine": 37,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n\n    public boolean tokenAuthenticated() {"
            },
            {
              "step": 29,
              "variableName": "this(Utils.parseMap(extensions, \"=\", \",\"));",
              "startLine": 33,
              "startColumn": 9,
              "endLine": 33,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 30,
              "variableName": "new ScramExtensions(extString.substring(1))",
              "startLine": 92,
              "startColumn": 59,
              "endLine": 92,
              "endColumn": 102,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 31,
              "variableName": "extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions()",
              "startLine": 92,
              "startColumn": 31,
              "endLine": 92,
              "endColumn": 126,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "... : ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 32,
              "variableName": "this",
              "startLine": 92,
              "startColumn": 13,
              "endLine": 92,
              "endColumn": 17,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 33,
              "variableName": "new ClientFirstMessage(response)",
              "startLine": 102,
              "startColumn": 47,
              "endLine": 102,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\","
            },
            {
              "step": 34,
              "variableName": "clientFirstMessage",
              "startLine": 103,
              "startColumn": 44,
              "endLine": 103,
              "endColumn": 62,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 35,
              "variableName": "extensions",
              "startLine": 112,
              "startColumn": 32,
              "endLine": 112,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "        public String gs2Header() {\n            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n"
            },
            {
              "step": 36,
              "variableName": "extensions",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n\n        public String clientFirstMessageBare() {"
            },
            {
              "step": 37,
              "variableName": "extensions",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n\n        public String clientFirstMessageBare() {"
            },
            {
              "step": 38,
              "variableName": "clientFirstMessage.extensions()",
              "startLine": 103,
              "startColumn": 44,
              "endLine": 103,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 39,
              "variableName": "scramExtensions",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 40,
              "variableName": "map",
              "startLine": 60,
              "startColumn": 32,
              "endLine": 60,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    /**\n     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n"
            },
            {
              "step": 41,
              "variableName": "extensionsMap",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "extensionsMap",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "Map [<map.key>] : String",
              "code": "     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n\n    /**"
            },
            {
              "step": 43,
              "variableName": "scramExtensions.map()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "Map [<map.key>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 44,
              "variableName": "scramExtensions.map().keySet()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "Set [<element>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 45,
              "variableName": "scramExtensions.map().keySet()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "clientToken",
              "startLine": 427,
              "startColumn": 59,
              "endLine": 427,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/authenticator/SaslServerAuthenticator.java",
              "type": "byte[]",
              "code": "\n    private void handleSaslToken(byte[] clientToken) throws IOException {\n        if (!enableKafkaSaslAuthenticateHeaders) {\n            byte[] response = saslServer.evaluateResponse(clientToken);\n            if (saslServer.isComplete()) {\n                reauthInfo.calcCompletionTimesAndReturnSessionLifetimeMs();\n                if (reauthInfo.reauthenticating())"
            },
            {
              "step": 1,
              "variableName": "byte[] response",
              "startLine": 98,
              "startColumn": 36,
              "endLine": 98,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "byte[]",
              "code": "     * </p>\n     */\n    @Override\n    public byte[] evaluateResponse(byte[] response) throws SaslException, SaslAuthenticationException {\n        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:"
            },
            {
              "step": 2,
              "variableName": "response",
              "startLine": 102,
              "startColumn": 70,
              "endLine": 102,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "byte[]",
              "code": "        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\","
            },
            {
              "step": 3,
              "variableName": "byte[] messageBytes",
              "startLine": 81,
              "startColumn": 35,
              "endLine": 81,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        private final String nonce;\n        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())"
            },
            {
              "step": 4,
              "variableName": "messageBytes",
              "startLine": 82,
              "startColumn": 40,
              "endLine": 82,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);"
            },
            {
              "step": 5,
              "variableName": "byte[] messageBytes",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "            return toMessage().getBytes(StandardCharsets.UTF_8);\n        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }"
            },
            {
              "step": 6,
              "variableName": "messageBytes",
              "startLine": 55,
              "startColumn": 31,
              "endLine": 55,
              "endColumn": 43,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "new String(messageBytes, StandardCharsets.UTF_8)",
              "startLine": 55,
              "startColumn": 20,
              "endLine": 55,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "toMessage(messageBytes)",
              "startLine": 82,
              "startColumn": 30,
              "endLine": 82,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);"
            },
            {
              "step": 9,
              "variableName": "message",
              "startLine": 83,
              "startColumn": 47,
              "endLine": 83,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);\n            String authzid = matcher.group(\"authzid\");"
            },
            {
              "step": 10,
              "variableName": "PATTERN.matcher(message)",
              "startLine": 83,
              "startColumn": 31,
              "endLine": 83,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "Matcher",
              "code": "        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);\n            String authzid = matcher.group(\"authzid\");"
            },
            {
              "step": 11,
              "variableName": "matcher",
              "startLine": 90,
              "startColumn": 32,
              "endLine": 90,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "Matcher",
              "code": "            this.authorizationId = authzid != null ? authzid : \"\";\n            this.saslName = matcher.group(\"saslname\");\n            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }"
            },
            {
              "step": 12,
              "variableName": "matcher.group(\"extensions\")",
              "startLine": 90,
              "startColumn": 32,
              "endLine": 90,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.authorizationId = authzid != null ? authzid : \"\";\n            this.saslName = matcher.group(\"saslname\");\n            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }"
            },
            {
              "step": 13,
              "variableName": "extString",
              "startLine": 92,
              "startColumn": 79,
              "endLine": 92,
              "endColumn": 88,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 14,
              "variableName": "extString.substring(1)",
              "startLine": 92,
              "startColumn": 79,
              "endLine": 92,
              "endColumn": 101,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 15,
              "variableName": "String extensions",
              "startLine": 32,
              "startColumn": 28,
              "endLine": 32,
              "endColumn": 45,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "String",
              "code": "        this(Collections.emptyMap());\n    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "extensions",
              "startLine": 33,
              "startColumn": 29,
              "endLine": 33,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 17,
              "variableName": "String mapStr",
              "startLine": 623,
              "startColumn": 48,
              "endLine": 623,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "     *      {@code parseMap(\"key=hey,keyTwo=hi,keyThree=hello\", \"=\", \",\") => { key: \"hey\", keyTwo: \"hi\", keyThree: \"hello\" }}\n     *\n     */\n    public static Map<String, String> parseMap(String mapStr, String keyValueSeparator, String elementSeparator) {\n        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {"
            },
            {
              "step": 18,
              "variableName": "mapStr",
              "startLine": 627,
              "startColumn": 33,
              "endLine": 627,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);"
            },
            {
              "step": 19,
              "variableName": "mapStr.split(elementSeparator)",
              "startLine": 627,
              "startColumn": 33,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String[]",
              "code": "        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);"
            },
            {
              "step": 20,
              "variableName": "attrval",
              "startLine": 629,
              "startColumn": 34,
              "endLine": 629,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }"
            },
            {
              "step": 21,
              "variableName": "attrval.split(keyValueSeparator, 2)",
              "startLine": 629,
              "startColumn": 34,
              "endLine": 629,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String[]",
              "code": "        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }"
            },
            {
              "step": 22,
              "variableName": "array[0]",
              "startLine": 630,
              "startColumn": 25,
              "endLine": 630,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }\n        return map;"
            },
            {
              "step": 23,
              "variableName": "map",
              "startLine": 630,
              "startColumn": 17,
              "endLine": 630,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }\n        return map;"
            },
            {
              "step": 24,
              "variableName": "map",
              "startLine": 633,
              "startColumn": 16,
              "endLine": 633,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                map.put(array[0], array[1]);\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "Utils.parseMap(extensions, \"=\", \",\")",
              "startLine": 33,
              "startColumn": 14,
              "endLine": 33,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 26,
              "variableName": "Map<String, String> extensionMap",
              "startLine": 36,
              "startColumn": 28,
              "endLine": 36,
              "endColumn": 60,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "extensionMap",
              "startLine": 37,
              "startColumn": 15,
              "endLine": 37,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n\n    public boolean tokenAuthenticated() {"
            },
            {
              "step": 28,
              "variableName": "super(extensionMap);",
              "startLine": 37,
              "startColumn": 9,
              "endLine": 37,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n\n    public boolean tokenAuthenticated() {"
            },
            {
              "step": 29,
              "variableName": "this(Utils.parseMap(extensions, \"=\", \",\"));",
              "startLine": 33,
              "startColumn": 9,
              "endLine": 33,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 30,
              "variableName": "new ScramExtensions(extString.substring(1))",
              "startLine": 92,
              "startColumn": 59,
              "endLine": 92,
              "endColumn": 102,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 31,
              "variableName": "extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions()",
              "startLine": 92,
              "startColumn": 31,
              "endLine": 92,
              "endColumn": 126,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "... : ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 32,
              "variableName": "this",
              "startLine": 92,
              "startColumn": 13,
              "endLine": 92,
              "endColumn": 17,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 33,
              "variableName": "new ClientFirstMessage(response)",
              "startLine": 102,
              "startColumn": 47,
              "endLine": 102,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\","
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 102,
              "startColumn": 21,
              "endLine": 102,
              "endColumn": 25,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramSaslServer [clientFirstMessage, extensions, extensionsMap, <map.key>] : String",
              "code": "        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\","
            },
            {
              "step": 35,
              "variableName": "this",
              "startLine": 103,
              "startColumn": 21,
              "endLine": 103,
              "endColumn": 25,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramSaslServer [clientFirstMessage, extensions, extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 36,
              "variableName": "clientFirstMessage",
              "startLine": 103,
              "startColumn": 44,
              "endLine": 103,
              "endColumn": 62,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramSaslServer [clientFirstMessage, extensions, extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 37,
              "variableName": "clientFirstMessage",
              "startLine": 103,
              "startColumn": 44,
              "endLine": 103,
              "endColumn": 62,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 38,
              "variableName": "extensions",
              "startLine": 112,
              "startColumn": 32,
              "endLine": 112,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "        public String gs2Header() {\n            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n"
            },
            {
              "step": 39,
              "variableName": "extensions",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n\n        public String clientFirstMessageBare() {"
            },
            {
              "step": 40,
              "variableName": "extensions",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n\n        public String clientFirstMessageBare() {"
            },
            {
              "step": 41,
              "variableName": "clientFirstMessage.extensions()",
              "startLine": 103,
              "startColumn": 44,
              "endLine": 103,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 42,
              "variableName": "scramExtensions",
              "startLine": 104,
              "startColumn": 59,
              "endLine": 104,
              "endColumn": 74,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }"
            },
            {
              "step": 43,
              "variableName": "scramExtensions",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 44,
              "variableName": "map",
              "startLine": 60,
              "startColumn": 32,
              "endLine": 60,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    /**\n     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n"
            },
            {
              "step": 45,
              "variableName": "extensionsMap",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n\n    /**"
            },
            {
              "step": 46,
              "variableName": "extensionsMap",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "Map [<map.key>] : String",
              "code": "     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n\n    /**"
            },
            {
              "step": 47,
              "variableName": "scramExtensions.map()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "Map [<map.key>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 48,
              "variableName": "scramExtensions.map().keySet()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "Set [<element>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 49,
              "variableName": "scramExtensions.map().keySet()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "clientToken",
              "startLine": 427,
              "startColumn": 59,
              "endLine": 427,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/authenticator/SaslServerAuthenticator.java",
              "type": "byte[]",
              "code": "\n    private void handleSaslToken(byte[] clientToken) throws IOException {\n        if (!enableKafkaSaslAuthenticateHeaders) {\n            byte[] response = saslServer.evaluateResponse(clientToken);\n            if (saslServer.isComplete()) {\n                reauthInfo.calcCompletionTimesAndReturnSessionLifetimeMs();\n                if (reauthInfo.reauthenticating())"
            },
            {
              "step": 1,
              "variableName": "byte[] response",
              "startLine": 98,
              "startColumn": 36,
              "endLine": 98,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "byte[]",
              "code": "     * </p>\n     */\n    @Override\n    public byte[] evaluateResponse(byte[] response) throws SaslException, SaslAuthenticationException {\n        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:"
            },
            {
              "step": 2,
              "variableName": "response",
              "startLine": 102,
              "startColumn": 70,
              "endLine": 102,
              "endColumn": 78,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "byte[]",
              "code": "        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\","
            },
            {
              "step": 3,
              "variableName": "byte[] messageBytes",
              "startLine": 81,
              "startColumn": 35,
              "endLine": 81,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        private final String nonce;\n        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())"
            },
            {
              "step": 4,
              "variableName": "messageBytes",
              "startLine": 82,
              "startColumn": 40,
              "endLine": 82,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);"
            },
            {
              "step": 5,
              "variableName": "byte[] messageBytes",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "            return toMessage().getBytes(StandardCharsets.UTF_8);\n        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }"
            },
            {
              "step": 6,
              "variableName": "messageBytes",
              "startLine": 55,
              "startColumn": 31,
              "endLine": 55,
              "endColumn": 43,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "byte[]",
              "code": "        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "new String(messageBytes, StandardCharsets.UTF_8)",
              "startLine": 55,
              "startColumn": 20,
              "endLine": 55,
              "endColumn": 68,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        }\n\n        protected String toMessage(byte[] messageBytes) {\n            return new String(messageBytes, StandardCharsets.UTF_8);\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "toMessage(messageBytes)",
              "startLine": 82,
              "startColumn": 30,
              "endLine": 82,
              "endColumn": 53,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        private final String authorizationId;\n        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);"
            },
            {
              "step": 9,
              "variableName": "message",
              "startLine": 83,
              "startColumn": 47,
              "endLine": 83,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);\n            String authzid = matcher.group(\"authzid\");"
            },
            {
              "step": 10,
              "variableName": "PATTERN.matcher(message)",
              "startLine": 83,
              "startColumn": 31,
              "endLine": 83,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "Matcher",
              "code": "        private final ScramExtensions extensions;\n        public ClientFirstMessage(byte[] messageBytes) throws SaslException {\n            String message = toMessage(messageBytes);\n            Matcher matcher = PATTERN.matcher(message);\n            if (!matcher.matches())\n                throw new SaslException(\"Invalid SCRAM client first message format: \" + message);\n            String authzid = matcher.group(\"authzid\");"
            },
            {
              "step": 11,
              "variableName": "matcher",
              "startLine": 90,
              "startColumn": 32,
              "endLine": 90,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "Matcher",
              "code": "            this.authorizationId = authzid != null ? authzid : \"\";\n            this.saslName = matcher.group(\"saslname\");\n            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }"
            },
            {
              "step": 12,
              "variableName": "matcher.group(\"extensions\")",
              "startLine": 90,
              "startColumn": 32,
              "endLine": 90,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.authorizationId = authzid != null ? authzid : \"\";\n            this.saslName = matcher.group(\"saslname\");\n            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }"
            },
            {
              "step": 13,
              "variableName": "extString",
              "startLine": 92,
              "startColumn": 79,
              "endLine": 92,
              "endColumn": 88,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 14,
              "variableName": "extString.substring(1)",
              "startLine": 92,
              "startColumn": 79,
              "endLine": 92,
              "endColumn": 101,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 15,
              "variableName": "String extensions",
              "startLine": 32,
              "startColumn": 28,
              "endLine": 32,
              "endColumn": 45,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "String",
              "code": "        this(Collections.emptyMap());\n    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "extensions",
              "startLine": 33,
              "startColumn": 29,
              "endLine": 33,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 17,
              "variableName": "String mapStr",
              "startLine": 623,
              "startColumn": 48,
              "endLine": 623,
              "endColumn": 61,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "     *      {@code parseMap(\"key=hey,keyTwo=hi,keyThree=hello\", \"=\", \",\") => { key: \"hey\", keyTwo: \"hi\", keyThree: \"hello\" }}\n     *\n     */\n    public static Map<String, String> parseMap(String mapStr, String keyValueSeparator, String elementSeparator) {\n        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {"
            },
            {
              "step": 18,
              "variableName": "mapStr",
              "startLine": 627,
              "startColumn": 33,
              "endLine": 627,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);"
            },
            {
              "step": 19,
              "variableName": "mapStr.split(elementSeparator)",
              "startLine": 627,
              "startColumn": 33,
              "endLine": 627,
              "endColumn": 63,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String[]",
              "code": "        Map<String, String> map = new HashMap<>();\n\n        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);"
            },
            {
              "step": 20,
              "variableName": "attrval",
              "startLine": 629,
              "startColumn": 34,
              "endLine": 629,
              "endColumn": 41,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }"
            },
            {
              "step": 21,
              "variableName": "attrval.split(keyValueSeparator, 2)",
              "startLine": 629,
              "startColumn": 34,
              "endLine": 629,
              "endColumn": 69,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String[]",
              "code": "        if (!mapStr.isEmpty()) {\n            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }"
            },
            {
              "step": 22,
              "variableName": "array[0]",
              "startLine": 630,
              "startColumn": 25,
              "endLine": 630,
              "endColumn": 33,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }\n        return map;"
            },
            {
              "step": 23,
              "variableName": "map",
              "startLine": 630,
              "startColumn": 17,
              "endLine": 630,
              "endColumn": 20,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            String[] attrvals = mapStr.split(elementSeparator);\n            for (String attrval : attrvals) {\n                String[] array = attrval.split(keyValueSeparator, 2);\n                map.put(array[0], array[1]);\n            }\n        }\n        return map;"
            },
            {
              "step": 24,
              "variableName": "map",
              "startLine": 633,
              "startColumn": 16,
              "endLine": 633,
              "endColumn": 19,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                map.put(array[0], array[1]);\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "Utils.parseMap(extensions, \"=\", \",\")",
              "startLine": 33,
              "startColumn": 14,
              "endLine": 33,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 26,
              "variableName": "Map<String, String> extensionMap",
              "startLine": 36,
              "startColumn": 28,
              "endLine": 36,
              "endColumn": 60,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "extensionMap",
              "startLine": 37,
              "startColumn": 15,
              "endLine": 37,
              "endColumn": 27,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n\n    public boolean tokenAuthenticated() {"
            },
            {
              "step": 28,
              "variableName": "super(extensionMap);",
              "startLine": 37,
              "startColumn": 9,
              "endLine": 37,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {\n        super(extensionMap);\n    }\n\n    public boolean tokenAuthenticated() {"
            },
            {
              "step": 29,
              "variableName": "this(Utils.parseMap(extensions, \"=\", \",\"));",
              "startLine": 33,
              "startColumn": 9,
              "endLine": 33,
              "endColumn": 52,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    }\n\n    public ScramExtensions(String extensions) {\n        this(Utils.parseMap(extensions, \"=\", \",\"));\n    }\n\n    public ScramExtensions(Map<String, String> extensionMap) {"
            },
            {
              "step": 30,
              "variableName": "new ScramExtensions(extString.substring(1))",
              "startLine": 92,
              "startColumn": 59,
              "endLine": 92,
              "endColumn": 102,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 31,
              "variableName": "extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions()",
              "startLine": 92,
              "startColumn": 31,
              "endLine": 92,
              "endColumn": 126,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "... : ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 32,
              "variableName": "this",
              "startLine": 92,
              "startColumn": 13,
              "endLine": 92,
              "endColumn": 17,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            this.nonce = matcher.group(\"nonce\");\n            String extString = matcher.group(\"extensions\");\n\n            this.extensions = extString.startsWith(\",\") ? new ScramExtensions(extString.substring(1)) : new ScramExtensions();\n        }\n        public ClientFirstMessage(String saslName, String nonce, Map<String, String> extensions) {\n            this.saslName = saslName;"
            },
            {
              "step": 33,
              "variableName": "new ClientFirstMessage(response)",
              "startLine": 102,
              "startColumn": 47,
              "endLine": 102,
              "endColumn": 79,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "        try {\n            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\","
            },
            {
              "step": 34,
              "variableName": "clientFirstMessage",
              "startLine": 103,
              "startColumn": 44,
              "endLine": 103,
              "endColumn": 62,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 35,
              "variableName": "extensions",
              "startLine": 112,
              "startColumn": 32,
              "endLine": 112,
              "endColumn": 42,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "        public String gs2Header() {\n            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n"
            },
            {
              "step": 36,
              "variableName": "extensions",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ClientFirstMessage [extensions, extensionsMap, <map.key>] : String",
              "code": "            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n\n        public String clientFirstMessageBare() {"
            },
            {
              "step": 37,
              "variableName": "extensions",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 30,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramMessages.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            return \"n,\" + authorizationId + \",\";\n        }\n        public ScramExtensions extensions() {\n            return extensions;\n        }\n\n        public String clientFirstMessageBare() {"
            },
            {
              "step": 38,
              "variableName": "clientFirstMessage.extensions()",
              "startLine": 103,
              "startColumn": 44,
              "endLine": 103,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 39,
              "variableName": "this",
              "startLine": 103,
              "startColumn": 21,
              "endLine": 103,
              "endColumn": 25,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramSaslServer [scramExtensions, extensionsMap, <map.key>] : String",
              "code": "            switch (state) {\n                case RECEIVE_CLIENT_FIRST_MESSAGE:\n                    this.clientFirstMessage = new ClientFirstMessage(response);\n                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());"
            },
            {
              "step": 40,
              "variableName": "scramExtensions",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramSaslServer [scramExtensions, extensionsMap, <map.key>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 41,
              "variableName": "scramExtensions",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 42,
              "variableName": "map",
              "startLine": 60,
              "startColumn": 32,
              "endLine": 60,
              "endColumn": 35,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "    /**\n     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n"
            },
            {
              "step": 43,
              "variableName": "extensionsMap",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "ScramExtensions [extensionsMap, <map.key>] : String",
              "code": "     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n\n    /**"
            },
            {
              "step": 44,
              "variableName": "extensionsMap",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 29,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/auth/SaslExtensions.java",
              "type": "Map [<map.key>] : String",
              "code": "     * Returns an <strong>immutable</strong> map of the extension names and their values\n     */\n    public Map<String, String> map() {\n        return extensionsMap;\n    }\n\n    /**"
            },
            {
              "step": 45,
              "variableName": "scramExtensions.map()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 76,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "Map [<map.key>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 46,
              "variableName": "scramExtensions.map().keySet()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "Set [<element>] : String",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            },
            {
              "step": 47,
              "variableName": "scramExtensions.map().keySet()",
              "startLine": 106,
              "startColumn": 55,
              "endLine": 106,
              "endColumn": 85,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramSaslServer.java",
              "type": "",
              "code": "                    this.scramExtensions = clientFirstMessage.extensions();\n                    if (!SUPPORTED_EXTENSIONS.containsAll(scramExtensions.map().keySet())) {\n                        log.debug(\"Unsupported extensions will be ignored, supported {}, provided {}\",\n                                SUPPORTED_EXTENSIONS, scramExtensions.map().keySet());\n                    }\n                    String serverNonce = formatter.secureRandomString();\n                    try {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 21,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 496,
              "startColumn": 118,
              "endLine": 496,
              "endColumn": 141,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java",
              "type": "ApiKeys",
              "code": "                    return true;\n                }\n            } else if (coordinatorType != null) {\n                log.trace(\"Coordinator not known for {}, will retry {} after finding coordinator.\", coordinatorType, requestBuilder.apiKey());\n                maybeFindCoordinatorAndRetry(nextRequestHandler);\n                return true;\n            } else {"
            },
            {
              "step": 2,
              "variableName": "Object arg2",
              "startLine": 150,
              "startColumn": 55,
              "endLine": 150,
              "endColumn": 66,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "ApiKeys",
              "code": "        }\n\n        @Override\n        public void trace(String format, Object arg1, Object arg2) {\n            if (logger.isTraceEnabled()) {\n                writeLog(null, LocationAwareLogger.TRACE_INT, format, new Object[]{arg1, arg2}, null);\n            }"
            },
            {
              "step": 3,
              "variableName": "arg2",
              "startLine": 152,
              "startColumn": 90,
              "endLine": 152,
              "endColumn": 94,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "ApiKeys",
              "code": "        @Override\n        public void trace(String format, Object arg1, Object arg2) {\n            if (logger.isTraceEnabled()) {\n                writeLog(null, LocationAwareLogger.TRACE_INT, format, new Object[]{arg1, arg2}, null);\n            }\n        }\n"
            },
            {
              "step": 4,
              "variableName": "new Object[]{arg1, arg2}",
              "startLine": 152,
              "startColumn": 71,
              "endLine": 152,
              "endColumn": 95,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        @Override\n        public void trace(String format, Object arg1, Object arg2) {\n            if (logger.isTraceEnabled()) {\n                writeLog(null, LocationAwareLogger.TRACE_INT, format, new Object[]{arg1, arg2}, null);\n            }\n        }\n"
            },
            {
              "step": 5,
              "variableName": "new Object[]{arg1, arg2}",
              "startLine": 152,
              "startColumn": 71,
              "endLine": 152,
              "endColumn": 95,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void trace(String format, Object arg1, Object arg2) {\n            if (logger.isTraceEnabled()) {\n                writeLog(null, LocationAwareLogger.TRACE_INT, format, new Object[]{arg1, arg2}, null);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 22,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 526,
              "startColumn": 53,
              "endLine": 526,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),\n                        builder.latestAllowedVersion());"
            },
            {
              "step": 3,
              "variableName": "log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +",
              "startLine": 525,
              "startColumn": 21,
              "endLine": 526,
              "endColumn": 124,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "            if (versionInfo == null) {\n                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 157,
              "startColumn": 42,
              "endLine": 157,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void trace(String format, Object... args) {\n            if (logger.isTraceEnabled()) {\n                writeLog(null, LocationAwareLogger.TRACE_INT, format, args, null);\n            }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 159,
              "startColumn": 71,
              "endLine": 159,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void trace(String format, Object... args) {\n            if (logger.isTraceEnabled()) {\n                writeLog(null, LocationAwareLogger.TRACE_INT, format, args, null);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 526,
              "startColumn": 53,
              "endLine": 526,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),\n                        builder.latestAllowedVersion());"
            },
            {
              "step": 3,
              "variableName": "log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +",
              "startLine": 525,
              "startColumn": 21,
              "endLine": 526,
              "endColumn": 124,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "            if (versionInfo == null) {\n                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),"
            },
            {
              "step": 4,
              "variableName": "log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +",
              "startLine": 525,
              "startColumn": 21,
              "endLine": 526,
              "endColumn": 124,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[]",
              "code": "            if (versionInfo == null) {\n                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),"
            },
            {
              "step": 5,
              "variableName": "Object... args",
              "startLine": 157,
              "startColumn": 42,
              "endLine": 157,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void trace(String format, Object... args) {\n            if (logger.isTraceEnabled()) {\n                writeLog(null, LocationAwareLogger.TRACE_INT, format, args, null);\n            }"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 159,
              "startColumn": 71,
              "endLine": 159,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void trace(String format, Object... args) {\n            if (logger.isTraceEnabled()) {\n                writeLog(null, LocationAwareLogger.TRACE_INT, format, args, null);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 23,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 360,
              "startColumn": 21,
              "endLine": 360,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "            if (log.isDebugEnabled()) {\n                log.debug(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms): {}\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {"
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Cancelled in-flight {} request with correlation id {} due to ",
              "startLine": 358,
              "startColumn": 17,
              "endLine": 362,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        Iterable<InFlightRequest> inFlightRequests = this.inFlightRequests.clearAll(nodeId);\n        for (InFlightRequest request : inFlightRequests) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms): {}\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 227,
              "startColumn": 42,
              "endLine": 227,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void debug(String format, Object... args) {\n            if (logger.isDebugEnabled()) {\n                writeLog(null, LocationAwareLogger.DEBUG_INT, format, args, null);\n            }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 229,
              "startColumn": 71,
              "endLine": 229,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void debug(String format, Object... args) {\n            if (logger.isDebugEnabled()) {\n                writeLog(null, LocationAwareLogger.DEBUG_INT, format, args, null);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "req.header.apiKey()",
              "startLine": 955,
              "startColumn": 21,
              "endLine": 955,
              "endColumn": 40,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n\n            // If the received response includes a throttle delay, throttle the connection."
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Received {} response from node {} for request with h",
              "startLine": 954,
              "startColumn": 17,
              "endLine": 955,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "                throttleTimeSensor.record(response.throttleTimeMs(), now);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n"
            },
            {
              "step": 4,
              "variableName": "log.debug(\"Received {} response from node {} for request with h",
              "startLine": 954,
              "startColumn": 17,
              "endLine": 955,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[]",
              "code": "                throttleTimeSensor.record(response.throttleTimeMs(), now);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n"
            },
            {
              "step": 5,
              "variableName": "Object... args",
              "startLine": 227,
              "startColumn": 42,
              "endLine": 227,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void debug(String format, Object... args) {\n            if (logger.isDebugEnabled()) {\n                writeLog(null, LocationAwareLogger.DEBUG_INT, format, args, null);\n            }"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 229,
              "startColumn": 71,
              "endLine": 229,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void debug(String format, Object... args) {\n            if (logger.isDebugEnabled()) {\n                writeLog(null, LocationAwareLogger.DEBUG_INT, format, args, null);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 557,
              "startColumn": 17,
              "endLine": 557,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);\n        InFlightRequest inFlightRequest = new InFlightRequest("
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",",
              "startLine": 556,
              "startColumn": 13,
              "endLine": 557,
              "endColumn": 104,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        String destination = clientRequest.destination();\n        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 227,
              "startColumn": 42,
              "endLine": 227,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void debug(String format, Object... args) {\n            if (logger.isDebugEnabled()) {\n                writeLog(null, LocationAwareLogger.DEBUG_INT, format, args, null);\n            }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 229,
              "startColumn": 71,
              "endLine": 229,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void debug(String format, Object... args) {\n            if (logger.isDebugEnabled()) {\n                writeLog(null, LocationAwareLogger.DEBUG_INT, format, args, null);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 557,
              "startColumn": 17,
              "endLine": 557,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);\n        InFlightRequest inFlightRequest = new InFlightRequest("
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",",
              "startLine": 556,
              "startColumn": 13,
              "endLine": 557,
              "endColumn": 104,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        String destination = clientRequest.destination();\n        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);"
            },
            {
              "step": 4,
              "variableName": "log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",",
              "startLine": 556,
              "startColumn": 13,
              "endLine": 557,
              "endColumn": 104,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[]",
              "code": "        String destination = clientRequest.destination();\n        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);"
            },
            {
              "step": 5,
              "variableName": "Object... args",
              "startLine": 227,
              "startColumn": 42,
              "endLine": 227,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void debug(String format, Object... args) {\n            if (logger.isDebugEnabled()) {\n                writeLog(null, LocationAwareLogger.DEBUG_INT, format, args, null);\n            }"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 229,
              "startColumn": 71,
              "endLine": 229,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void debug(String format, Object... args) {\n            if (logger.isDebugEnabled()) {\n                writeLog(null, LocationAwareLogger.DEBUG_INT, format, args, null);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 24,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(response.data().apiKey())",
              "startLine": 2470,
              "startColumn": 20,
              "endLine": 2470,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "ApiKeys",
              "code": "\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "logger.error(\"Unexpected error {} in {} response: {}\",",
              "startLine": 2469,
              "startColumn": 9,
              "endLine": 2470,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "    }\n\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }"
            },
            {
              "step": 3,
              "variableName": "Object... args",
              "startLine": 341,
              "startColumn": 42,
              "endLine": 341,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void error(String format, Object... args) {\n            writeLog(null, LocationAwareLogger.ERROR_INT, format, args, null);\n        }\n"
            },
            {
              "step": 4,
              "variableName": "args",
              "startLine": 342,
              "startColumn": 67,
              "endLine": 342,
              "endColumn": 71,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "\n        @Override\n        public void error(String format, Object... args) {\n            writeLog(null, LocationAwareLogger.ERROR_INT, format, args, null);\n        }\n\n        @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(response.data().apiKey())",
              "startLine": 2470,
              "startColumn": 20,
              "endLine": 2470,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "ApiKeys",
              "code": "\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "logger.error(\"Unexpected error {} in {} response: {}\",",
              "startLine": 2469,
              "startColumn": 9,
              "endLine": 2470,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "    }\n\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }"
            },
            {
              "step": 3,
              "variableName": "logger.error(\"Unexpected error {} in {} response: {}\",",
              "startLine": 2469,
              "startColumn": 9,
              "endLine": 2470,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "Object[]",
              "code": "    }\n\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 341,
              "startColumn": 42,
              "endLine": 341,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void error(String format, Object... args) {\n            writeLog(null, LocationAwareLogger.ERROR_INT, format, args, null);\n        }\n"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 342,
              "startColumn": 67,
              "endLine": 342,
              "endColumn": 71,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "\n        @Override\n        public void error(String format, Object... args) {\n            writeLog(null, LocationAwareLogger.ERROR_INT, format, args, null);\n        }\n\n        @Override"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 25,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 366,
              "startColumn": 21,
              "endLine": 366,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs);\n            }"
            },
            {
              "step": 3,
              "variableName": "log.info(\"Cancelled in-flight {} request with correlati",
              "startLine": 364,
              "startColumn": 17,
              "endLine": 368,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 391,
              "startColumn": 41,
              "endLine": 391,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void info(String format, Object... args) {\n            writeLog(null, LocationAwareLogger.INFO_INT, format, args, null);\n        }\n"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 392,
              "startColumn": 66,
              "endLine": 392,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "\n        @Override\n        public void info(String format, Object... args) {\n            writeLog(null, LocationAwareLogger.INFO_INT, format, args, null);\n        }\n\n        @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 366,
              "startColumn": 21,
              "endLine": 366,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs);\n            }"
            },
            {
              "step": 3,
              "variableName": "log.info(\"Cancelled in-flight {} request with correlati",
              "startLine": 364,
              "startColumn": 17,
              "endLine": 368,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 4,
              "variableName": "log.info(\"Cancelled in-flight {} request with correlati",
              "startLine": 364,
              "startColumn": 17,
              "endLine": 368,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[]",
              "code": "                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 5,
              "variableName": "Object... args",
              "startLine": 391,
              "startColumn": 41,
              "endLine": 391,
              "endColumn": 55,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void info(String format, Object... args) {\n            writeLog(null, LocationAwareLogger.INFO_INT, format, args, null);\n        }\n"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 392,
              "startColumn": 66,
              "endLine": 392,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "\n        @Override\n        public void info(String format, Object... args) {\n            writeLog(null, LocationAwareLogger.INFO_INT, format, args, null);\n        }\n\n        @Override"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 26,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 496,
              "startColumn": 118,
              "endLine": 496,
              "endColumn": 141,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java",
              "type": "ApiKeys",
              "code": "                    return true;\n                }\n            } else if (coordinatorType != null) {\n                log.trace(\"Coordinator not known for {}, will retry {} after finding coordinator.\", coordinatorType, requestBuilder.apiKey());\n                maybeFindCoordinatorAndRetry(nextRequestHandler);\n                return true;\n            } else {"
            },
            {
              "step": 2,
              "variableName": "Object arg2",
              "startLine": 516,
              "startColumn": 56,
              "endLine": 516,
              "endColumn": 67,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "ApiKeys",
              "code": "        }\n\n        @Override\n        public void trace(String message, Object arg1, Object arg2) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(addPrefix(message), arg1, arg2);\n            }"
            },
            {
              "step": 3,
              "variableName": "arg2",
              "startLine": 518,
              "startColumn": 56,
              "endLine": 518,
              "endColumn": 60,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void trace(String message, Object arg1, Object arg2) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(addPrefix(message), arg1, arg2);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 27,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 526,
              "startColumn": 53,
              "endLine": 526,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),\n                        builder.latestAllowedVersion());"
            },
            {
              "step": 3,
              "variableName": "log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +",
              "startLine": 525,
              "startColumn": 21,
              "endLine": 526,
              "endColumn": 124,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "            if (versionInfo == null) {\n                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 523,
              "startColumn": 43,
              "endLine": 523,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void trace(String message, Object... args) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(addPrefix(message), args);\n            }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 525,
              "startColumn": 50,
              "endLine": 525,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void trace(String message, Object... args) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(addPrefix(message), args);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 526,
              "startColumn": 53,
              "endLine": 526,
              "endColumn": 75,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),\n                        builder.latestAllowedVersion());"
            },
            {
              "step": 3,
              "variableName": "log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +",
              "startLine": 525,
              "startColumn": 21,
              "endLine": 526,
              "endColumn": 124,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "            if (versionInfo == null) {\n                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),"
            },
            {
              "step": 4,
              "variableName": "log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +",
              "startLine": 525,
              "startColumn": 21,
              "endLine": 526,
              "endColumn": 124,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[]",
              "code": "            if (versionInfo == null) {\n                version = builder.latestAllowedVersion();\n                if (discoverBrokerVersions && log.isTraceEnabled())\n                    log.trace(\"No version information found when sending {} with correlation id {} to node {}. \" +\n                            \"Assuming version {}.\", clientRequest.apiKey(), clientRequest.correlationId(), nodeId, version);\n            } else {\n                version = versionInfo.latestUsableVersion(clientRequest.apiKey(), builder.oldestAllowedVersion(),"
            },
            {
              "step": 5,
              "variableName": "Object... args",
              "startLine": 523,
              "startColumn": 43,
              "endLine": 523,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void trace(String message, Object... args) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(addPrefix(message), args);\n            }"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 525,
              "startColumn": 50,
              "endLine": 525,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void trace(String message, Object... args) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(addPrefix(message), args);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 28,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 360,
              "startColumn": 21,
              "endLine": 360,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "            if (log.isDebugEnabled()) {\n                log.debug(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms): {}\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {"
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Cancelled in-flight {} request with correlation id {} due to ",
              "startLine": 358,
              "startColumn": 17,
              "endLine": 362,
              "endColumn": 89,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        Iterable<InFlightRequest> inFlightRequests = this.inFlightRequests.clearAll(nodeId);\n        for (InFlightRequest request : inFlightRequests) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms): {}\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 593,
              "startColumn": 43,
              "endLine": 593,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void debug(String message, Object... args) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(addPrefix(message), args);\n            }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 595,
              "startColumn": 50,
              "endLine": 595,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void debug(String message, Object... args) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(addPrefix(message), args);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "req.header.apiKey()",
              "startLine": 955,
              "startColumn": 21,
              "endLine": 955,
              "endColumn": 40,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n\n            // If the received response includes a throttle delay, throttle the connection."
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Received {} response from node {} for request with h",
              "startLine": 954,
              "startColumn": 17,
              "endLine": 955,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "                throttleTimeSensor.record(response.throttleTimeMs(), now);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n"
            },
            {
              "step": 4,
              "variableName": "log.debug(\"Received {} response from node {} for request with h",
              "startLine": 954,
              "startColumn": 17,
              "endLine": 955,
              "endColumn": 80,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[]",
              "code": "                throttleTimeSensor.record(response.throttleTimeMs(), now);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Received {} response from node {} for request with header {}: {}\",\n                    req.header.apiKey(), req.destination, req.header, response);\n            }\n"
            },
            {
              "step": 5,
              "variableName": "Object... args",
              "startLine": 593,
              "startColumn": 43,
              "endLine": 593,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void debug(String message, Object... args) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(addPrefix(message), args);\n            }"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 595,
              "startColumn": 50,
              "endLine": 595,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void debug(String message, Object... args) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(addPrefix(message), args);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 557,
              "startColumn": 17,
              "endLine": 557,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);\n        InFlightRequest inFlightRequest = new InFlightRequest("
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",",
              "startLine": 556,
              "startColumn": 13,
              "endLine": 557,
              "endColumn": 104,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        String destination = clientRequest.destination();\n        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 593,
              "startColumn": 43,
              "endLine": 593,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void debug(String message, Object... args) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(addPrefix(message), args);\n            }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 595,
              "startColumn": 50,
              "endLine": 595,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void debug(String message, Object... args) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(addPrefix(message), args);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 26,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java",
              "type": "ApiKeys",
              "code": "        }\n\n        public ApiKeys apiKey() {\n            return apiKey;\n        }\n\n        public short oldestAllowedVersion() {"
            },
            {
              "step": 1,
              "variableName": "requestBuilder.apiKey()",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/ClientRequest.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return requestBuilder.apiKey();\n    }\n\n    public RequestHeader makeHeader(short version) {"
            },
            {
              "step": 2,
              "variableName": "clientRequest.apiKey()",
              "startLine": 557,
              "startColumn": 17,
              "endLine": 557,
              "endColumn": 39,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);\n        InFlightRequest inFlightRequest = new InFlightRequest("
            },
            {
              "step": 3,
              "variableName": "log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",",
              "startLine": 556,
              "startColumn": 13,
              "endLine": 557,
              "endColumn": 104,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        String destination = clientRequest.destination();\n        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);"
            },
            {
              "step": 4,
              "variableName": "log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",",
              "startLine": 556,
              "startColumn": 13,
              "endLine": 557,
              "endColumn": 104,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[]",
              "code": "        String destination = clientRequest.destination();\n        RequestHeader header = clientRequest.makeHeader(request.version());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Sending {} request with header {} and timeout {} to node {}: {}\",\n                clientRequest.apiKey(), header, clientRequest.requestTimeoutMs(), destination, request);\n        }\n        Send send = request.toSend(header);"
            },
            {
              "step": 5,
              "variableName": "Object... args",
              "startLine": 593,
              "startColumn": 43,
              "endLine": 593,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void debug(String message, Object... args) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(addPrefix(message), args);\n            }"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 595,
              "startColumn": 50,
              "endLine": 595,
              "endColumn": 54,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "        @Override\n        public void debug(String message, Object... args) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(addPrefix(message), args);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 29,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(response.data().apiKey())",
              "startLine": 2470,
              "startColumn": 20,
              "endLine": 2470,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "ApiKeys",
              "code": "\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "logger.error(\"Unexpected error {} in {} response: {}\",",
              "startLine": 2469,
              "startColumn": 9,
              "endLine": 2470,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "    }\n\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }"
            },
            {
              "step": 3,
              "variableName": "Object... args",
              "startLine": 707,
              "startColumn": 43,
              "endLine": 707,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void error(String message, Object... args) {\n            logger.error(addPrefix(message), args);\n        }\n"
            },
            {
              "step": 4,
              "variableName": "args",
              "startLine": 708,
              "startColumn": 46,
              "endLine": 708,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "\n        @Override\n        public void error(String message, Object... args) {\n            logger.error(addPrefix(message), args);\n        }\n\n        @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(response.data().apiKey())",
              "startLine": 2470,
              "startColumn": 20,
              "endLine": 2470,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "ApiKeys",
              "code": "\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "logger.error(\"Unexpected error {} in {} response: {}\",",
              "startLine": 2469,
              "startColumn": 9,
              "endLine": 2470,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "    }\n\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }"
            },
            {
              "step": 3,
              "variableName": "logger.error(\"Unexpected error {} in {} response: {}\",",
              "startLine": 2469,
              "startColumn": 9,
              "endLine": 2470,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "Object[]",
              "code": "    }\n\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 707,
              "startColumn": 43,
              "endLine": 707,
              "endColumn": 57,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void error(String message, Object... args) {\n            logger.error(addPrefix(message), args);\n        }\n"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 708,
              "startColumn": 46,
              "endLine": 708,
              "endColumn": 50,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "\n        @Override\n        public void error(String message, Object... args) {\n            logger.error(addPrefix(message), args);\n        }\n\n        @Override"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 30,
      "fileName": "LogContext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 366,
              "startColumn": 21,
              "endLine": 366,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs);\n            }"
            },
            {
              "step": 3,
              "variableName": "log.info(\"Cancelled in-flight {} request with correlati",
              "startLine": 364,
              "startColumn": 17,
              "endLine": 368,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 757,
              "startColumn": 42,
              "endLine": 757,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "        }\n\n        @Override\n        public void info(String message, Object... args) {\n            logger.info(addPrefix(message), args);\n        }\n"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 758,
              "startColumn": 45,
              "endLine": 758,
              "endColumn": 49,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "\n        @Override\n        public void info(String message, Object... args) {\n            logger.info(addPrefix(message), args);\n        }\n\n        @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(data.requestApiKey())",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 51,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/requests/RequestHeader.java",
              "type": "ApiKeys",
              "code": "    }\n\n    public ApiKeys apiKey() {\n        return ApiKeys.forId(data.requestApiKey());\n    }\n\n    public short apiVersion() {"
            },
            {
              "step": 2,
              "variableName": "request.header.apiKey()",
              "startLine": 366,
              "startColumn": 21,
              "endLine": 366,
              "endColumn": 44,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "ApiKeys",
              "code": "            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs);\n            }"
            },
            {
              "step": 3,
              "variableName": "log.info(\"Cancelled in-flight {} request with correlati",
              "startLine": 364,
              "startColumn": 17,
              "endLine": 368,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[] [[]] : ApiKeys",
              "code": "                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 4,
              "variableName": "log.info(\"Cancelled in-flight {} request with correlati",
              "startLine": 364,
              "startColumn": 17,
              "endLine": 368,
              "endColumn": 72,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/clients/NetworkClient.java",
              "type": "Object[]",
              "code": "                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),\n                    request.throttleTimeMs(), request.requestTimeoutMs, request.request);\n            } else {\n                log.info(\"Cancelled in-flight {} request with correlation id {} due to node {} being disconnected \" +\n                        \"(elapsed time since creation: {}ms, elapsed time since send: {}ms, throttle time: {}ms, request timeout: {}ms)\",\n                    request.header.apiKey(), request.header.correlationId(), nodeId,\n                    request.timeElapsedSinceCreateMs(now), request.timeElapsedSinceSendMs(now),"
            },
            {
              "step": 5,
              "variableName": "Object... args",
              "startLine": 757,
              "startColumn": 42,
              "endLine": 757,
              "endColumn": 56,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "Object[]",
              "code": "        }\n\n        @Override\n        public void info(String message, Object... args) {\n            logger.info(addPrefix(message), args);\n        }\n"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 758,
              "startColumn": 45,
              "endLine": 758,
              "endColumn": 49,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/utils/LogContext.java",
              "type": "",
              "code": "\n        @Override\n        public void info(String message, Object... args) {\n            logger.info(addPrefix(message), args);\n        }\n\n        @Override"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 31,
      "fileName": "KafkaRaftClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(response.data().apiKey())",
              "startLine": 2470,
              "startColumn": 20,
              "endLine": 2470,
              "endColumn": 59,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "",
              "code": "\n    private boolean handleUnexpectedError(Errors error, RaftResponse.Inbound response) {\n        logger.error(\"Unexpected error {} in {} response: {}\",\n            error, ApiKeys.forId(response.data().apiKey()), response);\n        return false;\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 33,
      "fileName": "KafkaRaftClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(request.apiKey())",
              "startLine": 2673,
              "startColumn": 35,
              "endLine": 2673,
              "endColumn": 66,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "ApiKeys",
              "code": "\n            requestMessage.completion.whenComplete((response, exception) -> {\n                if (exception != null) {\n                    ApiKeys api = ApiKeys.forId(request.apiKey());\n                    Errors error = Errors.forException(exception);\n                    ApiMessage errorResponse = RaftUtil.errorResponse(api, error);\n"
            },
            {
              "step": 2,
              "variableName": "api",
              "startLine": 2675,
              "startColumn": 71,
              "endLine": 2675,
              "endColumn": 74,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
              "type": "",
              "code": "                if (exception != null) {\n                    ApiKeys api = ApiKeys.forId(request.apiKey());\n                    Errors error = Errors.forException(exception);\n                    ApiMessage errorResponse = RaftUtil.errorResponse(api, error);\n\n                    response = new RaftResponse.Inbound(\n                        correlationId,"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 34,
      "fileName": "DefaultRequestSender.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "startLine": 210,
              "startColumn": 16,
              "endLine": 210,
              "endColumn": 22,
              "uri": "kafka-3.9.1-rc2/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java",
              "type": "ApiKeys",
              "code": "        if (apiKey == null) {\n            throw new IllegalArgumentException(\"Unexpected api key: \" + id);\n        }\n        return apiKey;\n    }\n\n    public static boolean hasId(int id) {"
            },
            {
              "step": 1,
              "variableName": "ApiKeys.forId(request.apiKey())",
              "startLine": 90,
              "startColumn": 31,
              "endLine": 90,
              "endColumn": 62,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/internals/DefaultRequestSender.java",
              "type": "ApiKeys",
              "code": "\n        requestMessage.completion.whenComplete((response, exception) -> {\n            if (exception != null) {\n                ApiKeys api = ApiKeys.forId(request.apiKey());\n                Errors error = Errors.forException(exception);\n                ApiMessage errorResponse = RaftUtil.errorResponse(api, error);\n"
            },
            {
              "step": 2,
              "variableName": "api",
              "startLine": 92,
              "startColumn": 67,
              "endLine": 92,
              "endColumn": 70,
              "uri": "kafka-3.9.1-rc2/raft/src/main/java/org/apache/kafka/raft/internals/DefaultRequestSender.java",
              "type": "",
              "code": "            if (exception != null) {\n                ApiKeys api = ApiKeys.forId(request.apiKey());\n                Errors error = Errors.forException(exception);\n                ApiMessage errorResponse = RaftUtil.errorResponse(api, error);\n\n                response = new RaftResponse.Inbound(\n                    correlationId,"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}