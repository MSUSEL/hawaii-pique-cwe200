{
  "532": [
    {
      "resultIndex": 0,
      "fileName": "Driver.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 682,
              "startColumn": 41,
              "endLine": 682,
              "endColumn": 49,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "String",
              "code": "          PGProperty.PG_HOST.getOrDefault(result), PGProperty.PG_PORT.getOrDefault(result), PGProperty.PG_DBNAME.getOrDefault(result), PGProperty.USER.getOrDefault(result)\n      );\n      if (password != null && !password.isEmpty()) {\n        PGProperty.PASSWORD.set(result, password);\n      }\n    }\n    //"
            },
            {
              "step": 1,
              "variableName": "@Nullable String value",
              "startLine": 955,
              "startColumn": 42,
              "endLine": 955,
              "endColumn": 64,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "   * @param properties properties in which the value should be set\n   * @param value value for this connection parameter\n   */\n  public void set(Properties properties, @Nullable String value) {\n    if (value == null) {\n      properties.remove(name);\n    } else {"
            },
            {
              "step": 2,
              "variableName": "value",
              "startLine": 959,
              "startColumn": 36,
              "endLine": 959,
              "endColumn": 41,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "    if (value == null) {\n      properties.remove(name);\n    } else {\n      properties.setProperty(name, value);\n    }\n  }\n"
            },
            {
              "step": 3,
              "variableName": "properties",
              "startLine": 959,
              "startColumn": 7,
              "endLine": 959,
              "endColumn": 17,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (value == null) {\n      properties.remove(name);\n    } else {\n      properties.setProperty(name, value);\n    }\n  }\n"
            },
            {
              "step": 4,
              "variableName": "Properties properties",
              "startLine": 955,
              "startColumn": 19,
              "endLine": 955,
              "endColumn": 40,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @param properties properties in which the value should be set\n   * @param value value for this connection parameter\n   */\n  public void set(Properties properties, @Nullable String value) {\n    if (value == null) {\n      properties.remove(name);\n    } else {"
            },
            {
              "step": 5,
              "variableName": "result",
              "startLine": 682,
              "startColumn": 33,
              "endLine": 682,
              "endColumn": 39,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "          PGProperty.PG_HOST.getOrDefault(result), PGProperty.PG_PORT.getOrDefault(result), PGProperty.PG_DBNAME.getOrDefault(result), PGProperty.USER.getOrDefault(result)\n      );\n      if (password != null && !password.isEmpty()) {\n        PGProperty.PASSWORD.set(result, password);\n      }\n    }\n    //"
            },
            {
              "step": 6,
              "variableName": "result",
              "startLine": 686,
              "startColumn": 12,
              "endLine": 686,
              "endColumn": 18,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      }\n    }\n    //\n    return result;\n  }\n\n  // decode url, on failure log and return null"
            },
            {
              "step": 7,
              "variableName": "parseURL(url, props)",
              "startLine": 279,
              "startColumn": 18,
              "endLine": 279,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      }\n    }\n    // parse URL and add more properties\n    if ((props = parseURL(url, props)) == null) {\n      throw new PSQLException(\n          GT.tr(\"Unable to parse URL {0}\", url),\n          PSQLState.UNEXPECTED_ERROR);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 296,
              "startColumn": 30,
              "endLine": 296,
              "endColumn": 35,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      // the connection; at that point we clean up the connection if\n      // we managed to establish one after all. See ConnectThread for\n      // more details.\n      long timeout = timeout(props);\n      if (timeout <= 0) {\n        return makeConnection(url, props);\n      }"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "startLine": 716,
              "startColumn": 31,
              "endLine": 716,
              "endColumn": 47,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "  /**\n   * @return the timeout from the URL, in milliseconds\n   */\n  private static long timeout(Properties props) {\n    String timeout = PGProperty.LOGIN_TIMEOUT.getOrDefault(props);\n    if (timeout != null) {\n      try {"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 717,
              "startColumn": 60,
              "endLine": 717,
              "endColumn": 65,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @return the timeout from the URL, in milliseconds\n   */\n  private static long timeout(Properties props) {\n    String timeout = PGProperty.LOGIN_TIMEOUT.getOrDefault(props);\n    if (timeout != null) {\n      try {\n        return (long) (Float.parseFloat(timeout) * 1000);"
            },
            {
              "step": 11,
              "variableName": "Properties properties",
              "startLine": 923,
              "startColumn": 40,
              "endLine": 923,
              "endColumn": 61,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @param properties properties to take actual value from\n   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n"
            },
            {
              "step": 12,
              "variableName": "properties",
              "startLine": 924,
              "startColumn": 12,
              "endLine": 924,
              "endColumn": 22,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n\n  /**"
            },
            {
              "step": 13,
              "variableName": "getProperty",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "  }\n\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;"
            },
            {
              "step": 14,
              "variableName": "getRawPropertyValue(key)",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 44,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;\n    }"
            },
            {
              "step": 15,
              "variableName": "getRawPropertyValue",
              "startLine": 64,
              "startColumn": 27,
              "endLine": 64,
              "endColumn": 46,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "   * @param key property name\n   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;"
            },
            {
              "step": 16,
              "variableName": "super",
              "startLine": 65,
              "startColumn": 20,
              "endLine": 65,
              "endColumn": 25,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }"
            },
            {
              "step": 17,
              "variableName": "super.getProperty(key)",
              "startLine": 65,
              "startColumn": 20,
              "endLine": 65,
              "endColumn": 42,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }"
            },
            {
              "step": 18,
              "variableName": "value",
              "startLine": 67,
              "startColumn": 14,
              "endLine": 67,
              "endColumn": 19,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }\n    for (Properties properties : defaults) {\n      value = properties.getProperty(key);"
            },
            {
              "step": 19,
              "variableName": "getRawPropertyValue(key)",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 44,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;\n    }"
            },
            {
              "step": 20,
              "variableName": "value",
              "startLine": 56,
              "startColumn": 30,
              "endLine": 56,
              "endColumn": 35,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    if (value == null) {\n      value = defaultValue;\n    }\n    return replaceProperties(value);\n  }\n\n  /**"
            },
            {
              "step": 21,
              "variableName": "@PolyNull String value",
              "startLine": 78,
              "startColumn": 46,
              "endLine": 78,
              "endColumn": 68,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    return null;\n  }\n\n  private @PolyNull String replaceProperties(@PolyNull String value) {\n    if (value == null) {\n      return null;\n    }"
            },
            {
              "step": 22,
              "variableName": "value",
              "startLine": 96,
              "startColumn": 14,
              "endLine": 96,
              "endColumn": 19,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "      matcher.appendReplacement(sb, Matcher.quoteReplacement(propValue));\n    }\n    if (sb == null) {\n      return value;\n    }\n    matcher.appendTail(sb);\n    return sb.toString();"
            },
            {
              "step": 23,
              "variableName": "replaceProperties(value)",
              "startLine": 56,
              "startColumn": 12,
              "endLine": 56,
              "endColumn": 36,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    if (value == null) {\n      value = defaultValue;\n    }\n    return replaceProperties(value);\n  }\n\n  /**"
            },
            {
              "step": 24,
              "variableName": "properties.getProperty(name, defaultValue)",
              "startLine": 924,
              "startColumn": 12,
              "endLine": 924,
              "endColumn": 54,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n\n  /**"
            },
            {
              "step": 25,
              "variableName": "PGProperty.LOGIN_TIMEOUT.getOrDefault(props)",
              "startLine": 717,
              "startColumn": 22,
              "endLine": 717,
              "endColumn": 66,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "String",
              "code": "   * @return the timeout from the URL, in milliseconds\n   */\n  private static long timeout(Properties props) {\n    String timeout = PGProperty.LOGIN_TIMEOUT.getOrDefault(props);\n    if (timeout != null) {\n      try {\n        return (long) (Float.parseFloat(timeout) * 1000);"
            },
            {
              "step": 26,
              "variableName": "timeout",
              "startLine": 722,
              "startColumn": 77,
              "endLine": 722,
              "endColumn": 84,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "",
              "code": "      try {\n        return (long) (Float.parseFloat(timeout) * 1000);\n      } catch (NumberFormatException e) {\n        LOGGER.log(Level.WARNING, \"Couldn't parse loginTimeout value: {0}\", timeout);\n      }\n    }\n    return (long) DriverManager.getLoginTimeout() * 1000;"
            }
          ],
          "label": "No",
          "probability": 0.537118673324585
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "ConnectionFactoryImpl.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 682,
              "startColumn": 41,
              "endLine": 682,
              "endColumn": 49,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "String",
              "code": "          PGProperty.PG_HOST.getOrDefault(result), PGProperty.PG_PORT.getOrDefault(result), PGProperty.PG_DBNAME.getOrDefault(result), PGProperty.USER.getOrDefault(result)\n      );\n      if (password != null && !password.isEmpty()) {\n        PGProperty.PASSWORD.set(result, password);\n      }\n    }\n    //"
            },
            {
              "step": 1,
              "variableName": "@Nullable String value",
              "startLine": 955,
              "startColumn": 42,
              "endLine": 955,
              "endColumn": 64,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "   * @param properties properties in which the value should be set\n   * @param value value for this connection parameter\n   */\n  public void set(Properties properties, @Nullable String value) {\n    if (value == null) {\n      properties.remove(name);\n    } else {"
            },
            {
              "step": 2,
              "variableName": "value",
              "startLine": 959,
              "startColumn": 36,
              "endLine": 959,
              "endColumn": 41,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "    if (value == null) {\n      properties.remove(name);\n    } else {\n      properties.setProperty(name, value);\n    }\n  }\n"
            },
            {
              "step": 3,
              "variableName": "properties",
              "startLine": 959,
              "startColumn": 7,
              "endLine": 959,
              "endColumn": 17,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (value == null) {\n      properties.remove(name);\n    } else {\n      properties.setProperty(name, value);\n    }\n  }\n"
            },
            {
              "step": 4,
              "variableName": "Properties properties",
              "startLine": 955,
              "startColumn": 19,
              "endLine": 955,
              "endColumn": 40,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @param properties properties in which the value should be set\n   * @param value value for this connection parameter\n   */\n  public void set(Properties properties, @Nullable String value) {\n    if (value == null) {\n      properties.remove(name);\n    } else {"
            },
            {
              "step": 5,
              "variableName": "result",
              "startLine": 682,
              "startColumn": 33,
              "endLine": 682,
              "endColumn": 39,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "          PGProperty.PG_HOST.getOrDefault(result), PGProperty.PG_PORT.getOrDefault(result), PGProperty.PG_DBNAME.getOrDefault(result), PGProperty.USER.getOrDefault(result)\n      );\n      if (password != null && !password.isEmpty()) {\n        PGProperty.PASSWORD.set(result, password);\n      }\n    }\n    //"
            },
            {
              "step": 6,
              "variableName": "result",
              "startLine": 686,
              "startColumn": 12,
              "endLine": 686,
              "endColumn": 18,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      }\n    }\n    //\n    return result;\n  }\n\n  // decode url, on failure log and return null"
            },
            {
              "step": 7,
              "variableName": "parseURL(url, props)",
              "startLine": 279,
              "startColumn": 18,
              "endLine": 279,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      }\n    }\n    // parse URL and add more properties\n    if ((props = parseURL(url, props)) == null) {\n      throw new PSQLException(\n          GT.tr(\"Unable to parse URL {0}\", url),\n          PSQLState.UNEXPECTED_ERROR);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 36,
              "endLine": 298,
              "endColumn": 41,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      // more details.\n      long timeout = timeout(props);\n      if (timeout <= 0) {\n        return makeConnection(url, props);\n      }\n\n      ConnectThread ct = new ConnectThread(url, props);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "startLine": 445,
              "startColumn": 56,
              "endLine": 445,
              "endColumn": 72,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @return a new connection\n   * @throws SQLException if the connection could not be made\n   */\n  private static Connection makeConnection(String url, Properties props) throws SQLException {\n    return new PgConnection(hostSpecs(props), props, url);\n  }\n"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 446,
              "startColumn": 47,
              "endLine": 446,
              "endColumn": 52,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @throws SQLException if the connection could not be made\n   */\n  private static Connection makeConnection(String url, Properties props) throws SQLException {\n    return new PgConnection(hostSpecs(props), props, url);\n  }\n\n  /**"
            },
            {
              "step": 11,
              "variableName": "Properties info",
              "startLine": 256,
              "startColumn": 23,
              "endLine": 256,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbc/PgConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "  //\n  @SuppressWarnings({\"method.invocation\"})\n  public PgConnection(HostSpec[] hostSpecs,\n                      Properties info,\n                      String url) throws SQLException {\n    // Print out the driver version number\n    LOGGER.log(Level.FINE, DriverInfo.DRIVER_FULL_NAME);"
            },
            {
              "step": 12,
              "variableName": "info",
              "startLine": 273,
              "startColumn": 70,
              "endLine": 273,
              "endColumn": 74,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbc/PgConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    // Now make the initial connection and set up local state\n    this.queryExecutor = ConnectionFactory.openConnection(hostSpecs, info);\n\n    // WARNING for unsupported servers (9.0 and lower are not supported)\n    if (LOGGER.isLoggable(Level.WARNING) && !haveMinimumServerVersion(ServerVersion.v9_1)) {"
            },
            {
              "step": 13,
              "variableName": "Properties info",
              "startLine": 49,
              "startColumn": 7,
              "endLine": 49,
              "endColumn": 22,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/ConnectionFactory.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @throws SQLException if the connection could not be established.\n   */\n  public static QueryExecutor openConnection(HostSpec[] hostSpecs,\n      Properties info) throws SQLException {\n    String protoName = PGProperty.PROTOCOL_VERSION.getOrDefault(info);\n\n    if (protoName == null || protoName.isEmpty() || \"3\".equals(protoName)) {"
            },
            {
              "step": 14,
              "variableName": "info",
              "startLine": 55,
              "startColumn": 22,
              "endLine": 55,
              "endColumn": 26,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/ConnectionFactory.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (protoName == null || protoName.isEmpty() || \"3\".equals(protoName)) {\n      ConnectionFactory connectionFactory = new ConnectionFactoryImpl();\n      QueryExecutor queryExecutor = connectionFactory.openConnectionImpl(\n          hostSpecs, info);\n      if (queryExecutor != null) {\n        return queryExecutor;\n      }"
            },
            {
              "step": 15,
              "variableName": "Properties info",
              "startLine": 223,
              "startColumn": 65,
              "endLine": 223,
              "endColumn": 80,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "  }\n\n  @Override\n  public QueryExecutor openConnectionImpl(HostSpec[] hostSpecs, Properties info) throws SQLException {\n    SslMode sslMode = SslMode.of(info);\n    GSSEncMode gssEncMode = GSSEncMode.of(info);\n"
            },
            {
              "step": 16,
              "variableName": "info",
              "startLine": 268,
              "startColumn": 34,
              "endLine": 268,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "      PGStream newStream = null;\n      try {\n        try {\n          newStream = tryConnect(info, socketFactory, hostSpec, sslMode, gssEncMode);\n        } catch (SQLException e) {\n          if (sslMode == SslMode.PREFER\n              && PSQLState.INVALID_AUTHORIZATION_SPECIFICATION.getState().equals(e.getSQLState())) {"
            },
            {
              "step": 17,
              "variableName": "Properties info",
              "startLine": 124,
              "startColumn": 31,
              "endLine": 124,
              "endColumn": 46,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n  }\n\n  private PGStream tryConnect(Properties info, SocketFactory socketFactory, HostSpec hostSpec,\n      SslMode sslMode, GSSEncMode gssEncMode)\n      throws SQLException, IOException {\n    int connectTimeout = PGProperty.CONNECT_TIMEOUT.getInt(info) * 1000;"
            },
            {
              "step": 18,
              "variableName": "info",
              "startLine": 213,
              "startColumn": 61,
              "endLine": 213,
              "endColumn": 65,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "      sendStartupPacket(newStream, paramList);\n\n      // Do authentication (until AuthenticationOk).\n      doAuthentication(newStream, hostSpec.getHost(), user, info);\n\n      return newStream;\n    } catch (Exception e) {"
            },
            {
              "step": 19,
              "variableName": "Properties info",
              "startLine": 677,
              "startColumn": 78,
              "endLine": 677,
              "endColumn": 93,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "    pgStream.flush();\n  }\n\n  private void doAuthentication(PGStream pgStream, String host, String user, Properties info) throws IOException, SQLException {\n    // Now get the response from the backend, either an error message\n    // or an authentication request\n"
            },
            {
              "step": 20,
              "variableName": "info",
              "startLine": 780,
              "startColumn": 71,
              "endLine": 780,
              "endColumn": 75,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "                 * GSSAPI and the other end isn't using Kerberos for SSPI then authentication will\n                 * fail.\n                 */\n                final String gsslib = PGProperty.GSS_LIB.getOrDefault(info);\n                final boolean usespnego = PGProperty.USE_SPNEGO.getBoolean(info);\n\n                boolean useSSPI = false;"
            },
            {
              "step": 21,
              "variableName": "Properties properties",
              "startLine": 923,
              "startColumn": 40,
              "endLine": 923,
              "endColumn": 61,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @param properties properties to take actual value from\n   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n"
            },
            {
              "step": 22,
              "variableName": "properties",
              "startLine": 924,
              "startColumn": 12,
              "endLine": 924,
              "endColumn": 22,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n\n  /**"
            },
            {
              "step": 23,
              "variableName": "getProperty",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "  }\n\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;"
            },
            {
              "step": 24,
              "variableName": "getRawPropertyValue(key)",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 44,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;\n    }"
            },
            {
              "step": 25,
              "variableName": "getRawPropertyValue",
              "startLine": 64,
              "startColumn": 27,
              "endLine": 64,
              "endColumn": 46,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "   * @param key property name\n   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;"
            },
            {
              "step": 26,
              "variableName": "super",
              "startLine": 65,
              "startColumn": 20,
              "endLine": 65,
              "endColumn": 25,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }"
            },
            {
              "step": 27,
              "variableName": "super.getProperty(key)",
              "startLine": 65,
              "startColumn": 20,
              "endLine": 65,
              "endColumn": 42,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }"
            },
            {
              "step": 28,
              "variableName": "value",
              "startLine": 67,
              "startColumn": 14,
              "endLine": 67,
              "endColumn": 19,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }\n    for (Properties properties : defaults) {\n      value = properties.getProperty(key);"
            },
            {
              "step": 29,
              "variableName": "getRawPropertyValue(key)",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 44,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;\n    }"
            },
            {
              "step": 30,
              "variableName": "value",
              "startLine": 56,
              "startColumn": 30,
              "endLine": 56,
              "endColumn": 35,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    if (value == null) {\n      value = defaultValue;\n    }\n    return replaceProperties(value);\n  }\n\n  /**"
            },
            {
              "step": 31,
              "variableName": "@PolyNull String value",
              "startLine": 78,
              "startColumn": 46,
              "endLine": 78,
              "endColumn": 68,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    return null;\n  }\n\n  private @PolyNull String replaceProperties(@PolyNull String value) {\n    if (value == null) {\n      return null;\n    }"
            },
            {
              "step": 32,
              "variableName": "value",
              "startLine": 96,
              "startColumn": 14,
              "endLine": 96,
              "endColumn": 19,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "      matcher.appendReplacement(sb, Matcher.quoteReplacement(propValue));\n    }\n    if (sb == null) {\n      return value;\n    }\n    matcher.appendTail(sb);\n    return sb.toString();"
            },
            {
              "step": 33,
              "variableName": "replaceProperties(value)",
              "startLine": 56,
              "startColumn": 12,
              "endLine": 56,
              "endColumn": 36,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    if (value == null) {\n      value = defaultValue;\n    }\n    return replaceProperties(value);\n  }\n\n  /**"
            },
            {
              "step": 34,
              "variableName": "properties.getProperty(name, defaultValue)",
              "startLine": 924,
              "startColumn": 12,
              "endLine": 924,
              "endColumn": 54,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n\n  /**"
            },
            {
              "step": 35,
              "variableName": "PGProperty.GSS_LIB.getOrDefault(info)",
              "startLine": 780,
              "startColumn": 39,
              "endLine": 780,
              "endColumn": 76,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "String",
              "code": "                 * GSSAPI and the other end isn't using Kerberos for SSPI then authentication will\n                 * fail.\n                 */\n                final String gsslib = PGProperty.GSS_LIB.getOrDefault(info);\n                final boolean usespnego = PGProperty.USE_SPNEGO.getBoolean(info);\n\n                boolean useSSPI = false;"
            },
            {
              "step": 36,
              "variableName": "gsslib",
              "startLine": 816,
              "startColumn": 123,
              "endLine": 816,
              "endColumn": 129,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "String",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            },
            {
              "step": 37,
              "variableName": "new Object[]{useSSPI, gsslib}",
              "startLine": 816,
              "startColumn": 101,
              "endLine": 816,
              "endColumn": 130,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Object[] [[]] : String",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            },
            {
              "step": 38,
              "variableName": "new Object[]{useSSPI, gsslib}",
              "startLine": 816,
              "startColumn": 101,
              "endLine": 816,
              "endColumn": 130,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            }
          ],
          "label": "No",
          "probability": 0.24140380322933197
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 682,
              "startColumn": 41,
              "endLine": 682,
              "endColumn": 49,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "String",
              "code": "          PGProperty.PG_HOST.getOrDefault(result), PGProperty.PG_PORT.getOrDefault(result), PGProperty.PG_DBNAME.getOrDefault(result), PGProperty.USER.getOrDefault(result)\n      );\n      if (password != null && !password.isEmpty()) {\n        PGProperty.PASSWORD.set(result, password);\n      }\n    }\n    //"
            },
            {
              "step": 1,
              "variableName": "@Nullable String value",
              "startLine": 955,
              "startColumn": 42,
              "endLine": 955,
              "endColumn": 64,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "   * @param properties properties in which the value should be set\n   * @param value value for this connection parameter\n   */\n  public void set(Properties properties, @Nullable String value) {\n    if (value == null) {\n      properties.remove(name);\n    } else {"
            },
            {
              "step": 2,
              "variableName": "value",
              "startLine": 959,
              "startColumn": 36,
              "endLine": 959,
              "endColumn": 41,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "    if (value == null) {\n      properties.remove(name);\n    } else {\n      properties.setProperty(name, value);\n    }\n  }\n"
            },
            {
              "step": 3,
              "variableName": "properties",
              "startLine": 959,
              "startColumn": 7,
              "endLine": 959,
              "endColumn": 17,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (value == null) {\n      properties.remove(name);\n    } else {\n      properties.setProperty(name, value);\n    }\n  }\n"
            },
            {
              "step": 4,
              "variableName": "Properties properties",
              "startLine": 955,
              "startColumn": 19,
              "endLine": 955,
              "endColumn": 40,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @param properties properties in which the value should be set\n   * @param value value for this connection parameter\n   */\n  public void set(Properties properties, @Nullable String value) {\n    if (value == null) {\n      properties.remove(name);\n    } else {"
            },
            {
              "step": 5,
              "variableName": "result",
              "startLine": 682,
              "startColumn": 33,
              "endLine": 682,
              "endColumn": 39,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "          PGProperty.PG_HOST.getOrDefault(result), PGProperty.PG_PORT.getOrDefault(result), PGProperty.PG_DBNAME.getOrDefault(result), PGProperty.USER.getOrDefault(result)\n      );\n      if (password != null && !password.isEmpty()) {\n        PGProperty.PASSWORD.set(result, password);\n      }\n    }\n    //"
            },
            {
              "step": 6,
              "variableName": "result",
              "startLine": 686,
              "startColumn": 12,
              "endLine": 686,
              "endColumn": 18,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      }\n    }\n    //\n    return result;\n  }\n\n  // decode url, on failure log and return null"
            },
            {
              "step": 7,
              "variableName": "parseURL(url, props)",
              "startLine": 279,
              "startColumn": 18,
              "endLine": 279,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      }\n    }\n    // parse URL and add more properties\n    if ((props = parseURL(url, props)) == null) {\n      throw new PSQLException(\n          GT.tr(\"Unable to parse URL {0}\", url),\n          PSQLState.UNEXPECTED_ERROR);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 36,
              "endLine": 298,
              "endColumn": 41,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      // more details.\n      long timeout = timeout(props);\n      if (timeout <= 0) {\n        return makeConnection(url, props);\n      }\n\n      ConnectThread ct = new ConnectThread(url, props);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "startLine": 445,
              "startColumn": 56,
              "endLine": 445,
              "endColumn": 72,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @return a new connection\n   * @throws SQLException if the connection could not be made\n   */\n  private static Connection makeConnection(String url, Properties props) throws SQLException {\n    return new PgConnection(hostSpecs(props), props, url);\n  }\n"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 446,
              "startColumn": 47,
              "endLine": 446,
              "endColumn": 52,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @throws SQLException if the connection could not be made\n   */\n  private static Connection makeConnection(String url, Properties props) throws SQLException {\n    return new PgConnection(hostSpecs(props), props, url);\n  }\n\n  /**"
            },
            {
              "step": 11,
              "variableName": "Properties info",
              "startLine": 256,
              "startColumn": 23,
              "endLine": 256,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbc/PgConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "  //\n  @SuppressWarnings({\"method.invocation\"})\n  public PgConnection(HostSpec[] hostSpecs,\n                      Properties info,\n                      String url) throws SQLException {\n    // Print out the driver version number\n    LOGGER.log(Level.FINE, DriverInfo.DRIVER_FULL_NAME);"
            },
            {
              "step": 12,
              "variableName": "info",
              "startLine": 273,
              "startColumn": 70,
              "endLine": 273,
              "endColumn": 74,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbc/PgConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    // Now make the initial connection and set up local state\n    this.queryExecutor = ConnectionFactory.openConnection(hostSpecs, info);\n\n    // WARNING for unsupported servers (9.0 and lower are not supported)\n    if (LOGGER.isLoggable(Level.WARNING) && !haveMinimumServerVersion(ServerVersion.v9_1)) {"
            },
            {
              "step": 13,
              "variableName": "Properties info",
              "startLine": 49,
              "startColumn": 7,
              "endLine": 49,
              "endColumn": 22,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/ConnectionFactory.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @throws SQLException if the connection could not be established.\n   */\n  public static QueryExecutor openConnection(HostSpec[] hostSpecs,\n      Properties info) throws SQLException {\n    String protoName = PGProperty.PROTOCOL_VERSION.getOrDefault(info);\n\n    if (protoName == null || protoName.isEmpty() || \"3\".equals(protoName)) {"
            },
            {
              "step": 14,
              "variableName": "info",
              "startLine": 55,
              "startColumn": 22,
              "endLine": 55,
              "endColumn": 26,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/ConnectionFactory.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (protoName == null || protoName.isEmpty() || \"3\".equals(protoName)) {\n      ConnectionFactory connectionFactory = new ConnectionFactoryImpl();\n      QueryExecutor queryExecutor = connectionFactory.openConnectionImpl(\n          hostSpecs, info);\n      if (queryExecutor != null) {\n        return queryExecutor;\n      }"
            },
            {
              "step": 15,
              "variableName": "Properties info",
              "startLine": 223,
              "startColumn": 65,
              "endLine": 223,
              "endColumn": 80,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "  }\n\n  @Override\n  public QueryExecutor openConnectionImpl(HostSpec[] hostSpecs, Properties info) throws SQLException {\n    SslMode sslMode = SslMode.of(info);\n    GSSEncMode gssEncMode = GSSEncMode.of(info);\n"
            },
            {
              "step": 16,
              "variableName": "info",
              "startLine": 277,
              "startColumn": 30,
              "endLine": 277,
              "endColumn": 34,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "            Throwable ex = null;\n            try {\n              newStream =\n                  tryConnect(info, socketFactory, hostSpec, SslMode.DISABLE, gssEncMode);\n              LOGGER.log(Level.FINE, \"Downgraded to non-encrypted connection for host {0}\",\n                  hostSpec);\n            } catch (SQLException | IOException ee) {"
            },
            {
              "step": 17,
              "variableName": "Properties info",
              "startLine": 124,
              "startColumn": 31,
              "endLine": 124,
              "endColumn": 46,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n  }\n\n  private PGStream tryConnect(Properties info, SocketFactory socketFactory, HostSpec hostSpec,\n      SslMode sslMode, GSSEncMode gssEncMode)\n      throws SQLException, IOException {\n    int connectTimeout = PGProperty.CONNECT_TIMEOUT.getInt(info) * 1000;"
            },
            {
              "step": 18,
              "variableName": "info",
              "startLine": 213,
              "startColumn": 61,
              "endLine": 213,
              "endColumn": 65,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "      sendStartupPacket(newStream, paramList);\n\n      // Do authentication (until AuthenticationOk).\n      doAuthentication(newStream, hostSpec.getHost(), user, info);\n\n      return newStream;\n    } catch (Exception e) {"
            },
            {
              "step": 19,
              "variableName": "Properties info",
              "startLine": 677,
              "startColumn": 78,
              "endLine": 677,
              "endColumn": 93,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "    pgStream.flush();\n  }\n\n  private void doAuthentication(PGStream pgStream, String host, String user, Properties info) throws IOException, SQLException {\n    // Now get the response from the backend, either an error message\n    // or an authentication request\n"
            },
            {
              "step": 20,
              "variableName": "info",
              "startLine": 780,
              "startColumn": 71,
              "endLine": 780,
              "endColumn": 75,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "                 * GSSAPI and the other end isn't using Kerberos for SSPI then authentication will\n                 * fail.\n                 */\n                final String gsslib = PGProperty.GSS_LIB.getOrDefault(info);\n                final boolean usespnego = PGProperty.USE_SPNEGO.getBoolean(info);\n\n                boolean useSSPI = false;"
            },
            {
              "step": 21,
              "variableName": "Properties properties",
              "startLine": 923,
              "startColumn": 40,
              "endLine": 923,
              "endColumn": 61,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @param properties properties to take actual value from\n   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n"
            },
            {
              "step": 22,
              "variableName": "properties",
              "startLine": 924,
              "startColumn": 12,
              "endLine": 924,
              "endColumn": 22,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n\n  /**"
            },
            {
              "step": 23,
              "variableName": "getProperty",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "  }\n\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;"
            },
            {
              "step": 24,
              "variableName": "getRawPropertyValue(key)",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 44,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;\n    }"
            },
            {
              "step": 25,
              "variableName": "getRawPropertyValue",
              "startLine": 64,
              "startColumn": 27,
              "endLine": 64,
              "endColumn": 46,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "   * @param key property name\n   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;"
            },
            {
              "step": 26,
              "variableName": "super",
              "startLine": 65,
              "startColumn": 20,
              "endLine": 65,
              "endColumn": 25,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }"
            },
            {
              "step": 27,
              "variableName": "super.getProperty(key)",
              "startLine": 65,
              "startColumn": 20,
              "endLine": 65,
              "endColumn": 42,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }"
            },
            {
              "step": 28,
              "variableName": "value",
              "startLine": 67,
              "startColumn": 14,
              "endLine": 67,
              "endColumn": 19,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }\n    for (Properties properties : defaults) {\n      value = properties.getProperty(key);"
            },
            {
              "step": 29,
              "variableName": "getRawPropertyValue(key)",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 44,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;\n    }"
            },
            {
              "step": 30,
              "variableName": "value",
              "startLine": 56,
              "startColumn": 30,
              "endLine": 56,
              "endColumn": 35,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    if (value == null) {\n      value = defaultValue;\n    }\n    return replaceProperties(value);\n  }\n\n  /**"
            },
            {
              "step": 31,
              "variableName": "@PolyNull String value",
              "startLine": 78,
              "startColumn": 46,
              "endLine": 78,
              "endColumn": 68,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    return null;\n  }\n\n  private @PolyNull String replaceProperties(@PolyNull String value) {\n    if (value == null) {\n      return null;\n    }"
            },
            {
              "step": 32,
              "variableName": "value",
              "startLine": 96,
              "startColumn": 14,
              "endLine": 96,
              "endColumn": 19,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "      matcher.appendReplacement(sb, Matcher.quoteReplacement(propValue));\n    }\n    if (sb == null) {\n      return value;\n    }\n    matcher.appendTail(sb);\n    return sb.toString();"
            },
            {
              "step": 33,
              "variableName": "replaceProperties(value)",
              "startLine": 56,
              "startColumn": 12,
              "endLine": 56,
              "endColumn": 36,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    if (value == null) {\n      value = defaultValue;\n    }\n    return replaceProperties(value);\n  }\n\n  /**"
            },
            {
              "step": 34,
              "variableName": "properties.getProperty(name, defaultValue)",
              "startLine": 924,
              "startColumn": 12,
              "endLine": 924,
              "endColumn": 54,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n\n  /**"
            },
            {
              "step": 35,
              "variableName": "PGProperty.GSS_LIB.getOrDefault(info)",
              "startLine": 780,
              "startColumn": 39,
              "endLine": 780,
              "endColumn": 76,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "String",
              "code": "                 * GSSAPI and the other end isn't using Kerberos for SSPI then authentication will\n                 * fail.\n                 */\n                final String gsslib = PGProperty.GSS_LIB.getOrDefault(info);\n                final boolean usespnego = PGProperty.USE_SPNEGO.getBoolean(info);\n\n                boolean useSSPI = false;"
            },
            {
              "step": 36,
              "variableName": "gsslib",
              "startLine": 816,
              "startColumn": 123,
              "endLine": 816,
              "endColumn": 129,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "String",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            },
            {
              "step": 37,
              "variableName": "new Object[]{useSSPI, gsslib}",
              "startLine": 816,
              "startColumn": 101,
              "endLine": 816,
              "endColumn": 130,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Object[] [[]] : String",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            },
            {
              "step": 38,
              "variableName": "new Object[]{useSSPI, gsslib}",
              "startLine": 816,
              "startColumn": 101,
              "endLine": 816,
              "endColumn": 130,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            }
          ],
          "label": "No",
          "probability": 0.24140380322933197
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 682,
              "startColumn": 41,
              "endLine": 682,
              "endColumn": 49,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "String",
              "code": "          PGProperty.PG_HOST.getOrDefault(result), PGProperty.PG_PORT.getOrDefault(result), PGProperty.PG_DBNAME.getOrDefault(result), PGProperty.USER.getOrDefault(result)\n      );\n      if (password != null && !password.isEmpty()) {\n        PGProperty.PASSWORD.set(result, password);\n      }\n    }\n    //"
            },
            {
              "step": 1,
              "variableName": "@Nullable String value",
              "startLine": 955,
              "startColumn": 42,
              "endLine": 955,
              "endColumn": 64,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "   * @param properties properties in which the value should be set\n   * @param value value for this connection parameter\n   */\n  public void set(Properties properties, @Nullable String value) {\n    if (value == null) {\n      properties.remove(name);\n    } else {"
            },
            {
              "step": 2,
              "variableName": "value",
              "startLine": 959,
              "startColumn": 36,
              "endLine": 959,
              "endColumn": 41,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "    if (value == null) {\n      properties.remove(name);\n    } else {\n      properties.setProperty(name, value);\n    }\n  }\n"
            },
            {
              "step": 3,
              "variableName": "properties",
              "startLine": 959,
              "startColumn": 7,
              "endLine": 959,
              "endColumn": 17,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (value == null) {\n      properties.remove(name);\n    } else {\n      properties.setProperty(name, value);\n    }\n  }\n"
            },
            {
              "step": 4,
              "variableName": "Properties properties",
              "startLine": 955,
              "startColumn": 19,
              "endLine": 955,
              "endColumn": 40,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @param properties properties in which the value should be set\n   * @param value value for this connection parameter\n   */\n  public void set(Properties properties, @Nullable String value) {\n    if (value == null) {\n      properties.remove(name);\n    } else {"
            },
            {
              "step": 5,
              "variableName": "result",
              "startLine": 682,
              "startColumn": 33,
              "endLine": 682,
              "endColumn": 39,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "          PGProperty.PG_HOST.getOrDefault(result), PGProperty.PG_PORT.getOrDefault(result), PGProperty.PG_DBNAME.getOrDefault(result), PGProperty.USER.getOrDefault(result)\n      );\n      if (password != null && !password.isEmpty()) {\n        PGProperty.PASSWORD.set(result, password);\n      }\n    }\n    //"
            },
            {
              "step": 6,
              "variableName": "result",
              "startLine": 686,
              "startColumn": 12,
              "endLine": 686,
              "endColumn": 18,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      }\n    }\n    //\n    return result;\n  }\n\n  // decode url, on failure log and return null"
            },
            {
              "step": 7,
              "variableName": "parseURL(url, props)",
              "startLine": 279,
              "startColumn": 18,
              "endLine": 279,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      }\n    }\n    // parse URL and add more properties\n    if ((props = parseURL(url, props)) == null) {\n      throw new PSQLException(\n          GT.tr(\"Unable to parse URL {0}\", url),\n          PSQLState.UNEXPECTED_ERROR);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 36,
              "endLine": 298,
              "endColumn": 41,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "      // more details.\n      long timeout = timeout(props);\n      if (timeout <= 0) {\n        return makeConnection(url, props);\n      }\n\n      ConnectThread ct = new ConnectThread(url, props);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "startLine": 445,
              "startColumn": 56,
              "endLine": 445,
              "endColumn": 72,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @return a new connection\n   * @throws SQLException if the connection could not be made\n   */\n  private static Connection makeConnection(String url, Properties props) throws SQLException {\n    return new PgConnection(hostSpecs(props), props, url);\n  }\n"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 446,
              "startColumn": 47,
              "endLine": 446,
              "endColumn": 52,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/Driver.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @throws SQLException if the connection could not be made\n   */\n  private static Connection makeConnection(String url, Properties props) throws SQLException {\n    return new PgConnection(hostSpecs(props), props, url);\n  }\n\n  /**"
            },
            {
              "step": 11,
              "variableName": "Properties info",
              "startLine": 256,
              "startColumn": 23,
              "endLine": 256,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbc/PgConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "  //\n  @SuppressWarnings({\"method.invocation\"})\n  public PgConnection(HostSpec[] hostSpecs,\n                      Properties info,\n                      String url) throws SQLException {\n    // Print out the driver version number\n    LOGGER.log(Level.FINE, DriverInfo.DRIVER_FULL_NAME);"
            },
            {
              "step": 12,
              "variableName": "info",
              "startLine": 273,
              "startColumn": 70,
              "endLine": 273,
              "endColumn": 74,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbc/PgConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    // Now make the initial connection and set up local state\n    this.queryExecutor = ConnectionFactory.openConnection(hostSpecs, info);\n\n    // WARNING for unsupported servers (9.0 and lower are not supported)\n    if (LOGGER.isLoggable(Level.WARNING) && !haveMinimumServerVersion(ServerVersion.v9_1)) {"
            },
            {
              "step": 13,
              "variableName": "Properties info",
              "startLine": 49,
              "startColumn": 7,
              "endLine": 49,
              "endColumn": 22,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/ConnectionFactory.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @throws SQLException if the connection could not be established.\n   */\n  public static QueryExecutor openConnection(HostSpec[] hostSpecs,\n      Properties info) throws SQLException {\n    String protoName = PGProperty.PROTOCOL_VERSION.getOrDefault(info);\n\n    if (protoName == null || protoName.isEmpty() || \"3\".equals(protoName)) {"
            },
            {
              "step": 14,
              "variableName": "info",
              "startLine": 55,
              "startColumn": 22,
              "endLine": 55,
              "endColumn": 26,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/ConnectionFactory.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (protoName == null || protoName.isEmpty() || \"3\".equals(protoName)) {\n      ConnectionFactory connectionFactory = new ConnectionFactoryImpl();\n      QueryExecutor queryExecutor = connectionFactory.openConnectionImpl(\n          hostSpecs, info);\n      if (queryExecutor != null) {\n        return queryExecutor;\n      }"
            },
            {
              "step": 15,
              "variableName": "Properties info",
              "startLine": 223,
              "startColumn": 65,
              "endLine": 223,
              "endColumn": 80,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "  }\n\n  @Override\n  public QueryExecutor openConnectionImpl(HostSpec[] hostSpecs, Properties info) throws SQLException {\n    SslMode sslMode = SslMode.of(info);\n    GSSEncMode gssEncMode = GSSEncMode.of(info);\n"
            },
            {
              "step": 16,
              "variableName": "info",
              "startLine": 297,
              "startColumn": 30,
              "endLine": 297,
              "endColumn": 34,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "            Throwable ex = null;\n            try {\n              newStream =\n                  tryConnect(info, socketFactory, hostSpec, SslMode.REQUIRE, gssEncMode);\n              LOGGER.log(Level.FINE, \"Upgraded to encrypted connection for host {0}\",\n                  hostSpec);\n            } catch (SQLException ee) {"
            },
            {
              "step": 17,
              "variableName": "Properties info",
              "startLine": 124,
              "startColumn": 31,
              "endLine": 124,
              "endColumn": 46,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n  }\n\n  private PGStream tryConnect(Properties info, SocketFactory socketFactory, HostSpec hostSpec,\n      SslMode sslMode, GSSEncMode gssEncMode)\n      throws SQLException, IOException {\n    int connectTimeout = PGProperty.CONNECT_TIMEOUT.getInt(info) * 1000;"
            },
            {
              "step": 18,
              "variableName": "info",
              "startLine": 213,
              "startColumn": 61,
              "endLine": 213,
              "endColumn": 65,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "      sendStartupPacket(newStream, paramList);\n\n      // Do authentication (until AuthenticationOk).\n      doAuthentication(newStream, hostSpec.getHost(), user, info);\n\n      return newStream;\n    } catch (Exception e) {"
            },
            {
              "step": 19,
              "variableName": "Properties info",
              "startLine": 677,
              "startColumn": 78,
              "endLine": 677,
              "endColumn": 93,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "    pgStream.flush();\n  }\n\n  private void doAuthentication(PGStream pgStream, String host, String user, Properties info) throws IOException, SQLException {\n    // Now get the response from the backend, either an error message\n    // or an authentication request\n"
            },
            {
              "step": 20,
              "variableName": "info",
              "startLine": 780,
              "startColumn": 71,
              "endLine": 780,
              "endColumn": 75,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Properties [<map.value>] : String",
              "code": "                 * GSSAPI and the other end isn't using Kerberos for SSPI then authentication will\n                 * fail.\n                 */\n                final String gsslib = PGProperty.GSS_LIB.getOrDefault(info);\n                final boolean usespnego = PGProperty.USE_SPNEGO.getBoolean(info);\n\n                boolean useSSPI = false;"
            },
            {
              "step": 21,
              "variableName": "Properties properties",
              "startLine": 923,
              "startColumn": 40,
              "endLine": 923,
              "endColumn": 61,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @param properties properties to take actual value from\n   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n"
            },
            {
              "step": 22,
              "variableName": "properties",
              "startLine": 924,
              "startColumn": 12,
              "endLine": 924,
              "endColumn": 22,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n\n  /**"
            },
            {
              "step": 23,
              "variableName": "getProperty",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 38,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "  }\n\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;"
            },
            {
              "step": 24,
              "variableName": "getRawPropertyValue(key)",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 44,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;\n    }"
            },
            {
              "step": 25,
              "variableName": "getRawPropertyValue",
              "startLine": 64,
              "startColumn": 27,
              "endLine": 64,
              "endColumn": 46,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "   * @param key property name\n   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;"
            },
            {
              "step": 26,
              "variableName": "super",
              "startLine": 65,
              "startColumn": 20,
              "endLine": 65,
              "endColumn": 25,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "ExpressionProperties [<map.value>] : String",
              "code": "   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }"
            },
            {
              "step": 27,
              "variableName": "super.getProperty(key)",
              "startLine": 65,
              "startColumn": 20,
              "endLine": 65,
              "endColumn": 42,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "   * @return raw property value\n   */\n  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }"
            },
            {
              "step": 28,
              "variableName": "value",
              "startLine": 67,
              "startColumn": 14,
              "endLine": 67,
              "endColumn": 19,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "  public @Nullable String getRawPropertyValue(String key) {\n    String value = super.getProperty(key);\n    if (value != null) {\n      return value;\n    }\n    for (Properties properties : defaults) {\n      value = properties.getProperty(key);"
            },
            {
              "step": 29,
              "variableName": "getRawPropertyValue(key)",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 44,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "\n  @Override\n  public @PolyNull String getProperty(String key, @PolyNull String defaultValue) {\n    String value = getRawPropertyValue(key);\n    if (value == null) {\n      value = defaultValue;\n    }"
            },
            {
              "step": 30,
              "variableName": "value",
              "startLine": 56,
              "startColumn": 30,
              "endLine": 56,
              "endColumn": 35,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    if (value == null) {\n      value = defaultValue;\n    }\n    return replaceProperties(value);\n  }\n\n  /**"
            },
            {
              "step": 31,
              "variableName": "@PolyNull String value",
              "startLine": 78,
              "startColumn": 46,
              "endLine": 78,
              "endColumn": 68,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    return null;\n  }\n\n  private @PolyNull String replaceProperties(@PolyNull String value) {\n    if (value == null) {\n      return null;\n    }"
            },
            {
              "step": 32,
              "variableName": "value",
              "startLine": 96,
              "startColumn": 14,
              "endLine": 96,
              "endColumn": 19,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "      matcher.appendReplacement(sb, Matcher.quoteReplacement(propValue));\n    }\n    if (sb == null) {\n      return value;\n    }\n    matcher.appendTail(sb);\n    return sb.toString();"
            },
            {
              "step": 33,
              "variableName": "replaceProperties(value)",
              "startLine": 56,
              "startColumn": 12,
              "endLine": 56,
              "endColumn": 36,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/util/ExpressionProperties.java",
              "type": "String",
              "code": "    if (value == null) {\n      value = defaultValue;\n    }\n    return replaceProperties(value);\n  }\n\n  /**"
            },
            {
              "step": 34,
              "variableName": "properties.getProperty(name, defaultValue)",
              "startLine": 924,
              "startColumn": 12,
              "endLine": 924,
              "endColumn": 54,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
              "type": "String",
              "code": "   * @return evaluated value for this connection parameter\n   */\n  public @Nullable String getOrDefault(Properties properties) {\n    return properties.getProperty(name, defaultValue);\n  }\n\n  /**"
            },
            {
              "step": 35,
              "variableName": "PGProperty.GSS_LIB.getOrDefault(info)",
              "startLine": 780,
              "startColumn": 39,
              "endLine": 780,
              "endColumn": 76,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "String",
              "code": "                 * GSSAPI and the other end isn't using Kerberos for SSPI then authentication will\n                 * fail.\n                 */\n                final String gsslib = PGProperty.GSS_LIB.getOrDefault(info);\n                final boolean usespnego = PGProperty.USE_SPNEGO.getBoolean(info);\n\n                boolean useSSPI = false;"
            },
            {
              "step": 36,
              "variableName": "gsslib",
              "startLine": 816,
              "startColumn": 123,
              "endLine": 816,
              "endColumn": 129,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "String",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            },
            {
              "step": 37,
              "variableName": "new Object[]{useSSPI, gsslib}",
              "startLine": 816,
              "startColumn": 101,
              "endLine": 816,
              "endColumn": 130,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "Object[] [[]] : String",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            },
            {
              "step": 38,
              "variableName": "new Object[]{useSSPI, gsslib}",
              "startLine": 816,
              "startColumn": 101,
              "endLine": 816,
              "endColumn": 130,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
              "type": "",
              "code": "                  }\n\n                  if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Using SSPI: {0}, gsslib={1} and SSPI support detected\", new Object[]{useSSPI, gsslib});\n                  }\n                }\n"
            }
          ],
          "label": "No",
          "probability": 0.24140380322933197
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "PgPassParser.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lineWithoutPassword",
              "startLine": 193,
              "startColumn": 37,
              "endLine": 193,
              "endColumn": 56,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbcurlresolver/PgPassParser.java",
              "type": "String",
              "code": "      result = extractPassword(line);\n      String lineWithoutPassword = fullLine.substring(0, fullLine.length() - line.length());\n      LOGGER.log(Level.FINE, \"Matching line number [{0}] with value prefix [{1}] found for input [{2}:{3}:{4}:{5}]\",\n          new Object[]{currentLine, lineWithoutPassword, hostname, port, database, user});\n    }\n    //\n    return result;"
            },
            {
              "step": 1,
              "variableName": "new Object[]{currentLine, lineWithoutPassword, hostname, port, database, user}",
              "startLine": 193,
              "startColumn": 11,
              "endLine": 193,
              "endColumn": 89,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbcurlresolver/PgPassParser.java",
              "type": "Object[] [[]] : String",
              "code": "      result = extractPassword(line);\n      String lineWithoutPassword = fullLine.substring(0, fullLine.length() - line.length());\n      LOGGER.log(Level.FINE, \"Matching line number [{0}] with value prefix [{1}] found for input [{2}:{3}:{4}:{5}]\",\n          new Object[]{currentLine, lineWithoutPassword, hostname, port, database, user});\n    }\n    //\n    return result;"
            },
            {
              "step": 2,
              "variableName": "new Object[]{currentLine, lineWithoutPassword, hostname, port, database, user}",
              "startLine": 193,
              "startColumn": 11,
              "endLine": 193,
              "endColumn": 89,
              "uri": "pgjdbc-REL42.7.5/pgjdbc/src/main/java/org/postgresql/jdbcurlresolver/PgPassParser.java",
              "type": "",
              "code": "      result = extractPassword(line);\n      String lineWithoutPassword = fullLine.substring(0, fullLine.length() - line.length());\n      LOGGER.log(Level.FINE, \"Matching line number [{0}] with value prefix [{1}] found for input [{2}:{3}:{4}:{5}]\",\n          new Object[]{currentLine, lineWithoutPassword, hostname, port, database, user});\n    }\n    //\n    return result;"
            }
          ],
          "label": "No",
          "probability": 0.3610677123069763
        }
      ]
    }
  ]
}