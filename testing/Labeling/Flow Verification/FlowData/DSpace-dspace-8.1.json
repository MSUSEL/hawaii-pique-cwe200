{
  "201": [
    {
      "resultIndex": 0,
      "fileName": "IIIFController.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "manifest",
              "startLine": 195,
              "startColumn": 13,
              "endLine": 195,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/model/generator/ManifestGenerator.java",
              "type": "Manifest",
              "code": "            manifest = new Manifest(identifier);\n        }\n        if (renderings.size() > 0) {\n            manifest.setRenderings(renderings);\n        }\n        if (logo != null) {\n            List<ImageContent> logos = new ArrayList<>();"
            },
            {
              "step": 1,
              "variableName": "manifest",
              "startLine": 236,
              "startColumn": 16,
              "endLine": 236,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/model/generator/ManifestGenerator.java",
              "type": "Manifest",
              "code": "        if (viewingHint != null) {\n            manifest.addViewingHint(viewingHint);\n        }\n        return manifest;\n    }\n\n}"
            },
            {
              "step": 2,
              "variableName": "manifestGenerator.generateResource()",
              "startLine": 116,
              "startColumn": 29,
              "endLine": 116,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/ManifestService.java",
              "type": "Manifest",
              "code": "        String hgt = configurationService.getProperty(\"iiif.canvas.default-height\");\n        guessCanvasDimension = (wid == null && hgt == null);\n        populateManifest(item, context);\n        return utils.asJson(manifestGenerator.generateResource());\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "Resource<?> resource",
              "startLine": 215,
              "startColumn": 26,
              "endLine": 215,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/utils/IIIFUtils.java",
              "type": "Manifest",
              "code": "     * @param resource to be serialized\n     * @return\n     */\n    public String asJson(Resource<?> resource) {\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.registerModule(iiifModule);\n        try {"
            },
            {
              "step": 4,
              "variableName": "mapper.writeValueAsString(resource)",
              "startLine": 219,
              "startColumn": 20,
              "endLine": 219,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/utils/IIIFUtils.java",
              "type": "String",
              "code": "        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.registerModule(iiifModule);\n        try {\n            return mapper.writeValueAsString(resource);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }"
            },
            {
              "step": 5,
              "variableName": "utils.asJson(manifestGenerator.generateResource())",
              "startLine": 116,
              "startColumn": 16,
              "endLine": 116,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/ManifestService.java",
              "type": "String",
              "code": "        String hgt = configurationService.getProperty(\"iiif.canvas.default-height\");\n        guessCanvasDimension = (wid == null && hgt == null);\n        populateManifest(item, context);\n        return utils.asJson(manifestGenerator.generateResource());\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "manifestService.getManifest(item, context)",
              "startLine": 83,
              "startColumn": 16,
              "endLine": 83,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/IIIFServiceFacade.java",
              "type": "String",
              "code": "        if (item == null || !utils.isIIIFEnabled(item)) {\n            throw new ResourceNotFoundException(\"IIIF manifest for  id \" + id + \" not found\");\n        }\n        return manifestService.getManifest(item, context);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "iiifFacade.getManifest(context, id)",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 54,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/IIIFController.java",
              "type": "",
              "code": "    @RequestMapping(method = RequestMethod.GET, value = \"/{id}/manifest\")\n    public String findOne(@PathVariable UUID id) {\n        Context context = ContextUtil.obtainCurrentRequestContext();\n        return iiifFacade.getManifest(context, id);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "manifest",
              "startLine": 200,
              "startColumn": 13,
              "endLine": 200,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/model/generator/ManifestGenerator.java",
              "type": "Manifest",
              "code": "        if (logo != null) {\n            List<ImageContent> logos = new ArrayList<>();\n            logos.add(logo);\n            manifest.setLogos(logos);\n        }\n        if (sequence != null) {\n            manifest.addSequence(sequence);"
            },
            {
              "step": 1,
              "variableName": "manifest",
              "startLine": 236,
              "startColumn": 16,
              "endLine": 236,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/model/generator/ManifestGenerator.java",
              "type": "Manifest",
              "code": "        if (viewingHint != null) {\n            manifest.addViewingHint(viewingHint);\n        }\n        return manifest;\n    }\n\n}"
            },
            {
              "step": 2,
              "variableName": "manifestGenerator.generateResource()",
              "startLine": 116,
              "startColumn": 29,
              "endLine": 116,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/ManifestService.java",
              "type": "Manifest",
              "code": "        String hgt = configurationService.getProperty(\"iiif.canvas.default-height\");\n        guessCanvasDimension = (wid == null && hgt == null);\n        populateManifest(item, context);\n        return utils.asJson(manifestGenerator.generateResource());\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "Resource<?> resource",
              "startLine": 215,
              "startColumn": 26,
              "endLine": 215,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/utils/IIIFUtils.java",
              "type": "Manifest",
              "code": "     * @param resource to be serialized\n     * @return\n     */\n    public String asJson(Resource<?> resource) {\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.registerModule(iiifModule);\n        try {"
            },
            {
              "step": 4,
              "variableName": "mapper.writeValueAsString(resource)",
              "startLine": 219,
              "startColumn": 20,
              "endLine": 219,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/utils/IIIFUtils.java",
              "type": "String",
              "code": "        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.registerModule(iiifModule);\n        try {\n            return mapper.writeValueAsString(resource);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }"
            },
            {
              "step": 5,
              "variableName": "utils.asJson(manifestGenerator.generateResource())",
              "startLine": 116,
              "startColumn": 16,
              "endLine": 116,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/ManifestService.java",
              "type": "String",
              "code": "        String hgt = configurationService.getProperty(\"iiif.canvas.default-height\");\n        guessCanvasDimension = (wid == null && hgt == null);\n        populateManifest(item, context);\n        return utils.asJson(manifestGenerator.generateResource());\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "manifestService.getManifest(item, context)",
              "startLine": 83,
              "startColumn": 16,
              "endLine": 83,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/IIIFServiceFacade.java",
              "type": "String",
              "code": "        if (item == null || !utils.isIIIFEnabled(item)) {\n            throw new ResourceNotFoundException(\"IIIF manifest for  id \" + id + \" not found\");\n        }\n        return manifestService.getManifest(item, context);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "iiifFacade.getManifest(context, id)",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 54,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/IIIFController.java",
              "type": "",
              "code": "    @RequestMapping(method = RequestMethod.GET, value = \"/{id}/manifest\")\n    public String findOne(@PathVariable UUID id) {\n        Context context = ContextUtil.obtainCurrentRequestContext();\n        return iiifFacade.getManifest(context, id);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "manifest",
              "startLine": 203,
              "startColumn": 13,
              "endLine": 203,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/model/generator/ManifestGenerator.java",
              "type": "Manifest",
              "code": "            manifest.setLogos(logos);\n        }\n        if (sequence != null) {\n            manifest.addSequence(sequence);\n        }\n        if (ranges.size() > 0) {\n            for (Range range : ranges) {"
            },
            {
              "step": 1,
              "variableName": "manifest",
              "startLine": 236,
              "startColumn": 16,
              "endLine": 236,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/model/generator/ManifestGenerator.java",
              "type": "Manifest",
              "code": "        if (viewingHint != null) {\n            manifest.addViewingHint(viewingHint);\n        }\n        return manifest;\n    }\n\n}"
            },
            {
              "step": 2,
              "variableName": "manifestGenerator.generateResource()",
              "startLine": 116,
              "startColumn": 29,
              "endLine": 116,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/ManifestService.java",
              "type": "Manifest",
              "code": "        String hgt = configurationService.getProperty(\"iiif.canvas.default-height\");\n        guessCanvasDimension = (wid == null && hgt == null);\n        populateManifest(item, context);\n        return utils.asJson(manifestGenerator.generateResource());\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "Resource<?> resource",
              "startLine": 215,
              "startColumn": 26,
              "endLine": 215,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/utils/IIIFUtils.java",
              "type": "Manifest",
              "code": "     * @param resource to be serialized\n     * @return\n     */\n    public String asJson(Resource<?> resource) {\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.registerModule(iiifModule);\n        try {"
            },
            {
              "step": 4,
              "variableName": "mapper.writeValueAsString(resource)",
              "startLine": 219,
              "startColumn": 20,
              "endLine": 219,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/utils/IIIFUtils.java",
              "type": "String",
              "code": "        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.registerModule(iiifModule);\n        try {\n            return mapper.writeValueAsString(resource);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }"
            },
            {
              "step": 5,
              "variableName": "utils.asJson(manifestGenerator.generateResource())",
              "startLine": 116,
              "startColumn": 16,
              "endLine": 116,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/ManifestService.java",
              "type": "String",
              "code": "        String hgt = configurationService.getProperty(\"iiif.canvas.default-height\");\n        guessCanvasDimension = (wid == null && hgt == null);\n        populateManifest(item, context);\n        return utils.asJson(manifestGenerator.generateResource());\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "manifestService.getManifest(item, context)",
              "startLine": 83,
              "startColumn": 16,
              "endLine": 83,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/IIIFServiceFacade.java",
              "type": "String",
              "code": "        if (item == null || !utils.isIIIFEnabled(item)) {\n            throw new ResourceNotFoundException(\"IIIF manifest for  id \" + id + \" not found\");\n        }\n        return manifestService.getManifest(item, context);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "iiifFacade.getManifest(context, id)",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 54,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/IIIFController.java",
              "type": "",
              "code": "    @RequestMapping(method = RequestMethod.GET, value = \"/{id}/manifest\")\n    public String findOne(@PathVariable UUID id) {\n        Context context = ContextUtil.obtainCurrentRequestContext();\n        return iiifFacade.getManifest(context, id);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "manifest",
              "startLine": 207,
              "startColumn": 17,
              "endLine": 207,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/model/generator/ManifestGenerator.java",
              "type": "Manifest",
              "code": "        }\n        if (ranges.size() > 0) {\n            for (Range range : ranges) {\n                manifest.addRange(range);\n            }\n        }\n        if (metadata.size() > 0) {"
            },
            {
              "step": 1,
              "variableName": "manifest",
              "startLine": 236,
              "startColumn": 16,
              "endLine": 236,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/model/generator/ManifestGenerator.java",
              "type": "Manifest",
              "code": "        if (viewingHint != null) {\n            manifest.addViewingHint(viewingHint);\n        }\n        return manifest;\n    }\n\n}"
            },
            {
              "step": 2,
              "variableName": "manifestGenerator.generateResource()",
              "startLine": 116,
              "startColumn": 29,
              "endLine": 116,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/ManifestService.java",
              "type": "Manifest",
              "code": "        String hgt = configurationService.getProperty(\"iiif.canvas.default-height\");\n        guessCanvasDimension = (wid == null && hgt == null);\n        populateManifest(item, context);\n        return utils.asJson(manifestGenerator.generateResource());\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "Resource<?> resource",
              "startLine": 215,
              "startColumn": 26,
              "endLine": 215,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/utils/IIIFUtils.java",
              "type": "Manifest",
              "code": "     * @param resource to be serialized\n     * @return\n     */\n    public String asJson(Resource<?> resource) {\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.registerModule(iiifModule);\n        try {"
            },
            {
              "step": 4,
              "variableName": "mapper.writeValueAsString(resource)",
              "startLine": 219,
              "startColumn": 20,
              "endLine": 219,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/utils/IIIFUtils.java",
              "type": "String",
              "code": "        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.registerModule(iiifModule);\n        try {\n            return mapper.writeValueAsString(resource);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }"
            },
            {
              "step": 5,
              "variableName": "utils.asJson(manifestGenerator.generateResource())",
              "startLine": 116,
              "startColumn": 16,
              "endLine": 116,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/service/ManifestService.java",
              "type": "String",
              "code": "        String hgt = configurationService.getProperty(\"iiif.canvas.default-height\");\n        guessCanvasDimension = (wid == null && hgt == null);\n        populateManifest(item, context);\n        return utils.asJson(manifestGenerator.generateResource());\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "manifestService.getManifest(item, context)",
              "startLine": 83,
              "startColumn": 16,
              "endLine": 83,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/IIIFServiceFacade.java",
              "type": "String",
              "code": "        if (item == null || !utils.isIIIFEnabled(item)) {\n            throw new ResourceNotFoundException(\"IIIF manifest for  id \" + id + \" not found\");\n        }\n        return manifestService.getManifest(item, context);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "iiifFacade.getManifest(context, id)",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 54,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-iiif/src/main/java/org/dspace/app/iiif/IIIFController.java",
              "type": "",
              "code": "    @RequestMapping(method = RequestMethod.GET, value = \"/{id}/manifest\")\n    public String findOne(@PathVariable UUID id) {\n        Context context = ContextUtil.obtainCurrentRequestContext();\n        return iiifFacade.getManifest(context, id);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "208": [
    {
      "resultIndex": 2,
      "fileName": "LDAPAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 42,
              "startColumn": 39,
              "endLine": 42,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            AtomDocumentRequest adr = new AtomDocumentRequest();\n\n            // Are there any authentication details?\n            String usernamePassword = getUsernamePassword(request);\n            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 47,
              "startColumn": 37,
              "endLine": 47,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 47,
              "startColumn": 37,
              "endLine": 47,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 69,
              "startColumn": 29,
              "endLine": 69,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 70,
              "startColumn": 25,
              "endLine": 70,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 70,
              "startColumn": 9,
              "endLine": 70,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 69,
              "startColumn": 17,
              "endLine": 69,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "adr",
              "startLine": 47,
              "startColumn": 21,
              "endLine": 47,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 19,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 20,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 21,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 22,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 23,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 24,
              "variableName": "request",
              "startLine": 181,
              "startColumn": 34,
              "endLine": 181,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "getPassword",
              "startLine": 60,
              "startColumn": 19,
              "endLine": 60,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     *\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 26,
              "variableName": "password",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "password",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "request.getPassword()",
              "startLine": 181,
              "startColumn": 34,
              "endLine": 181,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "String pw",
              "startLine": 259,
              "startColumn": 67,
              "endLine": 259,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 30,
              "variableName": "pw",
              "startLine": 288,
              "startColumn": 49,
              "endLine": 288,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 31,
              "variableName": "String pw",
              "startLine": 89,
              "startColumn": 62,
              "endLine": 89,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 32,
              "variableName": "pw",
              "startLine": 91,
              "startColumn": 26,
              "endLine": 91,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 33,
              "variableName": "String password",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,"
            },
            {
              "step": 34,
              "variableName": "password",
              "startLine": 79,
              "startColumn": 56,
              "endLine": 79,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "String password",
              "startLine": 95,
              "startColumn": 40,
              "endLine": 95,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,\n                                       boolean implicitOnly) {"
            },
            {
              "step": 36,
              "variableName": "password",
              "startLine": 107,
              "startColumn": 72,
              "endLine": 107,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 37,
              "variableName": "String password",
              "startLine": 213,
              "startColumn": 29,
              "endLine": 213,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {"
            },
            {
              "step": 38,
              "variableName": "password",
              "startLine": 265,
              "startColumn": 43,
              "endLine": 265,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                return BAD_ARGS;\n            }\n\n            if (ldap.ldapAuthenticate(dn, password, context)) {\n                context.setCurrentUser(eperson);\n                request.setAttribute(LDAP_AUTHENTICATED, true);\n"
            },
            {
              "step": 39,
              "variableName": "String password",
              "startLine": 622,
              "startColumn": 58,
              "endLine": 622,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "        /**\n         * contact the ldap server and attempt to authenticate\n         */\n        protected boolean ldapAuthenticate(String netid, String password,\n                                           Context context) {\n            if (!password.equals(\"\")) {\n"
            },
            {
              "step": 40,
              "variableName": "password",
              "startLine": 624,
              "startColumn": 18,
              "endLine": 624,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "         */\n        protected boolean ldapAuthenticate(String netid, String password,\n                                           Context context) {\n            if (!password.equals(\"\")) {\n\n                LdapContext ctx = null;\n                StartTlsResponse startTLSResponse = null;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 190,
              "startColumn": 35,
              "endLine": 190,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                      + request.getRemoteAddr());\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 195,
              "startColumn": 31,
              "endLine": 195,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 195,
              "startColumn": 31,
              "endLine": 195,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 134,
              "startColumn": 29,
              "endLine": 134,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 135,
              "startColumn": 25,
              "endLine": 135,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 135,
              "startColumn": 9,
              "endLine": 135,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 134,
              "startColumn": 17,
              "endLine": 134,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "    /**\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "d",
              "startLine": 195,
              "startColumn": 17,
              "endLine": 195,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [password] : String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [password] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 19,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [password] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 20,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [password] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 21,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [password] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 22,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [password] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 23,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [password] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 24,
              "variableName": "deposit",
              "startLine": 242,
              "startColumn": 34,
              "endLine": 242,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [password] : String",
              "code": "        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }\n"
            },
            {
              "step": 25,
              "variableName": "getPassword",
              "startLine": 127,
              "startColumn": 19,
              "endLine": 127,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "    /**\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 26,
              "variableName": "password",
              "startLine": 128,
              "startColumn": 16,
              "endLine": 128,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "password",
              "startLine": 128,
              "startColumn": 16,
              "endLine": 128,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "deposit.getPassword()",
              "startLine": 242,
              "startColumn": 34,
              "endLine": 242,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }\n"
            },
            {
              "step": 29,
              "variableName": "String pw",
              "startLine": 259,
              "startColumn": 67,
              "endLine": 259,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 30,
              "variableName": "pw",
              "startLine": 288,
              "startColumn": 49,
              "endLine": 288,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 31,
              "variableName": "String pw",
              "startLine": 89,
              "startColumn": 62,
              "endLine": 89,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 32,
              "variableName": "pw",
              "startLine": 91,
              "startColumn": 26,
              "endLine": 91,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 33,
              "variableName": "String password",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,"
            },
            {
              "step": 34,
              "variableName": "password",
              "startLine": 79,
              "startColumn": 56,
              "endLine": 79,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "String password",
              "startLine": 95,
              "startColumn": 40,
              "endLine": 95,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,\n                                       boolean implicitOnly) {"
            },
            {
              "step": 36,
              "variableName": "password",
              "startLine": 107,
              "startColumn": 72,
              "endLine": 107,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 37,
              "variableName": "String password",
              "startLine": 213,
              "startColumn": 29,
              "endLine": 213,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {"
            },
            {
              "step": 38,
              "variableName": "password",
              "startLine": 294,
              "startColumn": 43,
              "endLine": 294,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "            // the user does not already exist so try and authenticate them\n            // with ldap and create an eperson for them\n\n            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));"
            },
            {
              "step": 39,
              "variableName": "String password",
              "startLine": 622,
              "startColumn": 58,
              "endLine": 622,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "        /**\n         * contact the ldap server and attempt to authenticate\n         */\n        protected boolean ldapAuthenticate(String netid, String password,\n                                           Context context) {\n            if (!password.equals(\"\")) {\n"
            },
            {
              "step": 40,
              "variableName": "password",
              "startLine": 624,
              "startColumn": 18,
              "endLine": 624,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "         */\n        protected boolean ldapAuthenticate(String netid, String password,\n                                           Context context) {\n            if (!password.equals(\"\")) {\n\n                LdapContext ctx = null;\n                StartTlsResponse startTLSResponse = null;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 197,
              "startColumn": 33,
              "endLine": 197,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "     */\n    private String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 199,
              "startColumn": 58,
              "endLine": 199,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 199,
              "startColumn": 38,
              "endLine": 199,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 204,
              "startColumn": 54,
              "endLine": 205,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 204,
              "startColumn": 43,
              "endLine": 205,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 206,
              "startColumn": 32,
              "endLine": 206,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 120,
              "startColumn": 35,
              "endLine": 120,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        ServiceDocumentRequest sdr = new ServiceDocumentRequest();\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 125,
              "startColumn": 33,
              "endLine": 125,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 125,
              "startColumn": 33,
              "endLine": 125,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 75,
              "startColumn": 25,
              "endLine": 75,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 75,
              "startColumn": 9,
              "endLine": 75,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 74,
              "startColumn": 17,
              "endLine": 74,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "sdr",
              "startLine": 125,
              "startColumn": 17,
              "endLine": 125,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 19,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 20,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 21,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 22,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 23,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 24,
              "variableName": "request",
              "startLine": 199,
              "startColumn": 34,
              "endLine": 199,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }\n"
            },
            {
              "step": 25,
              "variableName": "getPassword",
              "startLine": 65,
              "startColumn": 19,
              "endLine": 65,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     *\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 26,
              "variableName": "password",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "password",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "request.getPassword()",
              "startLine": 199,
              "startColumn": 34,
              "endLine": 199,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }\n"
            },
            {
              "step": 29,
              "variableName": "String pw",
              "startLine": 259,
              "startColumn": 67,
              "endLine": 259,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 30,
              "variableName": "pw",
              "startLine": 288,
              "startColumn": 49,
              "endLine": 288,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 31,
              "variableName": "String pw",
              "startLine": 89,
              "startColumn": 62,
              "endLine": 89,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 32,
              "variableName": "pw",
              "startLine": 91,
              "startColumn": 26,
              "endLine": 91,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 33,
              "variableName": "String password",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,"
            },
            {
              "step": 34,
              "variableName": "password",
              "startLine": 79,
              "startColumn": 56,
              "endLine": 79,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "String password",
              "startLine": 95,
              "startColumn": 40,
              "endLine": 95,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,\n                                       boolean implicitOnly) {"
            },
            {
              "step": 36,
              "variableName": "password",
              "startLine": 107,
              "startColumn": 72,
              "endLine": 107,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 37,
              "variableName": "String password",
              "startLine": 213,
              "startColumn": 29,
              "endLine": 213,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {"
            },
            {
              "step": 38,
              "variableName": "password",
              "startLine": 265,
              "startColumn": 43,
              "endLine": 265,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                return BAD_ARGS;\n            }\n\n            if (ldap.ldapAuthenticate(dn, password, context)) {\n                context.setCurrentUser(eperson);\n                request.setAttribute(LDAP_AUTHENTICATED, true);\n"
            },
            {
              "step": 39,
              "variableName": "String password",
              "startLine": 622,
              "startColumn": 58,
              "endLine": 622,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "        /**\n         * contact the ldap server and attempt to authenticate\n         */\n        protected boolean ldapAuthenticate(String netid, String password,\n                                           Context context) {\n            if (!password.equals(\"\")) {\n"
            },
            {
              "step": 40,
              "variableName": "password",
              "startLine": 624,
              "startColumn": 18,
              "endLine": 624,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "         */\n        protected boolean ldapAuthenticate(String netid, String password,\n                                           Context context) {\n            if (!password.equals(\"\")) {\n\n                LdapContext ctx = null;\n                StartTlsResponse startTLSResponse = null;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 197,
              "startColumn": 33,
              "endLine": 197,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "     */\n    private String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 199,
              "startColumn": 58,
              "endLine": 199,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 199,
              "startColumn": 38,
              "endLine": 199,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 204,
              "startColumn": 54,
              "endLine": 205,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 204,
              "startColumn": 43,
              "endLine": 205,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 206,
              "startColumn": 32,
              "endLine": 206,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 120,
              "startColumn": 35,
              "endLine": 120,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        ServiceDocumentRequest sdr = new ServiceDocumentRequest();\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 125,
              "startColumn": 33,
              "endLine": 125,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 125,
              "startColumn": 33,
              "endLine": 125,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 75,
              "startColumn": 25,
              "endLine": 75,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 75,
              "startColumn": 9,
              "endLine": 75,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 74,
              "startColumn": 17,
              "endLine": 74,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "sdr",
              "startLine": 125,
              "startColumn": 17,
              "endLine": 125,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 19,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 20,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 21,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 22,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 23,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 24,
              "variableName": "request",
              "startLine": 199,
              "startColumn": 34,
              "endLine": 199,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }\n"
            },
            {
              "step": 25,
              "variableName": "getPassword",
              "startLine": 65,
              "startColumn": 19,
              "endLine": 65,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     *\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 26,
              "variableName": "password",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "password",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "request.getPassword()",
              "startLine": 199,
              "startColumn": 34,
              "endLine": 199,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }\n"
            },
            {
              "step": 29,
              "variableName": "String pw",
              "startLine": 259,
              "startColumn": 67,
              "endLine": 259,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 30,
              "variableName": "pw",
              "startLine": 288,
              "startColumn": 49,
              "endLine": 288,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 31,
              "variableName": "String pw",
              "startLine": 89,
              "startColumn": 62,
              "endLine": 89,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 32,
              "variableName": "pw",
              "startLine": 91,
              "startColumn": 26,
              "endLine": 91,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 33,
              "variableName": "String password",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,"
            },
            {
              "step": 34,
              "variableName": "password",
              "startLine": 79,
              "startColumn": 56,
              "endLine": 79,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "String password",
              "startLine": 95,
              "startColumn": 40,
              "endLine": 95,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,\n                                       boolean implicitOnly) {"
            },
            {
              "step": 36,
              "variableName": "password",
              "startLine": 107,
              "startColumn": 72,
              "endLine": 107,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 37,
              "variableName": "String password",
              "startLine": 213,
              "startColumn": 29,
              "endLine": 213,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {"
            },
            {
              "step": 38,
              "variableName": "password",
              "startLine": 294,
              "startColumn": 43,
              "endLine": 294,
              "endColumn": 51,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "            // the user does not already exist so try and authenticate them\n            // with ldap and create an eperson for them\n\n            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));"
            },
            {
              "step": 39,
              "variableName": "String password",
              "startLine": 622,
              "startColumn": 58,
              "endLine": 622,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "        /**\n         * contact the ldap server and attempt to authenticate\n         */\n        protected boolean ldapAuthenticate(String netid, String password,\n                                           Context context) {\n            if (!password.equals(\"\")) {\n"
            },
            {
              "step": 40,
              "variableName": "password",
              "startLine": 624,
              "startColumn": 18,
              "endLine": 624,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "         */\n        protected boolean ldapAuthenticate(String netid, String password,\n                                           Context context) {\n            if (!password.equals(\"\")) {\n\n                LdapContext ctx = null;\n                StartTlsResponse startTLSResponse = null;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "AtomDocumentServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 42,
              "startColumn": 39,
              "endLine": 42,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            AtomDocumentRequest adr = new AtomDocumentRequest();\n\n            // Are there any authentication details?\n            String usernamePassword = getUsernamePassword(request);\n            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 43,
              "startColumn": 49,
              "endLine": 43,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "",
              "code": "\n            // Are there any authentication details?\n            String usernamePassword = getUsernamePassword(request);\n            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "DepositServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 190,
              "startColumn": 35,
              "endLine": 190,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                      + request.getRemoteAddr());\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 191,
              "startColumn": 45,
              "endLine": 191,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "",
              "code": "\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "DepositServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 423,
              "startColumn": 36,
              "endLine": 423,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 423,
              "startColumn": 36,
              "endLine": 423,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64"
            },
            {
              "step": 5,
              "variableName": "basic",
              "startLine": 424,
              "startColumn": 25,
              "endLine": 424,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "",
              "code": "                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 197,
              "startColumn": 33,
              "endLine": 197,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "     */\n    private String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 199,
              "startColumn": 58,
              "endLine": 199,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 199,
              "startColumn": 38,
              "endLine": 199,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 204,
              "startColumn": 54,
              "endLine": 205,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 204,
              "startColumn": 43,
              "endLine": 205,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 206,
              "startColumn": 32,
              "endLine": 206,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 120,
              "startColumn": 35,
              "endLine": 120,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        ServiceDocumentRequest sdr = new ServiceDocumentRequest();\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 13,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 18,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 19,
              "variableName": "ServiceDocumentRequest sdr",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 72,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDAuthenticationException If the credentials are bad\n     * @throws SWORDErrorException          If something goes wrong, such as\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest sdr)\n        throws SWORDAuthenticationException, SWORDErrorException,\n        SWORDException {\n        // Authenticate the user"
            },
            {
              "step": 20,
              "variableName": "sdr",
              "startLine": 80,
              "startColumn": 27,
              "endLine": 80,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException,\n        SWORDException {\n        // Authenticate the user\n        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 21,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "sdr.getUsername()",
              "startLine": 80,
              "startColumn": 27,
              "endLine": 80,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException,\n        SWORDException {\n        // Authenticate the user\n        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 83,
              "startColumn": 16,
              "endLine": 83,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 197,
              "startColumn": 33,
              "endLine": 197,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "     */\n    private String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 199,
              "startColumn": 58,
              "endLine": 199,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 199,
              "startColumn": 38,
              "endLine": 199,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 204,
              "startColumn": 54,
              "endLine": 205,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 204,
              "startColumn": 43,
              "endLine": 205,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 206,
              "startColumn": 32,
              "endLine": 206,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 120,
              "startColumn": 35,
              "endLine": 120,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        ServiceDocumentRequest sdr = new ServiceDocumentRequest();\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 125,
              "startColumn": 33,
              "endLine": 125,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 125,
              "startColumn": 33,
              "endLine": 125,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 75,
              "startColumn": 25,
              "endLine": 75,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 75,
              "startColumn": 9,
              "endLine": 75,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 74,
              "startColumn": 17,
              "endLine": 74,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "sdr",
              "startLine": 125,
              "startColumn": 17,
              "endLine": 125,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 19,
              "variableName": "ServiceDocumentRequest sdr",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 72,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @throws SWORDAuthenticationException If the credentials are bad\n     * @throws SWORDErrorException          If something goes wrong, such as\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest sdr)\n        throws SWORDAuthenticationException, SWORDErrorException,\n        SWORDException {\n        // Authenticate the user"
            },
            {
              "step": 20,
              "variableName": "sdr",
              "startLine": 81,
              "startColumn": 27,
              "endLine": 81,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "        SWORDException {\n        // Authenticate the user\n        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 21,
              "variableName": "getPassword",
              "startLine": 65,
              "startColumn": 19,
              "endLine": 65,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     *\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "password",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "password",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "sdr.getPassword()",
              "startLine": 81,
              "startColumn": 27,
              "endLine": 81,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "        SWORDException {\n        // Authenticate the user\n        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 25,
              "variableName": "password",
              "startLine": 83,
              "startColumn": 41,
              "endLine": 83,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 197,
              "startColumn": 33,
              "endLine": 197,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "     */\n    private String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 199,
              "startColumn": 58,
              "endLine": 199,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 199,
              "startColumn": 38,
              "endLine": 199,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 204,
              "startColumn": 54,
              "endLine": 205,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 204,
              "startColumn": 43,
              "endLine": 205,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 206,
              "startColumn": 32,
              "endLine": 206,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 120,
              "startColumn": 35,
              "endLine": 120,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        ServiceDocumentRequest sdr = new ServiceDocumentRequest();\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 13,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 18,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 19,
              "variableName": "ServiceDocumentRequest sdr",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 72,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDAuthenticationException If the credentials are bad\n     * @throws SWORDErrorException          If something goes wrong, such as\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest sdr)\n        throws SWORDAuthenticationException, SWORDErrorException,\n        SWORDException {\n        // Authenticate the user"
            },
            {
              "step": 20,
              "variableName": "sdr",
              "startLine": 80,
              "startColumn": 27,
              "endLine": 80,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException,\n        SWORDException {\n        // Authenticate the user\n        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 21,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "sdr.getUsername()",
              "startLine": 80,
              "startColumn": 27,
              "endLine": 80,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException,\n        SWORDException {\n        // Authenticate the user\n        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 84,
              "startColumn": 19,
              "endLine": 84,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 197,
              "startColumn": 33,
              "endLine": 197,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "     */\n    private String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 199,
              "startColumn": 58,
              "endLine": 199,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 199,
              "startColumn": 38,
              "endLine": 199,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 204,
              "startColumn": 54,
              "endLine": 205,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 204,
              "startColumn": 43,
              "endLine": 205,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 206,
              "startColumn": 32,
              "endLine": 206,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 120,
              "startColumn": 35,
              "endLine": 120,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        ServiceDocumentRequest sdr = new ServiceDocumentRequest();\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 125,
              "startColumn": 33,
              "endLine": 125,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 125,
              "startColumn": 33,
              "endLine": 125,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 75,
              "startColumn": 25,
              "endLine": 75,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 75,
              "startColumn": 9,
              "endLine": 75,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 74,
              "startColumn": 17,
              "endLine": 74,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "sdr",
              "startLine": 125,
              "startColumn": 17,
              "endLine": 125,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 19,
              "variableName": "ServiceDocumentRequest sdr",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 72,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @throws SWORDAuthenticationException If the credentials are bad\n     * @throws SWORDErrorException          If something goes wrong, such as\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest sdr)\n        throws SWORDAuthenticationException, SWORDErrorException,\n        SWORDException {\n        // Authenticate the user"
            },
            {
              "step": 20,
              "variableName": "sdr",
              "startLine": 81,
              "startColumn": 27,
              "endLine": 81,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "        SWORDException {\n        // Authenticate the user\n        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 21,
              "variableName": "getPassword",
              "startLine": 65,
              "startColumn": 19,
              "endLine": 65,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     *\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "password",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "password",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "sdr.getPassword()",
              "startLine": 81,
              "startColumn": 27,
              "endLine": 81,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "        SWORDException {\n        // Authenticate the user\n        String username = sdr.getUsername();\n        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 25,
              "variableName": "password",
              "startLine": 84,
              "startColumn": 45,
              "endLine": 84,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String password = sdr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 190,
              "startColumn": 35,
              "endLine": 190,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                      + request.getRemoteAddr());\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 13,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 18,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 19,
              "variableName": "Deposit deposit",
              "startLine": 205,
              "startColumn": 38,
              "endLine": 205,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "Deposit [username] : String",
              "code": "        return document;\n    }\n\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();"
            },
            {
              "step": 20,
              "variableName": "deposit",
              "startLine": 208,
              "startColumn": 27,
              "endLine": 208,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "Deposit [username] : String",
              "code": "    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 21,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "deposit.getUsername()",
              "startLine": 208,
              "startColumn": 27,
              "endLine": 208,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 190,
              "startColumn": 35,
              "endLine": 190,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                      + request.getRemoteAddr());\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 195,
              "startColumn": 31,
              "endLine": 195,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 195,
              "startColumn": 31,
              "endLine": 195,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 134,
              "startColumn": 29,
              "endLine": 134,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 135,
              "startColumn": 25,
              "endLine": 135,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 135,
              "startColumn": 9,
              "endLine": 135,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 134,
              "startColumn": 17,
              "endLine": 134,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "    /**\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "d",
              "startLine": 195,
              "startColumn": 17,
              "endLine": 195,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [password] : String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [password] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 19,
              "variableName": "Deposit deposit",
              "startLine": 205,
              "startColumn": 38,
              "endLine": 205,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "Deposit [password] : String",
              "code": "        return document;\n    }\n\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();"
            },
            {
              "step": 20,
              "variableName": "deposit",
              "startLine": 209,
              "startColumn": 27,
              "endLine": 209,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "Deposit [password] : String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 21,
              "variableName": "getPassword",
              "startLine": 127,
              "startColumn": 19,
              "endLine": 127,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "    /**\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "password",
              "startLine": 128,
              "startColumn": 16,
              "endLine": 128,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "password",
              "startLine": 128,
              "startColumn": 16,
              "endLine": 128,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "deposit.getPassword()",
              "startLine": 209,
              "startColumn": 27,
              "endLine": 209,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 25,
              "variableName": "password",
              "startLine": 211,
              "startColumn": 41,
              "endLine": 211,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 190,
              "startColumn": 35,
              "endLine": 190,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                      + request.getRemoteAddr());\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 13,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 18,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 19,
              "variableName": "Deposit deposit",
              "startLine": 205,
              "startColumn": 38,
              "endLine": 205,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "Deposit [username] : String",
              "code": "        return document;\n    }\n\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();"
            },
            {
              "step": 20,
              "variableName": "deposit",
              "startLine": 208,
              "startColumn": 27,
              "endLine": 208,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "Deposit [username] : String",
              "code": "    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 21,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "deposit.getUsername()",
              "startLine": 208,
              "startColumn": 27,
              "endLine": 208,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 212,
              "startColumn": 19,
              "endLine": 212,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 190,
              "startColumn": 35,
              "endLine": 190,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                      + request.getRemoteAddr());\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 195,
              "startColumn": 31,
              "endLine": 195,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 195,
              "startColumn": 31,
              "endLine": 195,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 134,
              "startColumn": 29,
              "endLine": 134,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 135,
              "startColumn": 25,
              "endLine": 135,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 135,
              "startColumn": 9,
              "endLine": 135,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 134,
              "startColumn": 17,
              "endLine": 134,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "    /**\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "d",
              "startLine": 195,
              "startColumn": 17,
              "endLine": 195,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [password] : String",
              "code": "            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {\n            String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [password] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 19,
              "variableName": "Deposit deposit",
              "startLine": 205,
              "startColumn": 38,
              "endLine": 205,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "Deposit [password] : String",
              "code": "        return document;\n    }\n\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();"
            },
            {
              "step": 20,
              "variableName": "deposit",
              "startLine": 209,
              "startColumn": 27,
              "endLine": 209,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "Deposit [password] : String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 21,
              "variableName": "getPassword",
              "startLine": 127,
              "startColumn": 19,
              "endLine": 127,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "    /**\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "password",
              "startLine": 128,
              "startColumn": 16,
              "endLine": 128,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "password",
              "startLine": 128,
              "startColumn": 16,
              "endLine": 128,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "deposit.getPassword()",
              "startLine": 209,
              "startColumn": 27,
              "endLine": 209,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = deposit.getUsername();\n        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 25,
              "variableName": "password",
              "startLine": 212,
              "startColumn": 45,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String password = deposit.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 42,
              "startColumn": 39,
              "endLine": 42,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            AtomDocumentRequest adr = new AtomDocumentRequest();\n\n            // Are there any authentication details?\n            String usernamePassword = getUsernamePassword(request);\n            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 13,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 18,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 19,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 336,
              "startColumn": 48,
              "endLine": 336,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        return dr;\n    }\n\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();"
            },
            {
              "step": 20,
              "variableName": "adr",
              "startLine": 339,
              "startColumn": 27,
              "endLine": 339,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 21,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "adr.getUsername()",
              "startLine": 339,
              "startColumn": 27,
              "endLine": 339,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 342,
              "startColumn": 16,
              "endLine": 342,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 42,
              "startColumn": 39,
              "endLine": 42,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            AtomDocumentRequest adr = new AtomDocumentRequest();\n\n            // Are there any authentication details?\n            String usernamePassword = getUsernamePassword(request);\n            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 47,
              "startColumn": 37,
              "endLine": 47,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 47,
              "startColumn": 37,
              "endLine": 47,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 69,
              "startColumn": 29,
              "endLine": 69,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 70,
              "startColumn": 25,
              "endLine": 70,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 70,
              "startColumn": 9,
              "endLine": 70,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 69,
              "startColumn": 17,
              "endLine": 69,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "adr",
              "startLine": 47,
              "startColumn": 21,
              "endLine": 47,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 19,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 336,
              "startColumn": 48,
              "endLine": 336,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "        return dr;\n    }\n\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();"
            },
            {
              "step": 20,
              "variableName": "adr",
              "startLine": 340,
              "startColumn": 27,
              "endLine": 340,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 21,
              "variableName": "getPassword",
              "startLine": 60,
              "startColumn": 19,
              "endLine": 60,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     *\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "password",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "password",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "adr.getPassword()",
              "startLine": 340,
              "startColumn": 27,
              "endLine": 340,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 25,
              "variableName": "password",
              "startLine": 342,
              "startColumn": 41,
              "endLine": 342,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 42,
              "startColumn": 39,
              "endLine": 42,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            AtomDocumentRequest adr = new AtomDocumentRequest();\n\n            // Are there any authentication details?\n            String usernamePassword = getUsernamePassword(request);\n            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 13,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 18,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 19,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 336,
              "startColumn": 48,
              "endLine": 336,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        return dr;\n    }\n\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();"
            },
            {
              "step": 20,
              "variableName": "adr",
              "startLine": 339,
              "startColumn": 27,
              "endLine": 339,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 21,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "adr.getUsername()",
              "startLine": 339,
              "startColumn": 27,
              "endLine": 339,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 343,
              "startColumn": 19,
              "endLine": 343,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 17,
      "fileName": "DummyServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 419,
              "startColumn": 33,
              "endLine": 419,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "     */\n    protected String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 421,
              "startColumn": 58,
              "endLine": 421,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 421,
              "startColumn": 38,
              "endLine": 421,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 425,
              "startColumn": 46,
              "endLine": 425,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 427,
              "startColumn": 72,
              "endLine": 427,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 426,
              "startColumn": 54,
              "endLine": 427,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 426,
              "startColumn": 43,
              "endLine": 427,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 428,
              "startColumn": 32,
              "endLine": 428,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 42,
              "startColumn": 39,
              "endLine": 42,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            AtomDocumentRequest adr = new AtomDocumentRequest();\n\n            // Are there any authentication details?\n            String usernamePassword = getUsernamePassword(request);\n            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 47,
              "startColumn": 37,
              "endLine": 47,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 12,
              "variableName": "usernamePassword.substring(p + 1)",
              "startLine": 47,
              "startColumn": 37,
              "endLine": 47,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 13,
              "variableName": "String password",
              "startLine": 69,
              "startColumn": 29,
              "endLine": 69,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "password",
              "startLine": 70,
              "startColumn": 25,
              "endLine": 70,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "this",
              "startLine": 70,
              "startColumn": 9,
              "endLine": 70,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "setPassword",
              "startLine": 69,
              "startColumn": 17,
              "endLine": 69,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     *\n     * @param password the password to set\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "adr",
              "startLine": 47,
              "startColumn": 21,
              "endLine": 47,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {\n                String s = \"Basic realm=\\\"SWORD\\\"\";"
            },
            {
              "step": 18,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 19,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 336,
              "startColumn": 48,
              "endLine": 336,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "        return dr;\n    }\n\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();"
            },
            {
              "step": 20,
              "variableName": "adr",
              "startLine": 340,
              "startColumn": 27,
              "endLine": 340,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 21,
              "variableName": "getPassword",
              "startLine": 60,
              "startColumn": 19,
              "endLine": 60,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     *\n     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "password",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [password] : String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "password",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserPassword\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "adr.getPassword()",
              "startLine": 340,
              "startColumn": 27,
              "endLine": 340,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "String",
              "code": "        throws SWORDAuthenticationException, SWORDErrorException, SWORDException {\n        // Authenticate the user\n        String username = adr.getUsername();\n        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {"
            },
            {
              "step": 25,
              "variableName": "password",
              "startLine": 343,
              "startColumn": 45,
              "endLine": 343,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DummyServer.java",
              "type": "",
              "code": "        String password = adr.getPassword();\n        if ((username != null) && (password != null) &&\n            (((username.equals(\"\")) && (password.equals(\"\"))) ||\n                (!username.equalsIgnoreCase(password)))) {\n            // User not authenticated\n            throw new SWORDAuthenticationException(\"Bad credentials\");\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 18,
      "fileName": "ServiceDocumentServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 197,
              "startColumn": 33,
              "endLine": 197,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "     */\n    private String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 199,
              "startColumn": 58,
              "endLine": 199,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 199,
              "startColumn": 38,
              "endLine": 199,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 203,
              "startColumn": 46,
              "endLine": 203,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;"
            },
            {
              "step": 5,
              "variableName": "credentials",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 6,
              "variableName": "credentials.getBytes()",
              "startLine": 205,
              "startColumn": 72,
              "endLine": 205,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }"
            },
            {
              "step": 7,
              "variableName": "Base64",
              "startLine": 204,
              "startColumn": 54,
              "endLine": 205,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "byte[]",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 8,
              "variableName": "new String(Base64",
              "startLine": 204,
              "startColumn": 43,
              "endLine": 205,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }"
            },
            {
              "step": 9,
              "variableName": "userPass",
              "startLine": 206,
              "startColumn": 32,
              "endLine": 206,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));\n                        return userPass;\n                    }\n                }\n            }"
            },
            {
              "step": 10,
              "variableName": "getUsernamePassword(request)",
              "startLine": 120,
              "startColumn": 35,
              "endLine": 120,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        ServiceDocumentRequest sdr = new ServiceDocumentRequest();\n\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {"
            },
            {
              "step": 11,
              "variableName": "usernamePassword",
              "startLine": 121,
              "startColumn": 45,
              "endLine": 121,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "",
              "code": "\n        // Are there any authentication details?\n        String usernamePassword = getUsernamePassword(request);\n        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 19,
      "fileName": "ServiceDocumentServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "startLine": 197,
              "startColumn": 33,
              "endLine": 197,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "     */\n    private String getUsernamePassword(HttpServletRequest request) {\n        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 199,
              "startColumn": 58,
              "endLine": 199,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 2,
              "variableName": "new StringTokenizer(authHeader)",
              "startLine": 199,
              "startColumn": 38,
              "endLine": 199,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "        try {\n            String authHeader = request.getHeader(\"Authorization\");\n            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {"
            },
            {
              "step": 3,
              "variableName": "st",
              "startLine": 201,
              "startColumn": 36,
              "endLine": 201,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "StringTokenizer",
              "code": "            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64"
            },
            {
              "step": 4,
              "variableName": "st.nextToken()",
              "startLine": 201,
              "startColumn": 36,
              "endLine": 201,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "            if (authHeader != null) {\n                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64"
            },
            {
              "step": 5,
              "variableName": "basic",
              "startLine": 202,
              "startColumn": 25,
              "endLine": 202,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "",
              "code": "                StringTokenizer st = new StringTokenizer(authHeader);\n                if (st.hasMoreTokens()) {\n                    String basic = st.nextToken();\n                    if (basic.equalsIgnoreCase(\"Basic\")) {\n                        String credentials = st.nextToken();\n                        String userPass = new String(Base64\n                                                         .decodeBase64(credentials.getBytes()));"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "209": [
    {
      "resultIndex": 20,
      "fileName": "CommandLineDSpaceRunnableHandler.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceDir",
              "startLine": 232,
              "startColumn": 40,
              "endLine": 232,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    public void addItemsAtomic(Context c, List<Collection> mycollections, String sourceDir, String mapFile,\n                               boolean template) throws Exception {\n        try {\n            addItems(c, mycollections, sourceDir, mapFile, template);\n        } catch (Exception addException) {\n            logError(\"AddItems encountered an error, will try to revert. Error: \" + addException.getMessage());\n            deleteItems(c, mapFile);"
            },
            {
              "step": 1,
              "variableName": "String sourceDir",
              "startLine": 243,
              "startColumn": 26,
              "endLine": 243,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public void addItems(Context c, List<Collection> mycollections,\n                         String sourceDir, String mapFile, boolean template) throws Exception {\n        // create the mapfile\n        File outFile = null;\n        PrintWriter mapOut = null;"
            },
            {
              "step": 2,
              "variableName": "\"Error, cannot open source directory \" + sourceDir",
              "startLine": 278,
              "startColumn": 37,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 3,
              "variableName": "new Exception(\"Error, cannot open source directory \" + sourceDir)",
              "startLine": 278,
              "startColumn": 23,
              "endLine": 278,
              "endColumn": 88,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "Exception",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 4,
              "variableName": "e.getMessage()",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 5,
              "variableName": "e.getMessage() + \" Skipping.\"",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 6,
              "variableName": "String message",
              "startLine": 2438,
              "startColumn": 27,
              "endLine": 2438,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "message",
              "startLine": 2439,
              "startColumn": 18,
              "endLine": 2439,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {"
            },
            {
              "step": 8,
              "variableName": "String message",
              "startLine": 2442,
              "startColumn": 27,
              "endLine": 2442,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);"
            },
            {
              "step": 9,
              "variableName": "message",
              "startLine": 2447,
              "startColumn": 34,
              "endLine": 2447,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            if (e != null) {\n                handler.logError(message, e);\n            } else {\n                handler.logError(message);\n            }\n            return;\n        }"
            },
            {
              "step": 10,
              "variableName": "String message",
              "startLine": 85,
              "startColumn": 26,
              "endLine": 85,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void logError(String message) {\n        System.err.println(message);\n        log.error(message);\n    }"
            },
            {
              "step": 11,
              "variableName": "message",
              "startLine": 86,
              "startColumn": 28,
              "endLine": 86,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "",
              "code": "\n    @Override\n    public void logError(String message) {\n        System.err.println(message);\n        log.error(message);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceDir",
              "startLine": 275,
              "startColumn": 39,
              "endLine": 275,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            }\n\n            // open and process the source directory\n            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);"
            },
            {
              "step": 1,
              "variableName": "\"Error, cannot open source directory \" + sourceDir",
              "startLine": 278,
              "startColumn": 37,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Error, cannot open source directory \" + sourceDir)",
              "startLine": 278,
              "startColumn": 23,
              "endLine": 278,
              "endColumn": 88,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "Exception",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 4,
              "variableName": "e.getMessage() + \" Skipping.\"",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 5,
              "variableName": "String message",
              "startLine": 2438,
              "startColumn": 27,
              "endLine": 2438,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "message",
              "startLine": 2439,
              "startColumn": 18,
              "endLine": 2439,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 2442,
              "startColumn": 27,
              "endLine": 2442,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 2447,
              "startColumn": 34,
              "endLine": 2447,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            if (e != null) {\n                handler.logError(message, e);\n            } else {\n                handler.logError(message);\n            }\n            return;\n        }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 85,
              "startColumn": 26,
              "endLine": 85,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void logError(String message) {\n        System.err.println(message);\n        log.error(message);\n    }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 86,
              "startColumn": 28,
              "endLine": 86,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "",
              "code": "\n    @Override\n    public void logError(String message) {\n        System.err.println(message);\n        log.error(message);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceDir",
              "startLine": 254,
              "startColumn": 56,
              "endLine": 254,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "\n            itemFolderMap = new HashMap<>();\n\n            logDebug(\"Adding items from directory: \" + sourceDir);\n            logDebug(\"Generating mapfile: \" + mapFile);\n\n            boolean directoryFileCollections = false;"
            },
            {
              "step": 1,
              "variableName": "\"Error, cannot open source directory \" + sourceDir",
              "startLine": 278,
              "startColumn": 37,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Error, cannot open source directory \" + sourceDir)",
              "startLine": 278,
              "startColumn": 23,
              "endLine": 278,
              "endColumn": 88,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "Exception",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 4,
              "variableName": "e.getMessage() + \" Skipping.\"",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 5,
              "variableName": "String message",
              "startLine": 2438,
              "startColumn": 27,
              "endLine": 2438,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "message",
              "startLine": 2439,
              "startColumn": 18,
              "endLine": 2439,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 2442,
              "startColumn": 27,
              "endLine": 2442,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 2447,
              "startColumn": 34,
              "endLine": 2447,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            if (e != null) {\n                handler.logError(message, e);\n            } else {\n                handler.logError(message);\n            }\n            return;\n        }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 85,
              "startColumn": 26,
              "endLine": 85,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void logError(String message) {\n        System.err.println(message);\n        log.error(message);\n    }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 86,
              "startColumn": 28,
              "endLine": 86,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "",
              "code": "\n    @Override\n    public void logError(String message) {\n        System.err.println(message);\n        log.error(message);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceDir",
              "startLine": 278,
              "startColumn": 78,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 1,
              "variableName": "\"Error, cannot open source directory \" + sourceDir",
              "startLine": 278,
              "startColumn": 37,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Error, cannot open source directory \" + sourceDir)",
              "startLine": 278,
              "startColumn": 23,
              "endLine": 278,
              "endColumn": 88,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "Exception",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 4,
              "variableName": "e.getMessage() + \" Skipping.\"",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 5,
              "variableName": "String message",
              "startLine": 2438,
              "startColumn": 27,
              "endLine": 2438,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "message",
              "startLine": 2439,
              "startColumn": 18,
              "endLine": 2439,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 2442,
              "startColumn": 27,
              "endLine": 2442,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 2447,
              "startColumn": 34,
              "endLine": 2447,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            if (e != null) {\n                handler.logError(message, e);\n            } else {\n                handler.logError(message);\n            }\n            return;\n        }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 85,
              "startColumn": 26,
              "endLine": 85,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void logError(String message) {\n        System.err.println(message);\n        log.error(message);\n    }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 86,
              "startColumn": 28,
              "endLine": 86,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "",
              "code": "\n    @Override\n    public void logError(String message) {\n        System.err.println(message);\n        log.error(message);\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 21,
      "fileName": "CommandLineDSpaceRunnableHandler.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceDir",
              "startLine": 232,
              "startColumn": 40,
              "endLine": 232,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    public void addItemsAtomic(Context c, List<Collection> mycollections, String sourceDir, String mapFile,\n                               boolean template) throws Exception {\n        try {\n            addItems(c, mycollections, sourceDir, mapFile, template);\n        } catch (Exception addException) {\n            logError(\"AddItems encountered an error, will try to revert. Error: \" + addException.getMessage());\n            deleteItems(c, mapFile);"
            },
            {
              "step": 1,
              "variableName": "String sourceDir",
              "startLine": 243,
              "startColumn": 26,
              "endLine": 243,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public void addItems(Context c, List<Collection> mycollections,\n                         String sourceDir, String mapFile, boolean template) throws Exception {\n        // create the mapfile\n        File outFile = null;\n        PrintWriter mapOut = null;"
            },
            {
              "step": 2,
              "variableName": "\"Error, cannot open source directory \" + sourceDir",
              "startLine": 278,
              "startColumn": 37,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 3,
              "variableName": "new Exception(\"Error, cannot open source directory \" + sourceDir)",
              "startLine": 278,
              "startColumn": 23,
              "endLine": 278,
              "endColumn": 88,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "Exception",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 4,
              "variableName": "e.getMessage()",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 5,
              "variableName": "e.getMessage() + \" Skipping.\"",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 6,
              "variableName": "String message",
              "startLine": 2438,
              "startColumn": 27,
              "endLine": 2438,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "message",
              "startLine": 2439,
              "startColumn": 18,
              "endLine": 2439,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {"
            },
            {
              "step": 8,
              "variableName": "String message",
              "startLine": 2442,
              "startColumn": 27,
              "endLine": 2442,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);"
            },
            {
              "step": 9,
              "variableName": "message",
              "startLine": 2445,
              "startColumn": 34,
              "endLine": 2445,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);\n            } else {\n                handler.logError(message);\n            }"
            },
            {
              "step": 10,
              "variableName": "String message",
              "startLine": 91,
              "startColumn": 26,
              "endLine": 91,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void logError(String message, Throwable throwable) {\n        System.err.println(message);\n        log.error(message, throwable);\n    }"
            },
            {
              "step": 11,
              "variableName": "message",
              "startLine": 92,
              "startColumn": 28,
              "endLine": 92,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "",
              "code": "\n    @Override\n    public void logError(String message, Throwable throwable) {\n        System.err.println(message);\n        log.error(message, throwable);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceDir",
              "startLine": 275,
              "startColumn": 39,
              "endLine": 275,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            }\n\n            // open and process the source directory\n            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);"
            },
            {
              "step": 1,
              "variableName": "\"Error, cannot open source directory \" + sourceDir",
              "startLine": 278,
              "startColumn": 37,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Error, cannot open source directory \" + sourceDir)",
              "startLine": 278,
              "startColumn": 23,
              "endLine": 278,
              "endColumn": 88,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "Exception",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 4,
              "variableName": "e.getMessage() + \" Skipping.\"",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 5,
              "variableName": "String message",
              "startLine": 2438,
              "startColumn": 27,
              "endLine": 2438,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "message",
              "startLine": 2439,
              "startColumn": 18,
              "endLine": 2439,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 2442,
              "startColumn": 27,
              "endLine": 2442,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 2445,
              "startColumn": 34,
              "endLine": 2445,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);\n            } else {\n                handler.logError(message);\n            }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 91,
              "startColumn": 26,
              "endLine": 91,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void logError(String message, Throwable throwable) {\n        System.err.println(message);\n        log.error(message, throwable);\n    }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 92,
              "startColumn": 28,
              "endLine": 92,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "",
              "code": "\n    @Override\n    public void logError(String message, Throwable throwable) {\n        System.err.println(message);\n        log.error(message, throwable);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceDir",
              "startLine": 254,
              "startColumn": 56,
              "endLine": 254,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "\n            itemFolderMap = new HashMap<>();\n\n            logDebug(\"Adding items from directory: \" + sourceDir);\n            logDebug(\"Generating mapfile: \" + mapFile);\n\n            boolean directoryFileCollections = false;"
            },
            {
              "step": 1,
              "variableName": "\"Error, cannot open source directory \" + sourceDir",
              "startLine": 278,
              "startColumn": 37,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Error, cannot open source directory \" + sourceDir)",
              "startLine": 278,
              "startColumn": 23,
              "endLine": 278,
              "endColumn": 88,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "Exception",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 4,
              "variableName": "e.getMessage() + \" Skipping.\"",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 5,
              "variableName": "String message",
              "startLine": 2438,
              "startColumn": 27,
              "endLine": 2438,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "message",
              "startLine": 2439,
              "startColumn": 18,
              "endLine": 2439,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 2442,
              "startColumn": 27,
              "endLine": 2442,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 2445,
              "startColumn": 34,
              "endLine": 2445,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);\n            } else {\n                handler.logError(message);\n            }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 91,
              "startColumn": 26,
              "endLine": 91,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void logError(String message, Throwable throwable) {\n        System.err.println(message);\n        log.error(message, throwable);\n    }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 92,
              "startColumn": 28,
              "endLine": 92,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "",
              "code": "\n    @Override\n    public void logError(String message, Throwable throwable) {\n        System.err.println(message);\n        log.error(message, throwable);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceDir",
              "startLine": 278,
              "startColumn": 78,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 1,
              "variableName": "\"Error, cannot open source directory \" + sourceDir",
              "startLine": 278,
              "startColumn": 37,
              "endLine": 278,
              "endColumn": 87,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Error, cannot open source directory \" + sourceDir)",
              "startLine": 278,
              "startColumn": 23,
              "endLine": 278,
              "endColumn": 88,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "Exception",
              "code": "            File d = new java.io.File(sourceDir);\n\n            if (!d.isDirectory()) {\n                throw new Exception(\"Error, cannot open source directory \" + sourceDir);\n            }\n\n            String[] dircontents = d.list(directoryFilter);"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 4,
              "variableName": "e.getMessage() + \" Skipping.\"",
              "startLine": 306,
              "startColumn": 38,
              "endLine": 306,
              "endColumn": 67,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "                            }\n                            clist = cols;\n                        } catch (IllegalArgumentException e) {\n                            logError(e.getMessage() + \" Skipping.\");\n                            continue;\n                        }\n                    } else {"
            },
            {
              "step": 5,
              "variableName": "String message",
              "startLine": 2438,
              "startColumn": 27,
              "endLine": 2438,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "message",
              "startLine": 2439,
              "startColumn": 18,
              "endLine": 2439,
              "endColumn": 25,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    private void logError(String message) {\n        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 2442,
              "startColumn": 27,
              "endLine": 2442,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "        logError(message, null);\n    }\n\n    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 2445,
              "startColumn": 34,
              "endLine": 2445,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java",
              "type": "String",
              "code": "    private void logError(String message, Exception e) {\n        if (handler != null) {\n            if (e != null) {\n                handler.logError(message, e);\n            } else {\n                handler.logError(message);\n            }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 91,
              "startColumn": 26,
              "endLine": 91,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void logError(String message, Throwable throwable) {\n        System.err.println(message);\n        log.error(message, throwable);\n    }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 92,
              "startColumn": 28,
              "endLine": 92,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/scripts/handler/impl/CommandLineDSpaceRunnableHandler.java",
              "type": "",
              "code": "\n    @Override\n    public void logError(String message, Throwable throwable) {\n        System.err.println(message);\n        log.error(message, throwable);\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 22,
      "fileName": "SolrImportExport.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tempDataDir",
              "startLine": 303,
              "startColumn": 42,
              "endLine": 303,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            // Create a temp directory to store temporary core data\n            File tempDataDir = new File(configurationService.getProperty(\n                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());"
            },
            {
              "step": 1,
              "variableName": "tempDataDir",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 2,
              "variableName": "tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 3,
              "variableName": "\"Could not create temporary data directory \" + tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 4,
              "variableName": "new SolrImportExportException(",
              "startLine": 305,
              "startColumn": 23,
              "endLine": 306,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "SolrImportExportException",
              "code": "                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {"
            },
            {
              "step": 5,
              "variableName": "getMessage(...) : String",
              "startLine": 323,
              "startColumn": 96,
              "endLine": 324,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "                createRequest.process(adminSolr).getStatus();\n            } catch (SolrServerException e) {\n                // try to continue -- it may just be that the core already existed from a previous, failed attempt\n                System.err.println(\"Caught exception when trying to create temporary core: \" + e\n                    .getMessage() + \"; trying to recover.\");\n                e.printStackTrace(System.err);\n            }"
            },
            {
              "step": 6,
              "variableName": "\"Caught exception when ",
              "startLine": 323,
              "startColumn": 36,
              "endLine": 324,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "",
              "code": "                createRequest.process(adminSolr).getStatus();\n            } catch (SolrServerException e) {\n                // try to continue -- it may just be that the core already existed from a previous, failed attempt\n                System.err.println(\"Caught exception when trying to create temporary core: \" + e\n                    .getMessage() + \"; trying to recover.\");\n                e.printStackTrace(System.err);\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "tempDataDir",
              "startLine": 304,
              "startColumn": 41,
              "endLine": 304,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            File tempDataDir = new File(configurationService.getProperty(\n                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }"
            },
            {
              "step": 1,
              "variableName": "tempDataDir",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 2,
              "variableName": "tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 3,
              "variableName": "\"Could not create temporary data directory \" + tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 4,
              "variableName": "new SolrImportExportException(",
              "startLine": 305,
              "startColumn": 23,
              "endLine": 306,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "SolrImportExportException",
              "code": "                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {"
            },
            {
              "step": 5,
              "variableName": "getMessage(...) : String",
              "startLine": 323,
              "startColumn": 96,
              "endLine": 324,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "                createRequest.process(adminSolr).getStatus();\n            } catch (SolrServerException e) {\n                // try to continue -- it may just be that the core already existed from a previous, failed attempt\n                System.err.println(\"Caught exception when trying to create temporary core: \" + e\n                    .getMessage() + \"; trying to recover.\");\n                e.printStackTrace(System.err);\n            }"
            },
            {
              "step": 6,
              "variableName": "\"Caught exception when ",
              "startLine": 323,
              "startColumn": 36,
              "endLine": 324,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "",
              "code": "                createRequest.process(adminSolr).getStatus();\n            } catch (SolrServerException e) {\n                // try to continue -- it may just be that the core already existed from a previous, failed attempt\n                System.err.println(\"Caught exception when trying to create temporary core: \" + e\n                    .getMessage() + \"; trying to recover.\");\n                e.printStackTrace(System.err);\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "tempDataDir",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 1,
              "variableName": "tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 2,
              "variableName": "\"Could not create temporary data directory \" + tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 3,
              "variableName": "new SolrImportExportException(",
              "startLine": 305,
              "startColumn": 23,
              "endLine": 306,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "SolrImportExportException",
              "code": "                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {"
            },
            {
              "step": 4,
              "variableName": "getMessage(...) : String",
              "startLine": 323,
              "startColumn": 96,
              "endLine": 324,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "                createRequest.process(adminSolr).getStatus();\n            } catch (SolrServerException e) {\n                // try to continue -- it may just be that the core already existed from a previous, failed attempt\n                System.err.println(\"Caught exception when trying to create temporary core: \" + e\n                    .getMessage() + \"; trying to recover.\");\n                e.printStackTrace(System.err);\n            }"
            },
            {
              "step": 5,
              "variableName": "\"Caught exception when ",
              "startLine": 323,
              "startColumn": 36,
              "endLine": 324,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "",
              "code": "                createRequest.process(adminSolr).getStatus();\n            } catch (SolrServerException e) {\n                // try to continue -- it may just be that the core already existed from a previous, failed attempt\n                System.err.println(\"Caught exception when trying to create temporary core: \" + e\n                    .getMessage() + \"; trying to recover.\");\n                e.printStackTrace(System.err);\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "tempDataDir",
              "startLine": 308,
              "startColumn": 18,
              "endLine": 308,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }"
            },
            {
              "step": 1,
              "variableName": "tempDataDir",
              "startLine": 310,
              "startColumn": 66,
              "endLine": 310,
              "endColumn": 77,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n\n            try {"
            },
            {
              "step": 2,
              "variableName": "tempDataDir.getCanonicalPath()",
              "startLine": 310,
              "startColumn": 66,
              "endLine": 310,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n\n            try {"
            },
            {
              "step": 3,
              "variableName": "\"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath()",
              "startLine": 310,
              "startColumn": 21,
              "endLine": 310,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n\n            try {"
            },
            {
              "step": 4,
              "variableName": "new SolrImportExportException(",
              "startLine": 309,
              "startColumn": 23,
              "endLine": 310,
              "endColumn": 97,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "SolrImportExportException",
              "code": "                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n"
            },
            {
              "step": 5,
              "variableName": "getMessage(...) : String",
              "startLine": 323,
              "startColumn": 96,
              "endLine": 324,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "                createRequest.process(adminSolr).getStatus();\n            } catch (SolrServerException e) {\n                // try to continue -- it may just be that the core already existed from a previous, failed attempt\n                System.err.println(\"Caught exception when trying to create temporary core: \" + e\n                    .getMessage() + \"; trying to recover.\");\n                e.printStackTrace(System.err);\n            }"
            },
            {
              "step": 6,
              "variableName": "\"Caught exception when ",
              "startLine": 323,
              "startColumn": 36,
              "endLine": 324,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "",
              "code": "                createRequest.process(adminSolr).getStatus();\n            } catch (SolrServerException e) {\n                // try to continue -- it may just be that the core already existed from a previous, failed attempt\n                System.err.println(\"Caught exception when trying to create temporary core: \" + e\n                    .getMessage() + \"; trying to recover.\");\n                e.printStackTrace(System.err);\n            }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 23,
      "fileName": "SolrImportExport.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tempDataDir",
              "startLine": 303,
              "startColumn": 42,
              "endLine": 303,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            // Create a temp directory to store temporary core data\n            File tempDataDir = new File(configurationService.getProperty(\n                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());"
            },
            {
              "step": 1,
              "variableName": "tempDataDir",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 2,
              "variableName": "tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 3,
              "variableName": "\"Could not create temporary data directory \" + tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 4,
              "variableName": "new SolrImportExportException(",
              "startLine": 305,
              "startColumn": 23,
              "endLine": 306,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "SolrImportExportException",
              "code": "                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {"
            },
            {
              "step": 5,
              "variableName": "e.getMessage()",
              "startLine": 344,
              "startColumn": 62,
              "endLine": 344,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            } catch (IOException | SolrServerException | SolrImportExportException e) {\n                // we ran into some problems with the export/import -- keep going to try and restore the solr cores\n                System.err.println(\n                    \"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\");\n                e.printStackTrace(System.err);\n            }\n"
            },
            {
              "step": 6,
              "variableName": "\"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\"",
              "startLine": 344,
              "startColumn": 21,
              "endLine": 344,
              "endColumn": 117,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "",
              "code": "            } catch (IOException | SolrServerException | SolrImportExportException e) {\n                // we ran into some problems with the export/import -- keep going to try and restore the solr cores\n                System.err.println(\n                    \"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\");\n                e.printStackTrace(System.err);\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "tempDataDir",
              "startLine": 304,
              "startColumn": 41,
              "endLine": 304,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            File tempDataDir = new File(configurationService.getProperty(\n                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }"
            },
            {
              "step": 1,
              "variableName": "tempDataDir",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 2,
              "variableName": "tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 3,
              "variableName": "\"Could not create temporary data directory \" + tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 4,
              "variableName": "new SolrImportExportException(",
              "startLine": 305,
              "startColumn": 23,
              "endLine": 306,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "SolrImportExportException",
              "code": "                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {"
            },
            {
              "step": 5,
              "variableName": "e.getMessage()",
              "startLine": 344,
              "startColumn": 62,
              "endLine": 344,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            } catch (IOException | SolrServerException | SolrImportExportException e) {\n                // we ran into some problems with the export/import -- keep going to try and restore the solr cores\n                System.err.println(\n                    \"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\");\n                e.printStackTrace(System.err);\n            }\n"
            },
            {
              "step": 6,
              "variableName": "\"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\"",
              "startLine": 344,
              "startColumn": 21,
              "endLine": 344,
              "endColumn": 117,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "",
              "code": "            } catch (IOException | SolrServerException | SolrImportExportException e) {\n                // we ran into some problems with the export/import -- keep going to try and restore the solr cores\n                System.err.println(\n                    \"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\");\n                e.printStackTrace(System.err);\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "tempDataDir",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 1,
              "variableName": "tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 68,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 2,
              "variableName": "\"Could not create temporary data directory \" + tempDataDir.getCanonicalPath()",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException("
            },
            {
              "step": 3,
              "variableName": "new SolrImportExportException(",
              "startLine": 305,
              "startColumn": 23,
              "endLine": 306,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "SolrImportExportException",
              "code": "                \"dspace.dir\") + File.separator + \"temp\" + File.separator + \"solr-data\");\n            boolean createdTempDataDir = tempDataDir.mkdirs();\n            if (!createdTempDataDir && !tempDataDir.exists()) {\n                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {"
            },
            {
              "step": 4,
              "variableName": "e.getMessage()",
              "startLine": 344,
              "startColumn": 62,
              "endLine": 344,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            } catch (IOException | SolrServerException | SolrImportExportException e) {\n                // we ran into some problems with the export/import -- keep going to try and restore the solr cores\n                System.err.println(\n                    \"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\");\n                e.printStackTrace(System.err);\n            }\n"
            },
            {
              "step": 5,
              "variableName": "\"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\"",
              "startLine": 344,
              "startColumn": 21,
              "endLine": 344,
              "endColumn": 117,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "",
              "code": "            } catch (IOException | SolrServerException | SolrImportExportException e) {\n                // we ran into some problems with the export/import -- keep going to try and restore the solr cores\n                System.err.println(\n                    \"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\");\n                e.printStackTrace(System.err);\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "tempDataDir",
              "startLine": 308,
              "startColumn": 18,
              "endLine": 308,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "                throw new SolrImportExportException(\n                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }"
            },
            {
              "step": 1,
              "variableName": "tempDataDir",
              "startLine": 310,
              "startColumn": 66,
              "endLine": 310,
              "endColumn": 77,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "File",
              "code": "            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n\n            try {"
            },
            {
              "step": 2,
              "variableName": "tempDataDir.getCanonicalPath()",
              "startLine": 310,
              "startColumn": 66,
              "endLine": 310,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n\n            try {"
            },
            {
              "step": 3,
              "variableName": "\"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath()",
              "startLine": 310,
              "startColumn": 21,
              "endLine": 310,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n\n            try {"
            },
            {
              "step": 4,
              "variableName": "new SolrImportExportException(",
              "startLine": 309,
              "startColumn": 23,
              "endLine": 310,
              "endColumn": 97,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "SolrImportExportException",
              "code": "                    \"Could not create temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n            if (!tempDataDir.canWrite()) {\n                throw new SolrImportExportException(\n                    \"Can't write to temporary data directory \" + tempDataDir.getCanonicalPath());\n            }\n"
            },
            {
              "step": 5,
              "variableName": "e.getMessage()",
              "startLine": 344,
              "startColumn": 62,
              "endLine": 344,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "String",
              "code": "            } catch (IOException | SolrServerException | SolrImportExportException e) {\n                // we ran into some problems with the export/import -- keep going to try and restore the solr cores\n                System.err.println(\n                    \"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\");\n                e.printStackTrace(System.err);\n            }\n"
            },
            {
              "step": 6,
              "variableName": "\"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\"",
              "startLine": 344,
              "startColumn": 21,
              "endLine": 344,
              "endColumn": 117,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/util/SolrImportExport.java",
              "type": "",
              "code": "            } catch (IOException | SolrServerException | SolrImportExportException e) {\n                // we ran into some problems with the export/import -- keep going to try and restore the solr cores\n                System.err.println(\n                    \"Encountered problem during reindex: \" + e.getMessage() + \", will attempt to restore Solr cores\");\n                e.printStackTrace(System.err);\n            }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 24,
      "fileName": "ScriptLauncher.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 90,
              "startColumn": 21,
              "endLine": 90,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "        Document commandConfigs = ScriptLauncher.getConfig();\n        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;"
            },
            {
              "step": 1,
              "variableName": "tokens",
              "startLine": 91,
              "startColumn": 75,
              "endLine": 91,
              "endColumn": 81,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 2,
              "variableName": "tokens.toArray(new String[tokens.size()])",
              "startLine": 91,
              "startColumn": 75,
              "endLine": 91,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "String[] [[]] : Object",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 3,
              "variableName": "String[] args",
              "startLine": 164,
              "startColumn": 65,
              "endLine": 164,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "        }\n    }\n\n    protected static int runOneCommand(Document commandConfigs, String[] args) {\n        return runOneCommand(commandConfigs, args, kernelImpl);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "args",
              "startLine": 165,
              "startColumn": 46,
              "endLine": 165,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "    }\n\n    protected static int runOneCommand(Document commandConfigs, String[] args) {\n        return runOneCommand(commandConfigs, args, kernelImpl);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String[] args",
              "startLine": 174,
              "startColumn": 65,
              "endLine": 174,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "     * @param commandConfigs  Document\n     * @param args the command line arguments given\n     */\n    protected static int runOneCommand(Document commandConfigs, String[] args, DSpaceKernelImpl kernelImpl) {\n        String request = args[0];\n        Element root = commandConfigs.getRootElement();\n        List<Element> commands = root.getChildren(\"command\");"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 206,
              "startColumn": 29,
              "endLine": 206,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "                    System.err.println(\"Error in launcher.xml: Missing class name\");\n                    return 1;\n                }\n                className = args[1];\n            } else {\n                className = step.getChild(\"class\").getValue();\n            }"
            },
            {
              "step": 7,
              "variableName": "args[1]",
              "startLine": 206,
              "startColumn": 29,
              "endLine": 206,
              "endColumn": 36,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String",
              "code": "                    System.err.println(\"Error in launcher.xml: Missing class name\");\n                    return 1;\n                }\n                className = args[1];\n            } else {\n                className = step.getChild(\"class\").getValue();\n            }"
            },
            {
              "step": 8,
              "variableName": "\"Error in launcher.xml: Invalid class name: \" + className",
              "startLine": 215,
              "startColumn": 36,
              "endLine": 215,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "",
              "code": "                                       true,\n                                       Thread.currentThread().getContextClassLoader());\n            } catch (ClassNotFoundException e) {\n                System.err.println(\"Error in launcher.xml: Invalid class name: \" + className);\n                return 1;\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 91,
              "startColumn": 75,
              "endLine": 91,
              "endColumn": 81,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 1,
              "variableName": "tokens.toArray(new String[tokens.size()])",
              "startLine": 91,
              "startColumn": 75,
              "endLine": 91,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "String[] [[]] : Object",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 2,
              "variableName": "String[] args",
              "startLine": 164,
              "startColumn": 65,
              "endLine": 164,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "        }\n    }\n\n    protected static int runOneCommand(Document commandConfigs, String[] args) {\n        return runOneCommand(commandConfigs, args, kernelImpl);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 165,
              "startColumn": 46,
              "endLine": 165,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "    }\n\n    protected static int runOneCommand(Document commandConfigs, String[] args) {\n        return runOneCommand(commandConfigs, args, kernelImpl);\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "String[] args",
              "startLine": 174,
              "startColumn": 65,
              "endLine": 174,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "     * @param commandConfigs  Document\n     * @param args the command line arguments given\n     */\n    protected static int runOneCommand(Document commandConfigs, String[] args, DSpaceKernelImpl kernelImpl) {\n        String request = args[0];\n        Element root = commandConfigs.getRootElement();\n        List<Element> commands = root.getChildren(\"command\");"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 206,
              "startColumn": 29,
              "endLine": 206,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "                    System.err.println(\"Error in launcher.xml: Missing class name\");\n                    return 1;\n                }\n                className = args[1];\n            } else {\n                className = step.getChild(\"class\").getValue();\n            }"
            },
            {
              "step": 6,
              "variableName": "args[1]",
              "startLine": 206,
              "startColumn": 29,
              "endLine": 206,
              "endColumn": 36,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String",
              "code": "                    System.err.println(\"Error in launcher.xml: Missing class name\");\n                    return 1;\n                }\n                className = args[1];\n            } else {\n                className = step.getChild(\"class\").getValue();\n            }"
            },
            {
              "step": 7,
              "variableName": "\"Error in launcher.xml: Invalid class name: \" + className",
              "startLine": 215,
              "startColumn": 36,
              "endLine": 215,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "",
              "code": "                                       true,\n                                       Thread.currentThread().getContextClassLoader());\n            } catch (ClassNotFoundException e) {\n                System.err.println(\"Error in launcher.xml: Invalid class name: \" + className);\n                return 1;\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 91,
              "startColumn": 101,
              "endLine": 91,
              "endColumn": 107,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 1,
              "variableName": "tokens",
              "startLine": 95,
              "startColumn": 21,
              "endLine": 95,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "                    if (status > 0) {\n                        break;\n                    }\n                    tokens.clear();\n                }\n            } else {\n                tokens.add(tokenizer.sval);"
            },
            {
              "step": 2,
              "variableName": "tokens",
              "startLine": 95,
              "startColumn": 21,
              "endLine": 95,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "                    if (status > 0) {\n                        break;\n                    }\n                    tokens.clear();\n                }\n            } else {\n                tokens.add(tokenizer.sval);"
            },
            {
              "step": 3,
              "variableName": "tokens",
              "startLine": 91,
              "startColumn": 75,
              "endLine": 91,
              "endColumn": 81,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 4,
              "variableName": "tokens.toArray(new String[tokens.size()])",
              "startLine": 91,
              "startColumn": 75,
              "endLine": 91,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "String[] [[]] : Object",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 5,
              "variableName": "String[] args",
              "startLine": 164,
              "startColumn": 65,
              "endLine": 164,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "        }\n    }\n\n    protected static int runOneCommand(Document commandConfigs, String[] args) {\n        return runOneCommand(commandConfigs, args, kernelImpl);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "args",
              "startLine": 165,
              "startColumn": 46,
              "endLine": 165,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "    }\n\n    protected static int runOneCommand(Document commandConfigs, String[] args) {\n        return runOneCommand(commandConfigs, args, kernelImpl);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String[] args",
              "startLine": 174,
              "startColumn": 65,
              "endLine": 174,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "     * @param commandConfigs  Document\n     * @param args the command line arguments given\n     */\n    protected static int runOneCommand(Document commandConfigs, String[] args, DSpaceKernelImpl kernelImpl) {\n        String request = args[0];\n        Element root = commandConfigs.getRootElement();\n        List<Element> commands = root.getChildren(\"command\");"
            },
            {
              "step": 8,
              "variableName": "args",
              "startLine": 206,
              "startColumn": 29,
              "endLine": 206,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "                    System.err.println(\"Error in launcher.xml: Missing class name\");\n                    return 1;\n                }\n                className = args[1];\n            } else {\n                className = step.getChild(\"class\").getValue();\n            }"
            },
            {
              "step": 9,
              "variableName": "args[1]",
              "startLine": 206,
              "startColumn": 29,
              "endLine": 206,
              "endColumn": 36,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String",
              "code": "                    System.err.println(\"Error in launcher.xml: Missing class name\");\n                    return 1;\n                }\n                className = args[1];\n            } else {\n                className = step.getChild(\"class\").getValue();\n            }"
            },
            {
              "step": 10,
              "variableName": "\"Error in launcher.xml: Invalid class name: \" + className",
              "startLine": 215,
              "startColumn": 36,
              "endLine": 215,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "",
              "code": "                                       true,\n                                       Thread.currentThread().getContextClassLoader());\n            } catch (ClassNotFoundException e) {\n                System.err.println(\"Error in launcher.xml: Invalid class name: \" + className);\n                return 1;\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 95,
              "startColumn": 21,
              "endLine": 95,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "                    if (status > 0) {\n                        break;\n                    }\n                    tokens.clear();\n                }\n            } else {\n                tokens.add(tokenizer.sval);"
            },
            {
              "step": 1,
              "variableName": "tokens",
              "startLine": 95,
              "startColumn": 21,
              "endLine": 95,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "                    if (status > 0) {\n                        break;\n                    }\n                    tokens.clear();\n                }\n            } else {\n                tokens.add(tokenizer.sval);"
            },
            {
              "step": 2,
              "variableName": "tokens",
              "startLine": 91,
              "startColumn": 75,
              "endLine": 91,
              "endColumn": 81,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "ArrayList",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 3,
              "variableName": "tokens.toArray(new String[tokens.size()])",
              "startLine": 91,
              "startColumn": 75,
              "endLine": 91,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/CommandRunner.java",
              "type": "String[] [[]] : Object",
              "code": "        while (StreamTokenizer.TT_EOF != tokenizer.nextToken()) {\n            if (StreamTokenizer.TT_EOL == tokenizer.ttype) {\n                if (tokens.size() > 0) {\n                    status = ScriptLauncher.runOneCommand(commandConfigs, tokens.toArray(new String[tokens.size()]));\n                    if (status > 0) {\n                        break;\n                    }"
            },
            {
              "step": 4,
              "variableName": "String[] args",
              "startLine": 164,
              "startColumn": 65,
              "endLine": 164,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "        }\n    }\n\n    protected static int runOneCommand(Document commandConfigs, String[] args) {\n        return runOneCommand(commandConfigs, args, kernelImpl);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 165,
              "startColumn": 46,
              "endLine": 165,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "    }\n\n    protected static int runOneCommand(Document commandConfigs, String[] args) {\n        return runOneCommand(commandConfigs, args, kernelImpl);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "String[] args",
              "startLine": 174,
              "startColumn": 65,
              "endLine": 174,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "     * @param commandConfigs  Document\n     * @param args the command line arguments given\n     */\n    protected static int runOneCommand(Document commandConfigs, String[] args, DSpaceKernelImpl kernelImpl) {\n        String request = args[0];\n        Element root = commandConfigs.getRootElement();\n        List<Element> commands = root.getChildren(\"command\");"
            },
            {
              "step": 7,
              "variableName": "args",
              "startLine": 206,
              "startColumn": 29,
              "endLine": 206,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String[] [[]] : Object",
              "code": "                    System.err.println(\"Error in launcher.xml: Missing class name\");\n                    return 1;\n                }\n                className = args[1];\n            } else {\n                className = step.getChild(\"class\").getValue();\n            }"
            },
            {
              "step": 8,
              "variableName": "args[1]",
              "startLine": 206,
              "startColumn": 29,
              "endLine": 206,
              "endColumn": 36,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "String",
              "code": "                    System.err.println(\"Error in launcher.xml: Missing class name\");\n                    return 1;\n                }\n                className = args[1];\n            } else {\n                className = step.getChild(\"class\").getValue();\n            }"
            },
            {
              "step": 9,
              "variableName": "\"Error in launcher.xml: Invalid class name: \" + className",
              "startLine": 215,
              "startColumn": 36,
              "endLine": 215,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/launcher/ScriptLauncher.java",
              "type": "",
              "code": "                                       true,\n                                       Thread.currentThread().getContextClassLoader());\n            } catch (ClassNotFoundException e) {\n                System.err.println(\"Error in launcher.xml: Invalid class name: \" + className);\n                return 1;\n            }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 25,
      "fileName": "LogAnalyser.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "myConfigFile",
              "startLine": 189,
              "startColumn": 61,
              "endLine": 189,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/CreateStatReport.java",
              "type": "String",
              "code": "        myOutFile.append(outputSuffix);\n\n        LogAnalyser\n            .processLogs(context, myLogDir, myFileTemplate, myConfigFile, myOutFile.toString(), myStartDate, myEndDate,\n                         myLookUp);\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String myConfigFile",
              "startLine": 436,
              "startColumn": 61,
              "endLine": 436,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @throws SearchServiceException if search error\n     */\n    public static String processLogs(Context context, String myLogDir,\n                                     String myFileTemplate, String myConfigFile,\n                                     String myOutFile, Date myStartDate,\n                                     Date myEndDate, boolean myLookUp)\n        throws IOException, SQLException, SearchServiceException {"
            },
            {
              "step": 2,
              "variableName": "myConfigFile",
              "startLine": 461,
              "startColumn": 49,
              "endLine": 461,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        itemTypes = new ArrayList<>();\n\n        // set the parameters for this analysis\n        setParameters(myLogDir, myFileTemplate, myConfigFile, myOutFile, myStartDate, myEndDate, myLookUp);\n\n        // pre prepare our standard file readers and buffered readers\n        FileReader fr = null;"
            },
            {
              "step": 3,
              "variableName": "String myConfigFile",
              "startLine": 660,
              "startColumn": 38,
              "endLine": 660,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param myLookUp       requested look up force flag\n     */\n    public static void setParameters(String myLogDir, String myFileTemplate,\n                                     String myConfigFile, String myOutFile,\n                                     Date myStartDate, Date myEndDate,\n                                     boolean myLookUp) {\n"
            },
            {
              "step": 4,
              "variableName": "myConfigFile",
              "startLine": 675,
              "startColumn": 26,
              "endLine": 675,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        }\n\n        if (myConfigFile != null) {\n            configFile = myConfigFile;\n        }\n\n        if (myStartDate != null) {"
            },
            {
              "step": 5,
              "variableName": "configFile",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "    /**\n     * the configuration file from which to configure the analyser\n     */\n    private static String configFile = configurationService.getProperty(\"dspace.dir\")\n            + File.separator + \"config\" + File.separator + \"dstat.cfg\";\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "configFile",
              "startLine": 469,
              "startColumn": 20,
              "endLine": 469,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "\n        // read in the config information, throwing an error if we fail to open\n        // the given config file\n        readConfig(configFile);\n\n        // assemble the regular expressions for later use (requires the file\n        // template to build the regex to match it"
            },
            {
              "step": 7,
              "variableName": "String configFile",
              "startLine": 962,
              "startColumn": 35,
              "endLine": 962,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param configFile the config file to read in\n     * @throws IOException if IO error\n     */\n    public static void readConfig(String configFile) throws IOException {\n        //instantiate aggregators\n        actionAggregator = new HashMap<>();\n        searchAggregator = new HashMap<>();"
            },
            {
              "step": 8,
              "variableName": "\"Failed to read config file: \" + configFile",
              "startLine": 986,
              "startColumn": 32,
              "endLine": 986,
              "endColumn": 75,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "",
              "code": "            fr = new FileReader(configFile);\n            br = new BufferedReader(fr);\n        } catch (IOException e) {\n            System.out.println(\"Failed to read config file: \" + configFile);\n            System.exit(0);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "myConfigFile",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/CreateStatReport.java",
              "type": "String",
              "code": "        myOutFile.append(outputSuffix);\n\n        LogAnalyser\n            .processLogs(context, myLogDir, myFileTemplate, myConfigFile, myOutFile.toString(), myStartDate, myEndDate,\n                         myLookUp);\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String myConfigFile",
              "startLine": 436,
              "startColumn": 61,
              "endLine": 436,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @throws SearchServiceException if search error\n     */\n    public static String processLogs(Context context, String myLogDir,\n                                     String myFileTemplate, String myConfigFile,\n                                     String myOutFile, Date myStartDate,\n                                     Date myEndDate, boolean myLookUp)\n        throws IOException, SQLException, SearchServiceException {"
            },
            {
              "step": 2,
              "variableName": "myConfigFile",
              "startLine": 461,
              "startColumn": 49,
              "endLine": 461,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        itemTypes = new ArrayList<>();\n\n        // set the parameters for this analysis\n        setParameters(myLogDir, myFileTemplate, myConfigFile, myOutFile, myStartDate, myEndDate, myLookUp);\n\n        // pre prepare our standard file readers and buffered readers\n        FileReader fr = null;"
            },
            {
              "step": 3,
              "variableName": "String myConfigFile",
              "startLine": 660,
              "startColumn": 38,
              "endLine": 660,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param myLookUp       requested look up force flag\n     */\n    public static void setParameters(String myLogDir, String myFileTemplate,\n                                     String myConfigFile, String myOutFile,\n                                     Date myStartDate, Date myEndDate,\n                                     boolean myLookUp) {\n"
            },
            {
              "step": 4,
              "variableName": "myConfigFile",
              "startLine": 675,
              "startColumn": 26,
              "endLine": 675,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        }\n\n        if (myConfigFile != null) {\n            configFile = myConfigFile;\n        }\n\n        if (myStartDate != null) {"
            },
            {
              "step": 5,
              "variableName": "configFile",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "    /**\n     * the configuration file from which to configure the analyser\n     */\n    private static String configFile = configurationService.getProperty(\"dspace.dir\")\n            + File.separator + \"config\" + File.separator + \"dstat.cfg\";\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "configFile",
              "startLine": 469,
              "startColumn": 20,
              "endLine": 469,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "\n        // read in the config information, throwing an error if we fail to open\n        // the given config file\n        readConfig(configFile);\n\n        // assemble the regular expressions for later use (requires the file\n        // template to build the regex to match it"
            },
            {
              "step": 7,
              "variableName": "String configFile",
              "startLine": 962,
              "startColumn": 35,
              "endLine": 962,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param configFile the config file to read in\n     * @throws IOException if IO error\n     */\n    public static void readConfig(String configFile) throws IOException {\n        //instantiate aggregators\n        actionAggregator = new HashMap<>();\n        searchAggregator = new HashMap<>();"
            },
            {
              "step": 8,
              "variableName": "\"Failed to read config file: \" + configFile",
              "startLine": 986,
              "startColumn": 32,
              "endLine": 986,
              "endColumn": 75,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "",
              "code": "            fr = new FileReader(configFile);\n            br = new BufferedReader(fr);\n        } catch (IOException e) {\n            System.out.println(\"Failed to read config file: \" + configFile);\n            System.exit(0);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "myConfigFile",
              "startLine": 266,
              "startColumn": 72,
              "endLine": 266,
              "endColumn": 84,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/CreateStatReport.java",
              "type": "String",
              "code": "            myOutFile.append(currentMonth.get(Calendar.MONTH) + 1);\n            myOutFile.append(outputSuffix);\n\n            LogAnalyser.processLogs(context, myLogDir, myFileTemplate, myConfigFile, myOutFile.toString(), myStartDate,\n                                    myEndDate, myLookUp);\n\n            currentMonth.add(Calendar.MONTH, 1);"
            },
            {
              "step": 1,
              "variableName": "String myConfigFile",
              "startLine": 436,
              "startColumn": 61,
              "endLine": 436,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @throws SearchServiceException if search error\n     */\n    public static String processLogs(Context context, String myLogDir,\n                                     String myFileTemplate, String myConfigFile,\n                                     String myOutFile, Date myStartDate,\n                                     Date myEndDate, boolean myLookUp)\n        throws IOException, SQLException, SearchServiceException {"
            },
            {
              "step": 2,
              "variableName": "myConfigFile",
              "startLine": 461,
              "startColumn": 49,
              "endLine": 461,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        itemTypes = new ArrayList<>();\n\n        // set the parameters for this analysis\n        setParameters(myLogDir, myFileTemplate, myConfigFile, myOutFile, myStartDate, myEndDate, myLookUp);\n\n        // pre prepare our standard file readers and buffered readers\n        FileReader fr = null;"
            },
            {
              "step": 3,
              "variableName": "String myConfigFile",
              "startLine": 660,
              "startColumn": 38,
              "endLine": 660,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param myLookUp       requested look up force flag\n     */\n    public static void setParameters(String myLogDir, String myFileTemplate,\n                                     String myConfigFile, String myOutFile,\n                                     Date myStartDate, Date myEndDate,\n                                     boolean myLookUp) {\n"
            },
            {
              "step": 4,
              "variableName": "myConfigFile",
              "startLine": 675,
              "startColumn": 26,
              "endLine": 675,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        }\n\n        if (myConfigFile != null) {\n            configFile = myConfigFile;\n        }\n\n        if (myStartDate != null) {"
            },
            {
              "step": 5,
              "variableName": "configFile",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "    /**\n     * the configuration file from which to configure the analyser\n     */\n    private static String configFile = configurationService.getProperty(\"dspace.dir\")\n            + File.separator + \"config\" + File.separator + \"dstat.cfg\";\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "configFile",
              "startLine": 469,
              "startColumn": 20,
              "endLine": 469,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "\n        // read in the config information, throwing an error if we fail to open\n        // the given config file\n        readConfig(configFile);\n\n        // assemble the regular expressions for later use (requires the file\n        // template to build the regex to match it"
            },
            {
              "step": 7,
              "variableName": "String configFile",
              "startLine": 962,
              "startColumn": 35,
              "endLine": 962,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param configFile the config file to read in\n     * @throws IOException if IO error\n     */\n    public static void readConfig(String configFile) throws IOException {\n        //instantiate aggregators\n        actionAggregator = new HashMap<>();\n        searchAggregator = new HashMap<>();"
            },
            {
              "step": 8,
              "variableName": "\"Failed to read config file: \" + configFile",
              "startLine": 986,
              "startColumn": 32,
              "endLine": 986,
              "endColumn": 75,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "",
              "code": "            fr = new FileReader(configFile);\n            br = new BufferedReader(fr);\n        } catch (IOException e) {\n            System.out.println(\"Failed to read config file: \" + configFile);\n            System.exit(0);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "myConfigFile",
              "startLine": 414,
              "startColumn": 56,
              "endLine": 414,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        myLookUp = cmd.hasOption(\"lookup\");\n\n        // now call the method which actually processes the logs\n        processLogs(context, myLogDir, myFileTemplate, myConfigFile, myOutFile,\n                myStartDate, myEndDate, myLookUp);\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String myConfigFile",
              "startLine": 436,
              "startColumn": 61,
              "endLine": 436,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @throws SearchServiceException if search error\n     */\n    public static String processLogs(Context context, String myLogDir,\n                                     String myFileTemplate, String myConfigFile,\n                                     String myOutFile, Date myStartDate,\n                                     Date myEndDate, boolean myLookUp)\n        throws IOException, SQLException, SearchServiceException {"
            },
            {
              "step": 2,
              "variableName": "myConfigFile",
              "startLine": 461,
              "startColumn": 49,
              "endLine": 461,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        itemTypes = new ArrayList<>();\n\n        // set the parameters for this analysis\n        setParameters(myLogDir, myFileTemplate, myConfigFile, myOutFile, myStartDate, myEndDate, myLookUp);\n\n        // pre prepare our standard file readers and buffered readers\n        FileReader fr = null;"
            },
            {
              "step": 3,
              "variableName": "String myConfigFile",
              "startLine": 660,
              "startColumn": 38,
              "endLine": 660,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param myLookUp       requested look up force flag\n     */\n    public static void setParameters(String myLogDir, String myFileTemplate,\n                                     String myConfigFile, String myOutFile,\n                                     Date myStartDate, Date myEndDate,\n                                     boolean myLookUp) {\n"
            },
            {
              "step": 4,
              "variableName": "myConfigFile",
              "startLine": 675,
              "startColumn": 26,
              "endLine": 675,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        }\n\n        if (myConfigFile != null) {\n            configFile = myConfigFile;\n        }\n\n        if (myStartDate != null) {"
            },
            {
              "step": 5,
              "variableName": "configFile",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "    /**\n     * the configuration file from which to configure the analyser\n     */\n    private static String configFile = configurationService.getProperty(\"dspace.dir\")\n            + File.separator + \"config\" + File.separator + \"dstat.cfg\";\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "configFile",
              "startLine": 469,
              "startColumn": 20,
              "endLine": 469,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "\n        // read in the config information, throwing an error if we fail to open\n        // the given config file\n        readConfig(configFile);\n\n        // assemble the regular expressions for later use (requires the file\n        // template to build the regex to match it"
            },
            {
              "step": 7,
              "variableName": "String configFile",
              "startLine": 962,
              "startColumn": 35,
              "endLine": 962,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param configFile the config file to read in\n     * @throws IOException if IO error\n     */\n    public static void readConfig(String configFile) throws IOException {\n        //instantiate aggregators\n        actionAggregator = new HashMap<>();\n        searchAggregator = new HashMap<>();"
            },
            {
              "step": 8,
              "variableName": "\"Failed to read config file: \" + configFile",
              "startLine": 986,
              "startColumn": 32,
              "endLine": 986,
              "endColumn": 75,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "",
              "code": "            fr = new FileReader(configFile);\n            br = new BufferedReader(fr);\n        } catch (IOException e) {\n            System.out.println(\"Failed to read config file: \" + configFile);\n            System.exit(0);\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 26,
      "fileName": "Curator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "qDir",
              "startLine": 110,
              "startColumn": 39,
              "endLine": 110,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 1,
              "variableName": "new File(qDir, \"queue\" + Integer.toString(queueIdx))",
              "startLine": 110,
              "startColumn": 30,
              "endLine": 110,
              "endColumn": 82,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 2,
              "variableName": "queue",
              "startLine": 119,
              "startColumn": 68,
              "endLine": 119,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 3,
              "variableName": "new FileReader(queue, StandardCharsets.UTF_8)",
              "startLine": 119,
              "startColumn": 53,
              "endLine": 119,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "FileReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 4,
              "variableName": "new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8))",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 5,
              "variableName": "reader",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 6,
              "variableName": "reader.readLine()",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 7,
              "variableName": "entryStr",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 8,
              "variableName": "entryStr.trim()",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 9,
              "variableName": "entryStr",
              "startLine": 124,
              "startColumn": 65,
              "endLine": 124,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 10,
              "variableName": "String entry",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 32,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 12,
              "variableName": "entry.split(\"\\\\|\")",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 13,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 15,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 16,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 17,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 18,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 20,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 21,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 22,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 23,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 24,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 25,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 30,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 31,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "\"Task: '\" + taskName + \"' initialization failure: \" + ioE.getMessage()",
              "startLine": 159,
              "startColumn": 36,
              "endLine": 159,
              "endColumn": 106,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {\n                System.out.println(\"Task: '\" + taskName + \"' initialization failure: \" + ioE.getMessage());\n            }\n        } else {\n            System.out.println(\"Task: '\" + taskName + \"' does not resolve\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "qDir",
              "startLine": 111,
              "startColumn": 38,
              "endLine": 111,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist\n                // If the lock file exists already, then this simply returns false"
            },
            {
              "step": 1,
              "variableName": "qDir",
              "startLine": 110,
              "startColumn": 39,
              "endLine": 110,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 2,
              "variableName": "new File(qDir, \"queue\" + Integer.toString(queueIdx))",
              "startLine": 110,
              "startColumn": 30,
              "endLine": 110,
              "endColumn": 82,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 3,
              "variableName": "queue",
              "startLine": 119,
              "startColumn": 68,
              "endLine": 119,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 4,
              "variableName": "new FileReader(queue, StandardCharsets.UTF_8)",
              "startLine": 119,
              "startColumn": 53,
              "endLine": 119,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "FileReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 5,
              "variableName": "new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8))",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 6,
              "variableName": "reader",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 7,
              "variableName": "reader.readLine()",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 8,
              "variableName": "entryStr",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 9,
              "variableName": "entryStr.trim()",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 10,
              "variableName": "entryStr",
              "startLine": 124,
              "startColumn": 65,
              "endLine": 124,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 11,
              "variableName": "String entry",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 12,
              "variableName": "entry",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 32,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 13,
              "variableName": "entry.split(\"\\\\|\")",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 14,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 15,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 16,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 17,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 18,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 19,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 21,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 22,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 23,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 24,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 25,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 31,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 32,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 33,
              "variableName": "\"Task: '\" + taskName + \"' initialization failure: \" + ioE.getMessage()",
              "startLine": 159,
              "startColumn": 36,
              "endLine": 159,
              "endColumn": 106,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {\n                System.out.println(\"Task: '\" + taskName + \"' initialization failure: \" + ioE.getMessage());\n            }\n        } else {\n            System.out.println(\"Task: '\" + taskName + \"' does not resolve\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 52,
              "startColumn": 21,
              "endLine": 52,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];"
            },
            {
              "step": 1,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 2,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 3,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 4,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 5,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 6,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 8,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 10,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 12,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 13,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 18,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 19,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 20,
              "variableName": "\"Task: '\" + taskName + \"' initialization failure: \" + ioE.getMessage()",
              "startLine": 159,
              "startColumn": 36,
              "endLine": 159,
              "endColumn": 106,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {\n                System.out.println(\"Task: '\" + taskName + \"' initialization failure: \" + ioE.getMessage());\n            }\n        } else {\n            System.out.println(\"Task: '\" + taskName + \"' does not resolve\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 53,
              "startColumn": 22,
              "endLine": 53,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }"
            },
            {
              "step": 1,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 2,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 3,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 4,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 5,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 6,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 8,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 10,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 12,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 13,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 18,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 19,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 20,
              "variableName": "\"Task: '\" + taskName + \"' initialization failure: \" + ioE.getMessage()",
              "startLine": 159,
              "startColumn": 36,
              "endLine": 159,
              "endColumn": 106,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {\n                System.out.println(\"Task: '\" + taskName + \"' initialization failure: \" + ioE.getMessage());\n            }\n        } else {\n            System.out.println(\"Task: '\" + taskName + \"' does not resolve\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 27,
      "fileName": "Curator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "qDir",
              "startLine": 110,
              "startColumn": 39,
              "endLine": 110,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 1,
              "variableName": "new File(qDir, \"queue\" + Integer.toString(queueIdx))",
              "startLine": 110,
              "startColumn": 30,
              "endLine": 110,
              "endColumn": 82,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 2,
              "variableName": "queue",
              "startLine": 119,
              "startColumn": 68,
              "endLine": 119,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 3,
              "variableName": "new FileReader(queue, StandardCharsets.UTF_8)",
              "startLine": 119,
              "startColumn": 53,
              "endLine": 119,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "FileReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 4,
              "variableName": "new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8))",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 5,
              "variableName": "reader",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 6,
              "variableName": "reader.readLine()",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 7,
              "variableName": "entryStr",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 8,
              "variableName": "entryStr.trim()",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 9,
              "variableName": "entryStr",
              "startLine": 124,
              "startColumn": 65,
              "endLine": 124,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 10,
              "variableName": "String entry",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 32,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 12,
              "variableName": "entry.split(\"\\\\|\")",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 13,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 15,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 16,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 17,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 18,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 20,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 21,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 22,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 23,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 24,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 25,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 30,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 31,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "taskName",
              "startLine": 151,
              "startColumn": 50,
              "endLine": 151,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 33,
              "variableName": "String taskName",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "     * @return task\n     * an object that implements the CurationTask interface\n     */\n    public ResolvedTask resolveTask(String taskName) {\n        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {"
            },
            {
              "step": 34,
              "variableName": "taskName",
              "startLine": 168,
              "startColumn": 37,
              "endLine": 168,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 35,
              "variableName": "String taskName",
              "startLine": 35,
              "startColumn": 28,
              "endLine": 35,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 36,
              "variableName": "taskName",
              "startLine": 36,
              "startColumn": 25,
              "endLine": 36,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 37,
              "variableName": "this",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 38,
              "variableName": "ResolvedTask",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 39,
              "variableName": "new ResolvedTask(taskName, ctask)",
              "startLine": 168,
              "startColumn": 20,
              "endLine": 168,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 40,
              "variableName": "resolver.resolveTask(taskName)",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 41,
              "variableName": "task",
              "startLine": 155,
              "startColumn": 52,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 42,
              "variableName": "ResolvedTask task",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 43,
              "variableName": "task",
              "startLine": 552,
              "startColumn": 25,
              "endLine": 552,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 44,
              "variableName": "this",
              "startLine": 552,
              "startColumn": 13,
              "endLine": 552,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 45,
              "variableName": "TaskRunner",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 46,
              "variableName": "new TaskRunner(task)",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 47,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 48,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 49,
              "variableName": "addTask",
              "startLine": 150,
              "startColumn": 20,
              "endLine": 150,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 50,
              "variableName": "curator",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 51,
              "variableName": "curator",
              "startLine": 158,
              "startColumn": 13,
              "endLine": 158,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }\n        queue.release(this.queue, ticket, true);\n        return ticket;"
            },
            {
              "step": 52,
              "variableName": "curate",
              "startLine": 243,
              "startColumn": 17,
              "endLine": 243,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param id an object identifier\n     * @throws IOException if IO error\n     */\n    public void curate(Context c, String id) throws IOException {\n        if (id == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null object identifier!\");\n        }"
            },
            {
              "step": 53,
              "variableName": "curate(dso)",
              "startLine": 253,
              "startColumn": 17,
              "endLine": 253,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "\n            DSpaceObject dso = handleService.resolveToObject(c, id);\n            if (dso != null) {\n                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);"
            },
            {
              "step": 54,
              "variableName": "curate",
              "startLine": 279,
              "startColumn": 17,
              "endLine": 279,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param dso the DSpace object\n     * @throws IOException if IO error\n     */\n    public void curate(DSpaceObject dso) throws IOException {\n        if (dso == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null DSpaceObject!\");\n        }"
            },
            {
              "step": 55,
              "variableName": "trMap",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 56,
              "variableName": "trMap",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 57,
              "variableName": "trMap.get(taskName)",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 58,
              "variableName": "tr",
              "startLine": 288,
              "startColumn": 17,
              "endLine": 288,
              "endColumn": 19,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);\n            } else if (type == Constants.COLLECTION) {\n                doCollection(tr, (Collection) dso);\n            } else if (type == Constants.COMMUNITY) {"
            },
            {
              "step": 59,
              "variableName": "run",
              "startLine": 555,
              "startColumn": 24,
              "endLine": 555,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {\n            try {\n                if (dso == null) {\n                    throw new IOException(\"DSpaceObject is null\");"
            },
            {
              "step": 60,
              "variableName": "task",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 61,
              "variableName": "task",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 62,
              "variableName": "getName",
              "startLine": 100,
              "startColumn": 19,
              "endLine": 100,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return name\n     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n"
            },
            {
              "step": 63,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 64,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 65,
              "variableName": "task.getName()",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 86,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 66,
              "variableName": "\"Error executing curation task '\" + task.getName() + \"'; \" + ioe",
              "startLine": 567,
              "startColumn": 36,
              "endLine": 567,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "qDir",
              "startLine": 111,
              "startColumn": 38,
              "endLine": 111,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist\n                // If the lock file exists already, then this simply returns false"
            },
            {
              "step": 1,
              "variableName": "qDir",
              "startLine": 110,
              "startColumn": 39,
              "endLine": 110,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 2,
              "variableName": "new File(qDir, \"queue\" + Integer.toString(queueIdx))",
              "startLine": 110,
              "startColumn": 30,
              "endLine": 110,
              "endColumn": 82,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 3,
              "variableName": "queue",
              "startLine": 119,
              "startColumn": 68,
              "endLine": 119,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 4,
              "variableName": "new FileReader(queue, StandardCharsets.UTF_8)",
              "startLine": 119,
              "startColumn": 53,
              "endLine": 119,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "FileReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 5,
              "variableName": "new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8))",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 6,
              "variableName": "reader",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 7,
              "variableName": "reader.readLine()",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 8,
              "variableName": "entryStr",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 9,
              "variableName": "entryStr.trim()",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 10,
              "variableName": "entryStr",
              "startLine": 124,
              "startColumn": 65,
              "endLine": 124,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 11,
              "variableName": "String entry",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 12,
              "variableName": "entry",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 32,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 13,
              "variableName": "entry.split(\"\\\\|\")",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 14,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 15,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 16,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 17,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 18,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 19,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 21,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 22,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 23,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 24,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 25,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 31,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 32,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 33,
              "variableName": "taskName",
              "startLine": 151,
              "startColumn": 50,
              "endLine": 151,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 34,
              "variableName": "String taskName",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "     * @return task\n     * an object that implements the CurationTask interface\n     */\n    public ResolvedTask resolveTask(String taskName) {\n        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {"
            },
            {
              "step": 35,
              "variableName": "taskName",
              "startLine": 168,
              "startColumn": 37,
              "endLine": 168,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 36,
              "variableName": "String taskName",
              "startLine": 35,
              "startColumn": 28,
              "endLine": 35,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 37,
              "variableName": "taskName",
              "startLine": 36,
              "startColumn": 25,
              "endLine": 36,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 39,
              "variableName": "ResolvedTask",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 40,
              "variableName": "new ResolvedTask(taskName, ctask)",
              "startLine": 168,
              "startColumn": 20,
              "endLine": 168,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 41,
              "variableName": "resolver.resolveTask(taskName)",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 42,
              "variableName": "task",
              "startLine": 155,
              "startColumn": 52,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 43,
              "variableName": "ResolvedTask task",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 44,
              "variableName": "task",
              "startLine": 552,
              "startColumn": 25,
              "endLine": 552,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 45,
              "variableName": "this",
              "startLine": 552,
              "startColumn": 13,
              "endLine": 552,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 46,
              "variableName": "TaskRunner",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 47,
              "variableName": "new TaskRunner(task)",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 48,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 49,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 50,
              "variableName": "addTask",
              "startLine": 150,
              "startColumn": 20,
              "endLine": 150,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 51,
              "variableName": "curator",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 52,
              "variableName": "curator",
              "startLine": 158,
              "startColumn": 13,
              "endLine": 158,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }\n        queue.release(this.queue, ticket, true);\n        return ticket;"
            },
            {
              "step": 53,
              "variableName": "curate",
              "startLine": 243,
              "startColumn": 17,
              "endLine": 243,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param id an object identifier\n     * @throws IOException if IO error\n     */\n    public void curate(Context c, String id) throws IOException {\n        if (id == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null object identifier!\");\n        }"
            },
            {
              "step": 54,
              "variableName": "curate(dso)",
              "startLine": 253,
              "startColumn": 17,
              "endLine": 253,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "\n            DSpaceObject dso = handleService.resolveToObject(c, id);\n            if (dso != null) {\n                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);"
            },
            {
              "step": 55,
              "variableName": "curate",
              "startLine": 279,
              "startColumn": 17,
              "endLine": 279,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param dso the DSpace object\n     * @throws IOException if IO error\n     */\n    public void curate(DSpaceObject dso) throws IOException {\n        if (dso == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null DSpaceObject!\");\n        }"
            },
            {
              "step": 56,
              "variableName": "trMap",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 57,
              "variableName": "trMap",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 58,
              "variableName": "trMap.get(taskName)",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 59,
              "variableName": "tr",
              "startLine": 288,
              "startColumn": 17,
              "endLine": 288,
              "endColumn": 19,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);\n            } else if (type == Constants.COLLECTION) {\n                doCollection(tr, (Collection) dso);\n            } else if (type == Constants.COMMUNITY) {"
            },
            {
              "step": 60,
              "variableName": "run",
              "startLine": 555,
              "startColumn": 24,
              "endLine": 555,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {\n            try {\n                if (dso == null) {\n                    throw new IOException(\"DSpaceObject is null\");"
            },
            {
              "step": 61,
              "variableName": "task",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 62,
              "variableName": "task",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 63,
              "variableName": "getName",
              "startLine": 100,
              "startColumn": 19,
              "endLine": 100,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return name\n     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n"
            },
            {
              "step": 64,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 65,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "task.getName()",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 86,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 67,
              "variableName": "\"Error executing curation task '\" + task.getName() + \"'; \" + ioe",
              "startLine": 567,
              "startColumn": 36,
              "endLine": 567,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 52,
              "startColumn": 21,
              "endLine": 52,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];"
            },
            {
              "step": 1,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 2,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 3,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 4,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 5,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 6,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 8,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 10,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 12,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 13,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 18,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 19,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 20,
              "variableName": "taskName",
              "startLine": 151,
              "startColumn": 50,
              "endLine": 151,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 21,
              "variableName": "String taskName",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "     * @return task\n     * an object that implements the CurationTask interface\n     */\n    public ResolvedTask resolveTask(String taskName) {\n        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {"
            },
            {
              "step": 22,
              "variableName": "taskName",
              "startLine": 168,
              "startColumn": 37,
              "endLine": 168,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 23,
              "variableName": "String taskName",
              "startLine": 35,
              "startColumn": 28,
              "endLine": 35,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 24,
              "variableName": "taskName",
              "startLine": 36,
              "startColumn": 25,
              "endLine": 36,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 25,
              "variableName": "this",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 26,
              "variableName": "ResolvedTask",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 27,
              "variableName": "new ResolvedTask(taskName, ctask)",
              "startLine": 168,
              "startColumn": 20,
              "endLine": 168,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 28,
              "variableName": "resolver.resolveTask(taskName)",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 29,
              "variableName": "task",
              "startLine": 155,
              "startColumn": 52,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 30,
              "variableName": "ResolvedTask task",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 31,
              "variableName": "task",
              "startLine": 552,
              "startColumn": 25,
              "endLine": 552,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 32,
              "variableName": "this",
              "startLine": 552,
              "startColumn": 13,
              "endLine": 552,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 33,
              "variableName": "TaskRunner",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 34,
              "variableName": "new TaskRunner(task)",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 35,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 36,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 37,
              "variableName": "addTask",
              "startLine": 150,
              "startColumn": 20,
              "endLine": 150,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 38,
              "variableName": "curator",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 39,
              "variableName": "curator",
              "startLine": 158,
              "startColumn": 13,
              "endLine": 158,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }\n        queue.release(this.queue, ticket, true);\n        return ticket;"
            },
            {
              "step": 40,
              "variableName": "curate",
              "startLine": 243,
              "startColumn": 17,
              "endLine": 243,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param id an object identifier\n     * @throws IOException if IO error\n     */\n    public void curate(Context c, String id) throws IOException {\n        if (id == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null object identifier!\");\n        }"
            },
            {
              "step": 41,
              "variableName": "curate(dso)",
              "startLine": 253,
              "startColumn": 17,
              "endLine": 253,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "\n            DSpaceObject dso = handleService.resolveToObject(c, id);\n            if (dso != null) {\n                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);"
            },
            {
              "step": 42,
              "variableName": "curate",
              "startLine": 279,
              "startColumn": 17,
              "endLine": 279,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param dso the DSpace object\n     * @throws IOException if IO error\n     */\n    public void curate(DSpaceObject dso) throws IOException {\n        if (dso == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null DSpaceObject!\");\n        }"
            },
            {
              "step": 43,
              "variableName": "trMap",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 44,
              "variableName": "trMap",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 45,
              "variableName": "trMap.get(taskName)",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 46,
              "variableName": "tr",
              "startLine": 288,
              "startColumn": 17,
              "endLine": 288,
              "endColumn": 19,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);\n            } else if (type == Constants.COLLECTION) {\n                doCollection(tr, (Collection) dso);\n            } else if (type == Constants.COMMUNITY) {"
            },
            {
              "step": 47,
              "variableName": "run",
              "startLine": 555,
              "startColumn": 24,
              "endLine": 555,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {\n            try {\n                if (dso == null) {\n                    throw new IOException(\"DSpaceObject is null\");"
            },
            {
              "step": 48,
              "variableName": "task",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 49,
              "variableName": "task",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 50,
              "variableName": "getName",
              "startLine": 100,
              "startColumn": 19,
              "endLine": 100,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return name\n     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n"
            },
            {
              "step": 51,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 53,
              "variableName": "task.getName()",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 86,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 54,
              "variableName": "\"Error executing curation task '\" + task.getName() + \"'; \" + ioe",
              "startLine": 567,
              "startColumn": 36,
              "endLine": 567,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 53,
              "startColumn": 22,
              "endLine": 53,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }"
            },
            {
              "step": 1,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 2,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 3,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 4,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 5,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 6,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 8,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 10,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 12,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 13,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 18,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 19,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 20,
              "variableName": "taskName",
              "startLine": 151,
              "startColumn": 50,
              "endLine": 151,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 21,
              "variableName": "String taskName",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "     * @return task\n     * an object that implements the CurationTask interface\n     */\n    public ResolvedTask resolveTask(String taskName) {\n        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {"
            },
            {
              "step": 22,
              "variableName": "taskName",
              "startLine": 168,
              "startColumn": 37,
              "endLine": 168,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 23,
              "variableName": "String taskName",
              "startLine": 35,
              "startColumn": 28,
              "endLine": 35,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 24,
              "variableName": "taskName",
              "startLine": 36,
              "startColumn": 25,
              "endLine": 36,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 25,
              "variableName": "this",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 26,
              "variableName": "ResolvedTask",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 27,
              "variableName": "new ResolvedTask(taskName, ctask)",
              "startLine": 168,
              "startColumn": 20,
              "endLine": 168,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 28,
              "variableName": "resolver.resolveTask(taskName)",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 29,
              "variableName": "task",
              "startLine": 155,
              "startColumn": 52,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 30,
              "variableName": "ResolvedTask task",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 31,
              "variableName": "task",
              "startLine": 552,
              "startColumn": 25,
              "endLine": 552,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 32,
              "variableName": "this",
              "startLine": 552,
              "startColumn": 13,
              "endLine": 552,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 33,
              "variableName": "TaskRunner",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 34,
              "variableName": "new TaskRunner(task)",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 35,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 36,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 37,
              "variableName": "addTask",
              "startLine": 150,
              "startColumn": 20,
              "endLine": 150,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 38,
              "variableName": "curator",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 39,
              "variableName": "curator",
              "startLine": 158,
              "startColumn": 13,
              "endLine": 158,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }\n        queue.release(this.queue, ticket, true);\n        return ticket;"
            },
            {
              "step": 40,
              "variableName": "curate",
              "startLine": 243,
              "startColumn": 17,
              "endLine": 243,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param id an object identifier\n     * @throws IOException if IO error\n     */\n    public void curate(Context c, String id) throws IOException {\n        if (id == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null object identifier!\");\n        }"
            },
            {
              "step": 41,
              "variableName": "curate(dso)",
              "startLine": 253,
              "startColumn": 17,
              "endLine": 253,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "\n            DSpaceObject dso = handleService.resolveToObject(c, id);\n            if (dso != null) {\n                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);"
            },
            {
              "step": 42,
              "variableName": "curate",
              "startLine": 279,
              "startColumn": 17,
              "endLine": 279,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param dso the DSpace object\n     * @throws IOException if IO error\n     */\n    public void curate(DSpaceObject dso) throws IOException {\n        if (dso == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null DSpaceObject!\");\n        }"
            },
            {
              "step": 43,
              "variableName": "trMap",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 44,
              "variableName": "trMap",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 34,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 45,
              "variableName": "trMap.get(taskName)",
              "startLine": 285,
              "startColumn": 29,
              "endLine": 285,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        }\n        int type = dso.getType();\n        for (String taskName : perfList) {\n            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);"
            },
            {
              "step": 46,
              "variableName": "tr",
              "startLine": 288,
              "startColumn": 17,
              "endLine": 288,
              "endColumn": 19,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            TaskRunner tr = trMap.get(taskName);\n            // do we need to iterate over the object ?\n            if (type == Constants.ITEM || tr.task.isDistributive()) {\n                tr.run(dso);\n            } else if (type == Constants.COLLECTION) {\n                doCollection(tr, (Collection) dso);\n            } else if (type == Constants.COMMUNITY) {"
            },
            {
              "step": 47,
              "variableName": "run",
              "startLine": 555,
              "startColumn": 24,
              "endLine": 555,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {\n            try {\n                if (dso == null) {\n                    throw new IOException(\"DSpaceObject is null\");"
            },
            {
              "step": 48,
              "variableName": "task",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 49,
              "variableName": "task",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 50,
              "variableName": "getName",
              "startLine": 100,
              "startColumn": 19,
              "endLine": 100,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return name\n     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n"
            },
            {
              "step": 51,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 53,
              "variableName": "task.getName()",
              "startLine": 567,
              "startColumn": 72,
              "endLine": 567,
              "endColumn": 86,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 54,
              "variableName": "\"Error executing curation task '\" + task.getName() + \"'; \" + ioe",
              "startLine": 567,
              "startColumn": 36,
              "endLine": 567,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 28,
      "fileName": "Curator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "qDir",
              "startLine": 110,
              "startColumn": 39,
              "endLine": 110,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 1,
              "variableName": "new File(qDir, \"queue\" + Integer.toString(queueIdx))",
              "startLine": 110,
              "startColumn": 30,
              "endLine": 110,
              "endColumn": 82,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 2,
              "variableName": "queue",
              "startLine": 119,
              "startColumn": 68,
              "endLine": 119,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 3,
              "variableName": "new FileReader(queue, StandardCharsets.UTF_8)",
              "startLine": 119,
              "startColumn": 53,
              "endLine": 119,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "FileReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 4,
              "variableName": "new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8))",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 5,
              "variableName": "reader",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 6,
              "variableName": "reader.readLine()",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 7,
              "variableName": "entryStr",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 8,
              "variableName": "entryStr.trim()",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 9,
              "variableName": "entryStr",
              "startLine": 124,
              "startColumn": 65,
              "endLine": 124,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 10,
              "variableName": "String entry",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 32,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 12,
              "variableName": "entry.split(\"\\\\|\")",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 13,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 15,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 16,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 17,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 18,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 20,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 21,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 22,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 23,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 24,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 25,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 30,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 31,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "taskName",
              "startLine": 151,
              "startColumn": 50,
              "endLine": 151,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 33,
              "variableName": "String taskName",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "     * @return task\n     * an object that implements the CurationTask interface\n     */\n    public ResolvedTask resolveTask(String taskName) {\n        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {"
            },
            {
              "step": 34,
              "variableName": "taskName",
              "startLine": 168,
              "startColumn": 37,
              "endLine": 168,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 35,
              "variableName": "String taskName",
              "startLine": 35,
              "startColumn": 28,
              "endLine": 35,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 36,
              "variableName": "taskName",
              "startLine": 36,
              "startColumn": 25,
              "endLine": 36,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 37,
              "variableName": "this",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 38,
              "variableName": "ResolvedTask",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 39,
              "variableName": "new ResolvedTask(taskName, ctask)",
              "startLine": 168,
              "startColumn": 20,
              "endLine": 168,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 40,
              "variableName": "resolver.resolveTask(taskName)",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 41,
              "variableName": "task",
              "startLine": 155,
              "startColumn": 52,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 42,
              "variableName": "ResolvedTask task",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 43,
              "variableName": "task",
              "startLine": 552,
              "startColumn": 25,
              "endLine": 552,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 44,
              "variableName": "this",
              "startLine": 552,
              "startColumn": 13,
              "endLine": 552,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 45,
              "variableName": "TaskRunner",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 46,
              "variableName": "new TaskRunner(task)",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 47,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 48,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 49,
              "variableName": "addTask",
              "startLine": 150,
              "startColumn": 20,
              "endLine": 150,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 50,
              "variableName": "curator",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 51,
              "variableName": "curator",
              "startLine": 158,
              "startColumn": 13,
              "endLine": 158,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }\n        queue.release(this.queue, ticket, true);\n        return ticket;"
            },
            {
              "step": 52,
              "variableName": "curate",
              "startLine": 243,
              "startColumn": 17,
              "endLine": 243,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param id an object identifier\n     * @throws IOException if IO error\n     */\n    public void curate(Context c, String id) throws IOException {\n        if (id == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null object identifier!\");\n        }"
            },
            {
              "step": 53,
              "variableName": "trMap",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 54,
              "variableName": "trMap",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 55,
              "variableName": "trMap.get(taskName)",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 56,
              "variableName": "run",
              "startLine": 572,
              "startColumn": 24,
              "endLine": 572,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            }\n        }\n\n        public boolean run(Context c, String id) throws IOException {\n            try {\n                if (c == null || id == null) {\n                    throw new IOException(\"Context or identifier is null\");"
            },
            {
              "step": 57,
              "variableName": "task",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 58,
              "variableName": "task",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 59,
              "variableName": "getName",
              "startLine": 100,
              "startColumn": 19,
              "endLine": 100,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return name\n     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n"
            },
            {
              "step": 60,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 61,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 62,
              "variableName": "task.getName()",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 86,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 63,
              "variableName": "\"Error executing curation task '\" + task.getName() + \"'; \" + ioe",
              "startLine": 583,
              "startColumn": 36,
              "endLine": 583,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "qDir",
              "startLine": 111,
              "startColumn": 38,
              "endLine": 111,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist\n                // If the lock file exists already, then this simply returns false"
            },
            {
              "step": 1,
              "variableName": "qDir",
              "startLine": 110,
              "startColumn": 39,
              "endLine": 110,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 2,
              "variableName": "new File(qDir, \"queue\" + Integer.toString(queueIdx))",
              "startLine": 110,
              "startColumn": 30,
              "endLine": 110,
              "endColumn": 82,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "            readTicket = ticket;\n            int queueIdx = 0;\n            while (true) {\n                File queue = new File(qDir, \"queue\" + Integer.toString(queueIdx));\n                File lock = new File(qDir, \"lock\" + Integer.toString(queueIdx));\n\n                // If the queue file exists, atomically check for a lock file and create one if it doesn't exist"
            },
            {
              "step": 3,
              "variableName": "queue",
              "startLine": 119,
              "startColumn": 68,
              "endLine": 119,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "File",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 4,
              "variableName": "new FileReader(queue, StandardCharsets.UTF_8)",
              "startLine": 119,
              "startColumn": 53,
              "endLine": 119,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "FileReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 5,
              "variableName": "new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8))",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    // read contents from file\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();"
            },
            {
              "step": 6,
              "variableName": "reader",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "BufferedReader",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 7,
              "variableName": "reader.readLine()",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                    try {\n                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));"
            },
            {
              "step": 8,
              "variableName": "entryStr",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 9,
              "variableName": "entryStr.trim()",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        reader = new BufferedReader(new FileReader(queue, StandardCharsets.UTF_8));\n                        String entryStr;\n                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }"
            },
            {
              "step": 10,
              "variableName": "entryStr",
              "startLine": 124,
              "startColumn": 65,
              "endLine": 124,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 11,
              "variableName": "String entry",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 12,
              "variableName": "entry",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 32,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 13,
              "variableName": "entry.split(\"\\\\|\")",
              "startLine": 51,
              "startColumn": 27,
              "endLine": 51,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];"
            },
            {
              "step": 14,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 15,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 16,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 17,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 18,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 19,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 21,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 22,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 23,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 24,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 25,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 31,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 32,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 33,
              "variableName": "taskName",
              "startLine": 151,
              "startColumn": 50,
              "endLine": 151,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 34,
              "variableName": "String taskName",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "     * @return task\n     * an object that implements the CurationTask interface\n     */\n    public ResolvedTask resolveTask(String taskName) {\n        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {"
            },
            {
              "step": 35,
              "variableName": "taskName",
              "startLine": 168,
              "startColumn": 37,
              "endLine": 168,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 36,
              "variableName": "String taskName",
              "startLine": 35,
              "startColumn": 28,
              "endLine": 35,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 37,
              "variableName": "taskName",
              "startLine": 36,
              "startColumn": 25,
              "endLine": 36,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 39,
              "variableName": "ResolvedTask",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 40,
              "variableName": "new ResolvedTask(taskName, ctask)",
              "startLine": 168,
              "startColumn": 20,
              "endLine": 168,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 41,
              "variableName": "resolver.resolveTask(taskName)",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 42,
              "variableName": "task",
              "startLine": 155,
              "startColumn": 52,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 43,
              "variableName": "ResolvedTask task",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 44,
              "variableName": "task",
              "startLine": 552,
              "startColumn": 25,
              "endLine": 552,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 45,
              "variableName": "this",
              "startLine": 552,
              "startColumn": 13,
              "endLine": 552,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 46,
              "variableName": "TaskRunner",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 47,
              "variableName": "new TaskRunner(task)",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 48,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 49,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 50,
              "variableName": "addTask",
              "startLine": 150,
              "startColumn": 20,
              "endLine": 150,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 51,
              "variableName": "curator",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 52,
              "variableName": "curator",
              "startLine": 158,
              "startColumn": 13,
              "endLine": 158,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }\n        queue.release(this.queue, ticket, true);\n        return ticket;"
            },
            {
              "step": 53,
              "variableName": "curate",
              "startLine": 243,
              "startColumn": 17,
              "endLine": 243,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param id an object identifier\n     * @throws IOException if IO error\n     */\n    public void curate(Context c, String id) throws IOException {\n        if (id == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null object identifier!\");\n        }"
            },
            {
              "step": 54,
              "variableName": "trMap",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 55,
              "variableName": "trMap",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 56,
              "variableName": "trMap.get(taskName)",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 57,
              "variableName": "run",
              "startLine": 572,
              "startColumn": 24,
              "endLine": 572,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            }\n        }\n\n        public boolean run(Context c, String id) throws IOException {\n            try {\n                if (c == null || id == null) {\n                    throw new IOException(\"Context or identifier is null\");"
            },
            {
              "step": 58,
              "variableName": "task",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 59,
              "variableName": "task",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 60,
              "variableName": "getName",
              "startLine": 100,
              "startColumn": 19,
              "endLine": 100,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return name\n     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 62,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 63,
              "variableName": "task.getName()",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 86,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 64,
              "variableName": "\"Error executing curation task '\" + task.getName() + \"'; \" + ioe",
              "startLine": 583,
              "startColumn": 36,
              "endLine": 583,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 52,
              "startColumn": 21,
              "endLine": 52,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];"
            },
            {
              "step": 1,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 2,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 3,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 4,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 5,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 6,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 8,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 10,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 12,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 13,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 18,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 19,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 20,
              "variableName": "taskName",
              "startLine": 151,
              "startColumn": 50,
              "endLine": 151,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 21,
              "variableName": "String taskName",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "     * @return task\n     * an object that implements the CurationTask interface\n     */\n    public ResolvedTask resolveTask(String taskName) {\n        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {"
            },
            {
              "step": 22,
              "variableName": "taskName",
              "startLine": 168,
              "startColumn": 37,
              "endLine": 168,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 23,
              "variableName": "String taskName",
              "startLine": 35,
              "startColumn": 28,
              "endLine": 35,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 24,
              "variableName": "taskName",
              "startLine": 36,
              "startColumn": 25,
              "endLine": 36,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 25,
              "variableName": "this",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 26,
              "variableName": "ResolvedTask",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 27,
              "variableName": "new ResolvedTask(taskName, ctask)",
              "startLine": 168,
              "startColumn": 20,
              "endLine": 168,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 28,
              "variableName": "resolver.resolveTask(taskName)",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 29,
              "variableName": "task",
              "startLine": 155,
              "startColumn": 52,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 30,
              "variableName": "ResolvedTask task",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 31,
              "variableName": "task",
              "startLine": 552,
              "startColumn": 25,
              "endLine": 552,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 32,
              "variableName": "this",
              "startLine": 552,
              "startColumn": 13,
              "endLine": 552,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 33,
              "variableName": "TaskRunner",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 34,
              "variableName": "new TaskRunner(task)",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 35,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 36,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 37,
              "variableName": "addTask",
              "startLine": 150,
              "startColumn": 20,
              "endLine": 150,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 38,
              "variableName": "curator",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 39,
              "variableName": "curator",
              "startLine": 158,
              "startColumn": 13,
              "endLine": 158,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }\n        queue.release(this.queue, ticket, true);\n        return ticket;"
            },
            {
              "step": 40,
              "variableName": "curate",
              "startLine": 243,
              "startColumn": 17,
              "endLine": 243,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param id an object identifier\n     * @throws IOException if IO error\n     */\n    public void curate(Context c, String id) throws IOException {\n        if (id == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null object identifier!\");\n        }"
            },
            {
              "step": 41,
              "variableName": "trMap",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 42,
              "variableName": "trMap",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 43,
              "variableName": "trMap.get(taskName)",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 44,
              "variableName": "run",
              "startLine": 572,
              "startColumn": 24,
              "endLine": 572,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            }\n        }\n\n        public boolean run(Context c, String id) throws IOException {\n            try {\n                if (c == null || id == null) {\n                    throw new IOException(\"Context or identifier is null\");"
            },
            {
              "step": 45,
              "variableName": "task",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 46,
              "variableName": "task",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 47,
              "variableName": "getName",
              "startLine": 100,
              "startColumn": 19,
              "endLine": 100,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return name\n     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n"
            },
            {
              "step": 48,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 49,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 50,
              "variableName": "task.getName()",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 86,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 51,
              "variableName": "\"Error executing curation task '\" + task.getName() + \"'; \" + ioe",
              "startLine": 583,
              "startColumn": 36,
              "endLine": 583,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "tokens",
              "startLine": 53,
              "startColumn": 22,
              "endLine": 53,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }"
            },
            {
              "step": 1,
              "variableName": "tokens[2]",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 2,
              "variableName": "tasks",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 14,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];\n        tasks = tokens[2];\n        objId = tokens[3];\n    }\n"
            },
            {
              "step": 3,
              "variableName": "TaskQueueEntry",
              "startLine": 50,
              "startColumn": 12,
              "endLine": 50,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     *\n     * @param entry list of field values separated by '|'s\n     */\n    public TaskQueueEntry(String entry) {\n        String[] tokens = entry.split(\"\\\\|\");\n        epersonId = tokens[0];\n        submitTime = tokens[1];"
            },
            {
              "step": 4,
              "variableName": "new TaskQueueEntry(entryStr)",
              "startLine": 124,
              "startColumn": 46,
              "endLine": 124,
              "endColumn": 74,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 5,
              "variableName": "entrySet",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                        while ((entryStr = reader.readLine()) != null) {\n                            entryStr = entryStr.trim();\n                            if (entryStr.length() > 0) {\n                                entrySet.add(new TaskQueueEntry(entryStr));\n                            }\n                        }\n                    } finally {"
            },
            {
              "step": 6,
              "variableName": "entrySet",
              "startLine": 139,
              "startColumn": 16,
              "endLine": 139,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/FileTaskQueue.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "                queueIdx++;\n            }\n        }\n        return entrySet;\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "queue.dequeue(this.queue, ticket)",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "HashSet [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 8,
              "variableName": "queue.dequeue(this.queue, ticket).iterator()",
              "startLine": 148,
              "startColumn": 46,
              "endLine": 148,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "    private long runQueue(TaskQueue queue, Curator curator) throws SQLException, AuthorizeException, IOException {\n        // use current time as our reader 'ticket'\n        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "entryIter",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Iterator [<element>, tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 10,
              "variableName": "entryIter.next()",
              "startLine": 150,
              "startColumn": 36,
              "endLine": 150,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "        long ticket = System.currentTimeMillis();\n        Iterator<TaskQueueEntry> entryIter = queue.dequeue(this.queue, ticket).iterator();\n        while (entryIter.hasNext()) {\n            TaskQueueEntry entry = entryIter.next();\n            if (verbose) {\n                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }"
            },
            {
              "step": 11,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 12,
              "variableName": "getTaskNames",
              "startLine": 84,
              "startColumn": 25,
              "endLine": 84,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * @return tasks\n     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n"
            },
            {
              "step": 13,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "TaskQueueEntry [tasks] : String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "tasks",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "tasks.split(\",\")",
              "startLine": 85,
              "startColumn": 30,
              "endLine": 85,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "String[]",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Arrays.asList(tasks.split(\",\"))",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskQueueEntry.java",
              "type": "List [<element>] : Object",
              "code": "     * the list of task names (Plugin names)\n     */\n    public List<String> getTaskNames() {\n        return Arrays.asList(tasks.split(\",\"));\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "entry.getTaskNames()",
              "startLine": 155,
              "startColumn": 36,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "List [<element>] : Object",
              "code": "                super.handler.logInfo(\"Curating id: \" + entry.getObjectId());\n            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());"
            },
            {
              "step": 18,
              "variableName": "taskName",
              "startLine": 156,
              "startColumn": 33,
              "endLine": 156,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 19,
              "variableName": "String taskName",
              "startLine": 150,
              "startColumn": 28,
              "endLine": 150,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 20,
              "variableName": "taskName",
              "startLine": 151,
              "startColumn": 50,
              "endLine": 151,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 21,
              "variableName": "String taskName",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "     * @return task\n     * an object that implements the CurationTask interface\n     */\n    public ResolvedTask resolveTask(String taskName) {\n        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {"
            },
            {
              "step": 22,
              "variableName": "taskName",
              "startLine": 168,
              "startColumn": 37,
              "endLine": 168,
              "endColumn": 45,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 23,
              "variableName": "String taskName",
              "startLine": 35,
              "startColumn": 28,
              "endLine": 35,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 24,
              "variableName": "taskName",
              "startLine": 36,
              "startColumn": 25,
              "endLine": 36,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 25,
              "variableName": "this",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations\n        Class ctClass = cTask.getClass();"
            },
            {
              "step": 26,
              "variableName": "ResolvedTask",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "    private int[] codes = null;\n\n\n    protected ResolvedTask(String taskName, CurationTask cTask) {\n        this.taskName = taskName;\n        this.cTask = cTask;\n        // process annotations"
            },
            {
              "step": 27,
              "variableName": "new ResolvedTask(taskName, ctask)",
              "startLine": 168,
              "startColumn": 20,
              "endLine": 168,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/TaskResolver.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        CurationTask ctask = (CurationTask) CoreServiceFactory.getInstance().getPluginService()\n                                                              .getNamedPlugin(CurationTask.class, taskName);\n        if (ctask != null) {\n            return new ResolvedTask(taskName, ctask);\n        }\n        // maybe it is implemented by a script?\n        loadCatalog();"
            },
            {
              "step": 28,
              "variableName": "resolver.resolveTask(taskName)",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 59,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {\n                task.init(this);"
            },
            {
              "step": 29,
              "variableName": "task",
              "startLine": 155,
              "startColumn": 52,
              "endLine": 155,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 30,
              "variableName": "ResolvedTask task",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 31,
              "variableName": "task",
              "startLine": 552,
              "startColumn": 25,
              "endLine": 552,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 32,
              "variableName": "this",
              "startLine": 552,
              "startColumn": 13,
              "endLine": 552,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n\n        public boolean run(DSpaceObject dso) throws IOException {"
            },
            {
              "step": 33,
              "variableName": "TaskRunner",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        int statusCode = CURATE_UNSET;\n        String result = null;\n\n        public TaskRunner(ResolvedTask task) {\n            this.task = task;\n        }\n"
            },
            {
              "step": 34,
              "variableName": "new TaskRunner(task)",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 35,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 36,
              "variableName": "trMap",
              "startLine": 155,
              "startColumn": 17,
              "endLine": 155,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "        if (task != null) {\n            try {\n                task.init(this);\n                trMap.put(taskName, new TaskRunner(task));\n                // performance order currently FIFO - to be revisited\n                perfList.add(taskName);\n            } catch (IOException ioE) {"
            },
            {
              "step": 37,
              "variableName": "addTask",
              "startLine": 150,
              "startColumn": 20,
              "endLine": 150,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param taskName - logical name of task\n     * @return this curator - to support concatenating invocation style\n     */\n    public Curator addTask(String taskName) {\n        ResolvedTask task = resolver.resolveTask(taskName);\n        if (task != null) {\n            try {"
            },
            {
              "step": 38,
              "variableName": "curator",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            }\n            curator.clear();\n            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }"
            },
            {
              "step": 39,
              "variableName": "curator",
              "startLine": 158,
              "startColumn": 13,
              "endLine": 158,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curation.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "            for (String taskName : entry.getTaskNames()) {\n                curator.addTask(taskName);\n            }\n            curator.curate(context, entry.getObjectId());\n        }\n        queue.release(this.queue, ticket, true);\n        return ticket;"
            },
            {
              "step": 40,
              "variableName": "curate",
              "startLine": 243,
              "startColumn": 17,
              "endLine": 243,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "     * @param id an object identifier\n     * @throws IOException if IO error\n     */\n    public void curate(Context c, String id) throws IOException {\n        if (id == null) {\n            throw new IOException(\"Cannot perform curation task(s) on a null object identifier!\");\n        }"
            },
            {
              "step": 41,
              "variableName": "trMap",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "Curator [trMap, <map.value>, task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 42,
              "variableName": "trMap",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "HashMap [<map.value>, task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 43,
              "variableName": "trMap.get(taskName)",
              "startLine": 256,
              "startColumn": 21,
              "endLine": 256,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                curate(dso);\n            } else {\n                for (String taskName : perfList) {\n                    trMap.get(taskName).run(c, id);\n                }\n            }\n            // if curation scoped, commit transaction"
            },
            {
              "step": 44,
              "variableName": "run",
              "startLine": 572,
              "startColumn": 24,
              "endLine": 572,
              "endColumn": 27,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "            }\n        }\n\n        public boolean run(Context c, String id) throws IOException {\n            try {\n                if (c == null || id == null) {\n                    throw new IOException(\"Context or identifier is null\");"
            },
            {
              "step": 45,
              "variableName": "task",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "TaskRunner [task, taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 46,
              "variableName": "task",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 47,
              "variableName": "getName",
              "startLine": 100,
              "startColumn": 19,
              "endLine": 100,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * @return name\n     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n"
            },
            {
              "step": 48,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "ResolvedTask [taskName] : String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 49,
              "variableName": "taskName",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/ResolvedTask.java",
              "type": "String",
              "code": "     * the local name of the task\n     */\n    public String getName() {\n        return taskName;\n    }\n\n    /**"
            },
            {
              "step": 50,
              "variableName": "task.getName()",
              "startLine": 583,
              "startColumn": 72,
              "endLine": 583,
              "endColumn": 86,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "String",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            },
            {
              "step": 51,
              "variableName": "\"Error executing curation task '\" + task.getName() + \"'; \" + ioe",
              "startLine": 583,
              "startColumn": 36,
              "endLine": 583,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/curate/Curator.java",
              "type": "",
              "code": "                return !suspend(statusCode);\n            } catch (IOException ioe) {\n                //log error & pass exception upwards\n                System.out.println(\"Error executing curation task '\" + task.getName() + \"'; \" + ioe);\n                throw ioe;\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 29,
      "fileName": "EpoIdMetadataContributor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 175,
              "startColumn": 78,
              "endLine": 175,
              "endColumn": 83,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/importer/external/metadatamapping/contributor/EpoIdMetadataContributor.java",
              "type": "String",
              "code": "                    Namespace.getNamespace(\"xlink\", \"http://www.w3.org/1999/xlink\"),\n                    Namespace.getNamespace(\"ops\", \"http://ops.epo.org\"),\n                    Namespace.getNamespace(\"ns\", \"http://www.epo.org/exchange\"));\n            XPathExpression<Element> xpath = XPathFactory.instance().compile(query, Filters.element(), null,\n                    namespaces);\n            List<Element> elements = xpath.evaluate(element);\n            for (Element el : elements) {"
            },
            {
              "step": 1,
              "variableName": "query",
              "startLine": 193,
              "startColumn": 32,
              "endLine": 193,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/importer/external/metadatamapping/contributor/EpoIdMetadataContributor.java",
              "type": "",
              "code": "            }\n            return values;\n        } catch (JaxenException e) {\n            System.err.println(query);\n            throw new RuntimeException(e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 30,
      "fileName": "ClassicDSpaceLogConverter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "myConfigFile",
              "startLine": 189,
              "startColumn": 61,
              "endLine": 189,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/CreateStatReport.java",
              "type": "String",
              "code": "        myOutFile.append(outputSuffix);\n\n        LogAnalyser\n            .processLogs(context, myLogDir, myFileTemplate, myConfigFile, myOutFile.toString(), myStartDate, myEndDate,\n                         myLookUp);\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String myConfigFile",
              "startLine": 436,
              "startColumn": 61,
              "endLine": 436,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @throws SearchServiceException if search error\n     */\n    public static String processLogs(Context context, String myLogDir,\n                                     String myFileTemplate, String myConfigFile,\n                                     String myOutFile, Date myStartDate,\n                                     Date myEndDate, boolean myLookUp)\n        throws IOException, SQLException, SearchServiceException {"
            },
            {
              "step": 2,
              "variableName": "myConfigFile",
              "startLine": 461,
              "startColumn": 49,
              "endLine": 461,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        itemTypes = new ArrayList<>();\n\n        // set the parameters for this analysis\n        setParameters(myLogDir, myFileTemplate, myConfigFile, myOutFile, myStartDate, myEndDate, myLookUp);\n\n        // pre prepare our standard file readers and buffered readers\n        FileReader fr = null;"
            },
            {
              "step": 3,
              "variableName": "String myConfigFile",
              "startLine": 660,
              "startColumn": 38,
              "endLine": 660,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param myLookUp       requested look up force flag\n     */\n    public static void setParameters(String myLogDir, String myFileTemplate,\n                                     String myConfigFile, String myOutFile,\n                                     Date myStartDate, Date myEndDate,\n                                     boolean myLookUp) {\n"
            },
            {
              "step": 4,
              "variableName": "myConfigFile",
              "startLine": 675,
              "startColumn": 26,
              "endLine": 675,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        }\n\n        if (myConfigFile != null) {\n            configFile = myConfigFile;\n        }\n\n        if (myStartDate != null) {"
            },
            {
              "step": 5,
              "variableName": "configFile",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "    /**\n     * the configuration file from which to configure the analyser\n     */\n    private static String configFile = configurationService.getProperty(\"dspace.dir\")\n            + File.separator + \"config\" + File.separator + \"dstat.cfg\";\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "configFile",
              "startLine": 944,
              "startColumn": 16,
              "endLine": 944,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @return The name of the config file\n     */\n    public static String getConfigFile() {\n        return configFile;\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "LogAnalyser.getConfigFile()",
              "startLine": 340,
              "startColumn": 65,
              "endLine": 340,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "        try {\n            LogAnalyser.readConfig();\n        } catch (IOException ioe) {\n            System.err.println(\"Unable to read config file: \" + LogAnalyser.getConfigFile());\n            System.exit(1);\n        }\n"
            },
            {
              "step": 8,
              "variableName": "\"Unable to read config file: \" + LogAnalyser.getConfigFile()",
              "startLine": 340,
              "startColumn": 32,
              "endLine": 340,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "",
              "code": "        try {\n            LogAnalyser.readConfig();\n        } catch (IOException ioe) {\n            System.err.println(\"Unable to read config file: \" + LogAnalyser.getConfigFile());\n            System.exit(1);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "myConfigFile",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 73,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/CreateStatReport.java",
              "type": "String",
              "code": "        myOutFile.append(outputSuffix);\n\n        LogAnalyser\n            .processLogs(context, myLogDir, myFileTemplate, myConfigFile, myOutFile.toString(), myStartDate, myEndDate,\n                         myLookUp);\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String myConfigFile",
              "startLine": 436,
              "startColumn": 61,
              "endLine": 436,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @throws SearchServiceException if search error\n     */\n    public static String processLogs(Context context, String myLogDir,\n                                     String myFileTemplate, String myConfigFile,\n                                     String myOutFile, Date myStartDate,\n                                     Date myEndDate, boolean myLookUp)\n        throws IOException, SQLException, SearchServiceException {"
            },
            {
              "step": 2,
              "variableName": "myConfigFile",
              "startLine": 461,
              "startColumn": 49,
              "endLine": 461,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        itemTypes = new ArrayList<>();\n\n        // set the parameters for this analysis\n        setParameters(myLogDir, myFileTemplate, myConfigFile, myOutFile, myStartDate, myEndDate, myLookUp);\n\n        // pre prepare our standard file readers and buffered readers\n        FileReader fr = null;"
            },
            {
              "step": 3,
              "variableName": "String myConfigFile",
              "startLine": 660,
              "startColumn": 38,
              "endLine": 660,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param myLookUp       requested look up force flag\n     */\n    public static void setParameters(String myLogDir, String myFileTemplate,\n                                     String myConfigFile, String myOutFile,\n                                     Date myStartDate, Date myEndDate,\n                                     boolean myLookUp) {\n"
            },
            {
              "step": 4,
              "variableName": "myConfigFile",
              "startLine": 675,
              "startColumn": 26,
              "endLine": 675,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        }\n\n        if (myConfigFile != null) {\n            configFile = myConfigFile;\n        }\n\n        if (myStartDate != null) {"
            },
            {
              "step": 5,
              "variableName": "configFile",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "    /**\n     * the configuration file from which to configure the analyser\n     */\n    private static String configFile = configurationService.getProperty(\"dspace.dir\")\n            + File.separator + \"config\" + File.separator + \"dstat.cfg\";\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "configFile",
              "startLine": 944,
              "startColumn": 16,
              "endLine": 944,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @return The name of the config file\n     */\n    public static String getConfigFile() {\n        return configFile;\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "LogAnalyser.getConfigFile()",
              "startLine": 340,
              "startColumn": 65,
              "endLine": 340,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "        try {\n            LogAnalyser.readConfig();\n        } catch (IOException ioe) {\n            System.err.println(\"Unable to read config file: \" + LogAnalyser.getConfigFile());\n            System.exit(1);\n        }\n"
            },
            {
              "step": 8,
              "variableName": "\"Unable to read config file: \" + LogAnalyser.getConfigFile()",
              "startLine": 340,
              "startColumn": 32,
              "endLine": 340,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "",
              "code": "        try {\n            LogAnalyser.readConfig();\n        } catch (IOException ioe) {\n            System.err.println(\"Unable to read config file: \" + LogAnalyser.getConfigFile());\n            System.exit(1);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "myConfigFile",
              "startLine": 266,
              "startColumn": 72,
              "endLine": 266,
              "endColumn": 84,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/CreateStatReport.java",
              "type": "String",
              "code": "            myOutFile.append(currentMonth.get(Calendar.MONTH) + 1);\n            myOutFile.append(outputSuffix);\n\n            LogAnalyser.processLogs(context, myLogDir, myFileTemplate, myConfigFile, myOutFile.toString(), myStartDate,\n                                    myEndDate, myLookUp);\n\n            currentMonth.add(Calendar.MONTH, 1);"
            },
            {
              "step": 1,
              "variableName": "String myConfigFile",
              "startLine": 436,
              "startColumn": 61,
              "endLine": 436,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @throws SearchServiceException if search error\n     */\n    public static String processLogs(Context context, String myLogDir,\n                                     String myFileTemplate, String myConfigFile,\n                                     String myOutFile, Date myStartDate,\n                                     Date myEndDate, boolean myLookUp)\n        throws IOException, SQLException, SearchServiceException {"
            },
            {
              "step": 2,
              "variableName": "myConfigFile",
              "startLine": 461,
              "startColumn": 49,
              "endLine": 461,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        itemTypes = new ArrayList<>();\n\n        // set the parameters for this analysis\n        setParameters(myLogDir, myFileTemplate, myConfigFile, myOutFile, myStartDate, myEndDate, myLookUp);\n\n        // pre prepare our standard file readers and buffered readers\n        FileReader fr = null;"
            },
            {
              "step": 3,
              "variableName": "String myConfigFile",
              "startLine": 660,
              "startColumn": 38,
              "endLine": 660,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param myLookUp       requested look up force flag\n     */\n    public static void setParameters(String myLogDir, String myFileTemplate,\n                                     String myConfigFile, String myOutFile,\n                                     Date myStartDate, Date myEndDate,\n                                     boolean myLookUp) {\n"
            },
            {
              "step": 4,
              "variableName": "myConfigFile",
              "startLine": 675,
              "startColumn": 26,
              "endLine": 675,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        }\n\n        if (myConfigFile != null) {\n            configFile = myConfigFile;\n        }\n\n        if (myStartDate != null) {"
            },
            {
              "step": 5,
              "variableName": "configFile",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "    /**\n     * the configuration file from which to configure the analyser\n     */\n    private static String configFile = configurationService.getProperty(\"dspace.dir\")\n            + File.separator + \"config\" + File.separator + \"dstat.cfg\";\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "configFile",
              "startLine": 944,
              "startColumn": 16,
              "endLine": 944,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @return The name of the config file\n     */\n    public static String getConfigFile() {\n        return configFile;\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "LogAnalyser.getConfigFile()",
              "startLine": 340,
              "startColumn": 65,
              "endLine": 340,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "        try {\n            LogAnalyser.readConfig();\n        } catch (IOException ioe) {\n            System.err.println(\"Unable to read config file: \" + LogAnalyser.getConfigFile());\n            System.exit(1);\n        }\n"
            },
            {
              "step": 8,
              "variableName": "\"Unable to read config file: \" + LogAnalyser.getConfigFile()",
              "startLine": 340,
              "startColumn": 32,
              "endLine": 340,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "",
              "code": "        try {\n            LogAnalyser.readConfig();\n        } catch (IOException ioe) {\n            System.err.println(\"Unable to read config file: \" + LogAnalyser.getConfigFile());\n            System.exit(1);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "myConfigFile",
              "startLine": 414,
              "startColumn": 56,
              "endLine": 414,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        myLookUp = cmd.hasOption(\"lookup\");\n\n        // now call the method which actually processes the logs\n        processLogs(context, myLogDir, myFileTemplate, myConfigFile, myOutFile,\n                myStartDate, myEndDate, myLookUp);\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String myConfigFile",
              "startLine": 436,
              "startColumn": 61,
              "endLine": 436,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @throws SearchServiceException if search error\n     */\n    public static String processLogs(Context context, String myLogDir,\n                                     String myFileTemplate, String myConfigFile,\n                                     String myOutFile, Date myStartDate,\n                                     Date myEndDate, boolean myLookUp)\n        throws IOException, SQLException, SearchServiceException {"
            },
            {
              "step": 2,
              "variableName": "myConfigFile",
              "startLine": 461,
              "startColumn": 49,
              "endLine": 461,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        itemTypes = new ArrayList<>();\n\n        // set the parameters for this analysis\n        setParameters(myLogDir, myFileTemplate, myConfigFile, myOutFile, myStartDate, myEndDate, myLookUp);\n\n        // pre prepare our standard file readers and buffered readers\n        FileReader fr = null;"
            },
            {
              "step": 3,
              "variableName": "String myConfigFile",
              "startLine": 660,
              "startColumn": 38,
              "endLine": 660,
              "endColumn": 57,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @param myLookUp       requested look up force flag\n     */\n    public static void setParameters(String myLogDir, String myFileTemplate,\n                                     String myConfigFile, String myOutFile,\n                                     Date myStartDate, Date myEndDate,\n                                     boolean myLookUp) {\n"
            },
            {
              "step": 4,
              "variableName": "myConfigFile",
              "startLine": 675,
              "startColumn": 26,
              "endLine": 675,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "        }\n\n        if (myConfigFile != null) {\n            configFile = myConfigFile;\n        }\n\n        if (myStartDate != null) {"
            },
            {
              "step": 5,
              "variableName": "configFile",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "    /**\n     * the configuration file from which to configure the analyser\n     */\n    private static String configFile = configurationService.getProperty(\"dspace.dir\")\n            + File.separator + \"config\" + File.separator + \"dstat.cfg\";\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "configFile",
              "startLine": 944,
              "startColumn": 16,
              "endLine": 944,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/statistics/LogAnalyser.java",
              "type": "String",
              "code": "     * @return The name of the config file\n     */\n    public static String getConfigFile() {\n        return configFile;\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "LogAnalyser.getConfigFile()",
              "startLine": 340,
              "startColumn": 65,
              "endLine": 340,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "        try {\n            LogAnalyser.readConfig();\n        } catch (IOException ioe) {\n            System.err.println(\"Unable to read config file: \" + LogAnalyser.getConfigFile());\n            System.exit(1);\n        }\n"
            },
            {
              "step": 8,
              "variableName": "\"Unable to read config file: \" + LogAnalyser.getConfigFile()",
              "startLine": 340,
              "startColumn": 32,
              "endLine": 340,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "",
              "code": "        try {\n            LogAnalyser.readConfig();\n        } catch (IOException ioe) {\n            System.err.println(\"Unable to read config file: \" + LogAnalyser.getConfigFile());\n            System.exit(1);\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 31,
      "fileName": "DSpaceConfigurationService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "userHome",
              "startLine": 646,
              "startColumn": 31,
              "endLine": 646,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "\n        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n"
            },
            {
              "step": 1,
              "variableName": "userHome",
              "startLine": 647,
              "startColumn": 20,
              "endLine": 647,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n\n        // Finally, try root path (\"/\")"
            },
            {
              "step": 2,
              "variableName": "getDSpaceHome(providedHome)",
              "startLine": 488,
              "startColumn": 25,
              "endLine": 488,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 3,
              "variableName": "this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 9,
              "endLine": 491,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 5,
              "variableName": "this",
              "startLine": 512,
              "startColumn": 13,
              "endLine": 512,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            DefaultListDelimiterHandler listDelimiterHandler = new DefaultListDelimiterHandler(CONFIG_LIST_DELIMITER);\n            // Load our configuration definition, which in turn loads all our config files/settings\n            // See: http://commons.apache.org/proper/commons-configuration/userguide/howto_combinedbuilder.html\n            this.configurationBuilder = new ReloadingCombinedConfigurationBuilder()\n                .configure(params.fileBased()\n                                 .setFile(new File(this.configDefinition))\n                                 .setListDelimiterHandler(listDelimiterHandler));"
            },
            {
              "step": 6,
              "variableName": "setDynamicProperties()",
              "startLine": 537,
              "startColumn": 9,
              "endLine": 537,
              "endColumn": 31,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        }\n\n        // Finally, set any dynamic, default properties\n        setDynamicProperties();\n\n        log.info(\"Started up configuration service and loaded settings: {}\", this::toString);\n    }"
            },
            {
              "step": 7,
              "variableName": "setDynamicProperties",
              "startLine": 571,
              "startColumn": 18,
              "endLine": 571,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * Sets properties which are determined dynamically rather than\n     * loaded via configuration.\n     */\n    private void setDynamicProperties() {\n        // Ensure our DSPACE_HOME property is set to the determined homePath\n        setProperty(DSPACE_HOME, this.homePath);\n"
            },
            {
              "step": 8,
              "variableName": "setProperty(DSPACE_HOME, this.homePath)",
              "startLine": 573,
              "startColumn": 9,
              "endLine": 573,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     */\n    private void setDynamicProperties() {\n        // Ensure our DSPACE_HOME property is set to the determined homePath\n        setProperty(DSPACE_HOME, this.homePath);\n\n        try {\n            // Attempt to set a default \"serverId\" property to value of hostname"
            },
            {
              "step": 9,
              "variableName": "setProperty",
              "startLine": 373,
              "startColumn": 33,
              "endLine": 373,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @see org.dspace.services.ConfigurationService#setProperty(java.lang.String, java.lang.Object)\n     */\n    @Override\n    public synchronized boolean setProperty(String name, Object value) {\n        // If the value is a type of String, trim any leading/trailing spaces before saving it.\n        if (value != null && String.class.isInstance(value)) {\n            value = ((String) value).trim();"
            },
            {
              "step": 10,
              "variableName": "getConfiguration()",
              "startLine": 383,
              "startColumn": 31,
              "endLine": 383,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        if (name == null) {\n            throw new IllegalArgumentException(\"name cannot be null for setting configuration\");\n        } else {\n            Object oldValue = getConfiguration().getProperty(name);\n\n            if (value == null && oldValue != null) {\n                changed = true;"
            },
            {
              "step": 11,
              "variableName": "getConfiguration",
              "startLine": 152,
              "startColumn": 26,
              "endLine": 152,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @see org.dspace.services.ConfigurationService#getConfiguration()\n     */\n    @Override\n    public Configuration getConfiguration() {\n        try {\n            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {"
            },
            {
              "step": 12,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 87,
              "endLine": 156,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        try {\n            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }"
            },
            {
              "step": 13,
              "variableName": "this.configDefinition",
              "startLine": 156,
              "startColumn": 87,
              "endLine": 156,
              "endColumn": 108,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        try {\n            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }"
            },
            {
              "step": 14,
              "variableName": "\"Unable to get configuration object based on definition at \" + this.configDefinition",
              "startLine": 157,
              "startColumn": 32,
              "endLine": 157,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "",
              "code": "            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "userHome",
              "startLine": 646,
              "startColumn": 31,
              "endLine": 646,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "\n        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n"
            },
            {
              "step": 1,
              "variableName": "userHome",
              "startLine": 647,
              "startColumn": 20,
              "endLine": 647,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n\n        // Finally, try root path (\"/\")"
            },
            {
              "step": 2,
              "variableName": "getDSpaceHome(providedHome)",
              "startLine": 488,
              "startColumn": 25,
              "endLine": 488,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 3,
              "variableName": "this",
              "startLine": 488,
              "startColumn": 9,
              "endLine": 488,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 9,
              "endLine": 491,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 5,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 6,
              "variableName": "this.homePath",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 7,
              "variableName": "this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 8,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 9,
              "endLine": 491,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 9,
              "variableName": "loadInitialConfig",
              "startLine": 486,
              "startColumn": 18,
              "endLine": 486,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     *\n     * @param providedHome DSpace home directory, or null.\n     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n"
            },
            {
              "step": 10,
              "variableName": "loadInitialConfig(providedHome)",
              "startLine": 98,
              "startColumn": 9,
              "endLine": 98,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @param providedHome provided home directory\n     */\n    public DSpaceConfigurationService(String providedHome) {\n        loadInitialConfig(providedHome);\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "DSpaceConfigurationService",
              "startLine": 97,
              "startColumn": 12,
              "endLine": 97,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     *\n     * @param providedHome provided home directory\n     */\n    public DSpaceConfigurationService(String providedHome) {\n        loadInitialConfig(providedHome);\n    }\n"
            },
            {
              "step": 12,
              "variableName": "new DSpaceConfigurationService(dspaceHome)",
              "startLine": 154,
              "startColumn": 58,
              "endLine": 154,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/DSpaceKernelImpl.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            long startTime = System.currentTimeMillis();\n\n            // create the configuration service and get the configuration\n            DSpaceConfigurationService dsConfigService = new DSpaceConfigurationService(dspaceHome);\n            configurationService = dsConfigService;\n\n            // startup the service manager"
            },
            {
              "step": 13,
              "variableName": "dsConfigService",
              "startLine": 158,
              "startColumn": 61,
              "endLine": 158,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/DSpaceKernelImpl.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            configurationService = dsConfigService;\n\n            // startup the service manager\n            serviceManagerSystem = new DSpaceServiceManager(dsConfigService);\n            serviceManagerSystem.startup();\n\n            // initialize the static"
            },
            {
              "step": 14,
              "variableName": "DSpaceConfigurationService configurationService",
              "startLine": 78,
              "startColumn": 33,
              "endLine": 78,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/DSpaceServiceManager.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     *\n     * @param configurationService current DSpace configuration service\n     */\n    public DSpaceServiceManager(DSpaceConfigurationService configurationService) {\n        if (configurationService == null) {\n            throw new IllegalArgumentException(\"Failure creating service manager:  configuration service is null\");\n        }"
            },
            {
              "step": 15,
              "variableName": "configurationService",
              "startLine": 83,
              "startColumn": 27,
              "endLine": 83,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/DSpaceServiceManager.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            throw new IllegalArgumentException(\"Failure creating service manager:  configuration service is null\");\n        }\n        this.configurationService = configurationService;\n        this.developing = configurationService.getPropertyAsType(\"service.manager.developing\", boolean.class);\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "getPropertyAsType",
              "startLine": 295,
              "startColumn": 18,
              "endLine": 295,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @see org.dspace.services.ConfigurationService#getPropertyAsType(java.lang.String, java.lang.Class)\n     */\n    @Override\n    public <T> T getPropertyAsType(String name, Class<T> type) {\n        return convert(name, type);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "convert(name, type)",
              "startLine": 296,
              "startColumn": 16,
              "endLine": 296,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     */\n    @Override\n    public <T> T getPropertyAsType(String name, Class<T> type) {\n        return convert(name, type);\n    }\n\n    /* (non-Javadoc)"
            },
            {
              "step": 18,
              "variableName": "convert",
              "startLine": 710,
              "startColumn": 19,
              "endLine": 710,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @return converted value\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T> T convert(String name, Class<T> type) {\n\n        // If this key doesn't exist, just return null\n        if (!getConfiguration().containsKey(name)) {"
            },
            {
              "step": 19,
              "variableName": "getConfiguration()",
              "startLine": 713,
              "startColumn": 14,
              "endLine": 713,
              "endColumn": 32,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "    private <T> T convert(String name, Class<T> type) {\n\n        // If this key doesn't exist, just return null\n        if (!getConfiguration().containsKey(name)) {\n            // Special case. For booleans, return false if key doesn't exist\n            if (Boolean.class.equals(type) || boolean.class.equals(type)) {\n                return (T) Boolean.FALSE;"
            },
            {
              "step": 20,
              "variableName": "getConfiguration",
              "startLine": 152,
              "startColumn": 26,
              "endLine": 152,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @see org.dspace.services.ConfigurationService#getConfiguration()\n     */\n    @Override\n    public Configuration getConfiguration() {\n        try {\n            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {"
            },
            {
              "step": 21,
              "variableName": "this",
              "startLine": 157,
              "startColumn": 95,
              "endLine": 157,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "this.configDefinition",
              "startLine": 157,
              "startColumn": 95,
              "endLine": 157,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "\"Unable to get configuration object based on definition at \" + this.configDefinition",
              "startLine": 157,
              "startColumn": 32,
              "endLine": 157,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "",
              "code": "            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "userHome",
              "startLine": 647,
              "startColumn": 20,
              "endLine": 647,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n\n        // Finally, try root path (\"/\")"
            },
            {
              "step": 1,
              "variableName": "getDSpaceHome(providedHome)",
              "startLine": 488,
              "startColumn": 25,
              "endLine": 488,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 2,
              "variableName": "this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 3,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 9,
              "endLine": 491,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 512,
              "startColumn": 13,
              "endLine": 512,
              "endColumn": 17,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            DefaultListDelimiterHandler listDelimiterHandler = new DefaultListDelimiterHandler(CONFIG_LIST_DELIMITER);\n            // Load our configuration definition, which in turn loads all our config files/settings\n            // See: http://commons.apache.org/proper/commons-configuration/userguide/howto_combinedbuilder.html\n            this.configurationBuilder = new ReloadingCombinedConfigurationBuilder()\n                .configure(params.fileBased()\n                                 .setFile(new File(this.configDefinition))\n                                 .setListDelimiterHandler(listDelimiterHandler));"
            },
            {
              "step": 5,
              "variableName": "setDynamicProperties()",
              "startLine": 537,
              "startColumn": 9,
              "endLine": 537,
              "endColumn": 31,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        }\n\n        // Finally, set any dynamic, default properties\n        setDynamicProperties();\n\n        log.info(\"Started up configuration service and loaded settings: {}\", this::toString);\n    }"
            },
            {
              "step": 6,
              "variableName": "setDynamicProperties",
              "startLine": 571,
              "startColumn": 18,
              "endLine": 571,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * Sets properties which are determined dynamically rather than\n     * loaded via configuration.\n     */\n    private void setDynamicProperties() {\n        // Ensure our DSPACE_HOME property is set to the determined homePath\n        setProperty(DSPACE_HOME, this.homePath);\n"
            },
            {
              "step": 7,
              "variableName": "setProperty(DSPACE_HOME, this.homePath)",
              "startLine": 573,
              "startColumn": 9,
              "endLine": 573,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     */\n    private void setDynamicProperties() {\n        // Ensure our DSPACE_HOME property is set to the determined homePath\n        setProperty(DSPACE_HOME, this.homePath);\n\n        try {\n            // Attempt to set a default \"serverId\" property to value of hostname"
            },
            {
              "step": 8,
              "variableName": "setProperty",
              "startLine": 373,
              "startColumn": 33,
              "endLine": 373,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @see org.dspace.services.ConfigurationService#setProperty(java.lang.String, java.lang.Object)\n     */\n    @Override\n    public synchronized boolean setProperty(String name, Object value) {\n        // If the value is a type of String, trim any leading/trailing spaces before saving it.\n        if (value != null && String.class.isInstance(value)) {\n            value = ((String) value).trim();"
            },
            {
              "step": 9,
              "variableName": "getConfiguration()",
              "startLine": 383,
              "startColumn": 31,
              "endLine": 383,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        if (name == null) {\n            throw new IllegalArgumentException(\"name cannot be null for setting configuration\");\n        } else {\n            Object oldValue = getConfiguration().getProperty(name);\n\n            if (value == null && oldValue != null) {\n                changed = true;"
            },
            {
              "step": 10,
              "variableName": "getConfiguration",
              "startLine": 152,
              "startColumn": 26,
              "endLine": 152,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @see org.dspace.services.ConfigurationService#getConfiguration()\n     */\n    @Override\n    public Configuration getConfiguration() {\n        try {\n            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 87,
              "endLine": 156,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        try {\n            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }"
            },
            {
              "step": 12,
              "variableName": "this.configDefinition",
              "startLine": 156,
              "startColumn": 87,
              "endLine": 156,
              "endColumn": 108,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        try {\n            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }"
            },
            {
              "step": 13,
              "variableName": "\"Unable to get configuration object based on definition at \" + this.configDefinition",
              "startLine": 157,
              "startColumn": 32,
              "endLine": 157,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "",
              "code": "            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "userHome",
              "startLine": 647,
              "startColumn": 20,
              "endLine": 647,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n\n        // Finally, try root path (\"/\")"
            },
            {
              "step": 1,
              "variableName": "getDSpaceHome(providedHome)",
              "startLine": 488,
              "startColumn": 25,
              "endLine": 488,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 2,
              "variableName": "this",
              "startLine": 488,
              "startColumn": 9,
              "endLine": 488,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 3,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 9,
              "endLine": 491,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 5,
              "variableName": "this.homePath",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 6,
              "variableName": "this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 7,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 9,
              "endLine": 491,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 8,
              "variableName": "loadInitialConfig",
              "startLine": 486,
              "startColumn": 18,
              "endLine": 486,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     *\n     * @param providedHome DSpace home directory, or null.\n     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n"
            },
            {
              "step": 9,
              "variableName": "loadInitialConfig(providedHome)",
              "startLine": 98,
              "startColumn": 9,
              "endLine": 98,
              "endColumn": 40,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @param providedHome provided home directory\n     */\n    public DSpaceConfigurationService(String providedHome) {\n        loadInitialConfig(providedHome);\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "DSpaceConfigurationService",
              "startLine": 97,
              "startColumn": 12,
              "endLine": 97,
              "endColumn": 38,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     *\n     * @param providedHome provided home directory\n     */\n    public DSpaceConfigurationService(String providedHome) {\n        loadInitialConfig(providedHome);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "new DSpaceConfigurationService(dspaceHome)",
              "startLine": 154,
              "startColumn": 58,
              "endLine": 154,
              "endColumn": 100,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/DSpaceKernelImpl.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            long startTime = System.currentTimeMillis();\n\n            // create the configuration service and get the configuration\n            DSpaceConfigurationService dsConfigService = new DSpaceConfigurationService(dspaceHome);\n            configurationService = dsConfigService;\n\n            // startup the service manager"
            },
            {
              "step": 12,
              "variableName": "dsConfigService",
              "startLine": 158,
              "startColumn": 61,
              "endLine": 158,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/DSpaceKernelImpl.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            configurationService = dsConfigService;\n\n            // startup the service manager\n            serviceManagerSystem = new DSpaceServiceManager(dsConfigService);\n            serviceManagerSystem.startup();\n\n            // initialize the static"
            },
            {
              "step": 13,
              "variableName": "DSpaceConfigurationService configurationService",
              "startLine": 78,
              "startColumn": 33,
              "endLine": 78,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/DSpaceServiceManager.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     *\n     * @param configurationService current DSpace configuration service\n     */\n    public DSpaceServiceManager(DSpaceConfigurationService configurationService) {\n        if (configurationService == null) {\n            throw new IllegalArgumentException(\"Failure creating service manager:  configuration service is null\");\n        }"
            },
            {
              "step": 14,
              "variableName": "configurationService",
              "startLine": 83,
              "startColumn": 27,
              "endLine": 83,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/DSpaceServiceManager.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            throw new IllegalArgumentException(\"Failure creating service manager:  configuration service is null\");\n        }\n        this.configurationService = configurationService;\n        this.developing = configurationService.getPropertyAsType(\"service.manager.developing\", boolean.class);\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "getPropertyAsType",
              "startLine": 295,
              "startColumn": 18,
              "endLine": 295,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @see org.dspace.services.ConfigurationService#getPropertyAsType(java.lang.String, java.lang.Class)\n     */\n    @Override\n    public <T> T getPropertyAsType(String name, Class<T> type) {\n        return convert(name, type);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "convert(name, type)",
              "startLine": 296,
              "startColumn": 16,
              "endLine": 296,
              "endColumn": 35,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     */\n    @Override\n    public <T> T getPropertyAsType(String name, Class<T> type) {\n        return convert(name, type);\n    }\n\n    /* (non-Javadoc)"
            },
            {
              "step": 17,
              "variableName": "convert",
              "startLine": 710,
              "startColumn": 19,
              "endLine": 710,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @return converted value\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T> T convert(String name, Class<T> type) {\n\n        // If this key doesn't exist, just return null\n        if (!getConfiguration().containsKey(name)) {"
            },
            {
              "step": 18,
              "variableName": "getConfiguration()",
              "startLine": 713,
              "startColumn": 14,
              "endLine": 713,
              "endColumn": 32,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "    private <T> T convert(String name, Class<T> type) {\n\n        // If this key doesn't exist, just return null\n        if (!getConfiguration().containsKey(name)) {\n            // Special case. For booleans, return false if key doesn't exist\n            if (Boolean.class.equals(type) || boolean.class.equals(type)) {\n                return (T) Boolean.FALSE;"
            },
            {
              "step": 19,
              "variableName": "getConfiguration",
              "startLine": 152,
              "startColumn": 26,
              "endLine": 152,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "     * @see org.dspace.services.ConfigurationService#getConfiguration()\n     */\n    @Override\n    public Configuration getConfiguration() {\n        try {\n            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "startLine": 157,
              "startColumn": 95,
              "endLine": 157,
              "endColumn": 99,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [configDefinition] : String",
              "code": "            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "this.configDefinition",
              "startLine": 157,
              "startColumn": 95,
              "endLine": 157,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "\"Unable to get configuration object based on definition at \" + this.configDefinition",
              "startLine": 157,
              "startColumn": 32,
              "endLine": 157,
              "endColumn": 116,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "",
              "code": "            return this.configurationBuilder.getConfiguration();\n        } catch (ConfigurationException ce) {\n            log.error(\"Unable to get configuration object based on definition at {}\", this.configDefinition);\n            System.err.println(\"Unable to get configuration object based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 32,
      "fileName": "DSpaceConfigurationService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "userHome",
              "startLine": 646,
              "startColumn": 31,
              "endLine": 646,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "\n        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n"
            },
            {
              "step": 1,
              "variableName": "userHome",
              "startLine": 647,
              "startColumn": 20,
              "endLine": 647,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n\n        // Finally, try root path (\"/\")"
            },
            {
              "step": 2,
              "variableName": "getDSpaceHome(providedHome)",
              "startLine": 488,
              "startColumn": 25,
              "endLine": 488,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 3,
              "variableName": "\"Unable to load configurations based on definition at \" + this.configDefinition",
              "startLine": 532,
              "startColumn": 32,
              "endLine": 532,
              "endColumn": 111,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "",
              "code": "        } catch (ConfigurationException ce) {\n            log.error(\"Unable to load configurations based on definition at {}\",\n                    this.configDefinition);\n            System.err.println(\"Unable to load configurations based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "userHome",
              "startLine": 646,
              "startColumn": 31,
              "endLine": 646,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "\n        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n"
            },
            {
              "step": 1,
              "variableName": "userHome",
              "startLine": 647,
              "startColumn": 20,
              "endLine": 647,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n\n        // Finally, try root path (\"/\")"
            },
            {
              "step": 2,
              "variableName": "getDSpaceHome(providedHome)",
              "startLine": 488,
              "startColumn": 25,
              "endLine": 488,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 3,
              "variableName": "this",
              "startLine": 488,
              "startColumn": 9,
              "endLine": 488,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 9,
              "endLine": 491,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 5,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 6,
              "variableName": "this.homePath",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 7,
              "variableName": "\"Unable to load configurations based on definition at \" + this.configDefinition",
              "startLine": 532,
              "startColumn": 32,
              "endLine": 532,
              "endColumn": 111,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "",
              "code": "        } catch (ConfigurationException ce) {\n            log.error(\"Unable to load configurations based on definition at {}\",\n                    this.configDefinition);\n            System.err.println(\"Unable to load configurations based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "userHome",
              "startLine": 647,
              "startColumn": 20,
              "endLine": 647,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n\n        // Finally, try root path (\"/\")"
            },
            {
              "step": 1,
              "variableName": "getDSpaceHome(providedHome)",
              "startLine": 488,
              "startColumn": 25,
              "endLine": 488,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 2,
              "variableName": "\"Unable to load configurations based on definition at \" + this.configDefinition",
              "startLine": 532,
              "startColumn": 32,
              "endLine": 532,
              "endColumn": 111,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "",
              "code": "        } catch (ConfigurationException ce) {\n            log.error(\"Unable to load configurations based on definition at {}\",\n                    this.configDefinition);\n            System.err.println(\"Unable to load configurations based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "userHome",
              "startLine": 647,
              "startColumn": 20,
              "endLine": 647,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        // If still not valid, check \"user.home\" system property\n        String userHome = System.getProperty(\"user.home\");\n        if (isValidDSpaceHome(userHome)) {\n            return userHome;\n        }\n\n        // Finally, try root path (\"/\")"
            },
            {
              "step": 1,
              "variableName": "getDSpaceHome(providedHome)",
              "startLine": 488,
              "startColumn": 25,
              "endLine": 488,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 2,
              "variableName": "this",
              "startLine": 488,
              "startColumn": 9,
              "endLine": 488,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "     */\n    private void loadInitialConfig(String providedHome) {\n        // Determine the DSpace home directory\n        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;"
            },
            {
              "step": 3,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 9,
              "endLine": 491,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 37,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "DSpaceConfigurationService [homePath] : String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 5,
              "variableName": "this.homePath",
              "startLine": 491,
              "startColumn": 33,
              "endLine": 491,
              "endColumn": 46,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "String",
              "code": "        this.homePath = getDSpaceHome(providedHome);\n\n        // Based on homePath get full path to the configuration definition\n        this.configDefinition = this.homePath + File.separatorChar + DSPACE_CONFIG_DEFINITION_PATH;\n\n        // Check if our configuration definition exists in the homePath\n        File configDefFile = new File(this.configDefinition);"
            },
            {
              "step": 6,
              "variableName": "\"Unable to load configurations based on definition at \" + this.configDefinition",
              "startLine": 532,
              "startColumn": 32,
              "endLine": 532,
              "endColumn": 111,
              "uri": "DSpace-dspace-8.1/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java",
              "type": "",
              "code": "        } catch (ConfigurationException ce) {\n            log.error(\"Unable to load configurations based on definition at {}\",\n                    this.configDefinition);\n            System.err.println(\"Unable to load configurations based on definition at \" + this.configDefinition);\n            throw new RuntimeException(ce);\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 33,
      "fileName": "LDAPAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"attempting trivial auth of user=\" + netid",
              "startLine": 217,
              "startColumn": 55,
              "endLine": 217,
              "endColumn": 97,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {\n        log.info(LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid));\n\n        // Skip out when no netid or password is given.\n        if (netid == null || password == null) {"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid)",
              "startLine": 217,
              "startColumn": 18,
              "endLine": 217,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {\n        log.info(LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid));\n\n        // Skip out when no netid or password is given.\n        if (netid == null || password == null) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"attempting trivial auth of user=\" + netid",
              "startLine": 217,
              "startColumn": 55,
              "endLine": 217,
              "endColumn": 97,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {\n        log.info(LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid));\n\n        // Skip out when no netid or password is given.\n        if (netid == null || password == null) {"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 32,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 33,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 34,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 35,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 37,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 39,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 40,
              "variableName": "LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid)",
              "startLine": 217,
              "startColumn": 18,
              "endLine": 217,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {\n        log.info(LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid));\n\n        // Skip out when no netid or password is given.\n        if (netid == null || password == null) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"attempting trivial auth of user=\" + netid",
              "startLine": 217,
              "startColumn": 55,
              "endLine": 217,
              "endColumn": 97,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {\n        log.info(LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid));\n\n        // Skip out when no netid or password is given.\n        if (netid == null || password == null) {"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid)",
              "startLine": 217,
              "startColumn": 18,
              "endLine": 217,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {\n        log.info(LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid));\n\n        // Skip out when no netid or password is given.\n        if (netid == null || password == null) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"attempting trivial auth of user=\" + netid",
              "startLine": 217,
              "startColumn": 55,
              "endLine": 217,
              "endColumn": 97,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {\n        log.info(LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid));\n\n        // Skip out when no netid or password is given.\n        if (netid == null || password == null) {"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid)",
              "startLine": 217,
              "startColumn": 18,
              "endLine": 217,
              "endColumn": 98,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "                            String realm,\n                            HttpServletRequest request)\n        throws SQLException {\n        log.info(LogHelper.getHeader(context, \"auth\", \"attempting trivial auth of user=\" + netid));\n\n        // Skip out when no netid or password is given.\n        if (netid == null || password == null) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 34,
      "fileName": "LDAPAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"no DN found for user \" + netid",
              "startLine": 252,
              "startColumn": 62,
              "endLine": 252,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "        // Check a DN was found\n        if (StringUtils.isBlank(dn)) {\n            log.info(LogHelper\n                         .getHeader(context, \"failed_login\", \"no DN found for user \" + netid));\n            return BAD_CREDENTIALS;\n        }\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper",
              "startLine": 251,
              "startColumn": 22,
              "endLine": 252,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "\n        // Check a DN was found\n        if (StringUtils.isBlank(dn)) {\n            log.info(LogHelper\n                         .getHeader(context, \"failed_login\", \"no DN found for user \" + netid));\n            return BAD_CREDENTIALS;\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"no DN found for user \" + netid",
              "startLine": 252,
              "startColumn": 62,
              "endLine": 252,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "        // Check a DN was found\n        if (StringUtils.isBlank(dn)) {\n            log.info(LogHelper\n                         .getHeader(context, \"failed_login\", \"no DN found for user \" + netid));\n            return BAD_CREDENTIALS;\n        }\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 32,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 33,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 34,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 35,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 37,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 39,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 40,
              "variableName": "LogHelper",
              "startLine": 251,
              "startColumn": 22,
              "endLine": 252,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "\n        // Check a DN was found\n        if (StringUtils.isBlank(dn)) {\n            log.info(LogHelper\n                         .getHeader(context, \"failed_login\", \"no DN found for user \" + netid));\n            return BAD_CREDENTIALS;\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"no DN found for user \" + netid",
              "startLine": 252,
              "startColumn": 62,
              "endLine": 252,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "        // Check a DN was found\n        if (StringUtils.isBlank(dn)) {\n            log.info(LogHelper\n                         .getHeader(context, \"failed_login\", \"no DN found for user \" + netid));\n            return BAD_CREDENTIALS;\n        }\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper",
              "startLine": 251,
              "startColumn": 22,
              "endLine": 252,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "\n        // Check a DN was found\n        if (StringUtils.isBlank(dn)) {\n            log.info(LogHelper\n                         .getHeader(context, \"failed_login\", \"no DN found for user \" + netid));\n            return BAD_CREDENTIALS;\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"no DN found for user \" + netid",
              "startLine": 252,
              "startColumn": 62,
              "endLine": 252,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "        // Check a DN was found\n        if (StringUtils.isBlank(dn)) {\n            log.info(LogHelper\n                         .getHeader(context, \"failed_login\", \"no DN found for user \" + netid));\n            return BAD_CREDENTIALS;\n        }\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper",
              "startLine": 251,
              "startColumn": 22,
              "endLine": 252,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "\n        // Check a DN was found\n        if (StringUtils.isBlank(dn)) {\n            log.info(LogHelper\n                         .getHeader(context, \"failed_login\", \"no DN found for user \" + netid));\n            return BAD_CREDENTIALS;\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 35,
      "fileName": "LDAPAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"netid=\" + netid",
              "startLine": 297,
              "startColumn": 63,
              "endLine": 297,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));\n\n                String email = ldap.ldapEmail;\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 297,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "\n            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));\n\n                String email = ldap.ldapEmail;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"netid=\" + netid",
              "startLine": 297,
              "startColumn": 63,
              "endLine": 297,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));\n\n                String email = ldap.ldapEmail;\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 32,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 33,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 34,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 35,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 37,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 39,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 40,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 297,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "\n            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));\n\n                String email = ldap.ldapEmail;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"netid=\" + netid",
              "startLine": 297,
              "startColumn": 63,
              "endLine": 297,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));\n\n                String email = ldap.ldapEmail;\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 297,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "\n            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));\n\n                String email = ldap.ldapEmail;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"netid=\" + netid",
              "startLine": 297,
              "startColumn": 63,
              "endLine": 297,
              "endColumn": 79,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));\n\n                String email = ldap.ldapEmail;\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 296,
              "startColumn": 26,
              "endLine": 297,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "\n            if (ldap.ldapAuthenticate(dn, password, context)) {\n                // Register the new user automatically\n                log.info(LogHelper.getHeader(context,\n                                              \"autoregister\", \"netid=\" + netid));\n\n                String email = ldap.ldapEmail;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 36,
      "fileName": "LDAPAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"Unable to locate email address for acc",
              "startLine": 310,
              "startColumn": 55,
              "endLine": 313,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                    } else {\n                        // We don't have a valid email address. We'll default it to 'netid' but log a warning\n                        log.warn(LogHelper.getHeader(context, \"autoregister\",\n                                                      \"Unable to locate email address for account '\" + netid + \"', so\" +\n                                                          \" it has been set to '\" + netid + \"'. \" +\n                                                          \"Please check the LDAP 'email_field' OR consider \" +\n                                                          \"configuring 'netid_email_domain'.\"));"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"autoregister\",",
              "startLine": 309,
              "startColumn": 34,
              "endLine": 313,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "                        email = netid + configurationService.getProperty(\"authentication-ldap.netid_email_domain\");\n                    } else {\n                        // We don't have a valid email address. We'll default it to 'netid' but log a warning\n                        log.warn(LogHelper.getHeader(context, \"autoregister\",\n                                                      \"Unable to locate email address for account '\" + netid + \"', so\" +\n                                                          \" it has been set to '\" + netid + \"'. \" +\n                                                          \"Please check the LDAP 'email_field' OR consider \" +"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"Unable to locate email address for acc",
              "startLine": 310,
              "startColumn": 55,
              "endLine": 313,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                    } else {\n                        // We don't have a valid email address. We'll default it to 'netid' but log a warning\n                        log.warn(LogHelper.getHeader(context, \"autoregister\",\n                                                      \"Unable to locate email address for account '\" + netid + \"', so\" +\n                                                          \" it has been set to '\" + netid + \"'. \" +\n                                                          \"Please check the LDAP 'email_field' OR consider \" +\n                                                          \"configuring 'netid_email_domain'.\"));"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 32,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 33,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 34,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 35,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 37,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 39,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 40,
              "variableName": "LogHelper.getHeader(context, \"autoregister\",",
              "startLine": 309,
              "startColumn": 34,
              "endLine": 313,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "                        email = netid + configurationService.getProperty(\"authentication-ldap.netid_email_domain\");\n                    } else {\n                        // We don't have a valid email address. We'll default it to 'netid' but log a warning\n                        log.warn(LogHelper.getHeader(context, \"autoregister\",\n                                                      \"Unable to locate email address for account '\" + netid + \"', so\" +\n                                                          \" it has been set to '\" + netid + \"'. \" +\n                                                          \"Please check the LDAP 'email_field' OR consider \" +"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"Unable to locate email address for acc",
              "startLine": 310,
              "startColumn": 55,
              "endLine": 313,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                    } else {\n                        // We don't have a valid email address. We'll default it to 'netid' but log a warning\n                        log.warn(LogHelper.getHeader(context, \"autoregister\",\n                                                      \"Unable to locate email address for account '\" + netid + \"', so\" +\n                                                          \" it has been set to '\" + netid + \"'. \" +\n                                                          \"Please check the LDAP 'email_field' OR consider \" +\n                                                          \"configuring 'netid_email_domain'.\"));"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"autoregister\",",
              "startLine": 309,
              "startColumn": 34,
              "endLine": 313,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "                        email = netid + configurationService.getProperty(\"authentication-ldap.netid_email_domain\");\n                    } else {\n                        // We don't have a valid email address. We'll default it to 'netid' but log a warning\n                        log.warn(LogHelper.getHeader(context, \"autoregister\",\n                                                      \"Unable to locate email address for account '\" + netid + \"', so\" +\n                                                          \" it has been set to '\" + netid + \"'. \" +\n                                                          \"Please check the LDAP 'email_field' OR consider \" +"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String netid",
              "startLine": 212,
              "startColumn": 29,
              "endLine": 212,
              "endColumn": 41,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String netid,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"Unable to locate email address for acc",
              "startLine": 310,
              "startColumn": 55,
              "endLine": 313,
              "endColumn": 94,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "String",
              "code": "                    } else {\n                        // We don't have a valid email address. We'll default it to 'netid' but log a warning\n                        log.warn(LogHelper.getHeader(context, \"autoregister\",\n                                                      \"Unable to locate email address for account '\" + netid + \"', so\" +\n                                                          \" it has been set to '\" + netid + \"'. \" +\n                                                          \"Please check the LDAP 'email_field' OR consider \" +\n                                                          \"configuring 'netid_email_domain'.\"));"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"autoregister\",",
              "startLine": 309,
              "startColumn": 34,
              "endLine": 313,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/LDAPAuthentication.java",
              "type": "",
              "code": "                        email = netid + configurationService.getProperty(\"authentication-ldap.netid_email_domain\");\n                    } else {\n                        // We don't have a valid email address. We'll default it to 'netid' but log a warning\n                        log.warn(LogHelper.getHeader(context, \"autoregister\",\n                                                      \"Unable to locate email address for account '\" + netid + \"', so\" +\n                                                          \" it has been set to '\" + netid + \"'. \" +\n                                                          \"Please check the LDAP 'email_field' OR consider \" +"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 37,
      "fileName": "PasswordAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 198,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"attempting password auth of user=\" + username",
              "startLine": 205,
              "startColumn": 67,
              "endLine": 205,
              "endColumn": 113,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "        throws SQLException {\n        if (username != null && password != null) {\n            EPerson eperson = null;\n            log.info(LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username));\n            eperson = EPersonServiceFactory.getInstance().getEPersonService()\n                                           .findByEmail(context, username.toLowerCase());\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username)",
              "startLine": 205,
              "startColumn": 22,
              "endLine": 205,
              "endColumn": 114,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "",
              "code": "        throws SQLException {\n        if (username != null && password != null) {\n            EPerson eperson = null;\n            log.info(LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username));\n            eperson = EPersonServiceFactory.getInstance().getEPersonService()\n                                           .findByEmail(context, username.toLowerCase());\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 198,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"attempting password auth of user=\" + username",
              "startLine": 205,
              "startColumn": 67,
              "endLine": 205,
              "endColumn": 113,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "        throws SQLException {\n        if (username != null && password != null) {\n            EPerson eperson = null;\n            log.info(LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username));\n            eperson = EPersonServiceFactory.getInstance().getEPersonService()\n                                           .findByEmail(context, username.toLowerCase());\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 32,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 33,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 34,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 35,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 37,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 39,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 40,
              "variableName": "LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username)",
              "startLine": 205,
              "startColumn": 22,
              "endLine": 205,
              "endColumn": 114,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "",
              "code": "        throws SQLException {\n        if (username != null && password != null) {\n            EPerson eperson = null;\n            log.info(LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username));\n            eperson = EPersonServiceFactory.getInstance().getEPersonService()\n                                           .findByEmail(context, username.toLowerCase());\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 198,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"attempting password auth of user=\" + username",
              "startLine": 205,
              "startColumn": 67,
              "endLine": 205,
              "endColumn": 113,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "        throws SQLException {\n        if (username != null && password != null) {\n            EPerson eperson = null;\n            log.info(LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username));\n            eperson = EPersonServiceFactory.getInstance().getEPersonService()\n                                           .findByEmail(context, username.toLowerCase());\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username)",
              "startLine": 205,
              "startColumn": 22,
              "endLine": 205,
              "endColumn": 114,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "",
              "code": "        throws SQLException {\n        if (username != null && password != null) {\n            EPerson eperson = null;\n            log.info(LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username));\n            eperson = EPersonServiceFactory.getInstance().getEPersonService()\n                                           .findByEmail(context, username.toLowerCase());\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 198,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"attempting password auth of user=\" + username",
              "startLine": 205,
              "startColumn": 67,
              "endLine": 205,
              "endColumn": 113,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "        throws SQLException {\n        if (username != null && password != null) {\n            EPerson eperson = null;\n            log.info(LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username));\n            eperson = EPersonServiceFactory.getInstance().getEPersonService()\n                                           .findByEmail(context, username.toLowerCase());\n"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username)",
              "startLine": 205,
              "startColumn": 22,
              "endLine": 205,
              "endColumn": 114,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "",
              "code": "        throws SQLException {\n        if (username != null && password != null) {\n            EPerson eperson = null;\n            log.info(LogHelper.getHeader(context, \"authenticate\", \"attempting password auth of user=\" + username));\n            eperson = EPersonServiceFactory.getInstance().getEPersonService()\n                                           .findByEmail(context, username.toLowerCase());\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 38,
      "fileName": "PasswordAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 198,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"rejecting Passwor",
              "startLine": 218,
              "startColumn": 47,
              "endLine": 219,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "            } else if (eperson.getRequireCertificate()) {\n                // this user can only login with x.509 certificate\n                log.warn(LogHelper.getHeader(context, \"authenticate\",\n                                              \"rejecting PasswordAuthentication because \" + username + \" requires \" +\n                                                  \"certificate.\"));\n                return CERT_REQUIRED;\n            } else if (EPersonServiceFactory.getInstance().getEPersonService()"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"authentica",
              "startLine": 217,
              "startColumn": 26,
              "endLine": 219,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "",
              "code": "                return BAD_ARGS;\n            } else if (eperson.getRequireCertificate()) {\n                // this user can only login with x.509 certificate\n                log.warn(LogHelper.getHeader(context, \"authenticate\",\n                                              \"rejecting PasswordAuthentication because \" + username + \" requires \" +\n                                                  \"certificate.\"));\n                return CERT_REQUIRED;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 198,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"rejecting Passwor",
              "startLine": 218,
              "startColumn": 47,
              "endLine": 219,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "            } else if (eperson.getRequireCertificate()) {\n                // this user can only login with x.509 certificate\n                log.warn(LogHelper.getHeader(context, \"authenticate\",\n                                              \"rejecting PasswordAuthentication because \" + username + \" requires \" +\n                                                  \"certificate.\"));\n                return CERT_REQUIRED;\n            } else if (EPersonServiceFactory.getInstance().getEPersonService()"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 32,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 33,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 34,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 35,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 37,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 39,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 40,
              "variableName": "LogHelper.getHeader(context, \"authentica",
              "startLine": 217,
              "startColumn": 26,
              "endLine": 219,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "",
              "code": "                return BAD_ARGS;\n            } else if (eperson.getRequireCertificate()) {\n                // this user can only login with x.509 certificate\n                log.warn(LogHelper.getHeader(context, \"authenticate\",\n                                              \"rejecting PasswordAuthentication because \" + username + \" requires \" +\n                                                  \"certificate.\"));\n                return CERT_REQUIRED;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 198,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"rejecting Passwor",
              "startLine": 218,
              "startColumn": 47,
              "endLine": 219,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "            } else if (eperson.getRequireCertificate()) {\n                // this user can only login with x.509 certificate\n                log.warn(LogHelper.getHeader(context, \"authenticate\",\n                                              \"rejecting PasswordAuthentication because \" + username + \" requires \" +\n                                                  \"certificate.\"));\n                return CERT_REQUIRED;\n            } else if (EPersonServiceFactory.getInstance().getEPersonService()"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"authentica",
              "startLine": 217,
              "startColumn": 26,
              "endLine": 219,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "",
              "code": "                return BAD_ARGS;\n            } else if (eperson.getRequireCertificate()) {\n                // this user can only login with x.509 certificate\n                log.warn(LogHelper.getHeader(context, \"authenticate\",\n                                              \"rejecting PasswordAuthentication because \" + username + \" requires \" +\n                                                  \"certificate.\"));\n                return CERT_REQUIRED;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 198,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "     */\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request)"
            },
            {
              "step": 27,
              "variableName": "\"rejecting Passwor",
              "startLine": 218,
              "startColumn": 47,
              "endLine": 219,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "String",
              "code": "            } else if (eperson.getRequireCertificate()) {\n                // this user can only login with x.509 certificate\n                log.warn(LogHelper.getHeader(context, \"authenticate\",\n                                              \"rejecting PasswordAuthentication because \" + username + \" requires \" +\n                                                  \"certificate.\"));\n                return CERT_REQUIRED;\n            } else if (EPersonServiceFactory.getInstance().getEPersonService()"
            },
            {
              "step": 28,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 29,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 30,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 31,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 33,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 35,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 36,
              "variableName": "LogHelper.getHeader(context, \"authentica",
              "startLine": 217,
              "startColumn": 26,
              "endLine": 219,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/PasswordAuthentication.java",
              "type": "",
              "code": "                return BAD_ARGS;\n            } else if (eperson.getRequireCertificate()) {\n                // this user can only login with x.509 certificate\n                log.warn(LogHelper.getHeader(context, \"authenticate\",\n                                              \"rejecting PasswordAuthentication because \" + username + \" requires \" +\n                                                  \"certificate.\"));\n                return CERT_REQUIRED;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 39,
      "fileName": "ShibAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-b",
              "startLine": 910,
              "startColumn": 17,
              "endLine": 911,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        if (eperson == null) {\n            // lookup failed.\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because no such user \" +\n                    \"exists.\");\n            return NO_SUCH_USER;\n        } else if (!eperson.canLogIn()) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-b",
              "startLine": 910,
              "startColumn": 17,
              "endLine": 911,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        if (eperson == null) {\n            // lookup failed.\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because no such user \" +\n                    \"exists.\");\n            return NO_SUCH_USER;\n        } else if (!eperson.canLogIn()) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-b",
              "startLine": 910,
              "startColumn": 17,
              "endLine": 911,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        if (eperson == null) {\n            // lookup failed.\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because no such user \" +\n                    \"exists.\");\n            return NO_SUCH_USER;\n        } else if (!eperson.canLogIn()) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 40,
      "fileName": "ShibAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-based password auth",
              "startLine": 916,
              "startColumn": 17,
              "endLine": 917,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else if (!eperson.canLogIn()) {\n            // cannot login this way\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because the eperson object\" +\n                    \" is not allowed to login.\");\n            return BAD_ARGS;\n        } else if (eperson.getRequireCertificate()) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-based password auth",
              "startLine": 916,
              "startColumn": 17,
              "endLine": 917,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else if (!eperson.canLogIn()) {\n            // cannot login this way\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because the eperson object\" +\n                    \" is not allowed to login.\");\n            return BAD_ARGS;\n        } else if (eperson.getRequireCertificate()) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-based password auth",
              "startLine": 916,
              "startColumn": 17,
              "endLine": 917,
              "endColumn": 48,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else if (!eperson.canLogIn()) {\n            // cannot login this way\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because the eperson object\" +\n                    \" is not allowed to login.\");\n            return BAD_ARGS;\n        } else if (eperson.getRequireCertificate()) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 41,
      "fileName": "ShibAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-based password authentication faile",
              "startLine": 922,
              "startColumn": 17,
              "endLine": 923,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else if (eperson.getRequireCertificate()) {\n            // this user can only login with x.509 certificate\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because the eperson object\" +\n                    \" requires a certificate to authenticate..\");\n            return CERT_REQUIRED;\n        } else if (ePersonService.checkPassword(context, eperson, password)) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-based password authentication faile",
              "startLine": 922,
              "startColumn": 17,
              "endLine": 923,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else if (eperson.getRequireCertificate()) {\n            // this user can only login with x.509 certificate\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because the eperson object\" +\n                    \" requires a certificate to authenticate..\");\n            return CERT_REQUIRED;\n        } else if (ePersonService.checkPassword(context, eperson, password)) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-based password authentication faile",
              "startLine": 922,
              "startColumn": 17,
              "endLine": 923,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else if (eperson.getRequireCertificate()) {\n            // this user can only login with x.509 certificate\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because the eperson object\" +\n                    \" requires a certificate to authenticate..\");\n            return CERT_REQUIRED;\n        } else if (ePersonService.checkPassword(context, eperson, password)) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 42,
      "fileName": "ShibAuthentication.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-base",
              "startLine": 936,
              "startColumn": 17,
              "endLine": 937,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else {\n            // Passsword failure\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because a bad password was\" +\n                    \" supplied.\");\n            return BAD_CREDENTIALS;\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-base",
              "startLine": 936,
              "startColumn": 17,
              "endLine": 937,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else {\n            // Passsword failure\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because a bad password was\" +\n                    \" supplied.\");\n            return BAD_CREDENTIALS;\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "un",
              "startLine": 288,
              "startColumn": 45,
              "endLine": 288,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "            SWORDContext sc = new SWORDContext();\n            EPerson ep = null;\n            boolean authenticated = false;\n            if (this.authenticates(context, un, pw)) {\n                // if authenticated, obtain the eperson object\n                ep = context.getCurrentUser();\n"
            },
            {
              "step": 20,
              "variableName": "String un",
              "startLine": 89,
              "startColumn": 51,
              "endLine": 89,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @param pw      password\n     * @return true if yes, false if not\n     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;"
            },
            {
              "step": 21,
              "variableName": "un",
              "startLine": 91,
              "startColumn": 22,
              "endLine": 91,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     */\n    public boolean authenticates(Context context, String un, String pw) {\n        int auth = authenticationService.authenticate(\n            context, un, pw, null, null);\n        return auth == AuthenticationMethod.SUCCESS;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String username",
              "startLine": 75,
              "startColumn": 29,
              "endLine": 75,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "\n    @Override\n    public int authenticate(Context context,\n                            String username,\n                            String password,\n                            String realm,\n                            HttpServletRequest request) {"
            },
            {
              "step": 23,
              "variableName": "username",
              "startLine": 79,
              "startColumn": 46,
              "endLine": 79,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "                            String password,\n                            String realm,\n                            HttpServletRequest request) {\n        return authenticateInternal(context, username, password, realm,\n                                    request, false);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "String username",
              "startLine": 94,
              "startColumn": 40,
              "endLine": 94,
              "endColumn": 55,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "    }\n\n    protected int authenticateInternal(Context context,\n                                       String username,\n                                       String password,\n                                       String realm,\n                                       HttpServletRequest request,"
            },
            {
              "step": 25,
              "variableName": "username",
              "startLine": 107,
              "startColumn": 62,
              "endLine": 107,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/AuthenticationServiceImpl.java",
              "type": "String",
              "code": "            if (!implicitOnly || aMethodStack.isImplicit()) {\n                int ret = 0;\n                try {\n                    ret = aMethodStack.authenticate(context, username, password, realm, request);\n                } catch (SQLException e) {\n                    ret = AuthenticationMethod.NO_SUCH_USER;\n                }"
            },
            {
              "step": 26,
              "variableName": "String username",
              "startLine": 170,
              "startColumn": 46,
              "endLine": 170,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @throws SQLException if database error\n     */\n    @Override\n    public int authenticate(Context context, String username, String password,\n                            String realm, HttpServletRequest request) throws SQLException {\n\n        // Check if sword compatibility is allowed, and if so see if we can"
            },
            {
              "step": 27,
              "variableName": "username",
              "startLine": 184,
              "startColumn": 48,
              "endLine": 184,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "        if (swordCompatibility &&\n            username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            return swordCompatibility(context, username, password, request);\n        }\n\n        if (request == null) {"
            },
            {
              "step": 28,
              "variableName": "String username",
              "startLine": 901,
              "startColumn": 55,
              "endLine": 901,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "String",
              "code": "     * @return A valid DSpace Authentication Method status code.\n     * @throws SQLException if database error\n     */\n    protected int swordCompatibility(Context context, String username, String password, HttpServletRequest request)\n        throws SQLException {\n\n        log.debug(\"Shibboleth Sword compatibility activated.\");"
            },
            {
              "step": 29,
              "variableName": "\"Shibboleth-base",
              "startLine": 936,
              "startColumn": 17,
              "endLine": 937,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java",
              "type": "",
              "code": "        } else {\n            // Passsword failure\n            log.error(\n                \"Shibboleth-based password authentication failed for user \" + username + \" because a bad password was\" +\n                    \" supplied.\");\n            return BAD_CREDENTIALS;\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 43,
      "fileName": "DSpaceSWORDServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 66,
              "startColumn": 51,
              "endLine": 66,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_service_document_request\",\n                                    \"username=\" + request.getUsername() +\n                                        \",on_behalf_of=\" +\n                                        request.getOnBehalfOf()));\n"
            },
            {
              "step": 10,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "request.getUsername()",
              "startLine": 66,
              "startColumn": 51,
              "endLine": 66,
              "endColumn": 72,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_service_document_request\",\n                                    \"username=\" + request.getUsername() +\n                                        \",on_behalf_of=\" +\n                                        request.getOnBehalfOf()));\n"
            },
            {
              "step": 14,
              "variableName": "\"username=\" + request.getUs",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 68,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_service_document_request\",\n                                    \"username=\" + request.getUsername() +\n                                        \",on_behalf_of=\" +\n                                        request.getOnBehalfOf()));\n"
            },
            {
              "step": 15,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 16,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 17,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 18,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 20,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 21,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "LogHelper",
              "startLine": 64,
              "startColumn": 22,
              "endLine": 68,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "",
              "code": "            }\n\n            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_service_document_request\",\n                                    \"username=\" + request.getUsername() +\n                                        \",on_behalf_of=\" +"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 66,
              "startColumn": 51,
              "endLine": 66,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_service_document_request\",\n                                    \"username=\" + request.getUsername() +\n                                        \",on_behalf_of=\" +\n                                        request.getOnBehalfOf()));\n"
            },
            {
              "step": 10,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "request.getUsername()",
              "startLine": 66,
              "startColumn": 51,
              "endLine": 66,
              "endColumn": 72,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_service_document_request\",\n                                    \"username=\" + request.getUsername() +\n                                        \",on_behalf_of=\" +\n                                        request.getOnBehalfOf()));\n"
            },
            {
              "step": 14,
              "variableName": "\"username=\" + request.getUs",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 68,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_service_document_request\",\n                                    \"username=\" + request.getUsername() +\n                                        \",on_behalf_of=\" +\n                                        request.getOnBehalfOf()));\n"
            },
            {
              "step": 15,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 16,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 17,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 18,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 19,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 20,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 21,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 22,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 24,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 25,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 26,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "LogHelper",
              "startLine": 64,
              "startColumn": 22,
              "endLine": 68,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "",
              "code": "            }\n\n            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_service_document_request\",\n                                    \"username=\" + request.getUsername() +\n                                        \",on_behalf_of=\" +"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 44,
      "fileName": "DSpaceSWORDServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 113,
              "startColumn": 57,
              "endLine": 113,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "\n            // log the request\n            log.info(LogHelper.getHeader(context, \"sword_deposit_request\",\n                                          \"username=\" + deposit.getUsername() + \",on_behalf_of=\" +\n                                              deposit.getOnBehalfOf()));\n\n            // prep and execute the deposit"
            },
            {
              "step": 10,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "deposit.getUsername()",
              "startLine": 113,
              "startColumn": 57,
              "endLine": 113,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "\n            // log the request\n            log.info(LogHelper.getHeader(context, \"sword_deposit_request\",\n                                          \"username=\" + deposit.getUsername() + \",on_behalf_of=\" +\n                                              deposit.getOnBehalfOf()));\n\n            // prep and execute the deposit"
            },
            {
              "step": 14,
              "variableName": "\"username=\" + deposit.getUs",
              "startLine": 113,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "\n            // log the request\n            log.info(LogHelper.getHeader(context, \"sword_deposit_request\",\n                                          \"username=\" + deposit.getUsername() + \",on_behalf_of=\" +\n                                              deposit.getOnBehalfOf()));\n\n            // prep and execute the deposit"
            },
            {
              "step": 15,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 16,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 17,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 18,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 20,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 21,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "LogHelper.getHeader(context, \"sword_deposit_reque",
              "startLine": 112,
              "startColumn": 22,
              "endLine": 114,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "",
              "code": "            }\n\n            // log the request\n            log.info(LogHelper.getHeader(context, \"sword_deposit_request\",\n                                          \"username=\" + deposit.getUsername() + \",on_behalf_of=\" +\n                                              deposit.getOnBehalfOf()));\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 113,
              "startColumn": 57,
              "endLine": 113,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "\n            // log the request\n            log.info(LogHelper.getHeader(context, \"sword_deposit_request\",\n                                          \"username=\" + deposit.getUsername() + \",on_behalf_of=\" +\n                                              deposit.getOnBehalfOf()));\n\n            // prep and execute the deposit"
            },
            {
              "step": 10,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "deposit.getUsername()",
              "startLine": 113,
              "startColumn": 57,
              "endLine": 113,
              "endColumn": 78,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "\n            // log the request\n            log.info(LogHelper.getHeader(context, \"sword_deposit_request\",\n                                          \"username=\" + deposit.getUsername() + \",on_behalf_of=\" +\n                                              deposit.getOnBehalfOf()));\n\n            // prep and execute the deposit"
            },
            {
              "step": 14,
              "variableName": "\"username=\" + deposit.getUs",
              "startLine": 113,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "\n            // log the request\n            log.info(LogHelper.getHeader(context, \"sword_deposit_request\",\n                                          \"username=\" + deposit.getUsername() + \",on_behalf_of=\" +\n                                              deposit.getOnBehalfOf()));\n\n            // prep and execute the deposit"
            },
            {
              "step": 15,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 16,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 17,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 18,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 19,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 20,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 21,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 22,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 24,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 25,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 26,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "LogHelper.getHeader(context, \"sword_deposit_reque",
              "startLine": 112,
              "startColumn": 22,
              "endLine": 114,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "",
              "code": "            }\n\n            // log the request\n            log.info(LogHelper.getHeader(context, \"sword_deposit_request\",\n                                          \"username=\" + deposit.getUsername() + \",on_behalf_of=\" +\n                                              deposit.getOnBehalfOf()));\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 45,
      "fileName": "DSpaceSWORDServer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 164,
              "startColumn": 51,
              "endLine": 164,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_atom_document_request\",\n                                    \"username=\" + adr.getUsername()));\n\n            // prep the service request, then get the service document out of it\n            SWORDService service = new SWORDService(sc);"
            },
            {
              "step": 10,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "adr.getUsername()",
              "startLine": 164,
              "startColumn": 51,
              "endLine": 164,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_atom_document_request\",\n                                    \"username=\" + adr.getUsername()));\n\n            // prep the service request, then get the service document out of it\n            SWORDService service = new SWORDService(sc);"
            },
            {
              "step": 14,
              "variableName": "\"username=\" + adr.getUsername()",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_atom_document_request\",\n                                    \"username=\" + adr.getUsername()));\n\n            // prep the service request, then get the service document out of it\n            SWORDService service = new SWORDService(sc);"
            },
            {
              "step": 15,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 16,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 17,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 18,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 20,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 21,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "LogHelper",
              "startLine": 162,
              "startColumn": 22,
              "endLine": 164,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "",
              "code": "            }\n\n            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_atom_document_request\",\n                                    \"username=\" + adr.getUsername()));\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 164,
              "startColumn": 51,
              "endLine": 164,
              "endColumn": 54,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_atom_document_request\",\n                                    \"username=\" + adr.getUsername()));\n\n            // prep the service request, then get the service document out of it\n            SWORDService service = new SWORDService(sc);"
            },
            {
              "step": 10,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "adr.getUsername()",
              "startLine": 164,
              "startColumn": 51,
              "endLine": 164,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_atom_document_request\",\n                                    \"username=\" + adr.getUsername()));\n\n            // prep the service request, then get the service document out of it\n            SWORDService service = new SWORDService(sc);"
            },
            {
              "step": 14,
              "variableName": "\"username=\" + adr.getUsername()",
              "startLine": 164,
              "startColumn": 37,
              "endLine": 164,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "String",
              "code": "            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_atom_document_request\",\n                                    \"username=\" + adr.getUsername()));\n\n            // prep the service request, then get the service document out of it\n            SWORDService service = new SWORDService(sc);"
            },
            {
              "step": 15,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 16,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 17,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 18,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 19,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 20,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 21,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 22,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 24,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 25,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 26,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "LogHelper",
              "startLine": 162,
              "startColumn": 22,
              "endLine": 164,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "",
              "code": "            }\n\n            // log the request\n            log.info(LogHelper\n                         .getHeader(context, \"sword_atom_document_request\",\n                                    \"username=\" + adr.getUsername()));\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 46,
      "fileName": "SWORDAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un + \",on_behalf_of=\" + obo",
              "startLine": 281,
              "startColumn": 39,
              "endLine": 281,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "        }\n\n        log.info(LogHelper.getHeader(context, \"sword_authenticate\",\n                                      \"username=\" + un + \",on_behalf_of=\" + obo));\n\n        try {\n            // attempt to authenticate the primary user"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context, \"sword_authenticate\",",
              "startLine": 280,
              "startColumn": 18,
              "endLine": 281,
              "endColumn": 81,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "                                          \"Mediated deposit to this service is not permitted\");\n        }\n\n        log.info(LogHelper.getHeader(context, \"sword_authenticate\",\n                                      \"username=\" + un + \",on_behalf_of=\" + obo));\n\n        try {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un + \",on_behalf_of=\" + obo",
              "startLine": 281,
              "startColumn": 39,
              "endLine": 281,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "        }\n\n        log.info(LogHelper.getHeader(context, \"sword_authenticate\",\n                                      \"username=\" + un + \",on_behalf_of=\" + obo));\n\n        try {\n            // attempt to authenticate the primary user"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 24,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 25,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 26,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 27,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 30,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 31,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 32,
              "variableName": "LogHelper.getHeader(context, \"sword_authenticate\",",
              "startLine": 280,
              "startColumn": 18,
              "endLine": 281,
              "endColumn": 81,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "                                          \"Mediated deposit to this service is not permitted\");\n        }\n\n        log.info(LogHelper.getHeader(context, \"sword_authenticate\",\n                                      \"username=\" + un + \",on_behalf_of=\" + obo));\n\n        try {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un + \",on_behalf_of=\" + obo",
              "startLine": 281,
              "startColumn": 39,
              "endLine": 281,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "        }\n\n        log.info(LogHelper.getHeader(context, \"sword_authenticate\",\n                                      \"username=\" + un + \",on_behalf_of=\" + obo));\n\n        try {\n            // attempt to authenticate the primary user"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context, \"sword_authenticate\",",
              "startLine": 280,
              "startColumn": 18,
              "endLine": 281,
              "endColumn": 81,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "                                          \"Mediated deposit to this service is not permitted\");\n        }\n\n        log.info(LogHelper.getHeader(context, \"sword_authenticate\",\n                                      \"username=\" + un + \",on_behalf_of=\" + obo));\n\n        try {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un + \",on_behalf_of=\" + obo",
              "startLine": 281,
              "startColumn": 39,
              "endLine": 281,
              "endColumn": 80,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "        }\n\n        log.info(LogHelper.getHeader(context, \"sword_authenticate\",\n                                      \"username=\" + un + \",on_behalf_of=\" + obo));\n\n        try {\n            // attempt to authenticate the primary user"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context, \"sword_authenticate\",",
              "startLine": 280,
              "startColumn": 18,
              "endLine": 281,
              "endColumn": 81,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "                                          \"Mediated deposit to this service is not permitted\");\n        }\n\n        log.info(LogHelper.getHeader(context, \"sword_authenticate\",\n                                      \"username=\" + un + \",on_behalf_of=\" + obo));\n\n        try {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 47,
      "fileName": "SWORDAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un",
              "startLine": 345,
              "startColumn": 79,
              "endLine": 345,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                // decide what kind of error to throw\n                if (ep != null) {\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_user\", \"username=\" + un));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the supplied used\");\n                } else {"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 344,
              "startColumn": 30,
              "endLine": 345,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "            if (!authenticated) {\n                // decide what kind of error to throw\n                if (ep != null) {\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_user\", \"username=\" + un));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the supplied used\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un",
              "startLine": 345,
              "startColumn": 79,
              "endLine": 345,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                // decide what kind of error to throw\n                if (ep != null) {\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_user\", \"username=\" + un));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the supplied used\");\n                } else {"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 24,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 25,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 26,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 27,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 30,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 31,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 32,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 344,
              "startColumn": 30,
              "endLine": 345,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "            if (!authenticated) {\n                // decide what kind of error to throw\n                if (ep != null) {\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_user\", \"username=\" + un));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the supplied used\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un",
              "startLine": 345,
              "startColumn": 79,
              "endLine": 345,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                // decide what kind of error to throw\n                if (ep != null) {\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_user\", \"username=\" + un));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the supplied used\");\n                } else {"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 344,
              "startColumn": 30,
              "endLine": 345,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "            if (!authenticated) {\n                // decide what kind of error to throw\n                if (ep != null) {\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_user\", \"username=\" + un));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the supplied used\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un",
              "startLine": 345,
              "startColumn": 79,
              "endLine": 345,
              "endColumn": 95,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                // decide what kind of error to throw\n                if (ep != null) {\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_user\", \"username=\" + un));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the supplied used\");\n                } else {"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 344,
              "startColumn": 30,
              "endLine": 345,
              "endColumn": 96,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "            if (!authenticated) {\n                // decide what kind of error to throw\n                if (ep != null) {\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_user\", \"username=\" + un));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the supplied used\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 48,
      "fileName": "SWORDAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un + \",on_behalf_of=\" + obo",
              "startLine": 353,
              "startColumn": 51,
              "endLine": 353,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                    // there's a bug elsewhere\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_on_behalf_of\",\n                                                  \"username=\" + un + \",on_behalf_of=\" + obo));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the onBehalfOf account\");\n                }"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 351,
              "startColumn": 30,
              "endLine": 353,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "                } else {\n                    // FIXME: this shouldn't ever happen now, but may as well leave it in just in case\n                    // there's a bug elsewhere\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_on_behalf_of\",\n                                                  \"username=\" + un + \",on_behalf_of=\" + obo));\n                    throw new SWORDAuthenticationException("
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 46,
              "startColumn": 37,
              "endLine": 46,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 51,
              "startColumn": 29,
              "endLine": 51,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 52,
              "startColumn": 9,
              "endLine": 52,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 51,
              "startColumn": 17,
              "endLine": 51,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "adr",
              "startLine": 46,
              "startColumn": 21,
              "endLine": 46,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n                int p = usernamePassword.indexOf(':');\n                if (p != -1) {\n                    adr.setUsername(usernamePassword.substring(0, p));\n                    adr.setPassword(usernamePassword.substring(p + 1));\n                }\n            } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "adr",
              "startLine": 63,
              "startColumn": 67,
              "endLine": 63,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/AtomDocumentServlet.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            adr.setLocation(getUrl(request));\n\n            // Generate the response\n            AtomDocumentResponse dr = myRepository.doAtomDocument(adr);\n\n            // Print out the Deposit Response\n            response.setStatus(dr.getHttpResponse());"
            },
            {
              "step": 8,
              "variableName": "AtomDocumentRequest adr",
              "startLine": 142,
              "startColumn": 48,
              "endLine": 142,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public AtomDocumentResponse doAtomDocument(AtomDocumentRequest adr)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "adr",
              "startLine": 153,
              "startColumn": 36,
              "endLine": 153,
              "endColumn": 39,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(adr);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "AtomDocumentRequest request",
              "startLine": 150,
              "startColumn": 38,
              "endLine": 150,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(AtomDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 45,
              "endLine": 156,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | SWORDAuthenticationException | RuntimeException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "AtomDocumentRequest request",
              "startLine": 177,
              "startColumn": 39,
              "endLine": 177,
              "endColumn": 66,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "AtomDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/AtomDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      AtomDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), null, request.getIPAddress());\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un + \",on_behalf_of=\" + obo",
              "startLine": 353,
              "startColumn": 51,
              "endLine": 353,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                    // there's a bug elsewhere\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_on_behalf_of\",\n                                                  \"username=\" + un + \",on_behalf_of=\" + obo));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the onBehalfOf account\");\n                }"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 24,
              "variableName": "field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\")",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;"
            },
            {
              "step": 25,
              "variableName": "field",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 26,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 26,
              "variableName": "field.replaceAll(\":\", \"\\\\\\\\colon;\")",
              "startLine": 74,
              "startColumn": 21,
              "endLine": 74,
              "endColumn": 56,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }"
            },
            {
              "step": 27,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 30,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 31,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 32,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 351,
              "startColumn": 30,
              "endLine": 353,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "                } else {\n                    // FIXME: this shouldn't ever happen now, but may as well leave it in just in case\n                    // there's a bug elsewhere\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_on_behalf_of\",\n                                                  \"username=\" + un + \",on_behalf_of=\" + obo));\n                    throw new SWORDAuthenticationException("
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 47,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 194,
              "startColumn": 31,
              "endLine": 194,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 120,
              "startColumn": 29,
              "endLine": 120,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 121,
              "startColumn": 25,
              "endLine": 121,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 121,
              "startColumn": 9,
              "endLine": 121,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 120,
              "startColumn": 17,
              "endLine": 120,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "d",
              "startLine": 194,
              "startColumn": 17,
              "endLine": 194,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                d.setUsername(usernamePassword.substring(0, p));\n                d.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "d",
              "startLine": 323,
              "startColumn": 61,
              "endLine": 323,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/DepositServlet.java",
              "type": "Deposit [username] : String",
              "code": "                }\n\n                // Get the DepositResponse\n                DepositResponse dr = myRepository.doDeposit(d);\n\n                // Echo back the user agent\n                if (request.getHeader(HttpHeaders.USER_AGENT) != null) {"
            },
            {
              "step": 8,
              "variableName": "Deposit deposit",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doSWORDDeposit(org.purl.sword.server.Deposit)\n     */\n    public DepositResponse doDeposit(Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "deposit",
              "startLine": 104,
              "startColumn": 36,
              "endLine": 104,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "Deposit [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(deposit);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "Deposit deposit",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(Deposit deposit)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(deposit.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "deposit",
              "startLine": 218,
              "startColumn": 45,
              "endLine": 218,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "        Context context = this.constructContext(deposit.getIPAddress());\n        SWORDContext sc = null;\n        try {\n            sc = this.authenticate(context, deposit);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "Deposit deposit",
              "startLine": 238,
              "startColumn": 56,
              "endLine": 238,
              "endColumn": 71,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "deposit",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "Deposit [username] : String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 113,
              "startColumn": 19,
              "endLine": 113,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "    /**\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "Deposit [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/Deposit.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "deposit.getUsername()",
              "startLine": 241,
              "startColumn": 43,
              "endLine": 241,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "    private SWORDContext authenticate(Context context, Deposit deposit)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, deposit.getUsername(),\n                                 deposit.getPassword(), deposit.getOnBehalfOf(),\n                                 deposit.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un + \",on_behalf_of=\" + obo",
              "startLine": 353,
              "startColumn": 51,
              "endLine": 353,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                    // there's a bug elsewhere\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_on_behalf_of\",\n                                                  \"username=\" + un + \",on_behalf_of=\" + obo));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the onBehalfOf account\");\n                }"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 351,
              "startColumn": 30,
              "endLine": 353,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "                } else {\n                    // FIXME: this shouldn't ever happen now, but may as well leave it in just in case\n                    // there's a bug elsewhere\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_on_behalf_of\",\n                                                  \"username=\" + un + \",on_behalf_of=\" + obo));\n                    throw new SWORDAuthenticationException("
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernamePassword",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 1,
              "variableName": "usernamePassword.substring(0, p)",
              "startLine": 124,
              "startColumn": 33,
              "endLine": 124,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 2,
              "variableName": "String username",
              "startLine": 56,
              "startColumn": 29,
              "endLine": 56,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "username",
              "startLine": 57,
              "startColumn": 25,
              "endLine": 57,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 13,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "setUsername",
              "startLine": 56,
              "startColumn": 17,
              "endLine": 56,
              "endColumn": 28,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @param username the authenticated UserName to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n"
            },
            {
              "step": 6,
              "variableName": "sdr",
              "startLine": 124,
              "startColumn": 17,
              "endLine": 124,
              "endColumn": 20,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        if ((usernamePassword != null) && (!usernamePassword.equals(\"\"))) {\n            int p = usernamePassword.indexOf(':');\n            if (p != -1) {\n                sdr.setUsername(usernamePassword.substring(0, p));\n                sdr.setPassword(usernamePassword.substring(p + 1));\n            }\n        } else if (authenticateWithBasic()) {"
            },
            {
              "step": 7,
              "variableName": "sdr",
              "startLine": 145,
              "startColumn": 65,
              "endLine": 145,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/server/ServiceDocumentServlet.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "\n        // Get the ServiceDocument\n        try {\n            ServiceDocument sd = myRepository.doServiceDocument(sdr);\n            if ((sd.getService().getMaxUploadSize() == -1) && (maxUploadSize != -1)) {\n                sd.getService().setMaxUploadSize(maxUploadSize);\n            }"
            },
            {
              "step": 8,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 44,
              "startColumn": 46,
              "endLine": 44,
              "endColumn": 76,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "    /* (non-Javadoc)\n     * @see org.purl.sword.SWORDServer#doServiceDocument(org.purl.sword.base.ServiceDocumentRequest)\n     */\n    public ServiceDocument doServiceDocument(ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        // gah.  bloody variable scoping."
            },
            {
              "step": 9,
              "variableName": "request",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/DSpaceSWORDServer.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "            // first authenticate the request\n            // note: this will build our various DSpace contexts for us\n            SWORDAuthenticator auth = new SWORDAuthenticator();\n            sc = auth.authenticate(request);\n            Context context = sc.getContext();\n\n            if (log.isDebugEnabled()) {"
            },
            {
              "step": 10,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 123,
              "startColumn": 38,
              "endLine": 123,
              "endColumn": 68,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDErrorException          on generic SWORD exception\n     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     */\n    public SWORDContext authenticate(ServiceDocumentRequest request)\n        throws SWORDException, SWORDErrorException,\n        SWORDAuthenticationException {\n        Context context = this.constructContext(request.getIPAddress());"
            },
            {
              "step": 11,
              "variableName": "request",
              "startLine": 129,
              "startColumn": 45,
              "endLine": 129,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "        Context context = this.constructContext(request.getIPAddress());\n        SWORDContext sc;\n        try {\n            sc = this.authenticate(context, request);\n        } catch (SWORDException | SWORDErrorException | RuntimeException | SWORDAuthenticationException e) {\n            if (context != null && context.isValid()) {\n                context.abort();"
            },
            {
              "step": 12,
              "variableName": "ServiceDocumentRequest request",
              "startLine": 195,
              "startColumn": 39,
              "endLine": 195,
              "endColumn": 69,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context,\n                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),"
            },
            {
              "step": 13,
              "variableName": "request",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 50,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 14,
              "variableName": "getUsername",
              "startLine": 47,
              "startColumn": 19,
              "endLine": 47,
              "endColumn": 30,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     *\n     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "ServiceDocumentRequest [username] : String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "username",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 24,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/base/ServiceDocumentRequest.java",
              "type": "String",
              "code": "     * @return the authenticatedUserName\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "request.getUsername()",
              "startLine": 198,
              "startColumn": 43,
              "endLine": 198,
              "endColumn": 64,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                                      ServiceDocumentRequest request)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {\n        return this.authenticate(context, request.getUsername(),\n                                 request.getPassword(), request.getOnBehalfOf(),\n                                 request.getIPAddress());\n    }"
            },
            {
              "step": 18,
              "variableName": "String un",
              "startLine": 259,
              "startColumn": 56,
              "endLine": 259,
              "endColumn": 65,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "     * @throws SWORDAuthenticationException Thrown if the authentication fails\n     * @throws SWORDException\n     */\n    private SWORDContext authenticate(Context context, String un, String pw,\n                                      String obo, String ip)\n        throws SWORDAuthenticationException, SWORDException,\n        SWORDErrorException {"
            },
            {
              "step": 19,
              "variableName": "\"username=\" + un + \",on_behalf_of=\" + obo",
              "startLine": 353,
              "startColumn": 51,
              "endLine": 353,
              "endColumn": 92,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "String",
              "code": "                    // there's a bug elsewhere\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_on_behalf_of\",\n                                                  \"username=\" + un + \",on_behalf_of=\" + obo));\n                    throw new SWORDAuthenticationException(\n                        \"Unable to authenticate the onBehalfOf account\");\n                }"
            },
            {
              "step": 20,
              "variableName": "String extrainfo",
              "startLine": 35,
              "startColumn": 36,
              "endLine": 35,
              "endColumn": 52,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @return the filled out log header\n     */\n    public static String getHeader(Context context, String action,\n                                   String extrainfo) {\n        String email = \"anonymous\";\n        String contextExtraInfo;\n"
            },
            {
              "step": 21,
              "variableName": "extrainfo",
              "startLine": 57,
              "startColumn": 81,
              "endLine": 57,
              "endColumn": 90,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 22,
              "variableName": "String field",
              "startLine": 71,
              "startColumn": 41,
              "endLine": 71,
              "endColumn": 53,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "     * @param field The unescaped log field\n     * @return An escaped log field\n     */\n    public static String escapeLogField(String field) {\n        if (field != null) {\n            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");"
            },
            {
              "step": 23,
              "variableName": "field",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 21,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "            field = field.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\;\");\n            field = field.replaceAll(\":\", \"\\\\\\\\colon;\");\n        }\n        return field;\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "escapeLogField(extrainfo)",
              "startLine": 57,
              "startColumn": 66,
              "endLine": 57,
              "endColumn": 91,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "result.append(escapeLogField(email)).append(\":\").",
              "startLine": 56,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 58,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // Escape everthing but the extra context info because for some crazy reason two fields\n        // are generated inside this entry one for the session id, and another for the ip\n        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 22,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "StringBuilder",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "result.toString()",
              "startLine": 58,
              "startColumn": 16,
              "endLine": 58,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/core/LogHelper.java",
              "type": "String",
              "code": "        // address. Everything else should be escaped.\n        result.append(escapeLogField(email)).append(\":\").append(contextExtraInfo).append(\":\")\n              .append(escapeLogField(action)).append(\":\").append(escapeLogField(extrainfo));\n        return result.toString();\n    }\n\n"
            },
            {
              "step": 28,
              "variableName": "LogHelper.getHeader(context,",
              "startLine": 351,
              "startColumn": 30,
              "endLine": 353,
              "endColumn": 93,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/dspace/sword/SWORDAuthenticator.java",
              "type": "",
              "code": "                } else {\n                    // FIXME: this shouldn't ever happen now, but may as well leave it in just in case\n                    // there's a bug elsewhere\n                    log.info(LogHelper.getHeader(context,\n                                                  \"sword_unable_to_set_on_behalf_of\",\n                                                  \"username=\" + un + \",on_behalf_of=\" + obo));\n                    throw new SWORDAuthenticationException("
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 49,
      "fileName": "Client.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/client/Client.java",
              "type": "String",
              "code": "     */\n    private void setBasicCredentials(String username, String password) {\n        log.debug(\"server: \" + server + \" port: \" + port + \" u: '\" + username\n                      + \"' p '\" + password + \"'\");\n        client.getCredentialsProvider().setCredentials(new AuthScope(server, port),\n                                                       new UsernamePasswordCredentials(username, password));\n    }"
            },
            {
              "step": 1,
              "variableName": "\"server: \" + server + \" port: ",
              "startLine": 148,
              "startColumn": 19,
              "endLine": 149,
              "endColumn": 49,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/client/Client.java",
              "type": "",
              "code": "     * @param password The password.\n     */\n    private void setBasicCredentials(String username, String password) {\n        log.debug(\"server: \" + server + \" port: \" + port + \" u: '\" + username\n                      + \"' p '\" + password + \"'\");\n        client.getCredentialsProvider().setCredentials(new AuthScope(server, port),\n                                                       new UsernamePasswordCredentials(username, password));"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 50,
      "fileName": "CmdClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 401,
              "startColumn": 28,
              "endLine": 401,
              "endColumn": 36,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/client/CmdClient.java",
              "type": "String",
              "code": "        if (username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            log.info(\"Setting the username/password: \" + username + \" \"\n                         + password);\n            client.setCredentials(username, password);\n        } else {\n            client.clearCredentials();"
            },
            {
              "step": 1,
              "variableName": "\"Setting the u",
              "startLine": 400,
              "startColumn": 22,
              "endLine": 401,
              "endColumn": 36,
              "uri": "DSpace-dspace-8.1/dspace-sword/src/main/java/org/purl/sword/client/CmdClient.java",
              "type": "",
              "code": "\n        if (username != null && username.length() > 0 &&\n            password != null && password.length() > 0) {\n            log.info(\"Setting the username/password: \" + username + \" \"\n                         + password);\n            client.setCredentials(username, password);\n        } else {"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "537": [
    {
      "resultIndex": 51,
      "fileName": "Packager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "files",
              "startLine": 278,
              "startColumn": 13,
              "endLine": 278,
              "endColumn": 18,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String[]",
              "code": "            pkgParams.setRecursiveModeEnabled(true);\n        }\n        String files[] = line.getArgs();\n        if (files.length > 0) {\n            sourceFile = files[0];\n        }\n        if (line.hasOption('d')) {"
            },
            {
              "step": 1,
              "variableName": "sourceFile",
              "startLine": 408,
              "startColumn": 60,
              "endLine": 408,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "\n            try {\n                //ingest the object from the source file\n                myPackager.ingest(context, sip, pkgParams, sourceFile, parentObjs);\n\n                //commit all changes & exit successfully\n                context.complete();"
            },
            {
              "step": 2,
              "variableName": "String sourceFile",
              "startLine": 463,
              "startColumn": 94,
              "endLine": 463,
              "endColumn": 111,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "     * @throws CrosswalkException    if crosswalk error\n     * @throws PackageException      if packaging error\n     */\n    protected void ingest(Context context, PackageIngester sip, PackageParameters pkgParams, String sourceFile,\n                          DSpaceObject parentObjs[])\n        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {"
            },
            {
              "step": 3,
              "variableName": "sourceFile",
              "startLine": 468,
              "startColumn": 33,
              "endLine": 468,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {\n        // make sure we have an input file\n        File pkgFile = new File(sourceFile);\n\n        if (!pkgFile.exists()) {\n            System.out.println(\"\\nERROR: Package located at \" + sourceFile + \" does not exist!\");"
            },
            {
              "step": 4,
              "variableName": "new File(sourceFile)",
              "startLine": 468,
              "startColumn": 24,
              "endLine": 468,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "File",
              "code": "        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {\n        // make sure we have an input file\n        File pkgFile = new File(sourceFile);\n\n        if (!pkgFile.exists()) {\n            System.out.println(\"\\nERROR: Package located at \" + sourceFile + \" does not exist!\");"
            },
            {
              "step": 5,
              "variableName": "\"\\nSKIPPED pr",
              "startLine": 555,
              "startColumn": 29,
              "endLine": 556,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "",
              "code": "                    //if we are skipping over (i.e. keeping) existing objects\n                    if (pkgParams.keepExistingModeEnabled()) {\n                        System.out.println(\n                            \"\\nSKIPPED processing package '\" + pkgFile + \"', as an Object already exists with this \" +\n                                \"handle.\");\n                    } else {\n                        // Pass this exception on -- which essentially causes a full rollback of all changes (this"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "files",
              "startLine": 279,
              "startColumn": 26,
              "endLine": 279,
              "endColumn": 31,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String[]",
              "code": "        }\n        String files[] = line.getArgs();\n        if (files.length > 0) {\n            sourceFile = files[0];\n        }\n        if (line.hasOption('d')) {\n            myPackager.submit = false;"
            },
            {
              "step": 1,
              "variableName": "sourceFile",
              "startLine": 408,
              "startColumn": 60,
              "endLine": 408,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "\n            try {\n                //ingest the object from the source file\n                myPackager.ingest(context, sip, pkgParams, sourceFile, parentObjs);\n\n                //commit all changes & exit successfully\n                context.complete();"
            },
            {
              "step": 2,
              "variableName": "String sourceFile",
              "startLine": 463,
              "startColumn": 94,
              "endLine": 463,
              "endColumn": 111,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "     * @throws CrosswalkException    if crosswalk error\n     * @throws PackageException      if packaging error\n     */\n    protected void ingest(Context context, PackageIngester sip, PackageParameters pkgParams, String sourceFile,\n                          DSpaceObject parentObjs[])\n        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {"
            },
            {
              "step": 3,
              "variableName": "sourceFile",
              "startLine": 468,
              "startColumn": 33,
              "endLine": 468,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {\n        // make sure we have an input file\n        File pkgFile = new File(sourceFile);\n\n        if (!pkgFile.exists()) {\n            System.out.println(\"\\nERROR: Package located at \" + sourceFile + \" does not exist!\");"
            },
            {
              "step": 4,
              "variableName": "new File(sourceFile)",
              "startLine": 468,
              "startColumn": 24,
              "endLine": 468,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "File",
              "code": "        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {\n        // make sure we have an input file\n        File pkgFile = new File(sourceFile);\n\n        if (!pkgFile.exists()) {\n            System.out.println(\"\\nERROR: Package located at \" + sourceFile + \" does not exist!\");"
            },
            {
              "step": 5,
              "variableName": "\"\\nSKIPPED pr",
              "startLine": 555,
              "startColumn": 29,
              "endLine": 556,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "",
              "code": "                    //if we are skipping over (i.e. keeping) existing objects\n                    if (pkgParams.keepExistingModeEnabled()) {\n                        System.out.println(\n                            \"\\nSKIPPED processing package '\" + pkgFile + \"', as an Object already exists with this \" +\n                                \"handle.\");\n                    } else {\n                        // Pass this exception on -- which essentially causes a full rollback of all changes (this"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceFile",
              "startLine": 302,
              "startColumn": 13,
              "endLine": 302,
              "endColumn": 23,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "\n        // Sanity checks on arg list: required args\n        // REQUIRED: sourceFile, ePerson (-e), packageType (-t)\n        if (sourceFile == null || eperson == null || myPackager.packageType == null) {\n            System.err.println(\"Error - missing a REQUIRED argument or option.\\n\");\n            HelpFormatter myhelp = new HelpFormatter();\n            myhelp.printHelp(\"PackageManager  [options]  package-file|-\\n\", options);"
            },
            {
              "step": 1,
              "variableName": "sourceFile",
              "startLine": 408,
              "startColumn": 60,
              "endLine": 408,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "\n            try {\n                //ingest the object from the source file\n                myPackager.ingest(context, sip, pkgParams, sourceFile, parentObjs);\n\n                //commit all changes & exit successfully\n                context.complete();"
            },
            {
              "step": 2,
              "variableName": "String sourceFile",
              "startLine": 463,
              "startColumn": 94,
              "endLine": 463,
              "endColumn": 111,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "     * @throws CrosswalkException    if crosswalk error\n     * @throws PackageException      if packaging error\n     */\n    protected void ingest(Context context, PackageIngester sip, PackageParameters pkgParams, String sourceFile,\n                          DSpaceObject parentObjs[])\n        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {"
            },
            {
              "step": 3,
              "variableName": "sourceFile",
              "startLine": 468,
              "startColumn": 33,
              "endLine": 468,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {\n        // make sure we have an input file\n        File pkgFile = new File(sourceFile);\n\n        if (!pkgFile.exists()) {\n            System.out.println(\"\\nERROR: Package located at \" + sourceFile + \" does not exist!\");"
            },
            {
              "step": 4,
              "variableName": "new File(sourceFile)",
              "startLine": 468,
              "startColumn": 24,
              "endLine": 468,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "File",
              "code": "        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {\n        // make sure we have an input file\n        File pkgFile = new File(sourceFile);\n\n        if (!pkgFile.exists()) {\n            System.out.println(\"\\nERROR: Package located at \" + sourceFile + \" does not exist!\");"
            },
            {
              "step": 5,
              "variableName": "\"\\nSKIPPED pr",
              "startLine": 555,
              "startColumn": 29,
              "endLine": 556,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "",
              "code": "                    //if we are skipping over (i.e. keeping) existing objects\n                    if (pkgParams.keepExistingModeEnabled()) {\n                        System.out.println(\n                            \"\\nSKIPPED processing package '\" + pkgFile + \"', as an Object already exists with this \" +\n                                \"handle.\");\n                    } else {\n                        // Pass this exception on -- which essentially causes a full rollback of all changes (this"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "sourceFile",
              "startLine": 408,
              "startColumn": 60,
              "endLine": 408,
              "endColumn": 70,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "\n            try {\n                //ingest the object from the source file\n                myPackager.ingest(context, sip, pkgParams, sourceFile, parentObjs);\n\n                //commit all changes & exit successfully\n                context.complete();"
            },
            {
              "step": 1,
              "variableName": "String sourceFile",
              "startLine": 463,
              "startColumn": 94,
              "endLine": 463,
              "endColumn": 111,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "     * @throws CrosswalkException    if crosswalk error\n     * @throws PackageException      if packaging error\n     */\n    protected void ingest(Context context, PackageIngester sip, PackageParameters pkgParams, String sourceFile,\n                          DSpaceObject parentObjs[])\n        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {"
            },
            {
              "step": 2,
              "variableName": "sourceFile",
              "startLine": 468,
              "startColumn": 33,
              "endLine": 468,
              "endColumn": 43,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "String",
              "code": "        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {\n        // make sure we have an input file\n        File pkgFile = new File(sourceFile);\n\n        if (!pkgFile.exists()) {\n            System.out.println(\"\\nERROR: Package located at \" + sourceFile + \" does not exist!\");"
            },
            {
              "step": 3,
              "variableName": "new File(sourceFile)",
              "startLine": 468,
              "startColumn": 24,
              "endLine": 468,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "File",
              "code": "        throws IOException, SQLException, FileNotFoundException, AuthorizeException, CrosswalkException,\n        PackageException {\n        // make sure we have an input file\n        File pkgFile = new File(sourceFile);\n\n        if (!pkgFile.exists()) {\n            System.out.println(\"\\nERROR: Package located at \" + sourceFile + \" does not exist!\");"
            },
            {
              "step": 4,
              "variableName": "\"\\nSKIPPED pr",
              "startLine": 555,
              "startColumn": 29,
              "endLine": 556,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/app/packager/Packager.java",
              "type": "",
              "code": "                    //if we are skipping over (i.e. keeping) existing objects\n                    if (pkgParams.keepExistingModeEnabled()) {\n                        System.out.println(\n                            \"\\nSKIPPED processing package '\" + pkgFile + \"', as an Object already exists with this \" +\n                                \"handle.\");\n                    } else {\n                        // Pass this exception on -- which essentially causes a full rollback of all changes (this"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 52,
      "fileName": "ClassicDSpaceLogConverter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dir",
              "startLine": 355,
              "startColumn": 33,
              "endLine": 355,
              "endColumn": 36,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "File",
              "code": "                    return name.startsWith(sample.getName());\n                }\n            };\n            String[] children = dir.list(filter);\n            if (null == children) {\n                System.err.println(sample + \" could not be used to find a directory of log files.\");\n                System.exit(1);"
            },
            {
              "step": 1,
              "variableName": "dir",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "File",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 2,
              "variableName": "dir.getAbsolutePath()",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 3,
              "variableName": "dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 104,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 4,
              "variableName": "String in",
              "startLine": 112,
              "startColumn": 24,
              "endLine": 112,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "     * @param out The filename to write to\n     * @return The number of lines processed\n     */\n    public int convert(String in, String out) {\n        // Line counter\n        int counter = 0;\n        int lines = 0;"
            },
            {
              "step": 5,
              "variableName": "in",
              "startLine": 125,
              "startColumn": 59,
              "endLine": 125,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 6,
              "variableName": "new FileReader(in)",
              "startLine": 125,
              "startColumn": 44,
              "endLine": 125,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "FileReader",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new FileReader(in))",
              "startLine": 125,
              "startColumn": 25,
              "endLine": 125,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "BufferedReader",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 8,
              "variableName": "input",
              "startLine": 158,
              "startColumn": 28,
              "endLine": 158,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "BufferedReader",
              "code": "            String uid;\n            String lastLine = \"\";\n\n            while ((line = input.readLine()) != null) {\n                // Read in the line and convert it to a LogLine\n                lines++;\n                if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "input.readLine()",
              "startLine": 158,
              "startColumn": 28,
              "endLine": 158,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "            String uid;\n            String lastLine = \"\";\n\n            while ((line = input.readLine()) != null) {\n                // Read in the line and convert it to a LogLine\n                lines++;\n                if (verbose) {"
            },
            {
              "step": 10,
              "variableName": "\"  - IN: \" + line",
              "startLine": 227,
              "startColumn": 44,
              "endLine": 227,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "",
              "code": "                        ip + \"\\n\";\n                } catch (IllegalStateException | SQLException e) {\n                    if (verbose) {\n                        System.out.println(\"  - IN: \" + line);\n                    }\n                    if (verbose) {\n                        System.err.println(\"Error with log line! \" + e.getMessage());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "dir",
              "startLine": 365,
              "startColumn": 26,
              "endLine": 365,
              "endColumn": 29,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "File",
              "code": "                for (String in : children) {\n                    System.err.println(in);\n                    String out = line.getOptionValue('o') +\n                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);"
            },
            {
              "step": 1,
              "variableName": "dir",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "File",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 2,
              "variableName": "dir.getAbsolutePath()",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 3,
              "variableName": "dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 104,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 4,
              "variableName": "String in",
              "startLine": 112,
              "startColumn": 24,
              "endLine": 112,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "     * @param out The filename to write to\n     * @return The number of lines processed\n     */\n    public int convert(String in, String out) {\n        // Line counter\n        int counter = 0;\n        int lines = 0;"
            },
            {
              "step": 5,
              "variableName": "in",
              "startLine": 125,
              "startColumn": 59,
              "endLine": 125,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 6,
              "variableName": "new FileReader(in)",
              "startLine": 125,
              "startColumn": 44,
              "endLine": 125,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "FileReader",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new FileReader(in))",
              "startLine": 125,
              "startColumn": 25,
              "endLine": 125,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "BufferedReader",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 8,
              "variableName": "input",
              "startLine": 158,
              "startColumn": 28,
              "endLine": 158,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "BufferedReader",
              "code": "            String uid;\n            String lastLine = \"\";\n\n            while ((line = input.readLine()) != null) {\n                // Read in the line and convert it to a LogLine\n                lines++;\n                if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "input.readLine()",
              "startLine": 158,
              "startColumn": 28,
              "endLine": 158,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "            String uid;\n            String lastLine = \"\";\n\n            while ((line = input.readLine()) != null) {\n                // Read in the line and convert it to a LogLine\n                lines++;\n                if (verbose) {"
            },
            {
              "step": 10,
              "variableName": "\"  - IN: \" + line",
              "startLine": 227,
              "startColumn": 44,
              "endLine": 227,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "",
              "code": "                        ip + \"\\n\";\n                } catch (IllegalStateException | SQLException e) {\n                    if (verbose) {\n                        System.out.println(\"  - IN: \" + line);\n                    }\n                    if (verbose) {\n                        System.err.println(\"Error with log line! \" + e.getMessage());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "dir",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 42,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "File",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 1,
              "variableName": "dir.getAbsolutePath()",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 60,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 2,
              "variableName": "dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in",
              "startLine": 368,
              "startColumn": 39,
              "endLine": 368,
              "endColumn": 104,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                        (dir.getAbsolutePath() +\n                            System.getProperty(\"file.separator\") + in).substring(line.getOptionValue('i').length());\n\n                    converter.convert(dir.getAbsolutePath() + System.getProperty(\"file.separator\") + in, out);\n                }\n            }\n        } else {"
            },
            {
              "step": 3,
              "variableName": "String in",
              "startLine": 112,
              "startColumn": 24,
              "endLine": 112,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "     * @param out The filename to write to\n     * @return The number of lines processed\n     */\n    public int convert(String in, String out) {\n        // Line counter\n        int counter = 0;\n        int lines = 0;"
            },
            {
              "step": 4,
              "variableName": "in",
              "startLine": 125,
              "startColumn": 59,
              "endLine": 125,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 5,
              "variableName": "new FileReader(in)",
              "startLine": 125,
              "startColumn": 44,
              "endLine": 125,
              "endColumn": 62,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "FileReader",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 6,
              "variableName": "new BufferedReader(new FileReader(in))",
              "startLine": 125,
              "startColumn": 25,
              "endLine": 125,
              "endColumn": 63,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "BufferedReader",
              "code": "                input = new BufferedReader(new InputStreamReader(System.in));\n                in = \"standard input\";\n            } else {\n                input = new BufferedReader(new FileReader(in));\n            }\n\n            if (null == out || out.isEmpty() || \"-\".equals(out)) {"
            },
            {
              "step": 7,
              "variableName": "input",
              "startLine": 158,
              "startColumn": 28,
              "endLine": 158,
              "endColumn": 33,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "BufferedReader",
              "code": "            String uid;\n            String lastLine = \"\";\n\n            while ((line = input.readLine()) != null) {\n                // Read in the line and convert it to a LogLine\n                lines++;\n                if (verbose) {"
            },
            {
              "step": 8,
              "variableName": "input.readLine()",
              "startLine": 158,
              "startColumn": 28,
              "endLine": 158,
              "endColumn": 44,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "String",
              "code": "            String uid;\n            String lastLine = \"\";\n\n            while ((line = input.readLine()) != null) {\n                // Read in the line and convert it to a LogLine\n                lines++;\n                if (verbose) {"
            },
            {
              "step": 9,
              "variableName": "\"  - IN: \" + line",
              "startLine": 227,
              "startColumn": 44,
              "endLine": 227,
              "endColumn": 61,
              "uri": "DSpace-dspace-8.1/dspace-api/src/main/java/org/dspace/statistics/util/ClassicDSpaceLogConverter.java",
              "type": "",
              "code": "                        ip + \"\\n\";\n                } catch (IllegalStateException | SQLException e) {\n                    if (verbose) {\n                        System.out.println(\"  - IN: \" + line);\n                    }\n                    if (verbose) {\n                        System.err.println(\"Error with log line! \" + e.getMessage());"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}