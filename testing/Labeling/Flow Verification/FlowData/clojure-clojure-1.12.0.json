{
  "532": [
    {
      "resultIndex": 0,
      "fileName": "LazySeq.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cv",
              "startLine": 4855,
              "startColumn": 17,
              "endLine": 4855,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t              \"*E\";\n\t\t\tcv.visitSource(source, smap);\n\t\t\t}\n\t\taddAnnotation(cv, classMeta);\n\n\n//\t\tfor(int i=0;i<varCallsites.count();i++)"
            },
            {
              "step": 1,
              "variableName": "Object visitor",
              "startLine": 7804,
              "startColumn": 27,
              "endLine": 7804,
              "endColumn": 41,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return (PathNode) RT.first(xp);\n}\n\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}"
            },
            {
              "step": 2,
              "variableName": "visitor",
              "startLine": 7806,
              "startColumn": 27,
              "endLine": 7806,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}\n\nstatic void addParameterAnnotation(Object visitor, IPersistentMap meta, int i){"
            },
            {
              "step": 3,
              "variableName": "Object arg1",
              "startLine": 389,
              "startColumn": 22,
              "endLine": 389,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return fn().invoke(Util.ret1(arg1,arg1=null));\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}"
            },
            {
              "step": 4,
              "variableName": "arg1",
              "startLine": 390,
              "startColumn": 34,
              "endLine": 390,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object ret",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t|| x instanceof BigInteger;\n}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n"
            },
            {
              "step": 6,
              "variableName": "ret",
              "startLine": 198,
              "startColumn": 10,
              "endLine": 198,
              "endColumn": 13,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n\nstatic public ISeq ret1(ISeq ret, Object nil){"
            },
            {
              "step": 7,
              "variableName": "Util.ret1(arg1,arg1=null)",
              "startLine": 390,
              "startColumn": 24,
              "endLine": 390,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 8,
              "variableName": "Object arg1",
              "startLine": 298,
              "startColumn": 22,
              "endLine": 298,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/APersistentMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn valAt(arg1);\n}\n\npublic Object invoke(Object arg1, Object notFound) {\n\treturn valAt(arg1, notFound);\n}\n"
            },
            {
              "step": 9,
              "variableName": "arg1",
              "startLine": 299,
              "startColumn": 15,
              "endLine": 299,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/APersistentMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object notFound) {\n\treturn valAt(arg1, notFound);\n}\n\n// java.util.Map implementation"
            },
            {
              "step": 10,
              "variableName": "Object key",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn (IPersistentMap) EMPTY.withMeta(meta());\n}\n\nfinal public Object valAt(Object key, Object notFound){\n\tint i = indexOf(key);\n\tif(i >= 0)\n\t\treturn array[i + 1];"
            },
            {
              "step": 11,
              "variableName": "key",
              "startLine": 291,
              "startColumn": 18,
              "endLine": 291,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nfinal public Object valAt(Object key, Object notFound){\n\tint i = indexOf(key);\n\tif(i >= 0)\n\t\treturn array[i + 1];\n\treturn notFound;"
            },
            {
              "step": 12,
              "variableName": "Object key",
              "startLine": 315,
              "startColumn": 21,
              "endLine": 315,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn -1;\n}\n\nprivate int indexOf(Object key){\n    if(key instanceof Keyword)\n        {\n        for(int i = 0; i < array.length; i += 2)"
            },
            {
              "step": 13,
              "variableName": "key",
              "startLine": 326,
              "startColumn": 30,
              "endLine": 326,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    \treturn -1;\n        }\n    else\n        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){"
            },
            {
              "step": 14,
              "variableName": "Object key",
              "startLine": 305,
              "startColumn": 27,
              "endLine": 305,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn count();\n}\n\nprivate int indexOfObject(Object key){\n    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {"
            },
            {
              "step": 15,
              "variableName": "key",
              "startLine": 309,
              "startColumn": 21,
              "endLine": 309,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {\n        if(ep.equiv(key, array[i]))\n            return i;\n        }\n\treturn -1;"
            },
            {
              "step": 16,
              "variableName": "Object k1",
              "startLine": 63,
              "startColumn": 30,
              "endLine": 63,
              "endColumn": 39,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    };\n\nstatic EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);"
            },
            {
              "step": 17,
              "variableName": "k1",
              "startLine": 65,
              "startColumn": 32,
              "endLine": 65,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "static EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);\n        }\n    };"
            },
            {
              "step": 18,
              "variableName": "Object k1",
              "startLine": 122,
              "startColumn": 31,
              "endLine": 122,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 19,
              "variableName": "k1",
              "startLine": 125,
              "startColumn": 43,
              "endLine": 125,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "static public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n\nstatic public boolean equals(Object k1, Object k2){"
            },
            {
              "step": 20,
              "variableName": "Object o",
              "startLine": 146,
              "startColumn": 22,
              "endLine": 146,
              "endColumn": 30,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/LazySeq.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn PersistentList.EMPTY;\n}\n\npublic boolean equiv(Object o){\n\tISeq s = seq();\n\tif(s != null)\n\t\treturn s.equiv(o);"
            },
            {
              "step": 21,
              "variableName": "o",
              "startLine": 149,
              "startColumn": 18,
              "endLine": 149,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/LazySeq.java",
              "type": "",
              "code": "public boolean equiv(Object o){\n\tISeq s = seq();\n\tif(s != null)\n\t\treturn s.equiv(o);\n\telse\n\t\treturn (o instanceof Sequential || o instanceof List) && RT.seq(o) == null;\n}"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "cv",
              "startLine": 4855,
              "startColumn": 17,
              "endLine": 4855,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t              \"*E\";\n\t\t\tcv.visitSource(source, smap);\n\t\t\t}\n\t\taddAnnotation(cv, classMeta);\n\n\n//\t\tfor(int i=0;i<varCallsites.count();i++)"
            },
            {
              "step": 1,
              "variableName": "Object visitor",
              "startLine": 7804,
              "startColumn": 27,
              "endLine": 7804,
              "endColumn": 41,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return (PathNode) RT.first(xp);\n}\n\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}"
            },
            {
              "step": 2,
              "variableName": "visitor",
              "startLine": 7806,
              "startColumn": 27,
              "endLine": 7806,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}\n\nstatic void addParameterAnnotation(Object visitor, IPersistentMap meta, int i){"
            },
            {
              "step": 3,
              "variableName": "Object arg1",
              "startLine": 389,
              "startColumn": 22,
              "endLine": 389,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return fn().invoke(Util.ret1(arg1,arg1=null));\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}"
            },
            {
              "step": 4,
              "variableName": "arg1",
              "startLine": 390,
              "startColumn": 34,
              "endLine": 390,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object ret",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t|| x instanceof BigInteger;\n}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n"
            },
            {
              "step": 6,
              "variableName": "ret",
              "startLine": 198,
              "startColumn": 10,
              "endLine": 198,
              "endColumn": 13,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n\nstatic public ISeq ret1(ISeq ret, Object nil){"
            },
            {
              "step": 7,
              "variableName": "Util.ret1(arg1,arg1=null)",
              "startLine": 390,
              "startColumn": 24,
              "endLine": 390,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 8,
              "variableName": "Object arg1",
              "startLine": 54,
              "startColumn": 29,
              "endLine": 54,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn valAt(arg1);\n\t}\n\n\tpublic final Object invoke(Object arg1, Object notFound) {\n\t\treturn valAt(arg1, notFound);\n\t}\n"
            },
            {
              "step": 9,
              "variableName": "arg1",
              "startLine": 55,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 20,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t}\n\n\tpublic final Object invoke(Object arg1, Object notFound) {\n\t\treturn valAt(arg1, notFound);\n\t}\n\n\tpublic final Object valAt(Object key) {"
            },
            {
              "step": 10,
              "variableName": "Object key",
              "startLine": 77,
              "startColumn": 28,
              "endLine": 77,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn doPersistent();\n\t}\n\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}"
            },
            {
              "step": 11,
              "variableName": "key",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}\n\n\tprivate static final Object NOT_FOUND = new Object();"
            },
            {
              "step": 12,
              "variableName": "Object key",
              "startLine": 538,
              "startColumn": 17,
              "endLine": 538,
              "endColumn": 27,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn this;\n\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];"
            },
            {
              "step": 13,
              "variableName": "key",
              "startLine": 539,
              "startColumn": 19,
              "endLine": 539,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];\n\t\treturn notFound;"
            },
            {
              "step": 14,
              "variableName": "Object key",
              "startLine": 498,
              "startColumn": 22,
              "endLine": 498,
              "endColumn": 32,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\tthis.len = array.length;\n\t}\n\t\n\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))"
            },
            {
              "step": 15,
              "variableName": "key",
              "startLine": 501,
              "startColumn": 26,
              "endLine": 501,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))\n\t\t\t\treturn i;\n\t\t\t}\n\t\treturn -1;"
            },
            {
              "step": 16,
              "variableName": "Object k2",
              "startLine": 329,
              "startColumn": 36,
              "endLine": 329,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);"
            },
            {
              "step": 17,
              "variableName": "k2",
              "startLine": 332,
              "startColumn": 24,
              "endLine": 332,
              "endColumn": 26,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "static boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);\n}\n\npublic Iterator iterator(){"
            },
            {
              "step": 18,
              "variableName": "Object k2",
              "startLine": 24,
              "startColumn": 40,
              "endLine": 24,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "import java.lang.ref.ReferenceQueue;\n\npublic class Util{\nstatic public boolean equiv(Object k1, Object k2){\n\tif(k1 == k2)\n\t\treturn true;\n\tif(k1 != null)"
            },
            {
              "step": 19,
              "variableName": "k2",
              "startLine": 32,
              "startColumn": 22,
              "endLine": 32,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\tif(k1 instanceof Number && k2 instanceof Number)\n\t\t\treturn Numbers.equal((Number)k1, (Number)k2);\n\t\telse if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n\t\t\treturn pcequiv(k1,k2);\n\t\treturn k1.equals(k2);\n\t\t}\n\treturn false;"
            },
            {
              "step": 20,
              "variableName": "Object k2",
              "startLine": 122,
              "startColumn": 42,
              "endLine": 122,
              "endColumn": 51,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 21,
              "variableName": "k2",
              "startLine": 124,
              "startColumn": 44,
              "endLine": 124,
              "endColumn": 46,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n"
            },
            {
              "step": 22,
              "variableName": "Object o",
              "startLine": 146,
              "startColumn": 22,
              "endLine": 146,
              "endColumn": 30,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/LazySeq.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn PersistentList.EMPTY;\n}\n\npublic boolean equiv(Object o){\n\tISeq s = seq();\n\tif(s != null)\n\t\treturn s.equiv(o);"
            },
            {
              "step": 23,
              "variableName": "o",
              "startLine": 149,
              "startColumn": 18,
              "endLine": 149,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/LazySeq.java",
              "type": "",
              "code": "public boolean equiv(Object o){\n\tISeq s = seq();\n\tif(s != null)\n\t\treturn s.equiv(o);\n\telse\n\t\treturn (o instanceof Sequential || o instanceof List) && RT.seq(o) == null;\n}"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "privateKey",
              "startLine": 258,
              "startColumn": 38,
              "endLine": 258,
              "endColumn": 48,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "Keyword",
              "code": "//}\n\npublic boolean isPublic(){\n\treturn !RT.booleanCast(meta().valAt(privateKey));\n}\n\nfinal public Object getRawRoot(){"
            },
            {
              "step": 1,
              "variableName": "Object key",
              "startLine": 297,
              "startColumn": 21,
              "endLine": 297,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn notFound;\n}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n"
            },
            {
              "step": 2,
              "variableName": "key",
              "startLine": 298,
              "startColumn": 15,
              "endLine": 298,
              "endColumn": 18,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n\npublic int capacity(){"
            },
            {
              "step": 3,
              "variableName": "Object key",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn (IPersistentMap) EMPTY.withMeta(meta());\n}\n\nfinal public Object valAt(Object key, Object notFound){\n\tint i = indexOf(key);\n\tif(i >= 0)\n\t\treturn array[i + 1];"
            },
            {
              "step": 4,
              "variableName": "key",
              "startLine": 291,
              "startColumn": 18,
              "endLine": 291,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "}\n\nfinal public Object valAt(Object key, Object notFound){\n\tint i = indexOf(key);\n\tif(i >= 0)\n\t\treturn array[i + 1];\n\treturn notFound;"
            },
            {
              "step": 5,
              "variableName": "Object key",
              "startLine": 315,
              "startColumn": 21,
              "endLine": 315,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn -1;\n}\n\nprivate int indexOf(Object key){\n    if(key instanceof Keyword)\n        {\n        for(int i = 0; i < array.length; i += 2)"
            },
            {
              "step": 6,
              "variableName": "key",
              "startLine": 326,
              "startColumn": 30,
              "endLine": 326,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "    \treturn -1;\n        }\n    else\n        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){"
            },
            {
              "step": 7,
              "variableName": "Object key",
              "startLine": 305,
              "startColumn": 27,
              "endLine": 305,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn count();\n}\n\nprivate int indexOfObject(Object key){\n    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {"
            },
            {
              "step": 8,
              "variableName": "key",
              "startLine": 309,
              "startColumn": 21,
              "endLine": 309,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {\n        if(ep.equiv(key, array[i]))\n            return i;\n        }\n\treturn -1;"
            },
            {
              "step": 9,
              "variableName": "Object k1",
              "startLine": 63,
              "startColumn": 30,
              "endLine": 63,
              "endColumn": 39,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    };\n\nstatic EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);"
            },
            {
              "step": 10,
              "variableName": "k1",
              "startLine": 65,
              "startColumn": 32,
              "endLine": 65,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "static EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);\n        }\n    };"
            },
            {
              "step": 11,
              "variableName": "Object k1",
              "startLine": 122,
              "startColumn": 31,
              "endLine": 122,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 12,
              "variableName": "k1",
              "startLine": 125,
              "startColumn": 43,
              "endLine": 125,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "static public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n\nstatic public boolean equals(Object k1, Object k2){"
            },
            {
              "step": 13,
              "variableName": "Object o",
              "startLine": 146,
              "startColumn": 22,
              "endLine": 146,
              "endColumn": 30,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/LazySeq.java",
              "type": "Keyword",
              "code": "\treturn PersistentList.EMPTY;\n}\n\npublic boolean equiv(Object o){\n\tISeq s = seq();\n\tif(s != null)\n\t\treturn s.equiv(o);"
            },
            {
              "step": 14,
              "variableName": "o",
              "startLine": 149,
              "startColumn": 18,
              "endLine": 149,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/LazySeq.java",
              "type": "",
              "code": "public boolean equiv(Object o){\n\tISeq s = seq();\n\tif(s != null)\n\t\treturn s.equiv(o);\n\telse\n\t\treturn (o instanceof Sequential || o instanceof List) && RT.seq(o) == null;\n}"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "privateKey",
              "startLine": 258,
              "startColumn": 38,
              "endLine": 258,
              "endColumn": 48,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "Keyword",
              "code": "//}\n\npublic boolean isPublic(){\n\treturn !RT.booleanCast(meta().valAt(privateKey));\n}\n\nfinal public Object getRawRoot(){"
            },
            {
              "step": 1,
              "variableName": "Object key",
              "startLine": 301,
              "startColumn": 21,
              "endLine": 301,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn (n != null) ? n.val() : notFound;\n}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n"
            },
            {
              "step": 2,
              "variableName": "key",
              "startLine": 302,
              "startColumn": 15,
              "endLine": 302,
              "endColumn": 18,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n\npublic int capacity(){"
            },
            {
              "step": 3,
              "variableName": "Object key",
              "startLine": 296,
              "startColumn": 21,
              "endLine": 296,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn 1 + Math.max(depth(t.left()), depth(t.right()));\n}\n\npublic Object valAt(Object key, Object notFound){\n\tNode n = entryAt(key);\n\treturn (n != null) ? n.val() : notFound;\n}"
            },
            {
              "step": 4,
              "variableName": "key",
              "startLine": 297,
              "startColumn": 19,
              "endLine": 297,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key, Object notFound){\n\tNode n = entryAt(key);\n\treturn (n != null) ? n.val() : notFound;\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object key",
              "startLine": 313,
              "startColumn": 21,
              "endLine": 313,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn _count;\n}\n\npublic Node entryAt(Object key){\n\tNode t = tree;\n\twhile(t != null)\n\t\t{"
            },
            {
              "step": 6,
              "variableName": "key",
              "startLine": 317,
              "startColumn": 21,
              "endLine": 317,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\tNode t = tree;\n\twhile(t != null)\n\t\t{\n\t\tint c = doCompare(key, t.key);\n\t\tif(c == 0)\n\t\t\treturn t;\n\t\telse if(c < 0)"
            },
            {
              "step": 7,
              "variableName": "Object k1",
              "startLine": 328,
              "startColumn": 22,
              "endLine": 328,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn t;\n}\n\npublic int doCompare(Object k1, Object k2){\n//\tif(comp != null)\n\t\treturn comp.compare(k1, k2);\n//\treturn ((Comparable) k1).compareTo(k2);"
            },
            {
              "step": 8,
              "variableName": "k1",
              "startLine": 330,
              "startColumn": 23,
              "endLine": 330,
              "endColumn": 25,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\npublic int doCompare(Object k1, Object k2){\n//\tif(comp != null)\n\t\treturn comp.compare(k1, k2);\n//\treturn ((Comparable) k1).compareTo(k2);\n}\n"
            },
            {
              "step": 9,
              "variableName": "Object o1",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/AFunction.java",
              "type": "Keyword",
              "code": "\t};\n}\n\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)"
            },
            {
              "step": 10,
              "variableName": "o1",
              "startLine": 53,
              "startColumn": 27,
              "endLine": 53,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/AFunction.java",
              "type": "Keyword",
              "code": "}\n\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)\n                {"
            },
            {
              "step": 11,
              "variableName": "Object arg1",
              "startLine": 36,
              "startColumn": 22,
              "endLine": 36,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/FnLoaderThunk.java",
              "type": "Keyword",
              "code": "\treturn fn.invoke(arg1);\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n\tload();\n\treturn fn.invoke(arg1,arg2);\n}"
            },
            {
              "step": 12,
              "variableName": "arg1",
              "startLine": 38,
              "startColumn": 19,
              "endLine": 38,
              "endColumn": 23,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/FnLoaderThunk.java",
              "type": "Keyword",
              "code": "\npublic Object invoke(Object arg1, Object arg2) {\n\tload();\n\treturn fn.invoke(arg1,arg2);\n}\n\npublic Object invoke(Object arg1, Object arg2, Object arg3) {"
            },
            {
              "step": 13,
              "variableName": "Object arg1",
              "startLine": 54,
              "startColumn": 29,
              "endLine": 54,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\t\treturn valAt(arg1);\n\t}\n\n\tpublic final Object invoke(Object arg1, Object notFound) {\n\t\treturn valAt(arg1, notFound);\n\t}\n"
            },
            {
              "step": 14,
              "variableName": "arg1",
              "startLine": 55,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 20,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\t}\n\n\tpublic final Object invoke(Object arg1, Object notFound) {\n\t\treturn valAt(arg1, notFound);\n\t}\n\n\tpublic final Object valAt(Object key) {"
            },
            {
              "step": 15,
              "variableName": "Object key",
              "startLine": 77,
              "startColumn": 28,
              "endLine": 77,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\t\treturn doPersistent();\n\t}\n\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}"
            },
            {
              "step": 16,
              "variableName": "key",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}\n\n\tprivate static final Object NOT_FOUND = new Object();"
            },
            {
              "step": 17,
              "variableName": "Object key",
              "startLine": 538,
              "startColumn": 17,
              "endLine": 538,
              "endColumn": 27,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t\treturn this;\n\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];"
            },
            {
              "step": 18,
              "variableName": "key",
              "startLine": 539,
              "startColumn": 19,
              "endLine": 539,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];\n\t\treturn notFound;"
            },
            {
              "step": 19,
              "variableName": "Object key",
              "startLine": 498,
              "startColumn": 22,
              "endLine": 498,
              "endColumn": 32,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t\tthis.len = array.length;\n\t}\n\t\n\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))"
            },
            {
              "step": 20,
              "variableName": "key",
              "startLine": 501,
              "startColumn": 26,
              "endLine": 501,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))\n\t\t\t\treturn i;\n\t\t\t}\n\t\treturn -1;"
            },
            {
              "step": 21,
              "variableName": "Object k2",
              "startLine": 329,
              "startColumn": 36,
              "endLine": 329,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);"
            },
            {
              "step": 22,
              "variableName": "k2",
              "startLine": 332,
              "startColumn": 24,
              "endLine": 332,
              "endColumn": 26,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "static boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);\n}\n\npublic Iterator iterator(){"
            },
            {
              "step": 23,
              "variableName": "Object k2",
              "startLine": 24,
              "startColumn": 40,
              "endLine": 24,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "import java.lang.ref.ReferenceQueue;\n\npublic class Util{\nstatic public boolean equiv(Object k1, Object k2){\n\tif(k1 == k2)\n\t\treturn true;\n\tif(k1 != null)"
            },
            {
              "step": 24,
              "variableName": "k2",
              "startLine": 32,
              "startColumn": 22,
              "endLine": 32,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "\t\tif(k1 instanceof Number && k2 instanceof Number)\n\t\t\treturn Numbers.equal((Number)k1, (Number)k2);\n\t\telse if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n\t\t\treturn pcequiv(k1,k2);\n\t\treturn k1.equals(k2);\n\t\t}\n\treturn false;"
            },
            {
              "step": 25,
              "variableName": "Object k2",
              "startLine": 122,
              "startColumn": 42,
              "endLine": 122,
              "endColumn": 51,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 26,
              "variableName": "k2",
              "startLine": 124,
              "startColumn": 44,
              "endLine": 124,
              "endColumn": 46,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n"
            },
            {
              "step": 27,
              "variableName": "Object o",
              "startLine": 146,
              "startColumn": 22,
              "endLine": 146,
              "endColumn": 30,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/LazySeq.java",
              "type": "Keyword",
              "code": "\treturn PersistentList.EMPTY;\n}\n\npublic boolean equiv(Object o){\n\tISeq s = seq();\n\tif(s != null)\n\t\treturn s.equiv(o);"
            },
            {
              "step": 28,
              "variableName": "o",
              "startLine": 149,
              "startColumn": 18,
              "endLine": 149,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/LazySeq.java",
              "type": "",
              "code": "public boolean equiv(Object o){\n\tISeq s = seq();\n\tif(s != null)\n\t\treturn s.equiv(o);\n\telse\n\t\treturn (o instanceof Sequential || o instanceof List) && RT.seq(o) == null;\n}"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "Util.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cv",
              "startLine": 4855,
              "startColumn": 17,
              "endLine": 4855,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t              \"*E\";\n\t\t\tcv.visitSource(source, smap);\n\t\t\t}\n\t\taddAnnotation(cv, classMeta);\n\n\n//\t\tfor(int i=0;i<varCallsites.count();i++)"
            },
            {
              "step": 1,
              "variableName": "Object visitor",
              "startLine": 7804,
              "startColumn": 27,
              "endLine": 7804,
              "endColumn": 41,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return (PathNode) RT.first(xp);\n}\n\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}"
            },
            {
              "step": 2,
              "variableName": "visitor",
              "startLine": 7806,
              "startColumn": 27,
              "endLine": 7806,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}\n\nstatic void addParameterAnnotation(Object visitor, IPersistentMap meta, int i){"
            },
            {
              "step": 3,
              "variableName": "Object arg1",
              "startLine": 389,
              "startColumn": 22,
              "endLine": 389,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return fn().invoke(Util.ret1(arg1,arg1=null));\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}"
            },
            {
              "step": 4,
              "variableName": "arg1",
              "startLine": 390,
              "startColumn": 34,
              "endLine": 390,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object ret",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t|| x instanceof BigInteger;\n}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n"
            },
            {
              "step": 6,
              "variableName": "ret",
              "startLine": 198,
              "startColumn": 10,
              "endLine": 198,
              "endColumn": 13,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n\nstatic public ISeq ret1(ISeq ret, Object nil){"
            },
            {
              "step": 7,
              "variableName": "Util.ret1(arg1,arg1=null)",
              "startLine": 390,
              "startColumn": 24,
              "endLine": 390,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 8,
              "variableName": "Object arg1",
              "startLine": 54,
              "startColumn": 29,
              "endLine": 54,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn valAt(arg1);\n\t}\n\n\tpublic final Object invoke(Object arg1, Object notFound) {\n\t\treturn valAt(arg1, notFound);\n\t}\n"
            },
            {
              "step": 9,
              "variableName": "arg1",
              "startLine": 55,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 20,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t}\n\n\tpublic final Object invoke(Object arg1, Object notFound) {\n\t\treturn valAt(arg1, notFound);\n\t}\n\n\tpublic final Object valAt(Object key) {"
            },
            {
              "step": 10,
              "variableName": "Object key",
              "startLine": 77,
              "startColumn": 28,
              "endLine": 77,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn doPersistent();\n\t}\n\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}"
            },
            {
              "step": 11,
              "variableName": "key",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}\n\n\tprivate static final Object NOT_FOUND = new Object();"
            },
            {
              "step": 12,
              "variableName": "Object key",
              "startLine": 538,
              "startColumn": 17,
              "endLine": 538,
              "endColumn": 27,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn this;\n\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];"
            },
            {
              "step": 13,
              "variableName": "key",
              "startLine": 539,
              "startColumn": 19,
              "endLine": 539,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];\n\t\treturn notFound;"
            },
            {
              "step": 14,
              "variableName": "Object key",
              "startLine": 498,
              "startColumn": 22,
              "endLine": 498,
              "endColumn": 32,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\tthis.len = array.length;\n\t}\n\t\n\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))"
            },
            {
              "step": 15,
              "variableName": "key",
              "startLine": 501,
              "startColumn": 26,
              "endLine": 501,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))\n\t\t\t\treturn i;\n\t\t\t}\n\t\treturn -1;"
            },
            {
              "step": 16,
              "variableName": "Object k2",
              "startLine": 329,
              "startColumn": 36,
              "endLine": 329,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);"
            },
            {
              "step": 17,
              "variableName": "k2",
              "startLine": 332,
              "startColumn": 24,
              "endLine": 332,
              "endColumn": 26,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "static boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);\n}\n\npublic Iterator iterator(){"
            },
            {
              "step": 18,
              "variableName": "Object k2",
              "startLine": 24,
              "startColumn": 40,
              "endLine": 24,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "import java.lang.ref.ReferenceQueue;\n\npublic class Util{\nstatic public boolean equiv(Object k1, Object k2){\n\tif(k1 == k2)\n\t\treturn true;\n\tif(k1 != null)"
            },
            {
              "step": 19,
              "variableName": "k2",
              "startLine": 32,
              "startColumn": 22,
              "endLine": 32,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\tif(k1 instanceof Number && k2 instanceof Number)\n\t\t\treturn Numbers.equal((Number)k1, (Number)k2);\n\t\telse if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n\t\t\treturn pcequiv(k1,k2);\n\t\treturn k1.equals(k2);\n\t\t}\n\treturn false;"
            },
            {
              "step": 20,
              "variableName": "Object k2",
              "startLine": 122,
              "startColumn": 42,
              "endLine": 122,
              "endColumn": 51,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 21,
              "variableName": "k2",
              "startLine": 124,
              "startColumn": 44,
              "endLine": 124,
              "endColumn": 46,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "",
              "code": "\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "cv",
              "startLine": 4855,
              "startColumn": 17,
              "endLine": 4855,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t              \"*E\";\n\t\t\tcv.visitSource(source, smap);\n\t\t\t}\n\t\taddAnnotation(cv, classMeta);\n\n\n//\t\tfor(int i=0;i<varCallsites.count();i++)"
            },
            {
              "step": 1,
              "variableName": "Object visitor",
              "startLine": 7804,
              "startColumn": 27,
              "endLine": 7804,
              "endColumn": 41,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return (PathNode) RT.first(xp);\n}\n\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}"
            },
            {
              "step": 2,
              "variableName": "visitor",
              "startLine": 7806,
              "startColumn": 27,
              "endLine": 7806,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}\n\nstatic void addParameterAnnotation(Object visitor, IPersistentMap meta, int i){"
            },
            {
              "step": 3,
              "variableName": "Object arg1",
              "startLine": 389,
              "startColumn": 22,
              "endLine": 389,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return fn().invoke(Util.ret1(arg1,arg1=null));\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}"
            },
            {
              "step": 4,
              "variableName": "arg1",
              "startLine": 390,
              "startColumn": 34,
              "endLine": 390,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object ret",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t|| x instanceof BigInteger;\n}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n"
            },
            {
              "step": 6,
              "variableName": "ret",
              "startLine": 198,
              "startColumn": 10,
              "endLine": 198,
              "endColumn": 13,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n\nstatic public ISeq ret1(ISeq ret, Object nil){"
            },
            {
              "step": 7,
              "variableName": "Util.ret1(arg1,arg1=null)",
              "startLine": 390,
              "startColumn": 24,
              "endLine": 390,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 8,
              "variableName": "Object key",
              "startLine": 46,
              "startColumn": 23,
              "endLine": 46,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientSet.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn impl.valAt(key);\n\t}\n\n\tpublic Object invoke(Object key, Object notFound)  {\n\t\treturn impl.valAt(key, notFound);\n\t}\n"
            },
            {
              "step": 9,
              "variableName": "key",
              "startLine": 47,
              "startColumn": 21,
              "endLine": 47,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientSet.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t}\n\n\tpublic Object invoke(Object key, Object notFound)  {\n\t\treturn impl.valAt(key, notFound);\n\t}\n\n\tpublic Object invoke(Object key)  {"
            },
            {
              "step": 10,
              "variableName": "Object key",
              "startLine": 77,
              "startColumn": 28,
              "endLine": 77,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn doPersistent();\n\t}\n\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}"
            },
            {
              "step": 11,
              "variableName": "key",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}\n\n\tprivate static final Object NOT_FOUND = new Object();"
            },
            {
              "step": 12,
              "variableName": "Object key",
              "startLine": 538,
              "startColumn": 17,
              "endLine": 538,
              "endColumn": 27,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\treturn this;\n\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];"
            },
            {
              "step": 13,
              "variableName": "key",
              "startLine": 539,
              "startColumn": 19,
              "endLine": 539,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];\n\t\treturn notFound;"
            },
            {
              "step": 14,
              "variableName": "Object key",
              "startLine": 498,
              "startColumn": 22,
              "endLine": 498,
              "endColumn": 32,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\tthis.len = array.length;\n\t}\n\t\n\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))"
            },
            {
              "step": 15,
              "variableName": "key",
              "startLine": 501,
              "startColumn": 26,
              "endLine": 501,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))\n\t\t\t\treturn i;\n\t\t\t}\n\t\treturn -1;"
            },
            {
              "step": 16,
              "variableName": "Object k2",
              "startLine": 329,
              "startColumn": 36,
              "endLine": 329,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);"
            },
            {
              "step": 17,
              "variableName": "k2",
              "startLine": 332,
              "startColumn": 24,
              "endLine": 332,
              "endColumn": 26,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "static boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);\n}\n\npublic Iterator iterator(){"
            },
            {
              "step": 18,
              "variableName": "Object k2",
              "startLine": 24,
              "startColumn": 40,
              "endLine": 24,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "import java.lang.ref.ReferenceQueue;\n\npublic class Util{\nstatic public boolean equiv(Object k1, Object k2){\n\tif(k1 == k2)\n\t\treturn true;\n\tif(k1 != null)"
            },
            {
              "step": 19,
              "variableName": "k2",
              "startLine": 32,
              "startColumn": 22,
              "endLine": 32,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\tif(k1 instanceof Number && k2 instanceof Number)\n\t\t\treturn Numbers.equal((Number)k1, (Number)k2);\n\t\telse if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n\t\t\treturn pcequiv(k1,k2);\n\t\treturn k1.equals(k2);\n\t\t}\n\treturn false;"
            },
            {
              "step": 20,
              "variableName": "Object k2",
              "startLine": 122,
              "startColumn": 42,
              "endLine": 122,
              "endColumn": 51,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 21,
              "variableName": "k2",
              "startLine": 124,
              "startColumn": 44,
              "endLine": 124,
              "endColumn": 46,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "",
              "code": "\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "privateKey",
              "startLine": 258,
              "startColumn": 38,
              "endLine": 258,
              "endColumn": 48,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "Keyword",
              "code": "//}\n\npublic boolean isPublic(){\n\treturn !RT.booleanCast(meta().valAt(privateKey));\n}\n\nfinal public Object getRawRoot(){"
            },
            {
              "step": 1,
              "variableName": "Object key",
              "startLine": 301,
              "startColumn": 21,
              "endLine": 301,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn (n != null) ? n.val() : notFound;\n}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n"
            },
            {
              "step": 2,
              "variableName": "key",
              "startLine": 302,
              "startColumn": 15,
              "endLine": 302,
              "endColumn": 18,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n\npublic int capacity(){"
            },
            {
              "step": 3,
              "variableName": "Object key",
              "startLine": 296,
              "startColumn": 21,
              "endLine": 296,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn 1 + Math.max(depth(t.left()), depth(t.right()));\n}\n\npublic Object valAt(Object key, Object notFound){\n\tNode n = entryAt(key);\n\treturn (n != null) ? n.val() : notFound;\n}"
            },
            {
              "step": 4,
              "variableName": "key",
              "startLine": 297,
              "startColumn": 19,
              "endLine": 297,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key, Object notFound){\n\tNode n = entryAt(key);\n\treturn (n != null) ? n.val() : notFound;\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object key",
              "startLine": 313,
              "startColumn": 21,
              "endLine": 313,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn _count;\n}\n\npublic Node entryAt(Object key){\n\tNode t = tree;\n\twhile(t != null)\n\t\t{"
            },
            {
              "step": 6,
              "variableName": "key",
              "startLine": 317,
              "startColumn": 21,
              "endLine": 317,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\tNode t = tree;\n\twhile(t != null)\n\t\t{\n\t\tint c = doCompare(key, t.key);\n\t\tif(c == 0)\n\t\t\treturn t;\n\t\telse if(c < 0)"
            },
            {
              "step": 7,
              "variableName": "Object k1",
              "startLine": 328,
              "startColumn": 22,
              "endLine": 328,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn t;\n}\n\npublic int doCompare(Object k1, Object k2){\n//\tif(comp != null)\n\t\treturn comp.compare(k1, k2);\n//\treturn ((Comparable) k1).compareTo(k2);"
            },
            {
              "step": 8,
              "variableName": "k1",
              "startLine": 330,
              "startColumn": 23,
              "endLine": 330,
              "endColumn": 25,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\npublic int doCompare(Object k1, Object k2){\n//\tif(comp != null)\n\t\treturn comp.compare(k1, k2);\n//\treturn ((Comparable) k1).compareTo(k2);\n}\n"
            },
            {
              "step": 9,
              "variableName": "Object o1",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/AFunction.java",
              "type": "Keyword",
              "code": "\t};\n}\n\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)"
            },
            {
              "step": 10,
              "variableName": "o1",
              "startLine": 53,
              "startColumn": 27,
              "endLine": 53,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/AFunction.java",
              "type": "Keyword",
              "code": "}\n\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)\n                {"
            },
            {
              "step": 11,
              "variableName": "Object arg1",
              "startLine": 36,
              "startColumn": 22,
              "endLine": 36,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/FnLoaderThunk.java",
              "type": "Keyword",
              "code": "\treturn fn.invoke(arg1);\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n\tload();\n\treturn fn.invoke(arg1,arg2);\n}"
            },
            {
              "step": 12,
              "variableName": "arg1",
              "startLine": 38,
              "startColumn": 19,
              "endLine": 38,
              "endColumn": 23,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/FnLoaderThunk.java",
              "type": "Keyword",
              "code": "\npublic Object invoke(Object arg1, Object arg2) {\n\tload();\n\treturn fn.invoke(arg1,arg2);\n}\n\npublic Object invoke(Object arg1, Object arg2, Object arg3) {"
            },
            {
              "step": 13,
              "variableName": "Object arg1",
              "startLine": 54,
              "startColumn": 29,
              "endLine": 54,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\t\treturn valAt(arg1);\n\t}\n\n\tpublic final Object invoke(Object arg1, Object notFound) {\n\t\treturn valAt(arg1, notFound);\n\t}\n"
            },
            {
              "step": 14,
              "variableName": "arg1",
              "startLine": 55,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 20,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\t}\n\n\tpublic final Object invoke(Object arg1, Object notFound) {\n\t\treturn valAt(arg1, notFound);\n\t}\n\n\tpublic final Object valAt(Object key) {"
            },
            {
              "step": 15,
              "variableName": "Object key",
              "startLine": 77,
              "startColumn": 28,
              "endLine": 77,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\t\treturn doPersistent();\n\t}\n\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}"
            },
            {
              "step": 16,
              "variableName": "key",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}\n\n\tprivate static final Object NOT_FOUND = new Object();"
            },
            {
              "step": 17,
              "variableName": "Object key",
              "startLine": 538,
              "startColumn": 17,
              "endLine": 538,
              "endColumn": 27,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t\treturn this;\n\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];"
            },
            {
              "step": 18,
              "variableName": "key",
              "startLine": 539,
              "startColumn": 19,
              "endLine": 539,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];\n\t\treturn notFound;"
            },
            {
              "step": 19,
              "variableName": "Object key",
              "startLine": 498,
              "startColumn": 22,
              "endLine": 498,
              "endColumn": 32,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t\tthis.len = array.length;\n\t}\n\t\n\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))"
            },
            {
              "step": 20,
              "variableName": "key",
              "startLine": 501,
              "startColumn": 26,
              "endLine": 501,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))\n\t\t\t\treturn i;\n\t\t\t}\n\t\treturn -1;"
            },
            {
              "step": 21,
              "variableName": "Object k2",
              "startLine": 329,
              "startColumn": 36,
              "endLine": 329,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);"
            },
            {
              "step": 22,
              "variableName": "k2",
              "startLine": 332,
              "startColumn": 24,
              "endLine": 332,
              "endColumn": 26,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "static boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);\n}\n\npublic Iterator iterator(){"
            },
            {
              "step": 23,
              "variableName": "Object k2",
              "startLine": 24,
              "startColumn": 40,
              "endLine": 24,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "import java.lang.ref.ReferenceQueue;\n\npublic class Util{\nstatic public boolean equiv(Object k1, Object k2){\n\tif(k1 == k2)\n\t\treturn true;\n\tif(k1 != null)"
            },
            {
              "step": 24,
              "variableName": "k2",
              "startLine": 32,
              "startColumn": 22,
              "endLine": 32,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "\t\tif(k1 instanceof Number && k2 instanceof Number)\n\t\t\treturn Numbers.equal((Number)k1, (Number)k2);\n\t\telse if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n\t\t\treturn pcequiv(k1,k2);\n\t\treturn k1.equals(k2);\n\t\t}\n\treturn false;"
            },
            {
              "step": 25,
              "variableName": "Object k2",
              "startLine": 122,
              "startColumn": 42,
              "endLine": 122,
              "endColumn": 51,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 26,
              "variableName": "k2",
              "startLine": 124,
              "startColumn": 44,
              "endLine": 124,
              "endColumn": 46,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "",
              "code": "\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "privateKey",
              "startLine": 258,
              "startColumn": 38,
              "endLine": 258,
              "endColumn": 48,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "Keyword",
              "code": "//}\n\npublic boolean isPublic(){\n\treturn !RT.booleanCast(meta().valAt(privateKey));\n}\n\nfinal public Object getRawRoot(){"
            },
            {
              "step": 1,
              "variableName": "Object key",
              "startLine": 154,
              "startColumn": 21,
              "endLine": 154,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentStructMap.java",
              "type": "Keyword",
              "code": "\treturn makeNew(_meta, def, vals, ext.assoc(key, val));\n}\n\npublic Object valAt(Object key){\n\tInteger i = (Integer) def.keyslots.valAt(key);\n\tif(i != null)\n\t\t{"
            },
            {
              "step": 2,
              "variableName": "key",
              "startLine": 155,
              "startColumn": 43,
              "endLine": 155,
              "endColumn": 46,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentStructMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key){\n\tInteger i = (Integer) def.keyslots.valAt(key);\n\tif(i != null)\n\t\t{\n\t\treturn vals[i];"
            },
            {
              "step": 3,
              "variableName": "Object key",
              "startLine": 301,
              "startColumn": 21,
              "endLine": 301,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn (n != null) ? n.val() : notFound;\n}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n"
            },
            {
              "step": 4,
              "variableName": "key",
              "startLine": 302,
              "startColumn": 15,
              "endLine": 302,
              "endColumn": 18,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n\npublic int capacity(){"
            },
            {
              "step": 5,
              "variableName": "Object key",
              "startLine": 296,
              "startColumn": 21,
              "endLine": 296,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn 1 + Math.max(depth(t.left()), depth(t.right()));\n}\n\npublic Object valAt(Object key, Object notFound){\n\tNode n = entryAt(key);\n\treturn (n != null) ? n.val() : notFound;\n}"
            },
            {
              "step": 6,
              "variableName": "key",
              "startLine": 297,
              "startColumn": 19,
              "endLine": 297,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key, Object notFound){\n\tNode n = entryAt(key);\n\treturn (n != null) ? n.val() : notFound;\n}\n"
            },
            {
              "step": 7,
              "variableName": "Object key",
              "startLine": 313,
              "startColumn": 21,
              "endLine": 313,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn _count;\n}\n\npublic Node entryAt(Object key){\n\tNode t = tree;\n\twhile(t != null)\n\t\t{"
            },
            {
              "step": 8,
              "variableName": "key",
              "startLine": 317,
              "startColumn": 21,
              "endLine": 317,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\tNode t = tree;\n\twhile(t != null)\n\t\t{\n\t\tint c = doCompare(key, t.key);\n\t\tif(c == 0)\n\t\t\treturn t;\n\t\telse if(c < 0)"
            },
            {
              "step": 9,
              "variableName": "Object k1",
              "startLine": 328,
              "startColumn": 22,
              "endLine": 328,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn t;\n}\n\npublic int doCompare(Object k1, Object k2){\n//\tif(comp != null)\n\t\treturn comp.compare(k1, k2);\n//\treturn ((Comparable) k1).compareTo(k2);"
            },
            {
              "step": 10,
              "variableName": "k1",
              "startLine": 330,
              "startColumn": 23,
              "endLine": 330,
              "endColumn": 25,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\npublic int doCompare(Object k1, Object k2){\n//\tif(comp != null)\n\t\treturn comp.compare(k1, k2);\n//\treturn ((Comparable) k1).compareTo(k2);\n}\n"
            },
            {
              "step": 11,
              "variableName": "Object o1",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/AFunction.java",
              "type": "Keyword",
              "code": "\t};\n}\n\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)"
            },
            {
              "step": 12,
              "variableName": "o1",
              "startLine": 53,
              "startColumn": 27,
              "endLine": 53,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/AFunction.java",
              "type": "Keyword",
              "code": "}\n\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)\n                {"
            },
            {
              "step": 13,
              "variableName": "Object arg1",
              "startLine": 36,
              "startColumn": 22,
              "endLine": 36,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/FnLoaderThunk.java",
              "type": "Keyword",
              "code": "\treturn fn.invoke(arg1);\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n\tload();\n\treturn fn.invoke(arg1,arg2);\n}"
            },
            {
              "step": 14,
              "variableName": "arg1",
              "startLine": 38,
              "startColumn": 19,
              "endLine": 38,
              "endColumn": 23,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/FnLoaderThunk.java",
              "type": "Keyword",
              "code": "\npublic Object invoke(Object arg1, Object arg2) {\n\tload();\n\treturn fn.invoke(arg1,arg2);\n}\n\npublic Object invoke(Object arg1, Object arg2, Object arg3) {"
            },
            {
              "step": 15,
              "variableName": "Object key",
              "startLine": 46,
              "startColumn": 23,
              "endLine": 46,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientSet.java",
              "type": "Keyword",
              "code": "\t\treturn impl.valAt(key);\n\t}\n\n\tpublic Object invoke(Object key, Object notFound)  {\n\t\treturn impl.valAt(key, notFound);\n\t}\n"
            },
            {
              "step": 16,
              "variableName": "key",
              "startLine": 47,
              "startColumn": 21,
              "endLine": 47,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientSet.java",
              "type": "Keyword",
              "code": "\t}\n\n\tpublic Object invoke(Object key, Object notFound)  {\n\t\treturn impl.valAt(key, notFound);\n\t}\n\n\tpublic Object invoke(Object key)  {"
            },
            {
              "step": 17,
              "variableName": "Object key",
              "startLine": 77,
              "startColumn": 28,
              "endLine": 77,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\t\treturn doPersistent();\n\t}\n\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}"
            },
            {
              "step": 18,
              "variableName": "key",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/ATransientMap.java",
              "type": "Keyword",
              "code": "\n\tpublic final Object valAt(Object key, Object notFound) {\n\t\tensureEditable();\n\t\treturn doValAt(key, notFound);\n\t}\n\n\tprivate static final Object NOT_FOUND = new Object();"
            },
            {
              "step": 19,
              "variableName": "Object key",
              "startLine": 538,
              "startColumn": 17,
              "endLine": 538,
              "endColumn": 27,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t\treturn this;\n\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];"
            },
            {
              "step": 20,
              "variableName": "key",
              "startLine": 539,
              "startColumn": 19,
              "endLine": 539,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t}\n\n\tObject doValAt(Object key, Object notFound) {\n\t\tint i = indexOf(key);\n\t\tif (i >= 0)\n\t\t\treturn array[i + 1];\n\t\treturn notFound;"
            },
            {
              "step": 21,
              "variableName": "Object key",
              "startLine": 498,
              "startColumn": 22,
              "endLine": 498,
              "endColumn": 32,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\t\tthis.len = array.length;\n\t}\n\t\n\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))"
            },
            {
              "step": 22,
              "variableName": "key",
              "startLine": 501,
              "startColumn": 26,
              "endLine": 501,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\tprivate int indexOf(Object key){\n\t\tfor(int i = 0; i < len; i += 2)\n\t\t\t{\n\t\t\tif(equalKey(array[i], key))\n\t\t\t\treturn i;\n\t\t\t}\n\t\treturn -1;"
            },
            {
              "step": 23,
              "variableName": "Object k2",
              "startLine": 329,
              "startColumn": 36,
              "endLine": 329,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);"
            },
            {
              "step": 24,
              "variableName": "k2",
              "startLine": 332,
              "startColumn": 24,
              "endLine": 332,
              "endColumn": 26,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "static boolean equalKey(Object k1, Object k2){\n    if(k1 instanceof Keyword)\n        return k1 == k2;\n\treturn Util.equiv(k1, k2);\n}\n\npublic Iterator iterator(){"
            },
            {
              "step": 25,
              "variableName": "Object k2",
              "startLine": 24,
              "startColumn": 40,
              "endLine": 24,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "import java.lang.ref.ReferenceQueue;\n\npublic class Util{\nstatic public boolean equiv(Object k1, Object k2){\n\tif(k1 == k2)\n\t\treturn true;\n\tif(k1 != null)"
            },
            {
              "step": 26,
              "variableName": "k2",
              "startLine": 32,
              "startColumn": 22,
              "endLine": 32,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "\t\tif(k1 instanceof Number && k2 instanceof Number)\n\t\t\treturn Numbers.equal((Number)k1, (Number)k2);\n\t\telse if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n\t\t\treturn pcequiv(k1,k2);\n\t\treturn k1.equals(k2);\n\t\t}\n\treturn false;"
            },
            {
              "step": 27,
              "variableName": "Object k2",
              "startLine": 122,
              "startColumn": 42,
              "endLine": 122,
              "endColumn": 51,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 28,
              "variableName": "k2",
              "startLine": 124,
              "startColumn": 44,
              "endLine": 124,
              "endColumn": 46,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "",
              "code": "\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "Util.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cv",
              "startLine": 4855,
              "startColumn": 17,
              "endLine": 4855,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t              \"*E\";\n\t\t\tcv.visitSource(source, smap);\n\t\t\t}\n\t\taddAnnotation(cv, classMeta);\n\n\n//\t\tfor(int i=0;i<varCallsites.count();i++)"
            },
            {
              "step": 1,
              "variableName": "Object visitor",
              "startLine": 7804,
              "startColumn": 27,
              "endLine": 7804,
              "endColumn": 41,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return (PathNode) RT.first(xp);\n}\n\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}"
            },
            {
              "step": 2,
              "variableName": "visitor",
              "startLine": 7806,
              "startColumn": 27,
              "endLine": 7806,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}\n\nstatic void addParameterAnnotation(Object visitor, IPersistentMap meta, int i){"
            },
            {
              "step": 3,
              "variableName": "Object arg1",
              "startLine": 389,
              "startColumn": 22,
              "endLine": 389,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return fn().invoke(Util.ret1(arg1,arg1=null));\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}"
            },
            {
              "step": 4,
              "variableName": "arg1",
              "startLine": 390,
              "startColumn": 34,
              "endLine": 390,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object ret",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t|| x instanceof BigInteger;\n}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n"
            },
            {
              "step": 6,
              "variableName": "ret",
              "startLine": 198,
              "startColumn": 10,
              "endLine": 198,
              "endColumn": 13,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n\nstatic public ISeq ret1(ISeq ret, Object nil){"
            },
            {
              "step": 7,
              "variableName": "Util.ret1(arg1,arg1=null)",
              "startLine": 390,
              "startColumn": 24,
              "endLine": 390,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 8,
              "variableName": "Object arg1",
              "startLine": 298,
              "startColumn": 22,
              "endLine": 298,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/APersistentMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn valAt(arg1);\n}\n\npublic Object invoke(Object arg1, Object notFound) {\n\treturn valAt(arg1, notFound);\n}\n"
            },
            {
              "step": 9,
              "variableName": "arg1",
              "startLine": 299,
              "startColumn": 15,
              "endLine": 299,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/APersistentMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object notFound) {\n\treturn valAt(arg1, notFound);\n}\n\n// java.util.Map implementation"
            },
            {
              "step": 10,
              "variableName": "Object key",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn (IPersistentMap) EMPTY.withMeta(meta());\n}\n\nfinal public Object valAt(Object key, Object notFound){\n\tint i = indexOf(key);\n\tif(i >= 0)\n\t\treturn array[i + 1];"
            },
            {
              "step": 11,
              "variableName": "key",
              "startLine": 291,
              "startColumn": 18,
              "endLine": 291,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nfinal public Object valAt(Object key, Object notFound){\n\tint i = indexOf(key);\n\tif(i >= 0)\n\t\treturn array[i + 1];\n\treturn notFound;"
            },
            {
              "step": 12,
              "variableName": "Object key",
              "startLine": 315,
              "startColumn": 21,
              "endLine": 315,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn -1;\n}\n\nprivate int indexOf(Object key){\n    if(key instanceof Keyword)\n        {\n        for(int i = 0; i < array.length; i += 2)"
            },
            {
              "step": 13,
              "variableName": "key",
              "startLine": 326,
              "startColumn": 30,
              "endLine": 326,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    \treturn -1;\n        }\n    else\n        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){"
            },
            {
              "step": 14,
              "variableName": "Object key",
              "startLine": 305,
              "startColumn": 27,
              "endLine": 305,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn count();\n}\n\nprivate int indexOfObject(Object key){\n    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {"
            },
            {
              "step": 15,
              "variableName": "key",
              "startLine": 309,
              "startColumn": 21,
              "endLine": 309,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {\n        if(ep.equiv(key, array[i]))\n            return i;\n        }\n\treturn -1;"
            },
            {
              "step": 16,
              "variableName": "Object k1",
              "startLine": 63,
              "startColumn": 30,
              "endLine": 63,
              "endColumn": 39,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    };\n\nstatic EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);"
            },
            {
              "step": 17,
              "variableName": "k1",
              "startLine": 65,
              "startColumn": 32,
              "endLine": 65,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "static EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);\n        }\n    };"
            },
            {
              "step": 18,
              "variableName": "Object k1",
              "startLine": 122,
              "startColumn": 31,
              "endLine": 122,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 19,
              "variableName": "k1",
              "startLine": 125,
              "startColumn": 43,
              "endLine": 125,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "",
              "code": "static public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n\nstatic public boolean equals(Object k1, Object k2){"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "cv",
              "startLine": 4855,
              "startColumn": 17,
              "endLine": 4855,
              "endColumn": 19,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t              \"*E\";\n\t\t\tcv.visitSource(source, smap);\n\t\t\t}\n\t\taddAnnotation(cv, classMeta);\n\n\n//\t\tfor(int i=0;i<varCallsites.count();i++)"
            },
            {
              "step": 1,
              "variableName": "Object visitor",
              "startLine": 7804,
              "startColumn": 27,
              "endLine": 7804,
              "endColumn": 41,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return (PathNode) RT.first(xp);\n}\n\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}"
            },
            {
              "step": 2,
              "variableName": "visitor",
              "startLine": 7806,
              "startColumn": 27,
              "endLine": 7806,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Compiler.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\nstatic void addAnnotation(Object visitor, IPersistentMap meta){\n\tif(meta != null && ADD_ANNOTATIONS.isBound())\n\t\t ADD_ANNOTATIONS.invoke(visitor, meta);\n}\n\nstatic void addParameterAnnotation(Object visitor, IPersistentMap meta, int i){"
            },
            {
              "step": 3,
              "variableName": "Object arg1",
              "startLine": 389,
              "startColumn": 22,
              "endLine": 389,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return fn().invoke(Util.ret1(arg1,arg1=null));\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}"
            },
            {
              "step": 4,
              "variableName": "arg1",
              "startLine": 390,
              "startColumn": 34,
              "endLine": 390,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object ret",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\t|| x instanceof BigInteger;\n}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n"
            },
            {
              "step": 6,
              "variableName": "ret",
              "startLine": 198,
              "startColumn": 10,
              "endLine": 198,
              "endColumn": 13,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nstatic public Object ret1(Object ret, Object nil){\n\t\treturn ret;\n}\n\nstatic public ISeq ret1(ISeq ret, Object nil){"
            },
            {
              "step": 7,
              "variableName": "Util.ret1(arg1,arg1=null)",
              "startLine": 390,
              "startColumn": 24,
              "endLine": 390,
              "endColumn": 49,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n    return fn().invoke(Util.ret1(arg1,arg1=null),\n                       Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 8,
              "variableName": "Object arg1",
              "startLine": 232,
              "startColumn": 22,
              "endLine": 232,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn getFn(dispatchFn.invoke(arg1)).invoke(Util.ret1(arg1,arg1=null));\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn getFn(dispatchFn.invoke(arg1, arg2)).\n                     invoke(Util.ret1(arg1,arg1=null), Util.ret1(arg2,arg2=null));\n}"
            },
            {
              "step": 9,
              "variableName": "arg1",
              "startLine": 233,
              "startColumn": 33,
              "endLine": 233,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn getFn(dispatchFn.invoke(arg1, arg2)).\n                     invoke(Util.ret1(arg1,arg1=null), Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 10,
              "variableName": "Object arg1",
              "startLine": 252,
              "startColumn": 22,
              "endLine": 252,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Ref.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn fn().invoke(arg1);\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn fn().invoke(arg1, arg2);\n}\n"
            },
            {
              "step": 11,
              "variableName": "arg1",
              "startLine": 253,
              "startColumn": 21,
              "endLine": 253,
              "endColumn": 25,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Ref.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn fn().invoke(arg1, arg2);\n}\n\npublic Object invoke(Object arg1, Object arg2, Object arg3) {"
            },
            {
              "step": 12,
              "variableName": "Object acc",
              "startLine": 47,
              "startColumn": 30,
              "endLine": 47,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/TransformerIterator.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "            return acc;\n        }\n\n        public Object invoke(Object acc, Object o) {\n            buffer = buffer.add(o);\n            return acc;\n        }"
            },
            {
              "step": 13,
              "variableName": "acc",
              "startLine": 49,
              "startColumn": 20,
              "endLine": 49,
              "endColumn": 23,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/TransformerIterator.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\n        public Object invoke(Object acc, Object o) {\n            buffer = buffer.add(o);\n            return acc;\n        }\n    });\n    this.multi = multi;"
            },
            {
              "step": 14,
              "variableName": "fn().invoke(arg1, arg2)",
              "startLine": 253,
              "startColumn": 9,
              "endLine": 253,
              "endColumn": 32,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Ref.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn fn().invoke(arg1, arg2);\n}\n\npublic Object invoke(Object arg1, Object arg2, Object arg3) {"
            },
            {
              "step": 15,
              "variableName": "dispatchFn.invoke(arg1, arg2)",
              "startLine": 233,
              "startColumn": 15,
              "endLine": 233,
              "endColumn": 44,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn getFn(dispatchFn.invoke(arg1, arg2)).\n                     invoke(Util.ret1(arg1,arg1=null), Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 16,
              "variableName": "Object dispatchVal",
              "startLine": 153,
              "startColumn": 19,
              "endLine": 153,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn findAndCacheBestMethod(dispatchVal);\n}\n\nprivate IFn getFn(Object dispatchVal) {\n\tIFn targetFn = getMethod(dispatchVal);\n\tif(targetFn == null)\n\t\tthrow new IllegalArgumentException(String.format(\"No method in multimethod '%s' for dispatch value: %s\","
            },
            {
              "step": 17,
              "variableName": "dispatchVal",
              "startLine": 154,
              "startColumn": 27,
              "endLine": 154,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\nprivate IFn getFn(Object dispatchVal) {\n\tIFn targetFn = getMethod(dispatchVal);\n\tif(targetFn == null)\n\t\tthrow new IllegalArgumentException(String.format(\"No method in multimethod '%s' for dispatch value: %s\",\n\t\t                                                 name, dispatchVal));"
            },
            {
              "step": 18,
              "variableName": "Object dispatchVal",
              "startLine": 144,
              "startColumn": 23,
              "endLine": 144,
              "endColumn": 41,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t}\n}\n\n public IFn getMethod(Object dispatchVal) {\n\tif(cachedHierarchy != hierarchy.deref())\n\t\tresetCache();\n\tIFn targetFn = (IFn) methodCache.valAt(dispatchVal);"
            },
            {
              "step": 19,
              "variableName": "dispatchVal",
              "startLine": 150,
              "startColumn": 32,
              "endLine": 150,
              "endColumn": 43,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\tIFn targetFn = (IFn) methodCache.valAt(dispatchVal);\n\tif(targetFn != null)\n\t\treturn targetFn;\n\treturn findAndCacheBestMethod(dispatchVal);\n}\n\nprivate IFn getFn(Object dispatchVal) {"
            },
            {
              "step": 20,
              "variableName": "Object dispatchVal",
              "startLine": 161,
              "startColumn": 36,
              "endLine": 161,
              "endColumn": 54,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn targetFn;\n}\n\nprivate IFn findAndCacheBestMethod(Object dispatchVal) {\n\trw.readLock().lock();\n\tObject bestValue;\n\tIPersistentMap mt = methodTable;"
            },
            {
              "step": 21,
              "variableName": "dispatchVal",
              "startLine": 209,
              "startColumn": 36,
              "endLine": 209,
              "endColumn": 47,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\t\t\tcachedHierarchy == hierarchy.deref())\n\t\t\t{\n\t\t\t//place in cache\n\t\t\tmethodCache = methodCache.assoc(dispatchVal, bestValue);\n\t\t\treturn (IFn) bestValue;\n\t\t\t}\n\t\telse"
            },
            {
              "step": 22,
              "variableName": "Object key",
              "startLine": 247,
              "startColumn": 29,
              "endLine": 247,
              "endColumn": 39,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn create(newArray);\n}\n\npublic IPersistentMap assoc(Object key, Object val){\n\tint i = indexOf(key);\n\tObject[] newArray;\n\tif(i >= 0) //already have key, same-sized replacement"
            },
            {
              "step": 23,
              "variableName": "key",
              "startLine": 248,
              "startColumn": 18,
              "endLine": 248,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "}\n\npublic IPersistentMap assoc(Object key, Object val){\n\tint i = indexOf(key);\n\tObject[] newArray;\n\tif(i >= 0) //already have key, same-sized replacement\n\t\t{"
            },
            {
              "step": 24,
              "variableName": "Object key",
              "startLine": 315,
              "startColumn": 21,
              "endLine": 315,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn -1;\n}\n\nprivate int indexOf(Object key){\n    if(key instanceof Keyword)\n        {\n        for(int i = 0; i < array.length; i += 2)"
            },
            {
              "step": 25,
              "variableName": "key",
              "startLine": 326,
              "startColumn": 30,
              "endLine": 326,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    \treturn -1;\n        }\n    else\n        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){"
            },
            {
              "step": 26,
              "variableName": "Object key",
              "startLine": 305,
              "startColumn": 27,
              "endLine": 305,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "\treturn count();\n}\n\nprivate int indexOfObject(Object key){\n    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {"
            },
            {
              "step": 27,
              "variableName": "key",
              "startLine": 309,
              "startColumn": 21,
              "endLine": 309,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {\n        if(ep.equiv(key, array[i]))\n            return i;\n        }\n\treturn -1;"
            },
            {
              "step": 28,
              "variableName": "Object k1",
              "startLine": 63,
              "startColumn": 30,
              "endLine": 63,
              "endColumn": 39,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    };\n\nstatic EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);"
            },
            {
              "step": 29,
              "variableName": "k1",
              "startLine": 65,
              "startColumn": 32,
              "endLine": 65,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "static EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);\n        }\n    };"
            },
            {
              "step": 30,
              "variableName": "Object k1",
              "startLine": 122,
              "startColumn": 31,
              "endLine": 122,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "new ClassWriter(...) { ... }",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 31,
              "variableName": "k1",
              "startLine": 125,
              "startColumn": 43,
              "endLine": 125,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "",
              "code": "static public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n\nstatic public boolean equals(Object k1, Object k2){"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "privateKey",
              "startLine": 258,
              "startColumn": 38,
              "endLine": 258,
              "endColumn": 48,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "Keyword",
              "code": "//}\n\npublic boolean isPublic(){\n\treturn !RT.booleanCast(meta().valAt(privateKey));\n}\n\nfinal public Object getRawRoot(){"
            },
            {
              "step": 1,
              "variableName": "Object key",
              "startLine": 297,
              "startColumn": 21,
              "endLine": 297,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn notFound;\n}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n"
            },
            {
              "step": 2,
              "variableName": "key",
              "startLine": 298,
              "startColumn": 15,
              "endLine": 298,
              "endColumn": 18,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n\npublic int capacity(){"
            },
            {
              "step": 3,
              "variableName": "Object key",
              "startLine": 290,
              "startColumn": 27,
              "endLine": 290,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn (IPersistentMap) EMPTY.withMeta(meta());\n}\n\nfinal public Object valAt(Object key, Object notFound){\n\tint i = indexOf(key);\n\tif(i >= 0)\n\t\treturn array[i + 1];"
            },
            {
              "step": 4,
              "variableName": "key",
              "startLine": 291,
              "startColumn": 18,
              "endLine": 291,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "}\n\nfinal public Object valAt(Object key, Object notFound){\n\tint i = indexOf(key);\n\tif(i >= 0)\n\t\treturn array[i + 1];\n\treturn notFound;"
            },
            {
              "step": 5,
              "variableName": "Object key",
              "startLine": 315,
              "startColumn": 21,
              "endLine": 315,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn -1;\n}\n\nprivate int indexOf(Object key){\n    if(key instanceof Keyword)\n        {\n        for(int i = 0; i < array.length; i += 2)"
            },
            {
              "step": 6,
              "variableName": "key",
              "startLine": 326,
              "startColumn": 30,
              "endLine": 326,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "    \treturn -1;\n        }\n    else\n        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){"
            },
            {
              "step": 7,
              "variableName": "Object key",
              "startLine": 305,
              "startColumn": 27,
              "endLine": 305,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn count();\n}\n\nprivate int indexOfObject(Object key){\n    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {"
            },
            {
              "step": 8,
              "variableName": "key",
              "startLine": 309,
              "startColumn": 21,
              "endLine": 309,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {\n        if(ep.equiv(key, array[i]))\n            return i;\n        }\n\treturn -1;"
            },
            {
              "step": 9,
              "variableName": "Object k1",
              "startLine": 63,
              "startColumn": 30,
              "endLine": 63,
              "endColumn": 39,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    };\n\nstatic EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);"
            },
            {
              "step": 10,
              "variableName": "k1",
              "startLine": 65,
              "startColumn": 32,
              "endLine": 65,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "static EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);\n        }\n    };"
            },
            {
              "step": 11,
              "variableName": "Object k1",
              "startLine": 122,
              "startColumn": 31,
              "endLine": 122,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 12,
              "variableName": "k1",
              "startLine": 125,
              "startColumn": 43,
              "endLine": 125,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "",
              "code": "static public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n\nstatic public boolean equals(Object k1, Object k2){"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "privateKey",
              "startLine": 258,
              "startColumn": 38,
              "endLine": 258,
              "endColumn": 48,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Var.java",
              "type": "Keyword",
              "code": "//}\n\npublic boolean isPublic(){\n\treturn !RT.booleanCast(meta().valAt(privateKey));\n}\n\nfinal public Object getRawRoot(){"
            },
            {
              "step": 1,
              "variableName": "Object key",
              "startLine": 301,
              "startColumn": 21,
              "endLine": 301,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn (n != null) ? n.val() : notFound;\n}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n"
            },
            {
              "step": 2,
              "variableName": "key",
              "startLine": 302,
              "startColumn": 15,
              "endLine": 302,
              "endColumn": 18,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key){\n\treturn valAt(key, null);\n}\n\npublic int capacity(){"
            },
            {
              "step": 3,
              "variableName": "Object key",
              "startLine": 296,
              "startColumn": 21,
              "endLine": 296,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn 1 + Math.max(depth(t.left()), depth(t.right()));\n}\n\npublic Object valAt(Object key, Object notFound){\n\tNode n = entryAt(key);\n\treturn (n != null) ? n.val() : notFound;\n}"
            },
            {
              "step": 4,
              "variableName": "key",
              "startLine": 297,
              "startColumn": 19,
              "endLine": 297,
              "endColumn": 22,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "}\n\npublic Object valAt(Object key, Object notFound){\n\tNode n = entryAt(key);\n\treturn (n != null) ? n.val() : notFound;\n}\n"
            },
            {
              "step": 5,
              "variableName": "Object key",
              "startLine": 313,
              "startColumn": 21,
              "endLine": 313,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn _count;\n}\n\npublic Node entryAt(Object key){\n\tNode t = tree;\n\twhile(t != null)\n\t\t{"
            },
            {
              "step": 6,
              "variableName": "key",
              "startLine": 317,
              "startColumn": 21,
              "endLine": 317,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\tNode t = tree;\n\twhile(t != null)\n\t\t{\n\t\tint c = doCompare(key, t.key);\n\t\tif(c == 0)\n\t\t\treturn t;\n\t\telse if(c < 0)"
            },
            {
              "step": 7,
              "variableName": "Object k1",
              "startLine": 328,
              "startColumn": 22,
              "endLine": 328,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\treturn t;\n}\n\npublic int doCompare(Object k1, Object k2){\n//\tif(comp != null)\n\t\treturn comp.compare(k1, k2);\n//\treturn ((Comparable) k1).compareTo(k2);"
            },
            {
              "step": 8,
              "variableName": "k1",
              "startLine": 330,
              "startColumn": 23,
              "endLine": 330,
              "endColumn": 25,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentTreeMap.java",
              "type": "Keyword",
              "code": "\npublic int doCompare(Object k1, Object k2){\n//\tif(comp != null)\n\t\treturn comp.compare(k1, k2);\n//\treturn ((Comparable) k1).compareTo(k2);\n}\n"
            },
            {
              "step": 9,
              "variableName": "Object o1",
              "startLine": 52,
              "startColumn": 20,
              "endLine": 52,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/AFunction.java",
              "type": "Keyword",
              "code": "\t};\n}\n\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)"
            },
            {
              "step": 10,
              "variableName": "o1",
              "startLine": 53,
              "startColumn": 27,
              "endLine": 53,
              "endColumn": 29,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/AFunction.java",
              "type": "Keyword",
              "code": "}\n\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)\n                {"
            },
            {
              "step": 11,
              "variableName": "Object arg1",
              "startLine": 36,
              "startColumn": 22,
              "endLine": 36,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/FnLoaderThunk.java",
              "type": "Keyword",
              "code": "\treturn fn.invoke(arg1);\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n\tload();\n\treturn fn.invoke(arg1,arg2);\n}"
            },
            {
              "step": 12,
              "variableName": "arg1",
              "startLine": 38,
              "startColumn": 19,
              "endLine": 38,
              "endColumn": 23,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/FnLoaderThunk.java",
              "type": "Keyword",
              "code": "\npublic Object invoke(Object arg1, Object arg2) {\n\tload();\n\treturn fn.invoke(arg1,arg2);\n}\n\npublic Object invoke(Object arg1, Object arg2, Object arg3) {"
            },
            {
              "step": 13,
              "variableName": "Object arg1",
              "startLine": 232,
              "startColumn": 22,
              "endLine": 232,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "\treturn getFn(dispatchFn.invoke(arg1)).invoke(Util.ret1(arg1,arg1=null));\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn getFn(dispatchFn.invoke(arg1, arg2)).\n                     invoke(Util.ret1(arg1,arg1=null), Util.ret1(arg2,arg2=null));\n}"
            },
            {
              "step": 14,
              "variableName": "arg1",
              "startLine": 233,
              "startColumn": 33,
              "endLine": 233,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn getFn(dispatchFn.invoke(arg1, arg2)).\n                     invoke(Util.ret1(arg1,arg1=null), Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 15,
              "variableName": "Object arg1",
              "startLine": 252,
              "startColumn": 22,
              "endLine": 252,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Ref.java",
              "type": "Keyword",
              "code": "\treturn fn().invoke(arg1);\n}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn fn().invoke(arg1, arg2);\n}\n"
            },
            {
              "step": 16,
              "variableName": "arg1",
              "startLine": 253,
              "startColumn": 21,
              "endLine": 253,
              "endColumn": 25,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Ref.java",
              "type": "Keyword",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn fn().invoke(arg1, arg2);\n}\n\npublic Object invoke(Object arg1, Object arg2, Object arg3) {"
            },
            {
              "step": 17,
              "variableName": "Object acc",
              "startLine": 47,
              "startColumn": 30,
              "endLine": 47,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/TransformerIterator.java",
              "type": "Keyword",
              "code": "            return acc;\n        }\n\n        public Object invoke(Object acc, Object o) {\n            buffer = buffer.add(o);\n            return acc;\n        }"
            },
            {
              "step": 18,
              "variableName": "acc",
              "startLine": 49,
              "startColumn": 20,
              "endLine": 49,
              "endColumn": 23,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/TransformerIterator.java",
              "type": "Keyword",
              "code": "\n        public Object invoke(Object acc, Object o) {\n            buffer = buffer.add(o);\n            return acc;\n        }\n    });\n    this.multi = multi;"
            },
            {
              "step": 19,
              "variableName": "fn().invoke(arg1, arg2)",
              "startLine": 253,
              "startColumn": 9,
              "endLine": 253,
              "endColumn": 32,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Ref.java",
              "type": "Keyword",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn fn().invoke(arg1, arg2);\n}\n\npublic Object invoke(Object arg1, Object arg2, Object arg3) {"
            },
            {
              "step": 20,
              "variableName": "dispatchFn.invoke(arg1, arg2)",
              "startLine": 233,
              "startColumn": 15,
              "endLine": 233,
              "endColumn": 44,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "}\n\npublic Object invoke(Object arg1, Object arg2) {\n\treturn getFn(dispatchFn.invoke(arg1, arg2)).\n                     invoke(Util.ret1(arg1,arg1=null), Util.ret1(arg2,arg2=null));\n}\n"
            },
            {
              "step": 21,
              "variableName": "Object dispatchVal",
              "startLine": 153,
              "startColumn": 19,
              "endLine": 153,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "\treturn findAndCacheBestMethod(dispatchVal);\n}\n\nprivate IFn getFn(Object dispatchVal) {\n\tIFn targetFn = getMethod(dispatchVal);\n\tif(targetFn == null)\n\t\tthrow new IllegalArgumentException(String.format(\"No method in multimethod '%s' for dispatch value: %s\","
            },
            {
              "step": 22,
              "variableName": "dispatchVal",
              "startLine": 154,
              "startColumn": 27,
              "endLine": 154,
              "endColumn": 38,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "}\n\nprivate IFn getFn(Object dispatchVal) {\n\tIFn targetFn = getMethod(dispatchVal);\n\tif(targetFn == null)\n\t\tthrow new IllegalArgumentException(String.format(\"No method in multimethod '%s' for dispatch value: %s\",\n\t\t                                                 name, dispatchVal));"
            },
            {
              "step": 23,
              "variableName": "Object dispatchVal",
              "startLine": 144,
              "startColumn": 23,
              "endLine": 144,
              "endColumn": 41,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "\t\t}\n}\n\n public IFn getMethod(Object dispatchVal) {\n\tif(cachedHierarchy != hierarchy.deref())\n\t\tresetCache();\n\tIFn targetFn = (IFn) methodCache.valAt(dispatchVal);"
            },
            {
              "step": 24,
              "variableName": "dispatchVal",
              "startLine": 150,
              "startColumn": 32,
              "endLine": 150,
              "endColumn": 43,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "\tIFn targetFn = (IFn) methodCache.valAt(dispatchVal);\n\tif(targetFn != null)\n\t\treturn targetFn;\n\treturn findAndCacheBestMethod(dispatchVal);\n}\n\nprivate IFn getFn(Object dispatchVal) {"
            },
            {
              "step": 25,
              "variableName": "Object dispatchVal",
              "startLine": 161,
              "startColumn": 36,
              "endLine": 161,
              "endColumn": 54,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "\treturn targetFn;\n}\n\nprivate IFn findAndCacheBestMethod(Object dispatchVal) {\n\trw.readLock().lock();\n\tObject bestValue;\n\tIPersistentMap mt = methodTable;"
            },
            {
              "step": 26,
              "variableName": "dispatchVal",
              "startLine": 209,
              "startColumn": 36,
              "endLine": 209,
              "endColumn": 47,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/MultiFn.java",
              "type": "Keyword",
              "code": "\t\t\tcachedHierarchy == hierarchy.deref())\n\t\t\t{\n\t\t\t//place in cache\n\t\t\tmethodCache = methodCache.assoc(dispatchVal, bestValue);\n\t\t\treturn (IFn) bestValue;\n\t\t\t}\n\t\telse"
            },
            {
              "step": 27,
              "variableName": "Object key",
              "startLine": 247,
              "startColumn": 29,
              "endLine": 247,
              "endColumn": 39,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn create(newArray);\n}\n\npublic IPersistentMap assoc(Object key, Object val){\n\tint i = indexOf(key);\n\tObject[] newArray;\n\tif(i >= 0) //already have key, same-sized replacement"
            },
            {
              "step": 28,
              "variableName": "key",
              "startLine": 248,
              "startColumn": 18,
              "endLine": 248,
              "endColumn": 21,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "}\n\npublic IPersistentMap assoc(Object key, Object val){\n\tint i = indexOf(key);\n\tObject[] newArray;\n\tif(i >= 0) //already have key, same-sized replacement\n\t\t{"
            },
            {
              "step": 29,
              "variableName": "Object key",
              "startLine": 315,
              "startColumn": 21,
              "endLine": 315,
              "endColumn": 31,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn -1;\n}\n\nprivate int indexOf(Object key){\n    if(key instanceof Keyword)\n        {\n        for(int i = 0; i < array.length; i += 2)"
            },
            {
              "step": 30,
              "variableName": "key",
              "startLine": 326,
              "startColumn": 30,
              "endLine": 326,
              "endColumn": 33,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "    \treturn -1;\n        }\n    else\n        return indexOfObject(key);\n}\n\nstatic boolean equalKey(Object k1, Object k2){"
            },
            {
              "step": 31,
              "variableName": "Object key",
              "startLine": 305,
              "startColumn": 27,
              "endLine": 305,
              "endColumn": 37,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "\treturn count();\n}\n\nprivate int indexOfObject(Object key){\n    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {"
            },
            {
              "step": 32,
              "variableName": "key",
              "startLine": 309,
              "startColumn": 21,
              "endLine": 309,
              "endColumn": 24,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/PersistentArrayMap.java",
              "type": "Keyword",
              "code": "    Util.EquivPred ep = Util.equivPred(key);\n    for(int i = 0; i < array.length; i += 2)\n        {\n        if(ep.equiv(key, array[i]))\n            return i;\n        }\n\treturn -1;"
            },
            {
              "step": 33,
              "variableName": "Object k1",
              "startLine": 63,
              "startColumn": 30,
              "endLine": 63,
              "endColumn": 39,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    };\n\nstatic EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);"
            },
            {
              "step": 34,
              "variableName": "k1",
              "startLine": 65,
              "startColumn": 32,
              "endLine": 65,
              "endColumn": 34,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "static EquivPred equivColl = new EquivPred(){\n        public boolean equiv(Object k1, Object k2) {\n            if(k1 instanceof IPersistentCollection || k2 instanceof IPersistentCollection)\n                return pcequiv(k1, k2);\n            return k1.equals(k2);\n        }\n    };"
            },
            {
              "step": 35,
              "variableName": "Object k1",
              "startLine": 122,
              "startColumn": 31,
              "endLine": 122,
              "endColumn": 40,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "Keyword",
              "code": "    return c1 == c2;\n}\n\nstatic public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);"
            },
            {
              "step": 36,
              "variableName": "k1",
              "startLine": 125,
              "startColumn": 43,
              "endLine": 125,
              "endColumn": 45,
              "uri": "clojure-clojure-1.12.0/src/jvm/clojure/lang/Util.java",
              "type": "",
              "code": "static public boolean pcequiv(Object k1, Object k2){\n\tif(k1 instanceof IPersistentCollection)\n\t\treturn ((IPersistentCollection)k1).equiv(k2);\n\treturn ((IPersistentCollection)k2).equiv(k1);\n}\n\nstatic public boolean equals(Object k1, Object k2){"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}