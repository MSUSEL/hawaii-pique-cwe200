{
  "201": [
    {
      "resultIndex": 1,
      "fileName": "BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dbConnectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
              "type": "String",
              "code": "            out.println(\"\\n-- Session Information --\");\r\n            out.println(sessionInfo);\r\n            out.println(\"\\n-- Internal Configuration Details --\");\r\n            out.println(\"DB Connection String: \" + dbConnectionString);\r\n            out.println(\"API Key: \" + apiKey);\r\n            out.println(\"Configuration File: \" + configFilePath);\r\n            out.println(\"Environment Variables: \" + envVariables);\r"
            },
            {
              "step": 1,
              "variableName": "\"DB Connection String: \" + dbConnectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
              "type": "",
              "code": "            out.println(\"\\n-- Session Information --\");\r\n            out.println(sessionInfo);\r\n            out.println(\"\\n-- Internal Configuration Details --\");\r\n            out.println(\"DB Connection String: \" + dbConnectionString);\r\n            out.println(\"API Key: \" + apiKey);\r\n            out.println(\"Configuration File: \" + configFilePath);\r\n            out.println(\"Environment Variables: \" + envVariables);\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
              "type": "String",
              "code": "            out.println(sessionInfo);\r\n            out.println(\"\\n-- Internal Configuration Details --\");\r\n            out.println(\"DB Connection String: \" + dbConnectionString);\r\n            out.println(\"API Key: \" + apiKey);\r\n            out.println(\"Configuration File: \" + configFilePath);\r\n            out.println(\"Environment Variables: \" + envVariables);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "\"API Key: \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
              "type": "",
              "code": "            out.println(sessionInfo);\r\n            out.println(\"\\n-- Internal Configuration Details --\");\r\n            out.println(\"DB Connection String: \" + dbConnectionString);\r\n            out.println(\"API Key: \" + apiKey);\r\n            out.println(\"Configuration File: \" + configFilePath);\r\n            out.println(\"Environment Variables: \" + envVariables);\r\n        }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "BAD_SendingofEncryptionKey.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_SendingofEncryptionKey.java",
              "type": "String",
              "code": "        String encryptionKey = getEncryptionKey();\r\n\r\n        response.setContentType(\"application/json\");\r\n        response.getWriter().write(\"{\\\"success\\\": true, \\\"key\\\": \\\"\" + encryptionKey + \"\\\"}\");\r\n        response.getWriter().close();\r\n    }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"{\\\"success\\\": true, \\\"key\\\": \\\"\" + encryptionKey + \"\\\"}\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_SendingofEncryptionKey.java",
              "type": "",
              "code": "        String encryptionKey = getEncryptionKey();\r\n\r\n        response.setContentType(\"application/json\");\r\n        response.getWriter().write(\"{\\\"success\\\": true, \\\"key\\\": \\\"\" + encryptionKey + \"\\\"}\");\r\n        response.getWriter().close();\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "BAD_SensitiveDataApiExposureSent.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accountNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_SensitiveDataApiExposureSent.java",
              "type": "String",
              "code": "        // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n\r\n        // Set response type and encoding\r\n        response.setContentType(\"application/json\");\r"
            },
            {
              "step": 1,
              "variableName": "jsonResponse",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_SensitiveDataApiExposureSent.java",
              "type": "JSONObject",
              "code": "        // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n\r\n        // Set response type and encoding\r\n        response.setContentType(\"application/json\");\r"
            },
            {
              "step": 2,
              "variableName": "jsonResponse",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_SensitiveDataApiExposureSent.java",
              "type": "JSONObject",
              "code": "        response.setContentType(\"application/json\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n\r\n        response.getWriter().write(jsonResponse.toString());\r\n    }\r\n\r\n    private String getSensitiveAccountDetails(String userId) {\r"
            },
            {
              "step": 3,
              "variableName": "jsonResponse.toString()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_SensitiveDataApiExposureSent.java",
              "type": "",
              "code": "        response.setContentType(\"application/json\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n\r\n        response.getWriter().write(jsonResponse.toString());\r\n    }\r\n\r\n    private String getSensitiveAccountDetails(String userId) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "BAD_SensitiveDataHttpServletResponse.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "ssn",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_SensitiveDataHttpServletResponse.java",
              "type": "String",
              "code": "        String ssn = getSensitiveData();\r\n\r\n        response.setContentType(\"text/plain\");\r\n        response.getWriter().write(\"Sensitive Data: \" + ssn);\r\n    }\r\n\r\n    // Simulates retrieval of sensitive data, e.g., from a database or a file\r"
            },
            {
              "step": 1,
              "variableName": "\"Sensitive Data: \" + ssn",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_SensitiveDataHttpServletResponse.java",
              "type": "",
              "code": "        String ssn = getSensitiveData();\r\n\r\n        response.setContentType(\"text/plain\");\r\n        response.getWriter().write(\"Sensitive Data: \" + ssn);\r\n    }\r\n\r\n    // Simulates retrieval of sensitive data, e.g., from a database or a file\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "BAD_FileReadErrorServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            },
            {
              "step": 2,
              "variableName": "file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            },
            {
              "step": 3,
              "variableName": "\"Error reading file: \" + file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            },
            {
              "step": 2,
              "variableName": "\"Error reading file: \" + file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "BAD_SensitiveNullPointerExceptionHandling.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accountKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SensitiveNullPointerExceptionHandling.java",
              "type": "String",
              "code": "            // Process the account key\r\n        } catch (NullPointerException e) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \r\n                \"ERROR: Null Pointer Exception! Debug Info: \" + accountKey + \r\n                \" | Data Dump: \" + AUTHORIZED_MAP);\r\n        }\r\n    }\r"
            },
            {
              "step": 1,
              "variableName": "\"ERROR: Null Pointer Exception! D",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SensitiveNullPointerExceptionHandling.java",
              "type": "",
              "code": "            // Process the account key\r\n        } catch (NullPointerException e) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \r\n                \"ERROR: Null Pointer Exception! Debug Info: \" + accountKey + \r\n                \" | Data Dump: \" + AUTHORIZED_MAP);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "BAD_DocumentDirectoryListingServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "File",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            },
            {
              "step": 1,
              "variableName": "file.getName()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "String",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            },
            {
              "step": 2,
              "variableName": "\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "File",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "File",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            },
            {
              "step": 2,
              "variableName": "file.getName()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "String",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            },
            {
              "step": 3,
              "variableName": "\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "File",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            },
            {
              "step": 1,
              "variableName": "file.getName()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "String",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            },
            {
              "step": 2,
              "variableName": "\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_DocumentDirectoryListingServlet.java",
              "type": "",
              "code": "        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n        out.println(\"</ul>\");\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "BAD_InsecureDirectoryListingServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_InsecureDirectoryListingServlet.java",
              "type": "File",
              "code": "        PrintWriter out = response.getWriter();\r\n\r\n        for (File file : directory.listFiles()) {\r\n            out.println(file.getName());\r\n        }\r\n    }\r\n}\r"
            },
            {
              "step": 1,
              "variableName": "file.getName()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-548/BAD_InsecureDirectoryListingServlet.java",
              "type": "",
              "code": "        PrintWriter out = response.getWriter();\r\n\r\n        for (File file : directory.listFiles()) {\r\n            out.println(file.getName());\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "BAD_PaymentErrorExposureServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "creditCardNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-550/BAD/BAD_PaymentErrorExposureServlet.java",
              "type": "String",
              "code": "        String creditCardNumber = request.getParameter(\"creditCardNumber\");\r\n        String amount = request.getParameter(\"amount\");\r\n        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r"
            },
            {
              "step": 1,
              "variableName": "\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-550/BAD/BAD_PaymentErrorExposureServlet.java",
              "type": "",
              "code": "        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "creditCardNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-550/BAD/BAD_PaymentErrorExposureServlet.java",
              "type": "String",
              "code": "        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r"
            },
            {
              "step": 1,
              "variableName": "\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-550/BAD/BAD_PaymentErrorExposureServlet.java",
              "type": "",
              "code": "        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "208": [
    {
      "resultIndex": 23,
      "fileName": "BAD_AAS_CiphertextWithByteBufferEquals.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_CiphertextWithByteBufferEquals.java",
              "type": "ByteBuffer",
              "code": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_CiphertextWithByteBufferEquals.java",
              "type": "",
              "code": "            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 24,
      "fileName": "BAD_AAS_unsafeCheckCiphertext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cipher.doFinal(hash)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertext.java",
              "type": "byte[]",
              "code": "            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertext.java",
              "type": "",
              "code": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 25,
      "fileName": "BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
              "type": "ByteBuffer",
              "code": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
              "type": "ByteBuffer",
              "code": "            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 2,
              "variableName": "tag.array()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
              "type": "",
              "code": "            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 26,
      "fileName": "BAD_AAS_unsafeCheckCiphertextWithOutputArray.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertextWithOutputArray.java",
              "type": "byte[]",
              "code": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = new byte[1024];\r\n            cipher.doFinal(tag, 0);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertextWithOutputArray.java",
              "type": "",
              "code": "            byte[] tag = new byte[1024];\r\n            cipher.doFinal(tag, 0);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 27,
      "fileName": "BAD_AAS_unsafeCheckSignatures.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "engine.sign()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckSignatures.java",
              "type": "byte[]",
              "code": "            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "signature",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckSignatures.java",
              "type": "",
              "code": "            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 28,
      "fileName": "BAD_AAS_unsafeCheckSignaturesWithOutputArray.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "signature",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckSignaturesWithOutputArray.java",
              "type": "byte[]",
              "code": "            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "signature",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckSignaturesWithOutputArray.java",
              "type": "",
              "code": "            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 29,
      "fileName": "BAD_AAS_unsafeMacCheckWithArrayEquals.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeMacCheckWithArrayEquals.java",
              "type": "byte[]",
              "code": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r"
            },
            {
              "step": 1,
              "variableName": "actualMac",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeMacCheckWithArrayEquals.java",
              "type": "",
              "code": "            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 30,
      "fileName": "BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "actualMac",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray.java",
              "type": "byte[]",
              "code": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "actualMac",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray.java",
              "type": "",
              "code": "            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 31,
      "fileName": "GOOD_AAS_noUserInputWhenCheckingCiphertext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cipher.doFinal(plaintext)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/GOOD_AAS_noUserInputWhenCheckingCiphertext.java",
              "type": "byte[]",
              "code": "            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/GOOD_AAS_noUserInputWhenCheckingCiphertext.java",
              "type": "",
              "code": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 32,
      "fileName": "BAD_unsafeCheckCustomMac.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cipher.doFinal(plaintext)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/PossibleTimingAttackAgainstSigniture/BAD_unsafeCheckCustomMac.java",
              "type": "byte[]",
              "code": "    public boolean unsafeCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return Arrays.equals(expected, tag);\r\n    }\r\n}\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/PossibleTimingAttackAgainstSigniture/BAD_unsafeCheckCustomMac.java",
              "type": "",
              "code": "        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return Arrays.equals(expected, tag);\r\n    }\r\n}\r\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 33,
      "fileName": "BAD_unsafeCheckSignatures.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "engine.sign()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/PossibleTimingAttackAgainstSigniture/BAD_unsafeCheckSignatures.java",
              "type": "byte[]",
              "code": "        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return Arrays.equals(expected, signature);\r\n    }\r\n}\r"
            },
            {
              "step": 1,
              "variableName": "signature",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/PossibleTimingAttackAgainstSigniture/BAD_unsafeCheckSignatures.java",
              "type": "",
              "code": "        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return Arrays.equals(expected, signature);\r\n    }\r\n}\r\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 34,
      "fileName": "BAD_unsafeMacCheck.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/PossibleTimingAttackAgainstSigniture/BAD_unsafeMacCheck.java",
              "type": "byte[]",
              "code": "public class BAD_unsafeMacCheck {\r\n    public boolean unsafeMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return Arrays.equals(expectedMac, actualMac);\r\n    }\r\n}\r"
            },
            {
              "step": 1,
              "variableName": "actualMac",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/PossibleTimingAttackAgainstSigniture/BAD_unsafeMacCheck.java",
              "type": "",
              "code": "    public boolean unsafeMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return Arrays.equals(expectedMac, actualMac);\r\n    }\r\n}\r\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 35,
      "fileName": "BAD_unsafeMacCheckWithLoop.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/PossibleTimingAttackAgainstSigniture/BAD_unsafeMacCheckWithLoop.java",
              "type": "byte[]",
              "code": "            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r"
            },
            {
              "step": 1,
              "variableName": "computedTag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/PossibleTimingAttackAgainstSigniture/BAD_unsafeMacCheckWithLoop.java",
              "type": "",
              "code": "            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n                    return false;\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 37,
      "fileName": "BAD_AAS_CiphertextWithByteBufferEquals.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_CiphertextWithByteBufferEquals.java",
              "type": "ByteBuffer",
              "code": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_CiphertextWithByteBufferEquals.java",
              "type": "",
              "code": "            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 38,
      "fileName": "BAD_AAS_unsafeCheckCiphertext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cipher.doFinal(hash)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertext.java",
              "type": "byte[]",
              "code": "            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertext.java",
              "type": "",
              "code": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 39,
      "fileName": "BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
              "type": "ByteBuffer",
              "code": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
              "type": "ByteBuffer",
              "code": "            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 2,
              "variableName": "tag.array()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
              "type": "",
              "code": "            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 40,
      "fileName": "BAD_AAS_unsafeCheckSignatures.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "engine.sign()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckSignatures.java",
              "type": "byte[]",
              "code": "            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "signature",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckSignatures.java",
              "type": "",
              "code": "            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 41,
      "fileName": "BAD_AAS_unsafeCheckSignaturesWithOutputArray.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "signature",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckSignaturesWithOutputArray.java",
              "type": "byte[]",
              "code": "            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "signature",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeCheckSignaturesWithOutputArray.java",
              "type": "",
              "code": "            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 42,
      "fileName": "BAD_AAS_unsafeMacCheckWithArrayEquals.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeMacCheckWithArrayEquals.java",
              "type": "byte[]",
              "code": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r"
            },
            {
              "step": 1,
              "variableName": "actualMac",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeMacCheckWithArrayEquals.java",
              "type": "",
              "code": "            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 43,
      "fileName": "BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "actualMac",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray.java",
              "type": "byte[]",
              "code": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "actualMac",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray.java",
              "type": "",
              "code": "            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 44,
      "fileName": "GOOD_AAS_noUserInputWhenCheckingCiphertext.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cipher.doFinal(plaintext)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/GOOD_AAS_noUserInputWhenCheckingCiphertext.java",
              "type": "byte[]",
              "code": "            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "tag",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-208/AttackAgainstSigniture/GOOD_AAS_noUserInputWhenCheckingCiphertext.java",
              "type": "",
              "code": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "209": [
    {
      "resultIndex": 45,
      "fileName": "BAD_DatabaseSchemaError.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sqlUpdateCommand",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "String",
              "code": "public class BAD_DatabaseSchemaError {\r\n    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new Exception(\"Only table alterations are supported.\" + sqlUpdateCommand);\r\n            }\r\n            // Database schema update logic\r"
            },
            {
              "step": 1,
              "variableName": "\"Only table alterations are supported.\" + sqlUpdateCommand",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "String",
              "code": "    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new Exception(\"Only table alterations are supported.\" + sqlUpdateCommand);\r\n            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Only table alterations are supported.\" + sqlUpdateCommand)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "Exception",
              "code": "    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new Exception(\"Only table alterations are supported.\" + sqlUpdateCommand);\r\n            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "String",
              "code": "            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Database schema update failed \" + e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "\"Database schema update failed \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "",
              "code": "            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Database schema update failed \" + e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "sqlUpdateCommand",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "String",
              "code": "    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new Exception(\"Only table alterations are supported.\" + sqlUpdateCommand);\r\n            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 1,
              "variableName": "\"Only table alterations are supported.\" + sqlUpdateCommand",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "String",
              "code": "    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new Exception(\"Only table alterations are supported.\" + sqlUpdateCommand);\r\n            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Only table alterations are supported.\" + sqlUpdateCommand)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "Exception",
              "code": "    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new Exception(\"Only table alterations are supported.\" + sqlUpdateCommand);\r\n            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "String",
              "code": "            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Database schema update failed \" + e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "\"Database schema update failed \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DatabaseSchemaError.java",
              "type": "",
              "code": "            }\r\n            // Database schema update logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Database schema update failed \" + e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 46,
      "fileName": "BAD_FinancialAuditError.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "declaredRevenue",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "Number",
              "code": "public class BAD_FinancialAuditError {\r\n    public void processAuditReport(String financialYear, double declaredRevenue) {\r\n        try {\r\n            if (declaredRevenue < 0) {\r\n                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r"
            },
            {
              "step": 1,
              "variableName": "\"Revenue cannot be negative: \" + declaredRevenu",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Revenue cannot be negative: \" + declaredRevenue",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "Exception",
              "code": "                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "",
              "code": "            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "companyBankAccount",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r\n            }\r\n            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r"
            },
            {
              "step": 1,
              "variableName": "\"Revenue cannot be negative: \" + declaredRevenu",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Revenue cannot be negative: \" + declaredRevenue",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "Exception",
              "code": "                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "",
              "code": "            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "internalAuditKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r\n            }\r\n            // Audit processing logic would go here.\r"
            },
            {
              "step": 1,
              "variableName": "\"Revenue cannot be negative: \" + declaredRevenu",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Revenue cannot be negative: \" + declaredRevenue",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "Exception",
              "code": "                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "",
              "code": "            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "dbConnectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r\n            }\r"
            },
            {
              "step": 1,
              "variableName": "\"Revenue cannot be negative: \" + declaredRevenu",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Revenue cannot be negative: \" + declaredRevenue",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "Exception",
              "code": "                String dbConnectionString = \"jdbc:mysql://prod-db:3306/finance?user=financeUser&password=FinPass!@#\";\r\n                String internalAuditKey = \"INTERNAL-AUDIT-KEY-XYZ\";\r\n                String companyBankAccount = \"ACC1234567890\";\r\n                throw new Exception(\"Revenue cannot be negative: \" + declaredRevenue +\r\n                                    \". DB Connection: \" + dbConnectionString +\r\n                                    \". Internal Audit Key: \" + internalAuditKey +\r\n                                    \". Company Bank Account: \" + companyBankAccount);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "String",
              "code": "            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_FinancialAuditError.java",
              "type": "",
              "code": "            // Audit processing logic would go here.\r\n            System.out.println(\"Audit report processed for financial year \" + financialYear + \" with revenue: \" + declaredRevenue);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 47,
      "fileName": "BAD_HealthcareSystemError.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "systemConfig",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "public class BAD_HealthcareSystemError {\r\n    public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant=true\")) {\r\n                String encryptionKey = \"AESKey-Secret-9876543210\";\r\n                String privateCertPath = \"/etc/ssl/private/healthcare_cert.pem\";\r\n                String serverIp = \"192.168.1.100\";\r"
            },
            {
              "step": 1,
              "variableName": "\"System configuration must be HIPAA compliant. ",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "                String serverIp = \"192.168.1.100\";\r\n                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r\n                        \", Server IP: \" + serverIp +\r"
            },
            {
              "step": 2,
              "variableName": "new NonCompliantSystemConfigurationException(\r",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "NonCompliantSystemConfigurationException",
              "code": "                String privateCertPath = \"/etc/ssl/private/healthcare_cert.pem\";\r\n                String serverIp = \"192.168.1.100\";\r\n                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "            // Normal initialization logic\r\n            System.out.println(\"Healthcare system initialized successfully with configuration: \" + systemConfig);\r\n        } catch (NonCompliantSystemConfigurationException e) {\r\n            logError(e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "String errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "        }\r\n    }\r\n\r\n    private void logError(String errorMessage) {\r\n        // Log the error along with detailed sensitive data.\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r"
            },
            {
              "step": 5,
              "variableName": "\"Error: \" + errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "",
              "code": "\r\n    private void logError(String errorMessage) {\r\n        // Log the error along with detailed sensitive data.\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r\n    public static void main(String[] args) {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "internalConfigFile",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r\n                        \", Server IP: \" + serverIp +\r\n                        \", Internal Config File: \" + internalConfigFile);\r\n            }\r\n            // Normal initialization logic\r\n            System.out.println(\"Healthcare system initialized successfully with configuration: \" + systemConfig);\r"
            },
            {
              "step": 1,
              "variableName": "\"System configuration must be HIPAA compliant. ",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "                String serverIp = \"192.168.1.100\";\r\n                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r\n                        \", Server IP: \" + serverIp +\r"
            },
            {
              "step": 2,
              "variableName": "new NonCompliantSystemConfigurationException(\r",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "NonCompliantSystemConfigurationException",
              "code": "                String privateCertPath = \"/etc/ssl/private/healthcare_cert.pem\";\r\n                String serverIp = \"192.168.1.100\";\r\n                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "            // Normal initialization logic\r\n            System.out.println(\"Healthcare system initialized successfully with configuration: \" + systemConfig);\r\n        } catch (NonCompliantSystemConfigurationException e) {\r\n            logError(e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "String errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "        }\r\n    }\r\n\r\n    private void logError(String errorMessage) {\r\n        // Log the error along with detailed sensitive data.\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r"
            },
            {
              "step": 5,
              "variableName": "\"Error: \" + errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "",
              "code": "\r\n    private void logError(String errorMessage) {\r\n        // Log the error along with detailed sensitive data.\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r\n    public static void main(String[] args) {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "serverIp",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r\n                        \", Server IP: \" + serverIp +\r\n                        \", Internal Config File: \" + internalConfigFile);\r\n            }\r\n            // Normal initialization logic\r"
            },
            {
              "step": 1,
              "variableName": "\"System configuration must be HIPAA compliant. ",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "                String serverIp = \"192.168.1.100\";\r\n                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r\n                        \", Server IP: \" + serverIp +\r"
            },
            {
              "step": 2,
              "variableName": "new NonCompliantSystemConfigurationException(\r",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "NonCompliantSystemConfigurationException",
              "code": "                String privateCertPath = \"/etc/ssl/private/healthcare_cert.pem\";\r\n                String serverIp = \"192.168.1.100\";\r\n                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "            // Normal initialization logic\r\n            System.out.println(\"Healthcare system initialized successfully with configuration: \" + systemConfig);\r\n        } catch (NonCompliantSystemConfigurationException e) {\r\n            logError(e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "String errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "        }\r\n    }\r\n\r\n    private void logError(String errorMessage) {\r\n        // Log the error along with detailed sensitive data.\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r"
            },
            {
              "step": 5,
              "variableName": "\"Error: \" + errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "",
              "code": "\r\n    private void logError(String errorMessage) {\r\n        // Log the error along with detailed sensitive data.\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r\n    public static void main(String[] args) {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r\n                        \", Server IP: \" + serverIp +\r\n                        \", Internal Config File: \" + internalConfigFile);\r"
            },
            {
              "step": 1,
              "variableName": "\"System configuration must be HIPAA compliant. ",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "                String serverIp = \"192.168.1.100\";\r\n                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r\n                        \", Server IP: \" + serverIp +\r"
            },
            {
              "step": 2,
              "variableName": "new NonCompliantSystemConfigurationException(\r",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "NonCompliantSystemConfigurationException",
              "code": "                String privateCertPath = \"/etc/ssl/private/healthcare_cert.pem\";\r\n                String serverIp = \"192.168.1.100\";\r\n                String internalConfigFile = \"/opt/healthcare/config/internal.conf\";\r\n                throw new NonCompliantSystemConfigurationException(\r\n                        \"System configuration must be HIPAA compliant. Current configuration: \" + systemConfig +\r\n                        \". Encryption Key: \" + encryptionKey +\r\n                        \", Private Certificate Path: \" + privateCertPath +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "            // Normal initialization logic\r\n            System.out.println(\"Healthcare system initialized successfully with configuration: \" + systemConfig);\r\n        } catch (NonCompliantSystemConfigurationException e) {\r\n            logError(e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "String errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "String",
              "code": "        }\r\n    }\r\n\r\n    private void logError(String errorMessage) {\r\n        // Log the error along with detailed sensitive data.\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r"
            },
            {
              "step": 5,
              "variableName": "\"Error: \" + errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_HealthcareSystemError.java",
              "type": "",
              "code": "\r\n    private void logError(String errorMessage) {\r\n        // Log the error along with detailed sensitive data.\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r\n    public static void main(String[] args) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 48,
      "fileName": "BAD_MessagingSystem.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "serverIp",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to send message, exposing sensitive content, encryption details, and server configuration.\", e);\r"
            },
            {
              "step": 1,
              "variableName": "\"Message sending failed fo",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "            String internalMsgId = \"MSG-00042-SECRET\";\r\n            String serverIp = \"10.0.0.15\";\r\n            \r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Message sending failed for",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "Exception",
              "code": "            String internalMsgId = \"MSG-00042-SECRET\";\r\n            String serverIp = \"10.0.0.15\";\r\n            \r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to send message, exposing sensitive content, encryption details, and server configuration.\", e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Messaging error: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "",
              "code": "                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to send message, exposing sensitive content, encryption details, and server configuration.\", e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "            String serverIp = \"10.0.0.15\";\r\n            \r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 1,
              "variableName": "\"Message sending failed fo",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "            String internalMsgId = \"MSG-00042-SECRET\";\r\n            String serverIp = \"10.0.0.15\";\r\n            \r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Message sending failed for",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "Exception",
              "code": "            String internalMsgId = \"MSG-00042-SECRET\";\r\n            String serverIp = \"10.0.0.15\";\r\n            \r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to send message, exposing sensitive content, encryption details, and server configuration.\", e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Messaging error: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "",
              "code": "                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to send message, exposing sensitive content, encryption details, and server configuration.\", e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "messageContent",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "            String internalMsgId = \"MSG-00042-SECRET\";\r\n            String serverIp = \"10.0.0.15\";\r\n            \r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r"
            },
            {
              "step": 1,
              "variableName": "\"Message sending failed fo",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "            String internalMsgId = \"MSG-00042-SECRET\";\r\n            String serverIp = \"10.0.0.15\";\r\n            \r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Message sending failed for",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "Exception",
              "code": "            String internalMsgId = \"MSG-00042-SECRET\";\r\n            String serverIp = \"10.0.0.15\";\r\n            \r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent +\r\n                                \". Internal Encryption Key: \" + encryptionKey +\r\n                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "String",
              "code": "                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to send message, exposing sensitive content, encryption details, and server configuration.\", e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Messaging error: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MessagingSystem.java",
              "type": "",
              "code": "                                \", Internal Message ID: \" + internalMsgId +\r\n                                \", Server IP: \" + serverIp);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to send message, exposing sensitive content, encryption details, and server configuration.\", e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 49,
      "fileName": "BAD_MilitaryOperationPlanError.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "operationPlan",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "public class BAD_MilitaryOperationPlanError {\r\n    public void dispatchUnits(String operationPlan) {\r\n        try {\r\n            if (!operationPlan.isEmpty()) {\r\n                String encryptionKey = \"MilOpEncKey-Alpha-2025\";\r\n                String missionID = \"MissionID-007\";\r\n                String secureCommChannel = \"CommChannel: SECURE-42\";\r"
            },
            {
              "step": 1,
              "variableName": "\"Operation plan already initialized:",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "                String logisticsInfo = \"Logistics: SupplyChain-X99\";\r\n\r\n                throw new OperationPlanAlreadyInitializedException(\r\n                    \"Operation plan already initialized: \" + operationPlan +\r\n                    \". Encryption Key: \" + encryptionKey +\r\n                    \", Mission ID: \" + missionID +\r\n                    \", Secure Comm Channel: \" + secureCommChannel +\r"
            },
            {
              "step": 2,
              "variableName": "new OperationPlanAlreadyInitializedException(...) : OperationPlanAlreadyInitializedException",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "OperationPlanAlreadyInitializedException",
              "code": "                String classifiedProtocol = \"Protocol: BlackOps-Delta\";\r\n                String logisticsInfo = \"Logistics: SupplyChain-X99\";\r\n\r\n                throw new OperationPlanAlreadyInitializedException(\r\n                    \"Operation plan already initialized: \" + operationPlan +\r\n                    \". Encryption Key: \" + encryptionKey +\r\n                    \", Mission ID: \" + missionID +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "            }\r\n            System.out.println(\"Units dispatched successfully.\");\r\n        } catch (OperationPlanAlreadyInitializedException e) {\r\n            logError(e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "String errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "        }\r\n    }\r\n\r\n    private void logError(String errorMessage) {\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r"
            },
            {
              "step": 5,
              "variableName": "\"Error: \" + errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "",
              "code": "    }\r\n\r\n    private void logError(String errorMessage) {\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r\n    public static void main(String[] args) {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "\r\n                throw new OperationPlanAlreadyInitializedException(\r\n                    \"Operation plan already initialized: \" + operationPlan +\r\n                    \". Encryption Key: \" + encryptionKey +\r\n                    \", Mission ID: \" + missionID +\r\n                    \", Secure Comm Channel: \" + secureCommChannel +\r\n                    \", Strategic Coordinates: \" + strategicCoordinates +\r"
            },
            {
              "step": 1,
              "variableName": "\"Operation plan already initialized:",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "                String logisticsInfo = \"Logistics: SupplyChain-X99\";\r\n\r\n                throw new OperationPlanAlreadyInitializedException(\r\n                    \"Operation plan already initialized: \" + operationPlan +\r\n                    \". Encryption Key: \" + encryptionKey +\r\n                    \", Mission ID: \" + missionID +\r\n                    \", Secure Comm Channel: \" + secureCommChannel +\r"
            },
            {
              "step": 2,
              "variableName": "new OperationPlanAlreadyInitializedException(...) : OperationPlanAlreadyInitializedException",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "OperationPlanAlreadyInitializedException",
              "code": "                String classifiedProtocol = \"Protocol: BlackOps-Delta\";\r\n                String logisticsInfo = \"Logistics: SupplyChain-X99\";\r\n\r\n                throw new OperationPlanAlreadyInitializedException(\r\n                    \"Operation plan already initialized: \" + operationPlan +\r\n                    \". Encryption Key: \" + encryptionKey +\r\n                    \", Mission ID: \" + missionID +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "            }\r\n            System.out.println(\"Units dispatched successfully.\");\r\n        } catch (OperationPlanAlreadyInitializedException e) {\r\n            logError(e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "String errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "        }\r\n    }\r\n\r\n    private void logError(String errorMessage) {\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r"
            },
            {
              "step": 5,
              "variableName": "\"Error: \" + errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "",
              "code": "    }\r\n\r\n    private void logError(String errorMessage) {\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r\n    public static void main(String[] args) {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "operationPlan",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "                String logisticsInfo = \"Logistics: SupplyChain-X99\";\r\n\r\n                throw new OperationPlanAlreadyInitializedException(\r\n                    \"Operation plan already initialized: \" + operationPlan +\r\n                    \". Encryption Key: \" + encryptionKey +\r\n                    \", Mission ID: \" + missionID +\r\n                    \", Secure Comm Channel: \" + secureCommChannel +\r"
            },
            {
              "step": 1,
              "variableName": "\"Operation plan already initialized:",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "                String logisticsInfo = \"Logistics: SupplyChain-X99\";\r\n\r\n                throw new OperationPlanAlreadyInitializedException(\r\n                    \"Operation plan already initialized: \" + operationPlan +\r\n                    \". Encryption Key: \" + encryptionKey +\r\n                    \", Mission ID: \" + missionID +\r\n                    \", Secure Comm Channel: \" + secureCommChannel +\r"
            },
            {
              "step": 2,
              "variableName": "new OperationPlanAlreadyInitializedException(...) : OperationPlanAlreadyInitializedException",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "OperationPlanAlreadyInitializedException",
              "code": "                String classifiedProtocol = \"Protocol: BlackOps-Delta\";\r\n                String logisticsInfo = \"Logistics: SupplyChain-X99\";\r\n\r\n                throw new OperationPlanAlreadyInitializedException(\r\n                    \"Operation plan already initialized: \" + operationPlan +\r\n                    \". Encryption Key: \" + encryptionKey +\r\n                    \", Mission ID: \" + missionID +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "            }\r\n            System.out.println(\"Units dispatched successfully.\");\r\n        } catch (OperationPlanAlreadyInitializedException e) {\r\n            logError(e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "String errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "String",
              "code": "        }\r\n    }\r\n\r\n    private void logError(String errorMessage) {\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r"
            },
            {
              "step": 5,
              "variableName": "\"Error: \" + errorMessage",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_MilitaryOperationPlanError.java",
              "type": "",
              "code": "    }\r\n\r\n    private void logError(String errorMessage) {\r\n        System.err.println(\"Error: \" + errorMessage);\r\n    }\r\n\r\n    public static void main(String[] args) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 50,
      "fileName": "BAD_ProcessMonitoring.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "envDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "String",
              "code": "                                \", OS: \" + osName + \" \" + osVersion +\r\n                                \", Java Runtime: \" + javaRuntime +\r\n                                \", Log File: \" + logFilePath +\r\n                                \", Env Var SECRET_ENV_VAR: \" + envDetails);\r\n        } catch (Exception e) {\r\n            // Log detailed error message exposing internal data.\r\n            System.err.println(\"Monitoring error: \" + e.getMessage());\r"
            },
            {
              "step": 1,
              "variableName": "\"Critical process failure detected: \" + p",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "String",
              "code": "            String envDetails = System.getenv(\"SECRET_ENV_VAR\"); // Example of a sensitive environment variable\r\n\r\n            // The exception now includes several internal configuration details.\r\n            throw new Exception(\"Critical process failure detected: \" + processName +\r\n                                \". Process ID: \" + processID +\r\n                                \", Machine IP: \" + machineIP +\r\n                                \", OS: \" + osName + \" \" + osVersion +\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Critical process failure detected: \" + pr",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "Exception",
              "code": "            String envDetails = System.getenv(\"SECRET_ENV_VAR\"); // Example of a sensitive environment variable\r\n\r\n            // The exception now includes several internal configuration details.\r\n            throw new Exception(\"Critical process failure detected: \" + processName +\r\n                                \". Process ID: \" + processID +\r\n                                \", Machine IP: \" + machineIP +\r\n                                \", OS: \" + osName + \" \" + osVersion +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "String",
              "code": "                                \", Env Var SECRET_ENV_VAR: \" + envDetails);\r\n        } catch (Exception e) {\r\n            // Log detailed error message exposing internal data.\r\n            System.err.println(\"Monitoring error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical monitoring failure. Escalate immediately for process: \" + processName +\r\n                                       \". Internal details exposed in error message.\", e);\r\n        }\r"
            },
            {
              "step": 4,
              "variableName": "\"Monitoring error: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "",
              "code": "                                \", Env Var SECRET_ENV_VAR: \" + envDetails);\r\n        } catch (Exception e) {\r\n            // Log detailed error message exposing internal data.\r\n            System.err.println(\"Monitoring error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical monitoring failure. Escalate immediately for process: \" + processName +\r\n                                       \". Internal details exposed in error message.\", e);\r\n        }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "machineIP",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "String",
              "code": "            // The exception now includes several internal configuration details.\r\n            throw new Exception(\"Critical process failure detected: \" + processName +\r\n                                \". Process ID: \" + processID +\r\n                                \", Machine IP: \" + machineIP +\r\n                                \", OS: \" + osName + \" \" + osVersion +\r\n                                \", Java Runtime: \" + javaRuntime +\r\n                                \", Log File: \" + logFilePath +\r"
            },
            {
              "step": 1,
              "variableName": "\"Critical process failure detected: \" + p",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "String",
              "code": "            String envDetails = System.getenv(\"SECRET_ENV_VAR\"); // Example of a sensitive environment variable\r\n\r\n            // The exception now includes several internal configuration details.\r\n            throw new Exception(\"Critical process failure detected: \" + processName +\r\n                                \". Process ID: \" + processID +\r\n                                \", Machine IP: \" + machineIP +\r\n                                \", OS: \" + osName + \" \" + osVersion +\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Critical process failure detected: \" + pr",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "Exception",
              "code": "            String envDetails = System.getenv(\"SECRET_ENV_VAR\"); // Example of a sensitive environment variable\r\n\r\n            // The exception now includes several internal configuration details.\r\n            throw new Exception(\"Critical process failure detected: \" + processName +\r\n                                \". Process ID: \" + processID +\r\n                                \", Machine IP: \" + machineIP +\r\n                                \", OS: \" + osName + \" \" + osVersion +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "String",
              "code": "                                \", Env Var SECRET_ENV_VAR: \" + envDetails);\r\n        } catch (Exception e) {\r\n            // Log detailed error message exposing internal data.\r\n            System.err.println(\"Monitoring error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical monitoring failure. Escalate immediately for process: \" + processName +\r\n                                       \". Internal details exposed in error message.\", e);\r\n        }\r"
            },
            {
              "step": 4,
              "variableName": "\"Monitoring error: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_ProcessMonitoring.java",
              "type": "",
              "code": "                                \", Env Var SECRET_ENV_VAR: \" + envDetails);\r\n        } catch (Exception e) {\r\n            // Log detailed error message exposing internal data.\r\n            System.err.println(\"Monitoring error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical monitoring failure. Escalate immediately for process: \" + processName +\r\n                                       \". Internal details exposed in error message.\", e);\r\n        }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 51,
      "fileName": "BAD_RealTimeBiddingError.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r\n                                    \", DB Connection: \" + dbConnection +\r\n                                    \", Encryption Key: \" + encryptionKey);\r\n            }\r\n            // Bid processing logic would normally go here.\r\n            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r"
            },
            {
              "step": 1,
              "variableName": "\"Empty bid data received for session",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "                String dbConnection = \"DB: biddingDB, User: bidUser, Pass: BidPass@123\";\r\n                String encryptionKey = \"BidEncryptionKey-Alpha-2025\";\r\n                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Empty bid data received for session:",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "Exception",
              "code": "                String dbConnection = \"DB: biddingDB, User: bidUser, Pass: BidPass@123\";\r\n                String encryptionKey = \"BidEncryptionKey-Alpha-2025\";\r\n                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "            // Bid processing logic would normally go here.\r\n            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID: \" + sessionId, e);\r\n        }\r"
            },
            {
              "step": 4,
              "variableName": "errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "",
              "code": "            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID: \" + sessionId, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "dbConnection",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r\n                                    \", DB Connection: \" + dbConnection +\r\n                                    \", Encryption Key: \" + encryptionKey);\r\n            }\r\n            // Bid processing logic would normally go here.\r"
            },
            {
              "step": 1,
              "variableName": "\"Empty bid data received for session",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "                String dbConnection = \"DB: biddingDB, User: bidUser, Pass: BidPass@123\";\r\n                String encryptionKey = \"BidEncryptionKey-Alpha-2025\";\r\n                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Empty bid data received for session:",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "Exception",
              "code": "                String dbConnection = \"DB: biddingDB, User: bidUser, Pass: BidPass@123\";\r\n                String encryptionKey = \"BidEncryptionKey-Alpha-2025\";\r\n                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "            // Bid processing logic would normally go here.\r\n            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID: \" + sessionId, e);\r\n        }\r"
            },
            {
              "step": 4,
              "variableName": "errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "",
              "code": "            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID: \" + sessionId, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "serverInfo",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r\n                                    \", DB Connection: \" + dbConnection +\r\n                                    \", Encryption Key: \" + encryptionKey);\r\n            }\r"
            },
            {
              "step": 1,
              "variableName": "\"Empty bid data received for session",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "                String dbConnection = \"DB: biddingDB, User: bidUser, Pass: BidPass@123\";\r\n                String encryptionKey = \"BidEncryptionKey-Alpha-2025\";\r\n                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Empty bid data received for session:",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "Exception",
              "code": "                String dbConnection = \"DB: biddingDB, User: bidUser, Pass: BidPass@123\";\r\n                String encryptionKey = \"BidEncryptionKey-Alpha-2025\";\r\n                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "            // Bid processing logic would normally go here.\r\n            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID: \" + sessionId, e);\r\n        }\r"
            },
            {
              "step": 4,
              "variableName": "errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "",
              "code": "            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID: \" + sessionId, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r\n                                    \", DB Connection: \" + dbConnection +\r\n                                    \", Encryption Key: \" + encryptionKey);\r"
            },
            {
              "step": 1,
              "variableName": "\"Empty bid data received for session",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "                String dbConnection = \"DB: biddingDB, User: bidUser, Pass: BidPass@123\";\r\n                String encryptionKey = \"BidEncryptionKey-Alpha-2025\";\r\n                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Empty bid data received for session:",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "Exception",
              "code": "                String dbConnection = \"DB: biddingDB, User: bidUser, Pass: BidPass@123\";\r\n                String encryptionKey = \"BidEncryptionKey-Alpha-2025\";\r\n                \r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId +\r\n                                    \". Bidding Algorithm: \" + biddingAlgorithm +\r\n                                    \", API Key: \" + apiKey +\r\n                                    \", Server Info: \" + serverInfo +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "String",
              "code": "            // Bid processing logic would normally go here.\r\n            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID: \" + sessionId, e);\r\n        }\r"
            },
            {
              "step": 4,
              "variableName": "errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_RealTimeBiddingError.java",
              "type": "",
              "code": "            System.out.println(\"Bid processed successfully for session: \" + sessionId);\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID: \" + sessionId, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 52,
      "fileName": "BAD_SimpleExceptionExposure.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accountBalance",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "Number",
              "code": "    \r\n    public void exposeException(float cost, float accountBalance) {\r\n        try{\r\n            if (cost > accountBalance) {\r\n                throw new Exception(\"Account balance exceeded \" + accountBalance);\r\n            }\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "\"Account balance exceeded \" + accountBalance",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "String",
              "code": "    public void exposeException(float cost, float accountBalance) {\r\n        try{\r\n            if (cost > accountBalance) {\r\n                throw new Exception(\"Account balance exceeded \" + accountBalance);\r\n            }\r\n        }\r\n\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Account balance exceeded \" + accountBalance)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "Exception",
              "code": "    public void exposeException(float cost, float accountBalance) {\r\n        try{\r\n            if (cost > accountBalance) {\r\n                throw new Exception(\"Account balance exceeded \" + accountBalance);\r\n            }\r\n        }\r\n\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "String",
              "code": "        }\r\n\r\n        catch (Exception e) {\r\n            System.out.println(\"Error: \" + e.getMessage());\r\n        }\r\n        \r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Error: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "",
              "code": "        }\r\n\r\n        catch (Exception e) {\r\n            System.out.println(\"Error: \" + e.getMessage());\r\n        }\r\n        \r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "accountBalance",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "Number",
              "code": "    public void exposeException(float cost, float accountBalance) {\r\n        try{\r\n            if (cost > accountBalance) {\r\n                throw new Exception(\"Account balance exceeded \" + accountBalance);\r\n            }\r\n        }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Account balance exceeded \" + accountBalance",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "String",
              "code": "    public void exposeException(float cost, float accountBalance) {\r\n        try{\r\n            if (cost > accountBalance) {\r\n                throw new Exception(\"Account balance exceeded \" + accountBalance);\r\n            }\r\n        }\r\n\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"Account balance exceeded \" + accountBalance)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "Exception",
              "code": "    public void exposeException(float cost, float accountBalance) {\r\n        try{\r\n            if (cost > accountBalance) {\r\n                throw new Exception(\"Account balance exceeded \" + accountBalance);\r\n            }\r\n        }\r\n\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "String",
              "code": "        }\r\n\r\n        catch (Exception e) {\r\n            System.out.println(\"Error: \" + e.getMessage());\r\n        }\r\n        \r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Error: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SimpleExceptionExposure.java",
              "type": "",
              "code": "        }\r\n\r\n        catch (Exception e) {\r\n            System.out.println(\"Error: \" + e.getMessage());\r\n        }\r\n        \r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 53,
      "fileName": "BAD_SoftwareLicensingError.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "licenseKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "public class BAD_SoftwareLicensingError {\r\n    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r"
            },
            {
              "step": 1,
              "variableName": "\"License key is missing: \" + licenseKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"License key is missing: \" + licenseKey)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "Exception",
              "code": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Software license validation failed: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "",
              "code": "            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "licenseKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "public class BAD_SoftwareLicensingError {\r\n    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r"
            },
            {
              "step": 1,
              "variableName": "\"License key is missing: \" + licenseKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"License key is missing: \" + licenseKey)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "Exception",
              "code": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Software license validation failed: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "",
              "code": "            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "licenseKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 1,
              "variableName": "\"License key is missing: \" + licenseKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 2,
              "variableName": "new Exception(\"License key is missing: \" + licenseKey)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "Exception",
              "code": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Software license validation failed: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "",
              "code": "            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "licenseKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Critical licensing error, contact support with code: \" + licenseKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 2,
              "variableName": "new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "RuntimeException",
              "code": "            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "String",
              "code": "            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Software license validation failed: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_SoftwareLicensingError.java",
              "type": "",
              "code": "            }\r\n            // License checking logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 54,
      "fileName": "BAD_ApiKeyManagementServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "String",
              "code": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid API key \" + apiKey + \" provided.\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "String",
              "code": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n        catch(ServletException e){\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid API key \" + apiKey + \" provided.\")",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "ServletException",
              "code": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n        catch(ServletException e){\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "",
              "code": "            }\r\n        }\r\n        catch(ServletException e){\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "String",
              "code": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid API key \" + apiKey + \" provided.\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "String",
              "code": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n        catch(ServletException e){\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid API key \" + apiKey + \" provided.\")",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "ServletException",
              "code": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n        catch(ServletException e){\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "",
              "code": "            }\r\n        }\r\n        catch(ServletException e){\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "String",
              "code": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n        catch(ServletException e){\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid API key \" + apiKey + \" provided.\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "String",
              "code": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n        catch(ServletException e){\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid API key \" + apiKey + \" provided.\")",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "ServletException",
              "code": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n        catch(ServletException e){\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ApiKeyManagementServlet.java",
              "type": "",
              "code": "            }\r\n        }\r\n        catch(ServletException e){\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 55,
      "fileName": "BAD_DbConnectionErrorServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dbUrl",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "        Connection conn = null;\r\n\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "            System.err.println(\"Failed to connect to the database.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Database connection failed.\");\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Servlet Exception: \" + e.getMessage());\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\r\n        } finally {\r\n            try {\r"
            },
            {
              "step": 4,
              "variableName": "\"Servlet Exception: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "",
              "code": "            System.err.println(\"Failed to connect to the database.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Database connection failed.\");\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Servlet Exception: \" + e.getMessage());\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\r\n        } finally {\r\n            try {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "dbUser",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "        Connection conn = null;\r\n\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "            System.err.println(\"Failed to connect to the database.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Database connection failed.\");\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Servlet Exception: \" + e.getMessage());\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\r\n        } finally {\r\n            try {\r"
            },
            {
              "step": 4,
              "variableName": "\"Servlet Exception: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "",
              "code": "            System.err.println(\"Failed to connect to the database.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Database connection failed.\");\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Servlet Exception: \" + e.getMessage());\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\r\n        } finally {\r\n            try {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "        Connection conn = null;\r\n\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "            System.err.println(\"Failed to connect to the database.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Database connection failed.\");\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Servlet Exception: \" + e.getMessage());\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\r\n        } finally {\r\n            try {\r"
            },
            {
              "step": 4,
              "variableName": "\"Servlet Exception: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "",
              "code": "            System.err.println(\"Failed to connect to the database.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Database connection failed.\");\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Servlet Exception: \" + e.getMessage());\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\r\n        } finally {\r\n            try {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "            System.err.println(\"Failed to connect to the database.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Database connection failed.\");\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Servlet Exception: \" + e.getMessage());\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\r\n        } finally {\r\n            try {\r"
            },
            {
              "step": 4,
              "variableName": "\"Servlet Exception: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "",
              "code": "            System.err.println(\"Failed to connect to the database.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Database connection failed.\");\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Servlet Exception: \" + e.getMessage());\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\r\n        } finally {\r\n            try {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 56,
      "fileName": "BAD_DbConnectionErrorServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dbUrl",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "        Connection conn = null;\r\n\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "            try {\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Error closing the connection: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "",
              "code": "            try {\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "dbUser",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "        Connection conn = null;\r\n\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "            try {\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Error closing the connection: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "",
              "code": "            try {\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "        Connection conn = null;\r\n\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "            try {\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Error closing the connection: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "",
              "code": "            try {\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException(\"Invalid database connection parameters: \" + dbUrl + \", \" + dbUser + \", \" + dbPass);\r\n            }\r\n\r\n            // Establish a database connection\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "String",
              "code": "            try {\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r"
            },
            {
              "step": 4,
              "variableName": "\"Error closing the connection: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_DbConnectionErrorServlet.java",
              "type": "",
              "code": "            try {\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 57,
      "fileName": "BAD_ExternalServiceErrorServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "String",
              "code": "        try {\r\n            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid API key provided. \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "String",
              "code": "            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid API key provided. \" + apiKey)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "ServletException",
              "code": "            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "",
              "code": "                throw new ServletException(\"Failed to fetch data from API using API key: \" + apiKey);\r\n            }\r\n        } catch (ServletException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "String",
              "code": "        try {\r\n            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid API key provided. \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "String",
              "code": "            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid API key provided. \" + apiKey)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "ServletException",
              "code": "            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "",
              "code": "                throw new ServletException(\"Failed to fetch data from API using API key: \" + apiKey);\r\n            }\r\n        } catch (ServletException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "String",
              "code": "            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid API key provided. \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "String",
              "code": "            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Invalid API key provided. \" + apiKey)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "ServletException",
              "code": "            URL url = new URL(\"https://api.example.com/data\");\r\n            String apiKey = request.getParameter(\"apiKey\");\r\n            if (apiKey == null || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key provided. \" + apiKey);\r\n            }\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "",
              "code": "                throw new ServletException(\"Failed to fetch data from API using API key: \" + apiKey);\r\n            }\r\n        } catch (ServletException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "String",
              "code": "\r\n            int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API using API key: \" + apiKey);\r\n            }\r\n        } catch (ServletException e) {\r\n            System.err.println(e.getMessage());\r"
            },
            {
              "step": 1,
              "variableName": "\"Failed to fetch data from API using API key: \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "String",
              "code": "\r\n            int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API using API key: \" + apiKey);\r\n            }\r\n        } catch (ServletException e) {\r\n            System.err.println(e.getMessage());\r"
            },
            {
              "step": 2,
              "variableName": "new ServletException(\"Failed to fetch data from API using API key: \" + apiKey)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "ServletException",
              "code": "\r\n            int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API using API key: \" + apiKey);\r\n            }\r\n        } catch (ServletException e) {\r\n            System.err.println(e.getMessage());\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_ExternalServiceErrorServlet.java",
              "type": "",
              "code": "                throw new ServletException(\"Failed to fetch data from API using API key: \" + apiKey);\r\n            }\r\n        } catch (ServletException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 58,
      "fileName": "BAD_FileReadErrorServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 2,
              "variableName": "file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 3,
              "variableName": "\"File is empty: \" + file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 4,
              "variableName": "new ServletException(\"File is empty: \" + file.getAbsolutePath())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "ServletException",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 5,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "",
              "code": "        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 2,
              "variableName": "file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 3,
              "variableName": "\"File is empty: \" + file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 4,
              "variableName": "new ServletException(\"File is empty: \" + file.getAbsolutePath())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "ServletException",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 5,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "",
              "code": "        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 2,
              "variableName": "\"File is empty: \" + file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 3,
              "variableName": "new ServletException(\"File is empty: \" + file.getAbsolutePath())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "ServletException",
              "code": "             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n        } catch (IOException e) {\r"
            },
            {
              "step": 4,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "",
              "code": "        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 60,
      "fileName": "BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dbConnectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
              "type": "String",
              "code": "            out.println(\"\\n-- Session Information --\");\r\n            out.println(sessionInfo);\r\n            out.println(\"\\n-- Internal Configuration Details --\");\r\n            out.println(\"DB Connection String: \" + dbConnectionString);\r\n            out.println(\"API Key: \" + apiKey);\r\n            out.println(\"Configuration File: \" + configFilePath);\r\n            out.println(\"Environment Variables: \" + envVariables);\r"
            },
            {
              "step": 1,
              "variableName": "\"DB Connection String: \" + dbConnectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
              "type": "",
              "code": "            out.println(\"\\n-- Session Information --\");\r\n            out.println(sessionInfo);\r\n            out.println(\"\\n-- Internal Configuration Details --\");\r\n            out.println(\"DB Connection String: \" + dbConnectionString);\r\n            out.println(\"API Key: \" + apiKey);\r\n            out.println(\"Configuration File: \" + configFilePath);\r\n            out.println(\"Environment Variables: \" + envVariables);\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 61,
      "fileName": "BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
              "type": "String",
              "code": "            out.println(sessionInfo);\r\n            out.println(\"\\n-- Internal Configuration Details --\");\r\n            out.println(\"DB Connection String: \" + dbConnectionString);\r\n            out.println(\"API Key: \" + apiKey);\r\n            out.println(\"Configuration File: \" + configFilePath);\r\n            out.println(\"Environment Variables: \" + envVariables);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "\"API Key: \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-201/BAD/BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
              "type": "",
              "code": "            out.println(sessionInfo);\r\n            out.println(\"\\n-- Internal Configuration Details --\");\r\n            out.println(\"DB Connection String: \" + dbConnectionString);\r\n            out.println(\"API Key: \" + apiKey);\r\n            out.println(\"Configuration File: \" + configFilePath);\r\n            out.println(\"Environment Variables: \" + envVariables);\r\n        }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 62,
      "fileName": "BAD_DetailedDatabaseErrorExposure.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DetailedDatabaseErrorExposure.java",
              "type": "String",
              "code": "    public static void main(String[] args) {\r\n        String query = \"SELECT * FROM accounts_table\";\r\n        try {\r\n            executeDatabaseQuery(query);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Database error: Failed to execute query: \" + query);\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "\"Database error: Failed to execute query: \" + query",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DetailedDatabaseErrorExposure.java",
              "type": "",
              "code": "        try {\r\n            executeDatabaseQuery(query);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Database error: Failed to execute query: \" + query);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DetailedDatabaseErrorExposure.java",
              "type": "String",
              "code": "        try {\r\n            executeDatabaseQuery(query);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Database error: Failed to execute query: \" + query);\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"Database error: Failed to execute query: \" + query",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_DetailedDatabaseErrorExposure.java",
              "type": "",
              "code": "        try {\r\n            executeDatabaseQuery(query);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Database error: Failed to execute query: \" + query);\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 63,
      "fileName": "BAD_EnvVarExposure.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "API_KEY",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_EnvVarExposure.java",
              "type": "String",
              "code": "        String API_KEY = args[1];\r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(API_KEY, \"GoldenSunset89\");\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n        } catch (Exception e) {\r"
            },
            {
              "step": 1,
              "variableName": "\"An error occurred while invoking the process with API key \" + API_KEY",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_EnvVarExposure.java",
              "type": "",
              "code": "            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"An error occurred while invoking the process with API key \" + API_KEY);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "API_KEY",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_EnvVarExposure.java",
              "type": "String",
              "code": "            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"An error occurred while invoking the process with API key \" + API_KEY);\r\n        }\r\n    }\r\n}\r"
            },
            {
              "step": 1,
              "variableName": "\"An error occurred while invoking the process with API key \" + API_KEY",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_EnvVarExposure.java",
              "type": "",
              "code": "            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"An error occurred while invoking the process with API key \" + API_KEY);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 64,
      "fileName": "BAD_ProcessInvocationWithArgs.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String[]",
              "code": "    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r"
            },
            {
              "step": 1,
              "variableName": "\"An error occurred while invoking the process with this command: \" + command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "",
              "code": "            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"An error occurred while invoking the process with this command: \" + command);\r\n            \r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String[]",
              "code": "            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"An error occurred while invoking the process with this command: \" + command);\r\n            \r\n        }\r\n    }\r"
            },
            {
              "step": 1,
              "variableName": "\"An error occurred while invoking the process with this command: \" + command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "",
              "code": "            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"An error occurred while invoking the process with this command: \" + command);\r\n            \r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 65,
      "fileName": "BAD_APIKeyRegenerator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "public class BAD_APIKeyRegenerator {\r\n\r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "\"API key regeneration failed for key: \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "",
              "code": "                System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 1,
              "variableName": "\"API key regeneration failed for key: \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "",
              "code": "                System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "                System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n        }\r\n    }\r\n}\r"
            },
            {
              "step": 1,
              "variableName": "\"API key regeneration failed for key: \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "",
              "code": "                System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 66,
      "fileName": "BAD_DatabaseAccessLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "connectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r"
            },
            {
              "step": 1,
              "variableName": "\"Database operation failed with connection string \" + connectionString + \": \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "",
              "code": "                System.err.println(\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString());\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Database operation failed with connection string \" + connectionString + \": \" + e.getMessage());\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "connectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "                System.err.println(\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString());\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Database operation failed with connection string \" + connectionString + \": \" + e.getMessage());\r\n        }\r\n    }\r\n}\r"
            },
            {
              "step": 1,
              "variableName": "\"Database operation failed with connection string \" + connectionString + \": \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "",
              "code": "                System.err.println(\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString());\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Database operation failed with connection string \" + connectionString + \": \" + e.getMessage());\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 67,
      "fileName": "BAD_FileReadErrorServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            },
            {
              "step": 2,
              "variableName": "file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            },
            {
              "step": 3,
              "variableName": "\"Error reading file: \" + file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "File",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "String",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            },
            {
              "step": 2,
              "variableName": "\"Error reading file: \" + file.getAbsolutePath()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-536/BAD/BAD_FileReadErrorServlet.java",
              "type": "",
              "code": "            }\r\n            // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(e.getMessage());\r\n        }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 68,
      "fileName": "BAD_PaymentErrorExposureServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "creditCardNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-550/BAD/BAD_PaymentErrorExposureServlet.java",
              "type": "String",
              "code": "        String creditCardNumber = request.getParameter(\"creditCardNumber\");\r\n        String amount = request.getParameter(\"amount\");\r\n        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r"
            },
            {
              "step": 1,
              "variableName": "\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-550/BAD/BAD_PaymentErrorExposureServlet.java",
              "type": "",
              "code": "        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "creditCardNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-550/BAD/BAD_PaymentErrorExposureServlet.java",
              "type": "String",
              "code": "        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r"
            },
            {
              "step": 1,
              "variableName": "\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-550/BAD/BAD_PaymentErrorExposureServlet.java",
              "type": "",
              "code": "        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "214": [
    {
      "resultIndex": 69,
      "fileName": "BAD_CloudServiceConfigExposure.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cloudAccessToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_CloudServiceConfigExposure.java",
              "type": "String",
              "code": "        try {\r\n            String cloudAccessToken = \"SilentForest123\";\r\n            // Command to deploy an application to a cloud service with an access token exposed\r\n            Runtime.getRuntime().exec(new String[]{\"cloud\", \"deploy\", \"--access-token\", cloudAccessToken, \"my-cloud-app\"});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "new String[]{\"cloud\", \"deploy\", \"--access-token\", cloudAccessToken, \"my-cloud-app\"}",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_CloudServiceConfigExposure.java",
              "type": "String[] [[]] : String",
              "code": "        try {\r\n            String cloudAccessToken = \"SilentForest123\";\r\n            // Command to deploy an application to a cloud service with an access token exposed\r\n            Runtime.getRuntime().exec(new String[]{\"cloud\", \"deploy\", \"--access-token\", cloudAccessToken, \"my-cloud-app\"});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r"
            },
            {
              "step": 2,
              "variableName": "new String[]{\"cloud\", \"deploy\", \"--access-token\", cloudAccessToken, \"my-cloud-app\"}",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_CloudServiceConfigExposure.java",
              "type": "",
              "code": "        try {\r\n            String cloudAccessToken = \"SilentForest123\";\r\n            // Command to deploy an application to a cloud service with an access token exposed\r\n            Runtime.getRuntime().exec(new String[]{\"cloud\", \"deploy\", \"--access-token\", cloudAccessToken, \"my-cloud-app\"});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 70,
      "fileName": "BAD_DockerRunSensitiveInfoExposure.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dbPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String",
              "code": "            String[] command = {\r\n                \"docker\", \"run\",\r\n                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r\n                \"-e\", \"API_KEY=\" + apiKey,\r\n                \"-e\", \"ENCRYPTION_KEY=\" + encryptionKey,\r\n                \"-e\", \"INTERNAL_CERT=\" + internalCert,\r"
            },
            {
              "step": 1,
              "variableName": "\"DB_PASSWORD=\" + dbPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String",
              "code": "            String[] command = {\r\n                \"docker\", \"run\",\r\n                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r\n                \"-e\", \"API_KEY=\" + apiKey,\r\n                \"-e\", \"ENCRYPTION_KEY=\" + encryptionKey,\r\n                \"-e\", \"INTERNAL_CERT=\" + internalCert,\r"
            },
            {
              "step": 2,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String[] [[]] : String",
              "code": "            String encryptionKey = \"EncryptKey-Alpha-2025\";\r\n            String internalCert = \"/etc/ssl/certs/internal_cert.pem\";\r\n\r\n            String[] command = {\r\n                \"docker\", \"run\",\r\n                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r"
            },
            {
              "step": 3,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "",
              "code": "\r\n            // Execute the Docker command. On many operating systems,\r\n            // the command line and environment variables are visible to other users.\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n        } catch (Exception e) {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String",
              "code": "                \"docker\", \"run\",\r\n                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r\n                \"-e\", \"API_KEY=\" + apiKey,\r\n                \"-e\", \"ENCRYPTION_KEY=\" + encryptionKey,\r\n                \"-e\", \"INTERNAL_CERT=\" + internalCert,\r\n                \"myapp:latest\"\r"
            },
            {
              "step": 1,
              "variableName": "\"API_KEY=\" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String",
              "code": "                \"docker\", \"run\",\r\n                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r\n                \"-e\", \"API_KEY=\" + apiKey,\r\n                \"-e\", \"ENCRYPTION_KEY=\" + encryptionKey,\r\n                \"-e\", \"INTERNAL_CERT=\" + internalCert,\r\n                \"myapp:latest\"\r"
            },
            {
              "step": 2,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String[] [[]] : String",
              "code": "            String encryptionKey = \"EncryptKey-Alpha-2025\";\r\n            String internalCert = \"/etc/ssl/certs/internal_cert.pem\";\r\n\r\n            String[] command = {\r\n                \"docker\", \"run\",\r\n                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r"
            },
            {
              "step": 3,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "",
              "code": "\r\n            // Execute the Docker command. On many operating systems,\r\n            // the command line and environment variables are visible to other users.\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n        } catch (Exception e) {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String",
              "code": "                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r\n                \"-e\", \"API_KEY=\" + apiKey,\r\n                \"-e\", \"ENCRYPTION_KEY=\" + encryptionKey,\r\n                \"-e\", \"INTERNAL_CERT=\" + internalCert,\r\n                \"myapp:latest\"\r\n            };\r"
            },
            {
              "step": 1,
              "variableName": "\"ENCRYPTION_KEY=\" + encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String",
              "code": "                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r\n                \"-e\", \"API_KEY=\" + apiKey,\r\n                \"-e\", \"ENCRYPTION_KEY=\" + encryptionKey,\r\n                \"-e\", \"INTERNAL_CERT=\" + internalCert,\r\n                \"myapp:latest\"\r\n            };\r"
            },
            {
              "step": 2,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String[] [[]] : String",
              "code": "            String encryptionKey = \"EncryptKey-Alpha-2025\";\r\n            String internalCert = \"/etc/ssl/certs/internal_cert.pem\";\r\n\r\n            String[] command = {\r\n                \"docker\", \"run\",\r\n                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r"
            },
            {
              "step": 3,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "",
              "code": "\r\n            // Execute the Docker command. On many operating systems,\r\n            // the command line and environment variables are visible to other users.\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n        } catch (Exception e) {\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "internalCert",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String",
              "code": "                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r\n                \"-e\", \"API_KEY=\" + apiKey,\r\n                \"-e\", \"ENCRYPTION_KEY=\" + encryptionKey,\r\n                \"-e\", \"INTERNAL_CERT=\" + internalCert,\r\n                \"myapp:latest\"\r\n            };\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"INTERNAL_CERT=\" + internalCert",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String",
              "code": "                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r\n                \"-e\", \"API_KEY=\" + apiKey,\r\n                \"-e\", \"ENCRYPTION_KEY=\" + encryptionKey,\r\n                \"-e\", \"INTERNAL_CERT=\" + internalCert,\r\n                \"myapp:latest\"\r\n            };\r\n\r"
            },
            {
              "step": 2,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "String[] [[]] : String",
              "code": "            String encryptionKey = \"EncryptKey-Alpha-2025\";\r\n            String internalCert = \"/etc/ssl/certs/internal_cert.pem\";\r\n\r\n            String[] command = {\r\n                \"docker\", \"run\",\r\n                \"-e\", \"CONFIG_SECRET=\" + configSecret,\r\n                \"-e\", \"DB_PASSWORD=\" + dbPassword,\r"
            },
            {
              "step": 3,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_DockerRunSensitiveInfoExposure.java",
              "type": "",
              "code": "\r\n            // Execute the Docker command. On many operating systems,\r\n            // the command line and environment variables are visible to other users.\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n        } catch (Exception e) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 72,
      "fileName": "BAD_InsecureAPIKeyInvocation.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_InsecureAPIKeyInvocation.java",
              "type": "String",
              "code": "    public static void main(String[] args) {\r\n        String apiKey = \"MountainStream42\";\r\n        try {\r\n            Runtime.getRuntime().exec(\"script --use-key \" + apiKey);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "\"script --use-key \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_InsecureAPIKeyInvocation.java",
              "type": "",
              "code": "    public static void main(String[] args) {\r\n        String apiKey = \"MountainStream42\";\r\n        try {\r\n            Runtime.getRuntime().exec(\"script --use-key \" + apiKey);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 73,
      "fileName": "BAD_NetworkConfigCredentialsExposure.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "vpnPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_NetworkConfigCredentialsExposure.java",
              "type": "String",
              "code": "        try {\r\n            String vpnPassword = args[0];\r\n            // Command to configure VPN\r\n            Runtime.getRuntime().exec(new String[]{\"vpnsetup\", \"--username\", \"admin\", \"--password\", vpnPassword});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r"
            },
            {
              "step": 1,
              "variableName": "new String[]{\"vpnsetup\", \"--username\", \"admin\", \"--password\", vpnPassword}",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_NetworkConfigCredentialsExposure.java",
              "type": "String[] [[]] : String",
              "code": "        try {\r\n            String vpnPassword = args[0];\r\n            // Command to configure VPN\r\n            Runtime.getRuntime().exec(new String[]{\"vpnsetup\", \"--username\", \"admin\", \"--password\", vpnPassword});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r"
            },
            {
              "step": 2,
              "variableName": "new String[]{\"vpnsetup\", \"--username\", \"admin\", \"--password\", vpnPassword}",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_NetworkConfigCredentialsExposure.java",
              "type": "",
              "code": "        try {\r\n            String vpnPassword = args[0];\r\n            // Command to configure VPN\r\n            Runtime.getRuntime().exec(new String[]{\"vpnsetup\", \"--username\", \"admin\", \"--password\", vpnPassword});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 74,
      "fileName": "BAD_PasswordExposureInCommands.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_PasswordExposureInCommands.java",
              "type": "String",
              "code": "    public static void main(String[] args) {\r\n        try {\r\n            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r"
            },
            {
              "step": 1,
              "variableName": "\"curl -u admin:\" + password + \"http://healthcare.com/data\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_PasswordExposureInCommands.java",
              "type": "",
              "code": "    public static void main(String[] args) {\r\n        try {\r\n            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 75,
      "fileName": "BAD_ProcessInvocationWithArgs.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "pass",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String",
              "code": "\r\n    public static void main(String[] args) {\r\n        String pass = \"helloWorld123\";\r\n        invokeSensitiveProcess(pass);\r\n    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r"
            },
            {
              "step": 1,
              "variableName": "String password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String",
              "code": "        invokeSensitiveProcess(pass);\r\n    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 2,
              "variableName": "\"someCommand --password=\" + password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String",
              "code": "    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r"
            },
            {
              "step": 3,
              "variableName": "{\"sh\", \"-c\", \"someCommand --password=\" + password}",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String[] [[]] : String",
              "code": "    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r"
            },
            {
              "step": 4,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "",
              "code": "    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String",
              "code": "    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r"
            },
            {
              "step": 1,
              "variableName": "\"someCommand --password=\" + password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String",
              "code": "    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r"
            },
            {
              "step": 2,
              "variableName": "{\"sh\", \"-c\", \"someCommand --password=\" + password}",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "String[] [[]] : String",
              "code": "    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r"
            },
            {
              "step": 3,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-214/BAD/BAD_ProcessInvocationWithArgs.java",
              "type": "",
              "code": "    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 77,
      "fileName": "BAD_APIKeyRegenerator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "public class BAD_APIKeyRegenerator {\r\n\r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "",
              "code": "        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 78,
      "fileName": "BAD_APIKeyUpdater.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "String",
              "code": "public class BAD_APIKeyUpdater {\r\n    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r"
            },
            {
              "step": 1,
              "variableName": "updateCommand + \" \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "",
              "code": "public class BAD_APIKeyUpdater {\r\n    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 79,
      "fileName": "BAD_CredentialUpdater.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "String",
              "code": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "",
              "code": "        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 80,
      "fileName": "BAD_DatabaseAccessLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "connectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r"
            },
            {
              "step": 1,
              "variableName": "dbCommand + \" \" + connectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "",
              "code": "\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 81,
      "fileName": "BAD_DatabaseCredentialsReset.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "newPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "public class BAD_DatabaseCredentialsReset {\r\n    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "",
              "code": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 82,
      "fileName": "BAD_FirewallConfigurationServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "firewallRule",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "String",
              "code": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "",
              "code": "        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 85,
      "fileName": "BAD_DatabaseConnectorCustomSink.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dbConnectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "String",
              "code": "public class BAD_DatabaseConnectorCustomSink {\r\n\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "",
              "code": "        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 86,
      "fileName": "BAD_NetworkConfiguratorCustomSink.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "networkConfig",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "String",
              "code": "public class BAD_NetworkConfiguratorCustomSink {\r\n\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "",
              "code": "        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 87,
      "fileName": "BAD_UserProfileManagerCustomSink.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "profileData",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "String",
              "code": "public class BAD_UserProfileManagerCustomSink {\r\n\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "",
              "code": "        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 88,
      "fileName": "GOOD_APIKeyUpdater.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_APIKeyUpdater.java",
              "type": "String",
              "code": "public class GOOD_APIKeyUpdater {\r\n    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r"
            },
            {
              "step": 1,
              "variableName": "updateCommand + \" \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_APIKeyUpdater.java",
              "type": "",
              "code": "public class GOOD_APIKeyUpdater {\r\n    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 89,
      "fileName": "GOOD_CredentialUpdater.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_CredentialUpdater.java",
              "type": "String",
              "code": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_CredentialUpdater.java",
              "type": "",
              "code": "        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 90,
      "fileName": "GOOD_DatabaseAccessLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "connectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r"
            },
            {
              "step": 1,
              "variableName": "dbCommand + \" \" + connectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_DatabaseAccessLogger.java",
              "type": "",
              "code": "\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 91,
      "fileName": "GOOD_DatabaseCredentialsReset.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "newPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "public class GOOD_DatabaseCredentialsReset {\r\n    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_DatabaseCredentialsReset.java",
              "type": "",
              "code": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 92,
      "fileName": "GOOD_FirewallConfigurationServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "firewallRule",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_FirewallConfigurationServlet.java",
              "type": "String",
              "code": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/GOOD/GOOD_FirewallConfigurationServlet.java",
              "type": "",
              "code": "        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "215": [
    {
      "resultIndex": 95,
      "fileName": "BAD_DebugFeatureToggle.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "userSSN",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-215/BAD/BAD_DebugFeatureToggle.java",
              "type": "String",
              "code": "        String userSSN = \"123-45-6789\";\r\n\r\n        if (DEBUG_FEATURE_TOGGLE) {\r\n            System.out.println(\"DEBUG: User SSN for troubleshooting: \" + userSSN);\r\n        }\r\n\r\n        // Code to handle sensitive personal information\r"
            },
            {
              "step": 1,
              "variableName": "\"DEBUG: User SSN for troubleshooting: \" + userSSN",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-215/BAD/BAD_DebugFeatureToggle.java",
              "type": "",
              "code": "        String userSSN = \"123-45-6789\";\r\n\r\n        if (DEBUG_FEATURE_TOGGLE) {\r\n            System.out.println(\"DEBUG: User SSN for troubleshooting: \" + userSSN);\r\n        }\r\n\r\n        // Code to handle sensitive personal information\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 96,
      "fileName": "BAD_DebugLoggingEnabled.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accessToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-215/BAD/BAD_DebugLoggingEnabled.java",
              "type": "String",
              "code": "        String accessToken = System.getenv(\"ACCESS_TOKEN\");\r\n\r\n        if (DEBUG_LOGGING_ENABLED) {\r\n            System.out.println(\"DEBUG: Access Token: \" + accessToken);\r\n        }\r\n\r\n        // Code to handle the access token\r"
            },
            {
              "step": 1,
              "variableName": "\"DEBUG: Access Token: \" + accessToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-215/BAD/BAD_DebugLoggingEnabled.java",
              "type": "",
              "code": "        String accessToken = System.getenv(\"ACCESS_TOKEN\");\r\n\r\n        if (DEBUG_LOGGING_ENABLED) {\r\n            System.out.println(\"DEBUG: Access Token: \" + accessToken);\r\n        }\r\n\r\n        // Code to handle the access token\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 97,
      "fileName": "BAD_DebugLoggingSensitiveInfo.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-215/BAD/BAD_DebugLoggingSensitiveInfo.java",
              "type": "String",
              "code": "        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_FLAG) {\r\n            System.out.println(\"DEBUG: Attempting login with username: \" + username + \" and password: \" + password);\r\n        }\r\n\r\n        // Placeholder for login logic\r"
            },
            {
              "step": 1,
              "variableName": "\"DEBUG: Attempting login with username: \" + username + \" and password: \" + password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-215/BAD/BAD_DebugLoggingSensitiveInfo.java",
              "type": "",
              "code": "        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_FLAG) {\r\n            System.out.println(\"DEBUG: Attempting login with username: \" + username + \" and password: \" + password);\r\n        }\r\n\r\n        // Placeholder for login logic\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 98,
      "fileName": "BAD_DebugModeActive.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-215/BAD/BAD_DebugModeActive.java",
              "type": "String",
              "code": "\r\n        // Debug condition\r\n        if (DEBUG_MODE_ACTIVE) {\r\n            System.out.println(\"DEBUG: Using encryption key: \" + encryptionKey);\r\n        }\r\n\r\n        // Placeholder for encryption routine\r"
            },
            {
              "step": 1,
              "variableName": "\"DEBUG: Using encryption key: \" + encryptionKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-215/BAD/BAD_DebugModeActive.java",
              "type": "",
              "code": "\r\n        // Debug condition\r\n        if (DEBUG_MODE_ACTIVE) {\r\n            System.out.println(\"DEBUG: Using encryption key: \" + encryptionKey);\r\n        }\r\n\r\n        // Placeholder for encryption routine\r"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 99,
      "fileName": "BAD_LogDbConnectionDetails.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-532/BAD/BAD_LogDbConnectionDetails.java",
              "type": "String",
              "code": "\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed\", e);\r"
            },
            {
              "step": 1,
              "variableName": "\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-532/BAD/BAD_LogDbConnectionDetails.java",
              "type": "",
              "code": "\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed\", e);\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 103,
      "fileName": "BAD_UserAuthenticationLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-532/BAD/BAD_UserAuthenticationLogger.java",
              "type": "String",
              "code": "    private static final Logger logger = LoggerFactory.getLogger(BAD_UserAuthenticationLogger.class);\r\n\r\n    public void authenticateUser(String username, String password) {\r\n        logger.debug(\"Attempting to authenticate user: \" + username + \" with password: \" + password);\r\n    }\r\n}\r\n"
            },
            {
              "step": 1,
              "variableName": "\"Attempting to authenticate user: \" + username + \" with password: \" + password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-532/BAD/BAD_UserAuthenticationLogger.java",
              "type": "",
              "code": "    private static final Logger logger = LoggerFactory.getLogger(BAD_UserAuthenticationLogger.class);\r\n\r\n    public void authenticateUser(String username, String password) {\r\n        logger.debug(\"Attempting to authenticate user: \" + username + \" with password: \" + password);\r\n    }\r\n}\r\n"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "535": [
    {
      "resultIndex": 104,
      "fileName": "BAD_APIKeyRegenerator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "public class BAD_APIKeyRegenerator {\r\n\r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "\"regenerate_api_key --api-key \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "public class BAD_APIKeyRegenerator {\r\n\r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 2,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            },
            {
              "step": 3,
              "variableName": "Runtime.getRuntime().exec(command)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "Process",
              "code": "        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            },
            {
              "step": 4,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "Process",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 5,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "InputStream",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 6,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "InputStreamReader",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "BufferedReader",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 8,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "BufferedReader",
              "code": "            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n\r"
            },
            {
              "step": 9,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n\r"
            },
            {
              "step": 10,
              "variableName": "error",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "String",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 11,
              "variableName": "\"API key regeneration error for key \" + apiKey + \": \" + error",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyRegenerator.java",
              "type": "",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 105,
      "fileName": "BAD_APIKeyUpdater.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "String",
              "code": "public class BAD_APIKeyUpdater {\r\n    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r"
            },
            {
              "step": 1,
              "variableName": "updateCommand + \" \" + apiKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "String",
              "code": "public class BAD_APIKeyUpdater {\r\n    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r"
            },
            {
              "step": 2,
              "variableName": "Runtime.getRuntime().exec(updateCommand + \" \" + apiKey)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "Process",
              "code": "public class BAD_APIKeyUpdater {\r\n    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r"
            },
            {
              "step": 3,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "Process",
              "code": "            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r"
            },
            {
              "step": 4,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "InputStream",
              "code": "            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r"
            },
            {
              "step": 5,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "InputStreamReader",
              "code": "            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r"
            },
            {
              "step": 6,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "BufferedReader",
              "code": "            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r"
            },
            {
              "step": 7,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "BufferedReader",
              "code": "            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error updating API key: \" + e.getMessage());\r"
            },
            {
              "step": 8,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "String",
              "code": "            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error updating API key: \" + e.getMessage());\r"
            },
            {
              "step": 9,
              "variableName": "\"API Key update failed: \" + errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "String",
              "code": "            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error updating API key: \" + e.getMessage());\r"
            },
            {
              "step": 10,
              "variableName": "\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "String",
              "code": "            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error updating API key: \" + e.getMessage());\r"
            },
            {
              "step": 11,
              "variableName": "\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_APIKeyUpdater.java",
              "type": "",
              "code": "            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error updating API key: \" + e.getMessage());\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 106,
      "fileName": "BAD_CredentialUpdater.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "String",
              "code": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "\"/usr/bin/updatePassword \" + username + \" \" + password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "String",
              "code": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 2,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "String",
              "code": "        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r"
            },
            {
              "step": 3,
              "variableName": "Runtime.getRuntime().exec(command)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "Process",
              "code": "        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r"
            },
            {
              "step": 4,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "Process",
              "code": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r"
            },
            {
              "step": 5,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "InputStream",
              "code": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r"
            },
            {
              "step": 6,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "InputStreamReader",
              "code": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "BufferedReader",
              "code": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r"
            },
            {
              "step": 8,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "BufferedReader",
              "code": "\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n            }\r"
            },
            {
              "step": 9,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "String",
              "code": "\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n            }\r"
            },
            {
              "step": 10,
              "variableName": "errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "String",
              "code": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n            }\r\n        } catch (InterruptedException | IOException e) {\r"
            },
            {
              "step": 11,
              "variableName": "\"Failed to update credentials for \" + username + \": \" + errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_CredentialUpdater.java",
              "type": "",
              "code": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n            }\r\n        } catch (InterruptedException | IOException e) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 107,
      "fileName": "BAD_DatabaseAccessLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "connectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r"
            },
            {
              "step": 1,
              "variableName": "dbCommand + \" \" + connectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r"
            },
            {
              "step": 2,
              "variableName": "Runtime.getRuntime().exec(dbCommand + \" \" + connectionString)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "Process",
              "code": "\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r"
            },
            {
              "step": 3,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "Process",
              "code": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n\r"
            },
            {
              "step": 4,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "InputStream",
              "code": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n\r"
            },
            {
              "step": 5,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "InputStreamReader",
              "code": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n\r"
            },
            {
              "step": 6,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "BufferedReader",
              "code": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n\r"
            },
            {
              "step": 7,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "BufferedReader",
              "code": "            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r"
            },
            {
              "step": 8,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r"
            },
            {
              "step": 9,
              "variableName": "line",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 10,
              "variableName": "errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "StringBuilder",
              "code": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 11,
              "variableName": "errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "StringBuilder",
              "code": "            }\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString());\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Database operation failed with connection string \" + connectionString + \": \" + e.getMessage());\r"
            },
            {
              "step": 12,
              "variableName": "errorDetails.toString()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "String",
              "code": "            }\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString());\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Database operation failed with connection string \" + connectionString + \": \" + e.getMessage());\r"
            },
            {
              "step": 13,
              "variableName": "\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseAccessLogger.java",
              "type": "",
              "code": "            }\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString());\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Database operation failed with connection string \" + connectionString + \": \" + e.getMessage());\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 108,
      "fileName": "BAD_DatabaseCredentialsReset.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "newPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "public class BAD_DatabaseCredentialsReset {\r\n    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r"
            },
            {
              "step": 1,
              "variableName": "dbCommand + \" --user \" + username + \" --password \" + newPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "public class BAD_DatabaseCredentialsReset {\r\n    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r"
            },
            {
              "step": 2,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r"
            },
            {
              "step": 3,
              "variableName": "Runtime.getRuntime().exec(command)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "Process",
              "code": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r"
            },
            {
              "step": 4,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "Process",
              "code": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 5,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "InputStream",
              "code": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 6,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "InputStreamReader",
              "code": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "BufferedReader",
              "code": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 8,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "BufferedReader",
              "code": "            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r"
            },
            {
              "step": 9,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r"
            },
            {
              "step": 10,
              "variableName": "errorOutput",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error resetting database credentials: \" + e.getMessage());\r"
            },
            {
              "step": 11,
              "variableName": "\"Failed to reset database password: \" + errorOutput",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error resetting database credentials: \" + e.getMessage());\r"
            },
            {
              "step": 12,
              "variableName": "\"Failed to reset database password: \" + errorOutput + \". Command: \"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "String",
              "code": "            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error resetting database credentials: \" + e.getMessage());\r"
            },
            {
              "step": 13,
              "variableName": "\"Failed to reset database password: \" + errorOutput + \". Command: \" + command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_DatabaseCredentialsReset.java",
              "type": "",
              "code": "            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            System.err.println(\"Error resetting database credentials: \" + e.getMessage());\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 109,
      "fileName": "BAD_FirewallConfigurationServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "firewallRule",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "String",
              "code": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "\"/usr/bin/updateFirewall \" + firewallRule",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "String",
              "code": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 2,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "String",
              "code": "        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r"
            },
            {
              "step": 3,
              "variableName": "Runtime.getRuntime().exec(command)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "Process",
              "code": "        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r"
            },
            {
              "step": 4,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "Process",
              "code": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r"
            },
            {
              "step": 5,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "InputStream",
              "code": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r"
            },
            {
              "step": 6,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "InputStreamReader",
              "code": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "BufferedReader",
              "code": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r"
            },
            {
              "step": 8,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "BufferedReader",
              "code": "\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n            }\r"
            },
            {
              "step": 9,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "String",
              "code": "\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n            }\r"
            },
            {
              "step": 10,
              "variableName": "errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "String",
              "code": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n            }\r\n        } catch (InterruptedException | IOException e) {\r"
            },
            {
              "step": 11,
              "variableName": "\"Failed to update firewall rules: \" + errorDetails",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/BAD_FirewallConfigurationServlet.java",
              "type": "",
              "code": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n            }\r\n        } catch (InterruptedException | IOException e) {\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 110,
      "fileName": "DisplayOnScreen.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "networkConfig",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "String",
              "code": "public class BAD_NetworkConfiguratorCustomSink {\r\n\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "\"configure_network --config \" + networkConfig",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "String",
              "code": "public class BAD_NetworkConfiguratorCustomSink {\r\n\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 2,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "String",
              "code": "        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            },
            {
              "step": 3,
              "variableName": "Runtime.getRuntime().exec(command)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "Process",
              "code": "        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            },
            {
              "step": 4,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "Process",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 5,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "InputStream",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 6,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "InputStreamReader",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "BufferedReader",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 8,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "BufferedReader",
              "code": "            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n\r"
            },
            {
              "step": 9,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "String",
              "code": "            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n\r"
            },
            {
              "step": 10,
              "variableName": "error",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "String",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 11,
              "variableName": "\"Network configuration error: \" + error",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_NetworkConfiguratorCustomSink.java",
              "type": "String",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 12,
              "variableName": "n: display on ",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/Utils/DisplayOnScreen.java",
              "type": "String",
              "code": "public class DisplayOnScreen {\r\n\r\n    public static void display(String message) {\r\n        // Simple implementation: display on screen (console)\r\n        System.err.println(message);\r\n    }\r"
            },
            {
              "step": 13,
              "variableName": "message",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/Utils/DisplayOnScreen.java",
              "type": "",
              "code": "\r\n    public static void display(String message) {\r\n        // Simple implementation: display on screen (console)\r\n        System.err.println(message);\r\n    }\r\n}\r\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 111,
      "fileName": "PrintToConsole.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dbConnectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "String",
              "code": "public class BAD_DatabaseConnectorCustomSink {\r\n\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "\"connect_db --connection-string \" + dbConnectionString",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "String",
              "code": "public class BAD_DatabaseConnectorCustomSink {\r\n\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 2,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "String",
              "code": "        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            },
            {
              "step": 3,
              "variableName": "Runtime.getRuntime().exec(command)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "Process",
              "code": "        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            },
            {
              "step": 4,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "Process",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 5,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "InputStream",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 6,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "InputStreamReader",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "BufferedReader",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 8,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "BufferedReader",
              "code": "            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n\r"
            },
            {
              "step": 9,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "String",
              "code": "            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n\r"
            },
            {
              "step": 10,
              "variableName": "error",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "String",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 11,
              "variableName": "\"Database connection error: \" + error",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_DatabaseConnectorCustomSink.java",
              "type": "String",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 12,
              "variableName": "ion: print to ",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/Utils/PrintToConsole.java",
              "type": "String",
              "code": "public class PrintToConsole {\r\n\r\n    public static void print(String message) {\r\n        // Simple implementation: print to console\r\n        System.err.println(message);\r\n    }\r"
            },
            {
              "step": 13,
              "variableName": "message",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/Utils/PrintToConsole.java",
              "type": "",
              "code": "\r\n    public static void print(String message) {\r\n        // Simple implementation: print to console\r\n        System.err.println(message);\r\n    }\r\n}\r\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 112,
      "fileName": "ShowMessage.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "profileData",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "String",
              "code": "public class BAD_UserProfileManagerCustomSink {\r\n\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 1,
              "variableName": "\"update_user_profile --user-id \" + userId + \" --data \" + profileData",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "String",
              "code": "public class BAD_UserProfileManagerCustomSink {\r\n\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r"
            },
            {
              "step": 2,
              "variableName": "command",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "String",
              "code": "        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            },
            {
              "step": 3,
              "variableName": "Runtime.getRuntime().exec(command)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "Process",
              "code": "        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r"
            },
            {
              "step": 4,
              "variableName": "process",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "Process",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 5,
              "variableName": "process.getErrorStream()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "InputStream",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 6,
              "variableName": "new InputStreamReader(process.getErrorStream())",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "InputStreamReader",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 7,
              "variableName": "new BufferedReader(new InputStreamReader(process.getErrorStream()))",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "BufferedReader",
              "code": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r"
            },
            {
              "step": 8,
              "variableName": "errorReader",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "BufferedReader",
              "code": "            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n\r"
            },
            {
              "step": 9,
              "variableName": "errorReader.readLine()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "String",
              "code": "            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n\r"
            },
            {
              "step": 10,
              "variableName": "error",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "String",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 11,
              "variableName": "\"User profile update error for user \" + userId + \": \" + error",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/BAD/Custom/BAD_UserProfileManagerCustomSink.java",
              "type": "String",
              "code": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n\r\n            if (process.waitFor() != 0) {\r"
            },
            {
              "step": 12,
              "variableName": "tion: show mes",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/Utils/ShowMessage.java",
              "type": "String",
              "code": "public class ShowMessage {\r\n\r\n    public static void show(String message) {\r\n        // Simple implementation: show message\r\n        System.err.println(message);\r\n    }\r"
            },
            {
              "step": 13,
              "variableName": "message",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-535/Utils/ShowMessage.java",
              "type": "",
              "code": "\r\n    public static void show(String message) {\r\n        // Simple implementation: show message\r\n        System.err.println(message);\r\n    }\r\n}\r\n"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "537": [
    {
      "resultIndex": 113,
      "fileName": "BAD_PatentApplicationError.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "inventorSSN",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_PatentApplicationError.java",
              "type": "String",
              "code": "                throw new IllegalArgumentException(\"Patent details are required. \" +\r\n                        \"Application ID: \" + applicationID +\r\n                        \", Internal File: \" + internalFilePath +\r\n                        \", Inventor Details: \" + inventorSSN +\r\n                        \", Internal Config: \" + internalConfig);\r\n            }\r\n            // Simulated submission logic would normally process the patent application.\r"
            },
            {
              "step": 1,
              "variableName": "\"Patent det",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_PatentApplicationError.java",
              "type": "String",
              "code": "                String internalFilePath = \"/var/app/patents/submissions/patent_7890.conf\";\r\n                String inventorSSN = \"SSN: 123-45-6789\";\r\n                String internalConfig = \"Config: UseEncryption=true; EncryptionKey=SolarPanelKey-Secret!\";\r\n                throw new IllegalArgumentException(\"Patent details are required. \" +\r\n                        \"Application ID: \" + applicationID +\r\n                        \", Internal File: \" + internalFilePath +\r\n                        \", Inventor Details: \" + inventorSSN +\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Patent deta",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_PatentApplicationError.java",
              "type": "IllegalArgumentException",
              "code": "                String internalFilePath = \"/var/app/patents/submissions/patent_7890.conf\";\r\n                String inventorSSN = \"SSN: 123-45-6789\";\r\n                String internalConfig = \"Config: UseEncryption=true; EncryptionKey=SolarPanelKey-Secret!\";\r\n                throw new IllegalArgumentException(\"Patent details are required. \" +\r\n                        \"Application ID: \" + applicationID +\r\n                        \", Internal File: \" + internalFilePath +\r\n                        \", Inventor Details: \" + inventorSSN +\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_PatentApplicationError.java",
              "type": "String",
              "code": "            System.out.println(\"Patent application submitted successfully: \" + patentDetails);\r\n        } catch (Exception e) {\r\n            // Exposing sensitive error details in the log.\r\n            System.err.println(\"Failed to submit patent application due to: \" + e.getMessage());\r\n        }\r\n    }\r\n\r"
            },
            {
              "step": 4,
              "variableName": "\"Failed to submit patent application due to: \" + e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-209/BAD/BAD_PatentApplicationError.java",
              "type": "",
              "code": "            System.out.println(\"Patent application submitted successfully: \" + patentDetails);\r\n        } catch (Exception e) {\r\n            // Exposing sensitive error details in the log.\r\n            System.err.println(\"Failed to submit patent application due to: \" + e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 114,
      "fileName": "BAD_IllegalArgumentException.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "email",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "String",
              "code": "\r\n    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "email",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalArgumentException.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 115,
      "fileName": "BAD_IllegalStateException.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalStateException.java",
              "type": "String",
              "code": "\r\n    public void logAttempt(String username, String password) {\r\n        try {\r\n            if (username == null || password == null) {\r\n                throw new IllegalStateException(\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\");\r\n            }\r\n            // Continue with the login attempt logging if no exception is thrown\r"
            },
            {
              "step": 1,
              "variableName": "\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalStateException.java",
              "type": "String",
              "code": "    public void logAttempt(String username, String password) {\r\n        try {\r\n            if (username == null || password == null) {\r\n                throw new IllegalStateException(\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\");\r\n            }\r\n            // Continue with the login attempt logging if no exception is thrown\r\n            System.out.println(\"Login attempt logged successfully for \" + username);\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalStateException(\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\")",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalStateException.java",
              "type": "IllegalStateException",
              "code": "    public void logAttempt(String username, String password) {\r\n        try {\r\n            if (username == null || password == null) {\r\n                throw new IllegalStateException(\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\");\r\n            }\r\n            // Continue with the login attempt logging if no exception is thrown\r\n            System.out.println(\"Login attempt logged successfully for \" + username);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalStateException.java",
              "type": "",
              "code": "            // Continue with the login attempt logging if no exception is thrown\r\n            System.out.println(\"Login attempt logged successfully for \" + username);\r\n        } catch (IllegalStateException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalStateException.java",
              "type": "String",
              "code": "    public void logAttempt(String username, String password) {\r\n        try {\r\n            if (username == null || password == null) {\r\n                throw new IllegalStateException(\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\");\r\n            }\r\n            // Continue with the login attempt logging if no exception is thrown\r\n            System.out.println(\"Login attempt logged successfully for \" + username);\r"
            },
            {
              "step": 1,
              "variableName": "\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\"",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalStateException.java",
              "type": "String",
              "code": "    public void logAttempt(String username, String password) {\r\n        try {\r\n            if (username == null || password == null) {\r\n                throw new IllegalStateException(\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\");\r\n            }\r\n            // Continue with the login attempt logging if no exception is thrown\r\n            System.out.println(\"Login attempt logged successfully for \" + username);\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalStateException(\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\")",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalStateException.java",
              "type": "IllegalStateException",
              "code": "    public void logAttempt(String username, String password) {\r\n        try {\r\n            if (username == null || password == null) {\r\n                throw new IllegalStateException(\"Login attempt for \" + username + \" with password \" + password + \" was unsuccessful.\");\r\n            }\r\n            // Continue with the login attempt logging if no exception is thrown\r\n            System.out.println(\"Login attempt logged successfully for \" + username);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IllegalStateException.java",
              "type": "",
              "code": "            // Continue with the login attempt logging if no exception is thrown\r\n            System.out.println(\"Login attempt logged successfully for \" + username);\r\n        } catch (IllegalStateException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 116,
      "fileName": "BAD_IndexOutofBoundsInfoExposure.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "userData",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IndexOutofBoundsInfoExposure.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (index < 0 || index >= dataMap.length) {\r\n                throw new ArrayIndexOutOfBoundsException(\"Error: Could not store data at index \" + index + \". Attempted value: \" + userData);\r\n            }\r\n            else{\r\n                dataMap[index] = userData;\r"
            },
            {
              "step": 1,
              "variableName": "\"Error: Could not store data at index \" + index + \". Attempted value: \" + userData",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IndexOutofBoundsInfoExposure.java",
              "type": "String",
              "code": "\r\n        try {\r\n            if (index < 0 || index >= dataMap.length) {\r\n                throw new ArrayIndexOutOfBoundsException(\"Error: Could not store data at index \" + index + \". Attempted value: \" + userData);\r\n            }\r\n            else{\r\n                dataMap[index] = userData;\r"
            },
            {
              "step": 2,
              "variableName": "new ArrayIndexOutOfBoundsException(\"Error: Could not store data at index \" + index + \". Attempted value: \" + userData)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IndexOutofBoundsInfoExposure.java",
              "type": "ArrayIndexOutOfBoundsException",
              "code": "\r\n        try {\r\n            if (index < 0 || index >= dataMap.length) {\r\n                throw new ArrayIndexOutOfBoundsException(\"Error: Could not store data at index \" + index + \". Attempted value: \" + userData);\r\n            }\r\n            else{\r\n                dataMap[index] = userData;\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_IndexOutofBoundsInfoExposure.java",
              "type": "",
              "code": "            }\r\n            System.out.println(\"Data stored successfully at index \" + index);\r\n        } catch (ArrayIndexOutOfBoundsException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 117,
      "fileName": "BAD_NegativeArraySizeException.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "medicalRecords",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_NegativeArraySizeException.java",
              "type": "Map",
              "code": "    public void createInventoryList(int arraySize, Map<String, String> medicalRecords) {\r\n        try {\r\n            if (arraySize < 0) {\r\n                throw new NegativeArraySizeException(\"Cannot save records for: \" + medicalRecords);\r\n            } else {\r\n                String[] storage = new String[arraySize];\r\n                Collection<String> records = medicalRecords.values();\r"
            },
            {
              "step": 1,
              "variableName": "\"Cannot save records for: \" + medicalRecords",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_NegativeArraySizeException.java",
              "type": "String",
              "code": "    public void createInventoryList(int arraySize, Map<String, String> medicalRecords) {\r\n        try {\r\n            if (arraySize < 0) {\r\n                throw new NegativeArraySizeException(\"Cannot save records for: \" + medicalRecords);\r\n            } else {\r\n                String[] storage = new String[arraySize];\r\n                Collection<String> records = medicalRecords.values();\r"
            },
            {
              "step": 2,
              "variableName": "new NegativeArraySizeException(\"Cannot save records for: \" + medicalRecords)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_NegativeArraySizeException.java",
              "type": "NegativeArraySizeException",
              "code": "    public void createInventoryList(int arraySize, Map<String, String> medicalRecords) {\r\n        try {\r\n            if (arraySize < 0) {\r\n                throw new NegativeArraySizeException(\"Cannot save records for: \" + medicalRecords);\r\n            } else {\r\n                String[] storage = new String[arraySize];\r\n                Collection<String> records = medicalRecords.values();\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_NegativeArraySizeException.java",
              "type": "",
              "code": "                System.out.println(\"Records saved successfully.\");\r\n            }\r\n        } catch (NegativeArraySizeException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 118,
      "fileName": "BAD_SecurityException.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "authToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "String",
              "code": "\r\n    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r"
            },
            {
              "step": 1,
              "variableName": "\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "String",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 2,
              "variableName": "new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "SecurityException",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "",
              "code": "                this.processRequest(requestData);\r\n            }\r\n        } catch (SecurityException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "authToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "String",
              "code": "\r\n    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r"
            },
            {
              "step": 1,
              "variableName": "\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "String",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 2,
              "variableName": "new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "SecurityException",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "",
              "code": "                this.processRequest(requestData);\r\n            }\r\n        } catch (SecurityException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "userTokens",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "HashMap",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 1,
              "variableName": "\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "String",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 2,
              "variableName": "new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "SecurityException",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "",
              "code": "                this.processRequest(requestData);\r\n            }\r\n        } catch (SecurityException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "authToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "String",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 1,
              "variableName": "\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "String",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 2,
              "variableName": "new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "SecurityException",
              "code": "    public void handleRequest(String requestData, String authToken) {\r\n        try {\r\n            if (requestData == null || authToken == null || !userTokens.containsValue(authToken)) {\r\n                throw new SecurityException(\"ERROR: Unauthorized request. Debug Info: \" + authToken + \" | Full Auth DB: \" + userTokens);\r\n            } else {\r\n                // Process the request\r\n                this.processRequest(requestData);\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SecurityException.java",
              "type": "",
              "code": "                this.processRequest(requestData);\r\n            }\r\n        } catch (SecurityException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 119,
      "fileName": "BAD_e.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "email",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "String",
              "code": "    \r\n    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "String",
              "code": "    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "String",
              "code": "    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "String",
              "code": "    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "email",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "String",
              "code": "    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "String",
              "code": "    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser2(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_e.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 120,
      "fileName": "BAD_getMessage.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "email",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "String",
              "code": "\r\n    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "email",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 1,
              "variableName": "\"Invalid credentials provided.\" + email + password + username",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "String",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 2,
              "variableName": "new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username)",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "IllegalArgumentException",
              "code": "    public void registerUser(String username, String email, String password) {\r\n        try {\r\n            if (!email.contains(\"@\")) {\r\n                throw new IllegalArgumentException(\"Invalid credentials provided.\" + email + password + username);\r\n            } else {\r\n                System.out.println(\"User registered successfully.\");\r\n            }\r"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/test/BAD_getMessage.java",
              "type": "",
              "code": "                System.out.println(\"User registered successfully.\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 121,
      "fileName": "BAD_SensitiveNullPointerExceptionHandling.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accountKey",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SensitiveNullPointerExceptionHandling.java",
              "type": "String",
              "code": "            // Process the account key\r\n        } catch (NullPointerException e) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \r\n                \"ERROR: Null Pointer Exception! Debug Info: \" + accountKey + \r\n                \" | Data Dump: \" + AUTHORIZED_MAP);\r\n        }\r\n    }\r"
            },
            {
              "step": 1,
              "variableName": "\"ERROR: Null Pointer Exception! D",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-537/BAD/BAD_SensitiveNullPointerExceptionHandling.java",
              "type": "",
              "code": "            // Process the account key\r\n        } catch (NullPointerException e) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \r\n                \"ERROR: Null Pointer Exception! Debug Info: \" + accountKey + \r\n                \" | Data Dump: \" + AUTHORIZED_MAP);\r\n        }\r\n    }\r"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "598": [
    {
      "resultIndex": 124,
      "fileName": "BAD_ApiKeyEmbedded.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "SERVICE_API_KEY",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-540/BAD/BAD_ApiKeyEmbedded.java",
              "type": "String",
              "code": "\r\n    public static void callExternalService() {\r\n        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-540/BAD/BAD_ApiKeyEmbedded.java",
              "type": "",
              "code": "\r\n    public static void callExternalService() {\r\n        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 125,
      "fileName": "BAD_AuthenticationGET.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "authToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_AuthenticationGET.java",
              "type": "String",
              "code": "public class BAD_AuthenticationGET {\r\n    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId=\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r"
            },
            {
              "step": 1,
              "variableName": "\"http://auth.companyportal.com/auth?userId=\" + userId + \"&token=\" + authToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_AuthenticationGET.java",
              "type": "",
              "code": "public class BAD_AuthenticationGET {\r\n    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId=\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 126,
      "fileName": "BAD_BankingTransactionQuery.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accountNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_BankingTransactionQuery.java",
              "type": "String",
              "code": "public class BAD_BankingTransactionQuery {\r\n    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber=\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r"
            },
            {
              "step": 1,
              "variableName": "\"http://services.bankcorp.com/transactions?accountNumber=\" + accountNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_BankingTransactionQuery.java",
              "type": "",
              "code": "public class BAD_BankingTransactionQuery {\r\n    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber=\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 127,
      "fileName": "BAD_CreditCardSubmissionGET.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cvv",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_CreditCardSubmissionGET.java",
              "type": "String",
              "code": "    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r"
            },
            {
              "step": 1,
              "variableName": "\"http://payments.onlinebank.com/submitPayme",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_CreditCardSubmissionGET.java",
              "type": "",
              "code": "    \r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "expiryDate",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_CreditCardSubmissionGET.java",
              "type": "String",
              "code": "    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r"
            },
            {
              "step": 1,
              "variableName": "\"http://payments.onlinebank.com/submitPayme",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_CreditCardSubmissionGET.java",
              "type": "",
              "code": "    \r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "cardNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_CreditCardSubmissionGET.java",
              "type": "String",
              "code": "    \r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r"
            },
            {
              "step": 1,
              "variableName": "\"http://payments.onlinebank.com/submitPayme",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_CreditCardSubmissionGET.java",
              "type": "",
              "code": "    \r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 128,
      "fileName": "BAD_FinancialDataGET.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accountNumber",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_FinancialDataGET.java",
              "type": "String",
              "code": "public class BAD_FinancialDataGET {\r\n    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r"
            },
            {
              "step": 1,
              "variableName": "\"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_FinancialDataGET.java",
              "type": "",
              "code": "public class BAD_FinancialDataGET {\r\n    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 129,
      "fileName": "BAD_PasswordChangeGET.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "newPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_PasswordChangeGET.java",
              "type": "String",
              "code": "    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r"
            },
            {
              "step": 1,
              "variableName": "\"http://secure.companyportal.com/changePassword?username=john",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_PasswordChangeGET.java",
              "type": "",
              "code": "    \r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "oldPassword",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_PasswordChangeGET.java",
              "type": "String",
              "code": "    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r"
            },
            {
              "step": 1,
              "variableName": "\"http://secure.companyportal.com/changePassword?username=john",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_PasswordChangeGET.java",
              "type": "",
              "code": "    \r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 130,
      "fileName": "BAD_PersonalDetailsGET.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dateOfBirth",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_PersonalDetailsGET.java",
              "type": "String",
              "code": "public class BAD_PersonalDetailsGET {\r\n    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n\r"
            },
            {
              "step": 1,
              "variableName": "\"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_PersonalDetailsGET.java",
              "type": "",
              "code": "public class BAD_PersonalDetailsGET {\r\n    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n\r"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 131,
      "fileName": "BAD_SessionTokenGET.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sessionToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_SessionTokenGET.java",
              "type": "String",
              "code": "public class BAD_SessionTokenGET {\r\n    public static void retrieveData(String sessionToken) {\r\n        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            \r"
            },
            {
              "step": 1,
              "variableName": "\"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-598/BAD/BAD_SessionTokenGET.java",
              "type": "",
              "code": "public class BAD_SessionTokenGET {\r\n    public static void retrieveData(String sessionToken) {\r\n        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            \r"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "local-temp-file-sensitive-data-disclosure": [
    {
      "resultIndex": 123,
      "fileName": "BAD_ExposeUserCredentialsInTempFile.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-538/BAD/BAD_ExposeUserCredentialsInTempFile.java",
              "type": "String",
              "code": "\r\n            // Write sensitive user credentials\r\n            try (FileWriter writer = new FileWriter(credentialsFile)) {\r\n                writer.write(\"username=admin\\npassword=\" + password);\r\n            }\r\n\r\n            System.out.println(\"User credentials written to: \" + credentialsFile.getAbsolutePath());\r"
            },
            {
              "step": 1,
              "variableName": "\"username=admin\\npassword=\" + password",
              "uri": "CWEToyDataset/src/main/java/com/mycompany/app/CWE-538/BAD/BAD_ExposeUserCredentialsInTempFile.java",
              "type": "",
              "code": "\r\n            // Write sensitive user credentials\r\n            try (FileWriter writer = new FileWriter(credentialsFile)) {\r\n                writer.write(\"username=admin\\npassword=\" + password);\r\n            }\r\n\r\n            System.out.println(\"User credentials written to: \" + credentialsFile.getAbsolutePath());\r"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ]
}