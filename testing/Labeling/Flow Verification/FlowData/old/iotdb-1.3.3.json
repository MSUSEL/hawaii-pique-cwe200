{
  "532": [
    {
      "resultIndex": 2,
      "fileName": "SessionPool.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/session/src/main/java/org/apache/iotdb/session/pool/SessionPool.java",
              "type": "String",
              "code": "                (System.currentTimeMillis() - start) / 1000,\n                formattedNodeUrls,\n                user,\n                password);\n            LOGGER.warn(\n                \"current occupied size {}, queue size {}, considered size {} \",\n                occupied.size(),"
            },
            {
              "step": 1,
              "variableName": "LOGGER.warn(",
              "uri": "iotdb-1.3.3/iotdb-client/session/src/main/java/org/apache/iotdb/session/pool/SessionPool.java",
              "type": "",
              "code": "          this.wait(1000);\n          long timeOut = Math.min(waitToGetSessionTimeoutInMs, 60_000);\n          if (System.currentTimeMillis() - start > timeOut) {\n            LOGGER.warn(\n                \"the SessionPool has wait for {} seconds to get a new connection: {} with {}, {}\",\n                (System.currentTimeMillis() - start) / 1000,\n                formattedNodeUrls,"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "AuditLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 1,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 2,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);\n    }"
            },
            {
              "step": 3,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    // allowed to create an instance without parameter input.\n  }\n\n  public IoTDBConnection(String url, Properties info) throws SQLException, TTransportException {\n    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }"
            },
            {
              "step": 4,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 5,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * Parse JDBC connection URL The only supported format of the URL is:\n   * jdbc:iotdb://localhost:6667/.\n   */\n  static IoTDBConnectionParams parseUrl(String url, Properties info) throws IoTDBURLException {\n    IoTDBConnectionParams params = new IoTDBConnectionParams(url);\n    if (url.trim().equalsIgnoreCase(Config.IOTDB_URL_PREFIX)) {\n      return params;"
            },
            {
              "step": 6,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 7,
              "variableName": "info.getProperty(Config.AUTH_USER)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 9,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 11,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 12,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 13,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (info.containsKey(Config.TRUST_STORE_PWD)) {\n      params.setTrustStorePwd(info.getProperty(Config.TRUST_STORE_PWD));\n    }\n    return params;\n  }\n\n  /**"
            },
            {
              "step": 14,
              "variableName": "Utils.parseUrl(url, info)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 15,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());"
            },
            {
              "step": 17,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {\n      setClient(new IClientRPCService.Client(new TCompactProtocol(transport)));"
            },
            {
              "step": 21,
              "variableName": "openSession()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      setClient(new IClientRPCService.Client(new TBinaryProtocol(transport)));\n    }\n    // open client session\n    openSession();\n    // Wrap the client with a thread-safe proxy to serialize the RPC calls\n    setClient(RpcUtils.newSynchronizedClient(getClient()));\n    autoCommit = false;"
            },
            {
              "step": 22,
              "variableName": "openSession",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n  }\n\n  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());"
            },
            {
              "step": 23,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 24,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 25,
              "variableName": "getUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    this.seriesName = seriesName;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 27,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 28,
              "variableName": "params.getUsername()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 29,
              "variableName": "@org.apache.thrift.annotation.Nullable java.lang.String username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 31,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 32,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 33,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 34,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "\n    TSOpenSessionResp openResp = null;\n    try {\n      openResp = client.openSession(openReq);\n      sessionId = openResp.getSessionId();\n      // validate connection\n      RpcUtils.verifySuccess(openResp.getStatus());"
            },
            {
              "step": 35,
              "variableName": "TSOpenSessionReq req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\n\n  @Override\n  public TSOpenSessionResp openSession(TSOpenSessionReq req) throws TException {\n    IoTDBConstant.ClientVersion clientVersion = parseClientVersion(req);\n    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login("
            },
            {
              "step": 36,
              "variableName": "req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 37,
              "variableName": "req.username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 38,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "\n  public BasicOpenSessionResp login(\n      IClientSession session,\n      String username,\n      String password,\n      String zoneId,\n      TSProtocolVersion tsProtocolVersion,"
            },
            {
              "step": 39,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);\n        }\n      }"
            },
            {
              "step": 40,
              "variableName": "String.format(",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "Object[] [[]] : String",
              "code": "            session);\n        if (ENABLE_AUDIT_LOG) {\n          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);"
            },
            {
              "step": 41,
              "variableName": "String.format(",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "            session);\n        if (ENABLE_AUDIT_LOG) {\n          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);"
            },
            {
              "step": 42,
              "variableName": "String log",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "String",
              "code": "    return insertStatement;\n  }\n\n  public static void log(String log, Statement statement) {\n    AuditLogOperation operation = judgeLogOperation(statement.getType());\n    IClientSession currSession = SessionManager.getInstance().getCurrSession();\n    String username = \"\";"
            },
            {
              "step": 43,
              "variableName": "log",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "String",
              "code": "        }\n      }\n      if (auditLogStorageList.contains(AuditLogStorage.LOGGER)) {\n        AUDIT_LOGGER.info(\"user:{},address:{},log:{}\", username, address, log);\n      }\n    }\n  }"
            },
            {
              "step": 44,
              "variableName": "AUDIT_LOGGER.info(\"user:{},address:{},log:{}\", username, address, log)",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "",
              "code": "        }\n      }\n      if (auditLogStorageList.contains(AuditLogStorage.LOGGER)) {\n        AUDIT_LOGGER.info(\"user:{},address:{},log:{}\", username, address, log);\n      }\n    }\n  }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 1,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 2,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);\n    }"
            },
            {
              "step": 3,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    // allowed to create an instance without parameter input.\n  }\n\n  public IoTDBConnection(String url, Properties info) throws SQLException, TTransportException {\n    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }"
            },
            {
              "step": 4,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 5,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * Parse JDBC connection URL The only supported format of the URL is:\n   * jdbc:iotdb://localhost:6667/.\n   */\n  static IoTDBConnectionParams parseUrl(String url, Properties info) throws IoTDBURLException {\n    IoTDBConnectionParams params = new IoTDBConnectionParams(url);\n    if (url.trim().equalsIgnoreCase(Config.IOTDB_URL_PREFIX)) {\n      return params;"
            },
            {
              "step": 6,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 7,
              "variableName": "info.getProperty(Config.AUTH_USER)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 9,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 11,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 12,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 13,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (info.containsKey(Config.TRUST_STORE_PWD)) {\n      params.setTrustStorePwd(info.getProperty(Config.TRUST_STORE_PWD));\n    }\n    return params;\n  }\n\n  /**"
            },
            {
              "step": 14,
              "variableName": "Utils.parseUrl(url, info)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 15,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());"
            },
            {
              "step": 17,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {\n      setClient(new IClientRPCService.Client(new TCompactProtocol(transport)));"
            },
            {
              "step": 21,
              "variableName": "openSession()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      setClient(new IClientRPCService.Client(new TBinaryProtocol(transport)));\n    }\n    // open client session\n    openSession();\n    // Wrap the client with a thread-safe proxy to serialize the RPC calls\n    setClient(RpcUtils.newSynchronizedClient(getClient()));\n    autoCommit = false;"
            },
            {
              "step": 22,
              "variableName": "openSession",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n  }\n\n  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());"
            },
            {
              "step": 23,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 24,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 25,
              "variableName": "getUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    this.seriesName = seriesName;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 27,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 28,
              "variableName": "params.getUsername()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 29,
              "variableName": "@org.apache.thrift.annotation.Nullable java.lang.String username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 31,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 32,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 33,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 34,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "\n    TSOpenSessionResp openResp = null;\n    try {\n      openResp = client.openSession(openReq);\n      sessionId = openResp.getSessionId();\n      // validate connection\n      RpcUtils.verifySuccess(openResp.getStatus());"
            },
            {
              "step": 35,
              "variableName": "TSOpenSessionReq req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\n\n  @Override\n  public TSOpenSessionResp openSession(TSOpenSessionReq req) throws TException {\n    IoTDBConstant.ClientVersion clientVersion = parseClientVersion(req);\n    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login("
            },
            {
              "step": 36,
              "variableName": "req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 37,
              "variableName": "req.username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 38,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "\n  public BasicOpenSessionResp login(\n      IClientSession session,\n      String username,\n      String password,\n      String zoneId,\n      TSProtocolVersion tsProtocolVersion,"
            },
            {
              "step": 39,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            },
            {
              "step": 40,
              "variableName": "String.format(\"User %s opens Session failed with an incorrect password\", username)",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "Object[] [[]] : String",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            },
            {
              "step": 41,
              "variableName": "String.format(\"User %s opens Session failed with an incorrect password\", username)",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            },
            {
              "step": 42,
              "variableName": "String log",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "String",
              "code": "    return insertStatement;\n  }\n\n  public static void log(String log, Statement statement) {\n    AuditLogOperation operation = judgeLogOperation(statement.getType());\n    IClientSession currSession = SessionManager.getInstance().getCurrSession();\n    String username = \"\";"
            },
            {
              "step": 43,
              "variableName": "log",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "String",
              "code": "        }\n      }\n      if (auditLogStorageList.contains(AuditLogStorage.LOGGER)) {\n        AUDIT_LOGGER.info(\"user:{},address:{},log:{}\", username, address, log);\n      }\n    }\n  }"
            },
            {
              "step": 44,
              "variableName": "AUDIT_LOGGER.info(\"user:{},address:{},log:{}\", username, address, log)",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "",
              "code": "        }\n      }\n      if (auditLogStorageList.contains(AuditLogStorage.LOGGER)) {\n        AUDIT_LOGGER.info(\"user:{},address:{},log:{}\", username, address, log);\n      }\n    }\n  }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "SessionManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 1,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 2,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);\n    }"
            },
            {
              "step": 3,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    // allowed to create an instance without parameter input.\n  }\n\n  public IoTDBConnection(String url, Properties info) throws SQLException, TTransportException {\n    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }"
            },
            {
              "step": 4,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 5,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * Parse JDBC connection URL The only supported format of the URL is:\n   * jdbc:iotdb://localhost:6667/.\n   */\n  static IoTDBConnectionParams parseUrl(String url, Properties info) throws IoTDBURLException {\n    IoTDBConnectionParams params = new IoTDBConnectionParams(url);\n    if (url.trim().equalsIgnoreCase(Config.IOTDB_URL_PREFIX)) {\n      return params;"
            },
            {
              "step": 6,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 7,
              "variableName": "info.getProperty(Config.AUTH_USER)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 9,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 11,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 12,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 13,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (info.containsKey(Config.TRUST_STORE_PWD)) {\n      params.setTrustStorePwd(info.getProperty(Config.TRUST_STORE_PWD));\n    }\n    return params;\n  }\n\n  /**"
            },
            {
              "step": 14,
              "variableName": "Utils.parseUrl(url, info)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 15,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());"
            },
            {
              "step": 17,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {\n      setClient(new IClientRPCService.Client(new TCompactProtocol(transport)));"
            },
            {
              "step": 21,
              "variableName": "openSession()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      setClient(new IClientRPCService.Client(new TBinaryProtocol(transport)));\n    }\n    // open client session\n    openSession();\n    // Wrap the client with a thread-safe proxy to serialize the RPC calls\n    setClient(RpcUtils.newSynchronizedClient(getClient()));\n    autoCommit = false;"
            },
            {
              "step": 22,
              "variableName": "openSession",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n  }\n\n  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());"
            },
            {
              "step": 23,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 24,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 25,
              "variableName": "getUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    this.seriesName = seriesName;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 27,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 28,
              "variableName": "params.getUsername()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 29,
              "variableName": "@org.apache.thrift.annotation.Nullable java.lang.String username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 31,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 32,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 33,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 34,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "\n    TSOpenSessionResp openResp = null;\n    try {\n      openResp = client.openSession(openReq);\n      sessionId = openResp.getSessionId();\n      // validate connection\n      RpcUtils.verifySuccess(openResp.getStatus());"
            },
            {
              "step": 35,
              "variableName": "TSOpenSessionReq req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\n\n  @Override\n  public TSOpenSessionResp openSession(TSOpenSessionReq req) throws TException {\n    IoTDBConstant.ClientVersion clientVersion = parseClientVersion(req);\n    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login("
            },
            {
              "step": 36,
              "variableName": "req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 37,
              "variableName": "req.username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 38,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "\n  public BasicOpenSessionResp login(\n      IClientSession session,\n      String username,\n      String password,\n      String zoneId,\n      TSProtocolVersion tsProtocolVersion,"
            },
            {
              "step": 39,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "            \"{}: Login status: {}. User : {}, opens Session-{}\",\n            IoTDBConstant.GLOBAL_DB_NAME,\n            openSessionResp.getMessage(),\n            username,\n            session);\n        if (ENABLE_AUDIT_LOG) {\n          AuditLogger.log("
            },
            {
              "step": 40,
              "variableName": "LOGGER.info(",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "",
              "code": "            .setCode(TSStatusCode.SUCCESS_STATUS.getStatusCode())\n            .setMessage(\"Login successfully\");\n\n        LOGGER.info(\n            \"{}: Login status: {}. User : {}, opens Session-{}\",\n            IoTDBConstant.GLOBAL_DB_NAME,\n            openSessionResp.getMessage(),"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "AuditLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 1,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 2,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);\n    }"
            },
            {
              "step": 3,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    // allowed to create an instance without parameter input.\n  }\n\n  public IoTDBConnection(String url, Properties info) throws SQLException, TTransportException {\n    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }"
            },
            {
              "step": 4,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 5,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * Parse JDBC connection URL The only supported format of the URL is:\n   * jdbc:iotdb://localhost:6667/.\n   */\n  static IoTDBConnectionParams parseUrl(String url, Properties info) throws IoTDBURLException {\n    IoTDBConnectionParams params = new IoTDBConnectionParams(url);\n    if (url.trim().equalsIgnoreCase(Config.IOTDB_URL_PREFIX)) {\n      return params;"
            },
            {
              "step": 6,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 7,
              "variableName": "info.getProperty(Config.AUTH_USER)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 9,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 11,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 12,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 13,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (info.containsKey(Config.TRUST_STORE_PWD)) {\n      params.setTrustStorePwd(info.getProperty(Config.TRUST_STORE_PWD));\n    }\n    return params;\n  }\n\n  /**"
            },
            {
              "step": 14,
              "variableName": "Utils.parseUrl(url, info)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 15,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());"
            },
            {
              "step": 17,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {\n      setClient(new IClientRPCService.Client(new TCompactProtocol(transport)));"
            },
            {
              "step": 21,
              "variableName": "openSession()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      setClient(new IClientRPCService.Client(new TBinaryProtocol(transport)));\n    }\n    // open client session\n    openSession();\n    // Wrap the client with a thread-safe proxy to serialize the RPC calls\n    setClient(RpcUtils.newSynchronizedClient(getClient()));\n    autoCommit = false;"
            },
            {
              "step": 22,
              "variableName": "openSession",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n  }\n\n  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());"
            },
            {
              "step": 23,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 24,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 25,
              "variableName": "getUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    this.seriesName = seriesName;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 27,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 28,
              "variableName": "params.getUsername()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 29,
              "variableName": "@org.apache.thrift.annotation.Nullable java.lang.String username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 31,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 32,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 33,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 34,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "\n    TSOpenSessionResp openResp = null;\n    try {\n      openResp = client.openSession(openReq);\n      sessionId = openResp.getSessionId();\n      // validate connection\n      RpcUtils.verifySuccess(openResp.getStatus());"
            },
            {
              "step": 35,
              "variableName": "TSOpenSessionReq req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\n\n  @Override\n  public TSOpenSessionResp openSession(TSOpenSessionReq req) throws TException {\n    IoTDBConstant.ClientVersion clientVersion = parseClientVersion(req);\n    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login("
            },
            {
              "step": 36,
              "variableName": "req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 37,
              "variableName": "req.username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 38,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "\n  public BasicOpenSessionResp login(\n      IClientSession session,\n      String username,\n      String password,\n      String zoneId,\n      TSProtocolVersion tsProtocolVersion,"
            },
            {
              "step": 39,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);\n        }\n      }"
            },
            {
              "step": 40,
              "variableName": "String.format(",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "Object[] [[]] : String",
              "code": "            session);\n        if (ENABLE_AUDIT_LOG) {\n          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);"
            },
            {
              "step": 41,
              "variableName": "String.format(",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "            session);\n        if (ENABLE_AUDIT_LOG) {\n          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);"
            },
            {
              "step": 42,
              "variableName": "String log",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "String",
              "code": "    return insertStatement;\n  }\n\n  public static void log(String log, Statement statement) {\n    AuditLogOperation operation = judgeLogOperation(statement.getType());\n    IClientSession currSession = SessionManager.getInstance().getCurrSession();\n    String username = \"\";"
            },
            {
              "step": 43,
              "variableName": "log",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "",
              "code": "        }\n      }\n      if (auditLogStorageList.contains(AuditLogStorage.LOGGER)) {\n        AUDIT_LOGGER.info(\"user:{},address:{},log:{}\", username, address, log);\n      }\n    }\n  }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 1,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 2,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);\n    }"
            },
            {
              "step": 3,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    // allowed to create an instance without parameter input.\n  }\n\n  public IoTDBConnection(String url, Properties info) throws SQLException, TTransportException {\n    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }"
            },
            {
              "step": 4,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 5,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * Parse JDBC connection URL The only supported format of the URL is:\n   * jdbc:iotdb://localhost:6667/.\n   */\n  static IoTDBConnectionParams parseUrl(String url, Properties info) throws IoTDBURLException {\n    IoTDBConnectionParams params = new IoTDBConnectionParams(url);\n    if (url.trim().equalsIgnoreCase(Config.IOTDB_URL_PREFIX)) {\n      return params;"
            },
            {
              "step": 6,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 7,
              "variableName": "info.getProperty(Config.AUTH_USER)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 9,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 11,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 12,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 13,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (info.containsKey(Config.TRUST_STORE_PWD)) {\n      params.setTrustStorePwd(info.getProperty(Config.TRUST_STORE_PWD));\n    }\n    return params;\n  }\n\n  /**"
            },
            {
              "step": 14,
              "variableName": "Utils.parseUrl(url, info)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 15,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());"
            },
            {
              "step": 17,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {\n      setClient(new IClientRPCService.Client(new TCompactProtocol(transport)));"
            },
            {
              "step": 21,
              "variableName": "openSession()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      setClient(new IClientRPCService.Client(new TBinaryProtocol(transport)));\n    }\n    // open client session\n    openSession();\n    // Wrap the client with a thread-safe proxy to serialize the RPC calls\n    setClient(RpcUtils.newSynchronizedClient(getClient()));\n    autoCommit = false;"
            },
            {
              "step": 22,
              "variableName": "openSession",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n  }\n\n  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());"
            },
            {
              "step": 23,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 24,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 25,
              "variableName": "getUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    this.seriesName = seriesName;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 27,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 28,
              "variableName": "params.getUsername()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 29,
              "variableName": "@org.apache.thrift.annotation.Nullable java.lang.String username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 31,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 32,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 33,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 34,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "\n    TSOpenSessionResp openResp = null;\n    try {\n      openResp = client.openSession(openReq);\n      sessionId = openResp.getSessionId();\n      // validate connection\n      RpcUtils.verifySuccess(openResp.getStatus());"
            },
            {
              "step": 35,
              "variableName": "TSOpenSessionReq req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\n\n  @Override\n  public TSOpenSessionResp openSession(TSOpenSessionReq req) throws TException {\n    IoTDBConstant.ClientVersion clientVersion = parseClientVersion(req);\n    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login("
            },
            {
              "step": 36,
              "variableName": "req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 37,
              "variableName": "req.username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 38,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "\n  public BasicOpenSessionResp login(\n      IClientSession session,\n      String username,\n      String password,\n      String zoneId,\n      TSProtocolVersion tsProtocolVersion,"
            },
            {
              "step": 39,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            },
            {
              "step": 40,
              "variableName": "String.format(\"User %s opens Session failed with an incorrect password\", username)",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "Object[] [[]] : String",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            },
            {
              "step": 41,
              "variableName": "String.format(\"User %s opens Session failed with an incorrect password\", username)",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            },
            {
              "step": 42,
              "variableName": "String log",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "String",
              "code": "    return insertStatement;\n  }\n\n  public static void log(String log, Statement statement) {\n    AuditLogOperation operation = judgeLogOperation(statement.getType());\n    IClientSession currSession = SessionManager.getInstance().getCurrSession();\n    String username = \"\";"
            },
            {
              "step": 43,
              "variableName": "log",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/audit/AuditLogger.java",
              "type": "",
              "code": "        }\n      }\n      if (auditLogStorageList.contains(AuditLogStorage.LOGGER)) {\n        AUDIT_LOGGER.info(\"user:{},address:{},log:{}\", username, address, log);\n      }\n    }\n  }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "SessionManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 1,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 2,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);\n    }"
            },
            {
              "step": 3,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    // allowed to create an instance without parameter input.\n  }\n\n  public IoTDBConnection(String url, Properties info) throws SQLException, TTransportException {\n    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }"
            },
            {
              "step": 4,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 5,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * Parse JDBC connection URL The only supported format of the URL is:\n   * jdbc:iotdb://localhost:6667/.\n   */\n  static IoTDBConnectionParams parseUrl(String url, Properties info) throws IoTDBURLException {\n    IoTDBConnectionParams params = new IoTDBConnectionParams(url);\n    if (url.trim().equalsIgnoreCase(Config.IOTDB_URL_PREFIX)) {\n      return params;"
            },
            {
              "step": 6,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 7,
              "variableName": "info.getProperty(Config.AUTH_USER)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 9,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 11,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 12,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 13,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (info.containsKey(Config.TRUST_STORE_PWD)) {\n      params.setTrustStorePwd(info.getProperty(Config.TRUST_STORE_PWD));\n    }\n    return params;\n  }\n\n  /**"
            },
            {
              "step": 14,
              "variableName": "Utils.parseUrl(url, info)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 15,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());"
            },
            {
              "step": 17,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {\n      setClient(new IClientRPCService.Client(new TCompactProtocol(transport)));"
            },
            {
              "step": 21,
              "variableName": "openSession()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      setClient(new IClientRPCService.Client(new TBinaryProtocol(transport)));\n    }\n    // open client session\n    openSession();\n    // Wrap the client with a thread-safe proxy to serialize the RPC calls\n    setClient(RpcUtils.newSynchronizedClient(getClient()));\n    autoCommit = false;"
            },
            {
              "step": 22,
              "variableName": "openSession",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n  }\n\n  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());"
            },
            {
              "step": 23,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 24,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 25,
              "variableName": "getUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    this.seriesName = seriesName;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 27,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 28,
              "variableName": "params.getUsername()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 29,
              "variableName": "@org.apache.thrift.annotation.Nullable java.lang.String username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 31,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 32,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 33,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 34,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "\n    TSOpenSessionResp openResp = null;\n    try {\n      openResp = client.openSession(openReq);\n      sessionId = openResp.getSessionId();\n      // validate connection\n      RpcUtils.verifySuccess(openResp.getStatus());"
            },
            {
              "step": 35,
              "variableName": "TSOpenSessionReq req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\n\n  @Override\n  public TSOpenSessionResp openSession(TSOpenSessionReq req) throws TException {\n    IoTDBConstant.ClientVersion clientVersion = parseClientVersion(req);\n    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login("
            },
            {
              "step": 36,
              "variableName": "req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 37,
              "variableName": "req.username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 38,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "\n  public BasicOpenSessionResp login(\n      IClientSession session,\n      String username,\n      String password,\n      String zoneId,\n      TSProtocolVersion tsProtocolVersion,"
            },
            {
              "step": 39,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "",
              "code": "            \"{}: Login status: {}. User : {}, opens Session-{}\",\n            IoTDBConstant.GLOBAL_DB_NAME,\n            openSessionResp.getMessage(),\n            username,\n            session);\n        if (ENABLE_AUDIT_LOG) {\n          AuditLogger.log("
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "SessionManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 1,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 2,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);\n    }"
            },
            {
              "step": 3,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    // allowed to create an instance without parameter input.\n  }\n\n  public IoTDBConnection(String url, Properties info) throws SQLException, TTransportException {\n    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }"
            },
            {
              "step": 4,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 5,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * Parse JDBC connection URL The only supported format of the URL is:\n   * jdbc:iotdb://localhost:6667/.\n   */\n  static IoTDBConnectionParams parseUrl(String url, Properties info) throws IoTDBURLException {\n    IoTDBConnectionParams params = new IoTDBConnectionParams(url);\n    if (url.trim().equalsIgnoreCase(Config.IOTDB_URL_PREFIX)) {\n      return params;"
            },
            {
              "step": 6,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 7,
              "variableName": "info.getProperty(Config.AUTH_USER)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 9,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 11,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 12,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 13,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (info.containsKey(Config.TRUST_STORE_PWD)) {\n      params.setTrustStorePwd(info.getProperty(Config.TRUST_STORE_PWD));\n    }\n    return params;\n  }\n\n  /**"
            },
            {
              "step": 14,
              "variableName": "Utils.parseUrl(url, info)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 15,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());"
            },
            {
              "step": 17,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {\n      setClient(new IClientRPCService.Client(new TCompactProtocol(transport)));"
            },
            {
              "step": 21,
              "variableName": "openSession()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      setClient(new IClientRPCService.Client(new TBinaryProtocol(transport)));\n    }\n    // open client session\n    openSession();\n    // Wrap the client with a thread-safe proxy to serialize the RPC calls\n    setClient(RpcUtils.newSynchronizedClient(getClient()));\n    autoCommit = false;"
            },
            {
              "step": 22,
              "variableName": "openSession",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n  }\n\n  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());"
            },
            {
              "step": 23,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 24,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 25,
              "variableName": "getUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    this.seriesName = seriesName;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 27,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 28,
              "variableName": "params.getUsername()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 29,
              "variableName": "@org.apache.thrift.annotation.Nullable java.lang.String username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 31,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 32,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 33,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 34,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "\n    TSOpenSessionResp openResp = null;\n    try {\n      openResp = client.openSession(openReq);\n      sessionId = openResp.getSessionId();\n      // validate connection\n      RpcUtils.verifySuccess(openResp.getStatus());"
            },
            {
              "step": 35,
              "variableName": "TSOpenSessionReq req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\n\n  @Override\n  public TSOpenSessionResp openSession(TSOpenSessionReq req) throws TException {\n    IoTDBConstant.ClientVersion clientVersion = parseClientVersion(req);\n    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login("
            },
            {
              "step": 36,
              "variableName": "req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 37,
              "variableName": "req.username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 38,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "\n  public BasicOpenSessionResp login(\n      IClientSession session,\n      String username,\n      String password,\n      String zoneId,\n      TSProtocolVersion tsProtocolVersion,"
            },
            {
              "step": 39,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);\n        }\n      }"
            },
            {
              "step": 40,
              "variableName": "String.format(",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "Object[] [[]] : String",
              "code": "            session);\n        if (ENABLE_AUDIT_LOG) {\n          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);"
            },
            {
              "step": 41,
              "variableName": "String.format(",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "",
              "code": "            session);\n        if (ENABLE_AUDIT_LOG) {\n          AuditLogger.log(\n              String.format(\n                  \"%s: Login status: %s. User : %s, opens Session-%s\",\n                  IoTDBConstant.GLOBAL_DB_NAME, openSessionResp.getMessage(), username, session),\n              AUTHOR_STATEMENT);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "SessionManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 1,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    try {\n      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);"
            },
            {
              "step": 2,
              "variableName": "newProp",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBDataSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "      Properties newProp = new Properties();\n      newProp.setProperty(\"user\", username);\n      newProp.setProperty(PWD_STR, password);\n      return new IoTDBConnection(url, newProp);\n    } catch (Exception e) {\n      LOGGER.error(\"get connection error:\", e);\n    }"
            },
            {
              "step": 3,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    // allowed to create an instance without parameter input.\n  }\n\n  public IoTDBConnection(String url, Properties info) throws SQLException, TTransportException {\n    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }"
            },
            {
              "step": 4,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "Properties [<map.value>] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 5,
              "variableName": "Properties info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "   * Parse JDBC connection URL The only supported format of the URL is:\n   * jdbc:iotdb://localhost:6667/.\n   */\n  static IoTDBConnectionParams parseUrl(String url, Properties info) throws IoTDBURLException {\n    IoTDBConnectionParams params = new IoTDBConnectionParams(url);\n    if (url.trim().equalsIgnoreCase(Config.IOTDB_URL_PREFIX)) {\n      return params;"
            },
            {
              "step": 6,
              "variableName": "info",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 7,
              "variableName": "info.getProperty(Config.AUTH_USER)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 9,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {"
            },
            {
              "step": 11,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n"
            },
            {
              "step": 12,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    params.setPort(Integer.parseInt(port));\n\n    if (info.containsKey(Config.AUTH_USER)) {\n      params.setUsername(info.getProperty(Config.AUTH_USER));\n    }\n    if (info.containsKey(Config.AUTH_PASSWORD)) {\n      params.setPassword(info.getProperty(Config.AUTH_PASSWORD));"
            },
            {
              "step": 13,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/Utils.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (info.containsKey(Config.TRUST_STORE_PWD)) {\n      params.setTrustStorePwd(info.getProperty(Config.TRUST_STORE_PWD));\n    }\n    return params;\n  }\n\n  /**"
            },
            {
              "step": 14,
              "variableName": "Utils.parseUrl(url, info)",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 15,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    if (url == null) {\n      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      throw new IoTDBURLException(\"Input url cannot be null\");\n    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());"
            },
            {
              "step": 17,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    params = Utils.parseUrl(url, info);\n    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.url = url;\n    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    this.userName = info.get(\"user\").toString();\n    this.networkTimeout = params.getNetworkTimeout();\n    this.zoneId = ZoneId.of(params.getTimeZone());\n    this.charset = params.getCharset();\n    openTransport();\n    if (Config.rpcThriftCompressionEnable) {\n      setClient(new IClientRPCService.Client(new TCompactProtocol(transport)));"
            },
            {
              "step": 21,
              "variableName": "openSession()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "      setClient(new IClientRPCService.Client(new TBinaryProtocol(transport)));\n    }\n    // open client session\n    openSession();\n    // Wrap the client with a thread-safe proxy to serialize the RPC calls\n    setClient(RpcUtils.newSynchronizedClient(getClient()));\n    autoCommit = false;"
            },
            {
              "step": 22,
              "variableName": "openSession",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "    }\n  }\n\n  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());"
            },
            {
              "step": 23,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnection [params, username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 24,
              "variableName": "params",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 25,
              "variableName": "getUsername",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "    this.seriesName = seriesName;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "IoTDBConnectionParams [username] : String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 27,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnectionParams.java",
              "type": "String",
              "code": "  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {"
            },
            {
              "step": 28,
              "variableName": "params.getUsername()",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 29,
              "variableName": "@org.apache.thrift.annotation.Nullable java.lang.String username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 31,
              "variableName": "this",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r\n\r"
            },
            {
              "step": 32,
              "variableName": "setUsername",
              "uri": "iotdb-1.3.3/iotdb-protocol/thrift-datanode/target/generated-sources/thrift/org/apache/iotdb/service/rpc/thrift/TSOpenSessionReq.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    return this.username;\r\n  }\r\n\r\n  public TSOpenSessionReq setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {\r\n    this.username = username;\r\n    return this;\r\n  }\r"
            },
            {
              "step": 33,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  private void openSession() throws SQLException {\n    TSOpenSessionReq openReq = new TSOpenSessionReq();\n\n    openReq.setUsername(params.getUsername());\n    openReq.setPassword(params.getPassword());\n    openReq.setZoneId(getTimeZone());\n    openReq.putToConfiguration(\"version\", params.getVersion().toString());"
            },
            {
              "step": 34,
              "variableName": "openReq",
              "uri": "iotdb-1.3.3/iotdb-client/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBConnection.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "\n    TSOpenSessionResp openResp = null;\n    try {\n      openResp = client.openSession(openReq);\n      sessionId = openResp.getSessionId();\n      // validate connection\n      RpcUtils.verifySuccess(openResp.getStatus());"
            },
            {
              "step": 35,
              "variableName": "TSOpenSessionReq req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "  }\n\n  @Override\n  public TSOpenSessionResp openSession(TSOpenSessionReq req) throws TException {\n    IoTDBConstant.ClientVersion clientVersion = parseClientVersion(req);\n    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login("
            },
            {
              "step": 36,
              "variableName": "req",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "TSOpenSessionReq [username] : String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 37,
              "variableName": "req.username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/thrift/impl/ClientRPCServiceImpl.java",
              "type": "String",
              "code": "    BasicOpenSessionResp openSessionResp =\n        SESSION_MANAGER.login(\n            SESSION_MANAGER.getCurrSession(),\n            req.username,\n            req.password,\n            req.zoneId,\n            req.client_protocol,"
            },
            {
              "step": 38,
              "variableName": "String username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "\n  public BasicOpenSessionResp login(\n      IClientSession session,\n      String username,\n      String password,\n      String zoneId,\n      TSProtocolVersion tsProtocolVersion,"
            },
            {
              "step": 39,
              "variableName": "username",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "String",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            },
            {
              "step": 40,
              "variableName": "String.format(\"User %s opens Session failed with an incorrect password\", username)",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "Object[] [[]] : String",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            },
            {
              "step": 41,
              "variableName": "String.format(\"User %s opens Session failed with an incorrect password\", username)",
              "uri": "iotdb-1.3.3/iotdb-core/datanode/src/main/java/org/apache/iotdb/db/protocol/session/SessionManager.java",
              "type": "",
              "code": "    } else {\n      if (ENABLE_AUDIT_LOG) {\n        AuditLogger.log(\n            String.format(\"User %s opens Session failed with an incorrect password\", username),\n            AUTHOR_STATEMENT);\n      }\n      openSessionResp.sessionId(-1).setMessage(loginStatus.message).setCode(loginStatus.code);"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}