{
  "208": [
    {
      "resultIndex": 0,
      "fileName": "BoundaryType.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 37,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        try {\n            Mac mac = Mac.getInstance(algorithm.toString());\n            mac.init(new SecretKeySpec(key, algorithm.toString()));\n            return mac.doFinal(data);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 1,
              "variableName": "sign(data, key.getBytes(charset), algorithm)",
              "startLine": 80,
              "startColumn": 32,
              "endLine": 80,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)\n        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());"
            },
            {
              "step": 2,
              "variableName": "Base64.encodeBase64(signature)",
              "startLine": 81,
              "startColumn": 31,
              "endLine": 81,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 3,
              "variableName": "new String(Base64.encodeBase64(signature), DEFAULT_CHARSET)",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 4,
              "variableName": "signAndBase64Encode(data, key, algorithm, charset)",
              "startLine": 74,
              "startColumn": 16,
              "endLine": 74,
              "endColumn": 66,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,\n        Charset charset) throws AclException {\n        return signAndBase64Encode(data, key, algorithm, charset);\n    }\n\n    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)"
            },
            {
              "step": 5,
              "variableName": "calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String key) throws AclException {\n        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n    }\n\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,"
            },
            {
              "step": 6,
              "variableName": "AclSigner.calSignature(data, secretKey)",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 55,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String secretKey) {\n        return AclSigner.calSignature(data, secretKey);\n    }\n\n    public static void IPv6AddressCheck(String netAddress) {"
            },
            {
              "step": 7,
              "variableName": "AclUtils.calSignature(total, sessionCredentials.getSecretKey())",
              "startLine": 45,
              "startColumn": 28,
              "endLine": 45,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "            request.addExtField(SECURITY_TOKEN, sessionCredentials.getSecurityToken());\n        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "signature",
              "startLine": 46,
              "startColumn": 40,
              "endLine": 46,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "String value",
              "startLine": 612,
              "startColumn": 41,
              "endLine": 612,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 10,
              "variableName": "value",
              "startLine": 616,
              "startColumn": 28,
              "endLine": 616,
              "endColumn": 33,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 11,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 12,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 13,
              "variableName": "addExtField",
              "startLine": 612,
              "startColumn": 17,
              "endLine": 612,
              "endColumn": 28,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 14,
              "variableName": "request",
              "startLine": 46,
              "startColumn": 9,
              "endLine": 46,
              "endColumn": 16,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "RemotingCommand request",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        // Add AccessKey and SecurityToken into signature calculating.\n        request.addExtField(ACCESS_KEY, sessionCredentials.getAccessKey());\n        // The SecurityToken value is unnecessary,user can choose this one."
            },
            {
              "step": 16,
              "variableName": "request",
              "startLine": 196,
              "startColumn": 47,
              "endLine": 196,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);\n            }\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "RemotingCommand request",
              "startLine": 193,
              "startColumn": 50,
              "endLine": 193,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);"
            },
            {
              "step": 18,
              "variableName": "cmd",
              "startLine": 329,
              "startColumn": 50,
              "endLine": 329,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "            try {\n                remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n                try {\n                    doBeforeRpcHooks(remoteAddr, cmd);\n                } catch (AbortProcessException e) {\n                    throw e;\n                } catch (Exception e) {"
            },
            {
              "step": 19,
              "variableName": "cmd",
              "startLine": 329,
              "startColumn": 50,
              "endLine": 329,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "new Runnable(...) { ... } [cmd, extFields, <map.value>] : String",
              "code": "            try {\n                remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n                try {\n                    doBeforeRpcHooks(remoteAddr, cmd);\n                } catch (AbortProcessException e) {\n                    throw e;\n                } catch (Exception e) {"
            },
            {
              "step": 20,
              "variableName": "cmd",
              "startLine": 341,
              "startColumn": 70,
              "endLine": 341,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "new Runnable(...) { ... } [cmd, extFields, <map.value>] : String",
              "code": "                }\n\n                if (exception == null) {\n                    response = pair.getObject1().processRequest(ctx, cmd);\n                } else {\n                    response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR, null);\n                }"
            },
            {
              "step": 21,
              "variableName": "cmd",
              "startLine": 341,
              "startColumn": 70,
              "endLine": 341,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                }\n\n                if (exception == null) {\n                    response = pair.getObject1().processRequest(ctx, cmd);\n                } else {\n                    response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR, null);\n                }"
            },
            {
              "step": 22,
              "variableName": "RemotingCommand request",
              "startLine": 220,
              "startColumn": 76,
              "endLine": 220,
              "endColumn": 99,
              "uri": "rocketmq-rocketmq-all-5.3.2/broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public RemotingCommand processRequest(final ChannelHandlerContext ctx, RemotingCommand request)\n        throws RemotingCommandException {\n\n        final long beginTimeMills = this.brokerController.getMessageStore().now();"
            },
            {
              "step": 23,
              "variableName": "request",
              "startLine": 236,
              "startColumn": 13,
              "endLine": 236,
              "endColumn": 20,
              "uri": "rocketmq-rocketmq-all-5.3.2/broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        response.setOpaque(request.getOpaque());\n\n        final PopMessageRequestHeader requestHeader =\n            request.decodeCommandCustomHeader(PopMessageRequestHeader.class, true);\n        final PopMessageResponseHeader responseHeader = (PopMessageResponseHeader) response.readCustomHeader();\n\n        // Pop mode only supports consumption in cluster load balancing mode"
            },
            {
              "step": 24,
              "variableName": "decodeCommandCustomHeader",
              "startLine": 270,
              "startColumn": 46,
              "endLine": 270,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        return decodeCommandCustomHeader(classHeader, false);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader, boolean isCached) throws RemotingCommandException {\n        if (isCached && cachedHeader != null) {\n            return classHeader.cast(cachedHeader);"
            },
            {
              "step": 25,
              "variableName": "decodeCommandCustomHeaderDirectly(classHeader, true)",
              "startLine": 275,
              "startColumn": 24,
              "endLine": 275,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (isCached && cachedHeader != null) {\n            return classHeader.cast(cachedHeader);\n        }\n        cachedHeader = decodeCommandCustomHeaderDirectly(classHeader, true);\n        if (cachedHeader == null) {\n            return null;\n        }"
            },
            {
              "step": 26,
              "variableName": "decodeCommandCustomHeaderDirectly",
              "startLine": 282,
              "startColumn": 46,
              "endLine": 282,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        return classHeader.cast(cachedHeader);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeaderDirectly(Class<T> classHeader,\n        boolean useFastEncode) throws RemotingCommandException {\n        T objectHeader;\n        try {"
            },
            {
              "step": 27,
              "variableName": "this",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 48,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 28,
              "variableName": "this.extFields",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 58,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 29,
              "variableName": "this.extFields.get(fieldName)",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 30,
              "variableName": "value",
              "startLine": 327,
              "startColumn": 68,
              "endLine": 327,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "                            } else if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n                                valueParsed = Double.parseDouble(value);\n                            } else if (type.equals(BOUNDARY_TYPE_CANONICAL_NAME)) {\n                                valueParsed = BoundaryType.getType(value);\n                            } else {\n                                throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n                            }"
            },
            {
              "step": 31,
              "variableName": "String name",
              "startLine": 40,
              "startColumn": 40,
              "endLine": 40,
              "endColumn": 51,
              "uri": "rocketmq-rocketmq-all-5.3.2/common/src/main/java/org/apache/rocketmq/common/BoundaryType.java",
              "type": "String",
              "code": "        return name;\n    }\n\n    public static BoundaryType getType(String name) {\n        if (BoundaryType.UPPER.getName().equalsIgnoreCase(name)) {\n            return UPPER;\n        }"
            },
            {
              "step": 32,
              "variableName": "name",
              "startLine": 41,
              "startColumn": 59,
              "endLine": 41,
              "endColumn": 63,
              "uri": "rocketmq-rocketmq-all-5.3.2/common/src/main/java/org/apache/rocketmq/common/BoundaryType.java",
              "type": "",
              "code": "    }\n\n    public static BoundaryType getType(String name) {\n        if (BoundaryType.UPPER.getName().equalsIgnoreCase(name)) {\n            return UPPER;\n        }\n        return LOWER;"
            }
          ],
          "label": "Yes",
          "probability": 0.3242932856082916
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 37,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        try {\n            Mac mac = Mac.getInstance(algorithm.toString());\n            mac.init(new SecretKeySpec(key, algorithm.toString()));\n            return mac.doFinal(data);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 1,
              "variableName": "sign(data, key.getBytes(charset), algorithm)",
              "startLine": 80,
              "startColumn": 32,
              "endLine": 80,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)\n        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());"
            },
            {
              "step": 2,
              "variableName": "Base64.encodeBase64(signature)",
              "startLine": 81,
              "startColumn": 31,
              "endLine": 81,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 3,
              "variableName": "new String(Base64.encodeBase64(signature), DEFAULT_CHARSET)",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 4,
              "variableName": "signAndBase64Encode(data, key, algorithm, charset)",
              "startLine": 74,
              "startColumn": 16,
              "endLine": 74,
              "endColumn": 66,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,\n        Charset charset) throws AclException {\n        return signAndBase64Encode(data, key, algorithm, charset);\n    }\n\n    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)"
            },
            {
              "step": 5,
              "variableName": "calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String key) throws AclException {\n        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n    }\n\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,"
            },
            {
              "step": 6,
              "variableName": "AclSigner.calSignature(data, secretKey)",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 55,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String secretKey) {\n        return AclSigner.calSignature(data, secretKey);\n    }\n\n    public static void IPv6AddressCheck(String netAddress) {"
            },
            {
              "step": 7,
              "variableName": "AclUtils.calSignature(total, sessionCredentials.getSecretKey())",
              "startLine": 45,
              "startColumn": 28,
              "endLine": 45,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "            request.addExtField(SECURITY_TOKEN, sessionCredentials.getSecurityToken());\n        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "signature",
              "startLine": 46,
              "startColumn": 40,
              "endLine": 46,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "String value",
              "startLine": 612,
              "startColumn": 41,
              "endLine": 612,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 10,
              "variableName": "value",
              "startLine": 616,
              "startColumn": 28,
              "endLine": 616,
              "endColumn": 33,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 11,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 12,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 13,
              "variableName": "addExtField",
              "startLine": 612,
              "startColumn": 17,
              "endLine": 612,
              "endColumn": 28,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 14,
              "variableName": "request",
              "startLine": 46,
              "startColumn": 9,
              "endLine": 46,
              "endColumn": 16,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "RemotingCommand request",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        // Add AccessKey and SecurityToken into signature calculating.\n        request.addExtField(ACCESS_KEY, sessionCredentials.getAccessKey());\n        // The SecurityToken value is unnecessary,user can choose this one."
            },
            {
              "step": 16,
              "variableName": "request",
              "startLine": 196,
              "startColumn": 47,
              "endLine": 196,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);\n            }\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "request",
              "startLine": 196,
              "startColumn": 47,
              "endLine": 196,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);\n            }\n        }\n    }"
            },
            {
              "step": 18,
              "variableName": "RemotingCommand request",
              "startLine": 1060,
              "startColumn": 64,
              "endLine": 1060,
              "endColumn": 87,
              "uri": "rocketmq-rocketmq-all-5.3.2/broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "            this.registerServerRPCHook(new RPCHook() {\n\n                @Override\n                public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n                    //Do not catch the exception\n                    validator.validate(validator.parse(request, remoteAddr));\n                }"
            },
            {
              "step": 19,
              "variableName": "request",
              "startLine": 1062,
              "startColumn": 56,
              "endLine": 1062,
              "endColumn": 63,
              "uri": "rocketmq-rocketmq-all-5.3.2/broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                @Override\n                public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n                    //Do not catch the exception\n                    validator.validate(validator.parse(request, remoteAddr));\n                }\n\n                @Override"
            },
            {
              "step": 20,
              "variableName": "RemotingCommand request",
              "startLine": 39,
              "startColumn": 33,
              "endLine": 39,
              "endColumn": 56,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public AccessResource parse(RemotingCommand request, String remoteAddr) {\n        return PlainAccessResource.parse(request, remoteAddr);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "request",
              "startLine": 40,
              "startColumn": 42,
              "endLine": 40,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "\n    @Override\n    public AccessResource parse(RemotingCommand request, String remoteAddr) {\n        return PlainAccessResource.parse(request, remoteAddr);\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "RemotingCommand request",
              "startLine": 102,
              "startColumn": 45,
              "endLine": 102,
              "endColumn": 68,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    public PlainAccessResource() {\n    }\n\n    public static PlainAccessResource parse(RemotingCommand request, String remoteAddr) {\n        PlainAccessResource accessResource = new PlainAccessResource();\n        if (remoteAddr != null && remoteAddr.contains(\":\")) {\n            accessResource.setWhiteRemoteAddress(remoteAddr.substring(0, remoteAddr.lastIndexOf(':')));"
            },
            {
              "step": 23,
              "variableName": "request",
              "startLine": 156,
              "startColumn": 57,
              "endLine": 156,
              "endColumn": 64,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                    break;\n                case RequestCode.UNREGISTER_CLIENT:\n                    final UnregisterClientRequestHeader unregisterClientRequestHeader =\n                        (UnregisterClientRequestHeader) request\n                            .decodeCommandCustomHeader(UnregisterClientRequestHeader.class);\n                    accessResource.addResourceAndPerm(getRetryTopic(unregisterClientRequestHeader.getConsumerGroup()), Permission.SUB);\n                    break;"
            },
            {
              "step": 24,
              "variableName": "decodeCommandCustomHeader",
              "startLine": 265,
              "startColumn": 46,
              "endLine": 265,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.customHeader = customHeader;\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader) throws RemotingCommandException {\n        return decodeCommandCustomHeader(classHeader, false);\n    }"
            },
            {
              "step": 25,
              "variableName": "decodeCommandCustomHeader(classHeader, false)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader) throws RemotingCommandException {\n        return decodeCommandCustomHeader(classHeader, false);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader("
            },
            {
              "step": 26,
              "variableName": "decodeCommandCustomHeader",
              "startLine": 270,
              "startColumn": 46,
              "endLine": 270,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        return decodeCommandCustomHeader(classHeader, false);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader, boolean isCached) throws RemotingCommandException {\n        if (isCached && cachedHeader != null) {\n            return classHeader.cast(cachedHeader);"
            },
            {
              "step": 27,
              "variableName": "decodeCommandCustomHeaderDirectly(classHeader, true)",
              "startLine": 275,
              "startColumn": 24,
              "endLine": 275,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (isCached && cachedHeader != null) {\n            return classHeader.cast(cachedHeader);\n        }\n        cachedHeader = decodeCommandCustomHeaderDirectly(classHeader, true);\n        if (cachedHeader == null) {\n            return null;\n        }"
            },
            {
              "step": 28,
              "variableName": "decodeCommandCustomHeaderDirectly",
              "startLine": 282,
              "startColumn": 46,
              "endLine": 282,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        return classHeader.cast(cachedHeader);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeaderDirectly(Class<T> classHeader,\n        boolean useFastEncode) throws RemotingCommandException {\n        T objectHeader;\n        try {"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 291,
              "startColumn": 13,
              "endLine": 291,
              "endColumn": 17,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "            return null;\n        }\n\n        if (this.extFields != null) {\n            if (objectHeader instanceof FastCodesHeader && useFastEncode) {\n                ((FastCodesHeader) objectHeader).decode(this.extFields);\n                objectHeader.checkFields();"
            },
            {
              "step": 30,
              "variableName": "this.extFields",
              "startLine": 291,
              "startColumn": 13,
              "endLine": 291,
              "endColumn": 27,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            return null;\n        }\n\n        if (this.extFields != null) {\n            if (objectHeader instanceof FastCodesHeader && useFastEncode) {\n                ((FastCodesHeader) objectHeader).decode(this.extFields);\n                objectHeader.checkFields();"
            },
            {
              "step": 31,
              "variableName": "this.extFields",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 58,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 32,
              "variableName": "this.extFields.get(fieldName)",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 33,
              "variableName": "value",
              "startLine": 327,
              "startColumn": 68,
              "endLine": 327,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "                            } else if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n                                valueParsed = Double.parseDouble(value);\n                            } else if (type.equals(BOUNDARY_TYPE_CANONICAL_NAME)) {\n                                valueParsed = BoundaryType.getType(value);\n                            } else {\n                                throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n                            }"
            },
            {
              "step": 34,
              "variableName": "String name",
              "startLine": 40,
              "startColumn": 40,
              "endLine": 40,
              "endColumn": 51,
              "uri": "rocketmq-rocketmq-all-5.3.2/common/src/main/java/org/apache/rocketmq/common/BoundaryType.java",
              "type": "String",
              "code": "        return name;\n    }\n\n    public static BoundaryType getType(String name) {\n        if (BoundaryType.UPPER.getName().equalsIgnoreCase(name)) {\n            return UPPER;\n        }"
            },
            {
              "step": 35,
              "variableName": "name",
              "startLine": 41,
              "startColumn": 59,
              "endLine": 41,
              "endColumn": 63,
              "uri": "rocketmq-rocketmq-all-5.3.2/common/src/main/java/org/apache/rocketmq/common/BoundaryType.java",
              "type": "",
              "code": "    }\n\n    public static BoundaryType getType(String name) {\n        if (BoundaryType.UPPER.getName().equalsIgnoreCase(name)) {\n            return UPPER;\n        }\n        return LOWER;"
            }
          ],
          "label": "Yes",
          "probability": 0.3242932856082916
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 37,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        try {\n            Mac mac = Mac.getInstance(algorithm.toString());\n            mac.init(new SecretKeySpec(key, algorithm.toString()));\n            return mac.doFinal(data);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 1,
              "variableName": "sign(data, key.getBytes(charset), algorithm)",
              "startLine": 80,
              "startColumn": 32,
              "endLine": 80,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)\n        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());"
            },
            {
              "step": 2,
              "variableName": "Base64.encodeBase64(signature)",
              "startLine": 81,
              "startColumn": 31,
              "endLine": 81,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 3,
              "variableName": "new String(Base64.encodeBase64(signature), DEFAULT_CHARSET)",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 4,
              "variableName": "signAndBase64Encode(data, key, algorithm, charset)",
              "startLine": 74,
              "startColumn": 16,
              "endLine": 74,
              "endColumn": 66,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,\n        Charset charset) throws AclException {\n        return signAndBase64Encode(data, key, algorithm, charset);\n    }\n\n    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)"
            },
            {
              "step": 5,
              "variableName": "calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String key) throws AclException {\n        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n    }\n\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,"
            },
            {
              "step": 6,
              "variableName": "AclSigner.calSignature(data, secretKey)",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 55,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String secretKey) {\n        return AclSigner.calSignature(data, secretKey);\n    }\n\n    public static void IPv6AddressCheck(String netAddress) {"
            },
            {
              "step": 7,
              "variableName": "AclUtils.calSignature(total, sessionCredentials.getSecretKey())",
              "startLine": 45,
              "startColumn": 28,
              "endLine": 45,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "            request.addExtField(SECURITY_TOKEN, sessionCredentials.getSecurityToken());\n        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "signature",
              "startLine": 46,
              "startColumn": 40,
              "endLine": 46,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "String value",
              "startLine": 612,
              "startColumn": 41,
              "endLine": 612,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 10,
              "variableName": "value",
              "startLine": 616,
              "startColumn": 28,
              "endLine": 616,
              "endColumn": 33,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 11,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 12,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 13,
              "variableName": "addExtField",
              "startLine": 612,
              "startColumn": 17,
              "endLine": 612,
              "endColumn": 28,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 14,
              "variableName": "request",
              "startLine": 46,
              "startColumn": 9,
              "endLine": 46,
              "endColumn": 16,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "RemotingCommand request",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        // Add AccessKey and SecurityToken into signature calculating.\n        request.addExtField(ACCESS_KEY, sessionCredentials.getAccessKey());\n        // The SecurityToken value is unnecessary,user can choose this one."
            },
            {
              "step": 16,
              "variableName": "request",
              "startLine": 196,
              "startColumn": 47,
              "endLine": 196,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);\n            }\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "RemotingCommand request",
              "startLine": 193,
              "startColumn": 50,
              "endLine": 193,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);"
            },
            {
              "step": 18,
              "variableName": "request",
              "startLine": 826,
              "startColumn": 45,
              "endLine": 826,
              "endColumn": 52,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        final long timeoutMillis) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String channelRemoteAddr = RemotingHelper.parseChannelRemoteAddr(channel);\n        doBeforeRpcHooks(channelRemoteAddr, request);\n\n        return super.invokeImpl(channel, request, timeoutMillis).thenCompose(responseFuture -> {\n            RemotingCommand response = responseFuture.getResponseCommand();"
            },
            {
              "step": 19,
              "variableName": "request : RemotingCommand [extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 20,
              "variableName": "...->... : new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 21,
              "variableName": "parameter this : new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 22,
              "variableName": "request",
              "startLine": 870,
              "startColumn": 52,
              "endLine": 870,
              "endColumn": 59,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }\n        });\n    }"
            },
            {
              "step": 23,
              "variableName": "request",
              "startLine": 870,
              "startColumn": 52,
              "endLine": 870,
              "endColumn": 59,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }\n        });\n    }"
            },
            {
              "step": 24,
              "variableName": "RemotingCommand request",
              "startLine": 201,
              "startColumn": 46,
              "endLine": 201,
              "endColumn": 69,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    public void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doAfterResponse(addr, request, response);"
            },
            {
              "step": 25,
              "variableName": "request",
              "startLine": 204,
              "startColumn": 47,
              "endLine": 204,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    public void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doAfterResponse(addr, request, response);\n            }\n        }\n    }"
            },
            {
              "step": 26,
              "variableName": "RemotingCommand request",
              "startLine": 50,
              "startColumn": 52,
              "endLine": 50,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/client/src/main/java/org/apache/rocketmq/client/trace/hook/DefaultRecallMessageTraceHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doAfterResponse(String remoteAddr, RemotingCommand request, RemotingCommand response) {\n        if (request.getCode() != RequestCode.RECALL_MESSAGE\n            || !enableDefaultTrace\n            || null == response.getExtFields()"
            },
            {
              "step": 27,
              "variableName": "request",
              "startLine": 62,
              "startColumn": 17,
              "endLine": 62,
              "endColumn": 24,
              "uri": "rocketmq-rocketmq-all-5.3.2/client/src/main/java/org/apache/rocketmq/client/trace/hook/DefaultRecallMessageTraceHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        try {\n            String regionId = response.getExtFields().get(MessageConst.PROPERTY_MSG_REGION);\n            RecallMessageRequestHeader requestHeader =\n                request.decodeCommandCustomHeader(RecallMessageRequestHeader.class);\n            String topic = NamespaceUtil.withoutNamespace(requestHeader.getTopic());\n            String group = NamespaceUtil.withoutNamespace(requestHeader.getProducerGroup());\n            String recallHandle = requestHeader.getRecallHandle();"
            },
            {
              "step": 28,
              "variableName": "decodeCommandCustomHeader",
              "startLine": 265,
              "startColumn": 46,
              "endLine": 265,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.customHeader = customHeader;\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader) throws RemotingCommandException {\n        return decodeCommandCustomHeader(classHeader, false);\n    }"
            },
            {
              "step": 29,
              "variableName": "decodeCommandCustomHeader(classHeader, false)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader) throws RemotingCommandException {\n        return decodeCommandCustomHeader(classHeader, false);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader("
            },
            {
              "step": 30,
              "variableName": "decodeCommandCustomHeader",
              "startLine": 270,
              "startColumn": 46,
              "endLine": 270,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        return decodeCommandCustomHeader(classHeader, false);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader, boolean isCached) throws RemotingCommandException {\n        if (isCached && cachedHeader != null) {\n            return classHeader.cast(cachedHeader);"
            },
            {
              "step": 31,
              "variableName": "decodeCommandCustomHeaderDirectly(classHeader, true)",
              "startLine": 275,
              "startColumn": 24,
              "endLine": 275,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (isCached && cachedHeader != null) {\n            return classHeader.cast(cachedHeader);\n        }\n        cachedHeader = decodeCommandCustomHeaderDirectly(classHeader, true);\n        if (cachedHeader == null) {\n            return null;\n        }"
            },
            {
              "step": 32,
              "variableName": "decodeCommandCustomHeaderDirectly",
              "startLine": 282,
              "startColumn": 46,
              "endLine": 282,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        return classHeader.cast(cachedHeader);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeaderDirectly(Class<T> classHeader,\n        boolean useFastEncode) throws RemotingCommandException {\n        T objectHeader;\n        try {"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 48,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 34,
              "variableName": "this.extFields",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 58,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 35,
              "variableName": "this.extFields.get(fieldName)",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 36,
              "variableName": "value",
              "startLine": 327,
              "startColumn": 68,
              "endLine": 327,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "                            } else if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n                                valueParsed = Double.parseDouble(value);\n                            } else if (type.equals(BOUNDARY_TYPE_CANONICAL_NAME)) {\n                                valueParsed = BoundaryType.getType(value);\n                            } else {\n                                throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n                            }"
            },
            {
              "step": 37,
              "variableName": "String name",
              "startLine": 40,
              "startColumn": 40,
              "endLine": 40,
              "endColumn": 51,
              "uri": "rocketmq-rocketmq-all-5.3.2/common/src/main/java/org/apache/rocketmq/common/BoundaryType.java",
              "type": "String",
              "code": "        return name;\n    }\n\n    public static BoundaryType getType(String name) {\n        if (BoundaryType.UPPER.getName().equalsIgnoreCase(name)) {\n            return UPPER;\n        }"
            },
            {
              "step": 38,
              "variableName": "name",
              "startLine": 41,
              "startColumn": 59,
              "endLine": 41,
              "endColumn": 63,
              "uri": "rocketmq-rocketmq-all-5.3.2/common/src/main/java/org/apache/rocketmq/common/BoundaryType.java",
              "type": "",
              "code": "    }\n\n    public static BoundaryType getType(String name) {\n        if (BoundaryType.UPPER.getName().equalsIgnoreCase(name)) {\n            return UPPER;\n        }\n        return LOWER;"
            }
          ],
          "label": "Yes",
          "probability": 0.3242932856082916
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 37,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        try {\n            Mac mac = Mac.getInstance(algorithm.toString());\n            mac.init(new SecretKeySpec(key, algorithm.toString()));\n            return mac.doFinal(data);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 1,
              "variableName": "sign(data, key.getBytes(charset), algorithm)",
              "startLine": 80,
              "startColumn": 32,
              "endLine": 80,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)\n        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());"
            },
            {
              "step": 2,
              "variableName": "Base64.encodeBase64(signature)",
              "startLine": 81,
              "startColumn": 31,
              "endLine": 81,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 3,
              "variableName": "new String(Base64.encodeBase64(signature), DEFAULT_CHARSET)",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 4,
              "variableName": "signAndBase64Encode(data, key, algorithm, charset)",
              "startLine": 74,
              "startColumn": 16,
              "endLine": 74,
              "endColumn": 66,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,\n        Charset charset) throws AclException {\n        return signAndBase64Encode(data, key, algorithm, charset);\n    }\n\n    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)"
            },
            {
              "step": 5,
              "variableName": "calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String key) throws AclException {\n        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n    }\n\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,"
            },
            {
              "step": 6,
              "variableName": "AclSigner.calSignature(data, secretKey)",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 55,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String secretKey) {\n        return AclSigner.calSignature(data, secretKey);\n    }\n\n    public static void IPv6AddressCheck(String netAddress) {"
            },
            {
              "step": 7,
              "variableName": "AclUtils.calSignature(total, sessionCredentials.getSecretKey())",
              "startLine": 45,
              "startColumn": 28,
              "endLine": 45,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "            request.addExtField(SECURITY_TOKEN, sessionCredentials.getSecurityToken());\n        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "signature",
              "startLine": 46,
              "startColumn": 40,
              "endLine": 46,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "String value",
              "startLine": 612,
              "startColumn": 41,
              "endLine": 612,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 10,
              "variableName": "value",
              "startLine": 616,
              "startColumn": 28,
              "endLine": 616,
              "endColumn": 33,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 11,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 12,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 13,
              "variableName": "addExtField",
              "startLine": 612,
              "startColumn": 17,
              "endLine": 612,
              "endColumn": 28,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 14,
              "variableName": "request",
              "startLine": 46,
              "startColumn": 9,
              "endLine": 46,
              "endColumn": 16,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "RemotingCommand request",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        // Add AccessKey and SecurityToken into signature calculating.\n        request.addExtField(ACCESS_KEY, sessionCredentials.getAccessKey());\n        // The SecurityToken value is unnecessary,user can choose this one."
            },
            {
              "step": 16,
              "variableName": "request",
              "startLine": 196,
              "startColumn": 47,
              "endLine": 196,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);\n            }\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "RemotingCommand request",
              "startLine": 193,
              "startColumn": 50,
              "endLine": 193,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);"
            },
            {
              "step": 18,
              "variableName": "cmd",
              "startLine": 329,
              "startColumn": 50,
              "endLine": 329,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "            try {\n                remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n                try {\n                    doBeforeRpcHooks(remoteAddr, cmd);\n                } catch (AbortProcessException e) {\n                    throw e;\n                } catch (Exception e) {"
            },
            {
              "step": 19,
              "variableName": "cmd",
              "startLine": 329,
              "startColumn": 50,
              "endLine": 329,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "new Runnable(...) { ... } [cmd, extFields, <map.value>] : String",
              "code": "            try {\n                remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n                try {\n                    doBeforeRpcHooks(remoteAddr, cmd);\n                } catch (AbortProcessException e) {\n                    throw e;\n                } catch (Exception e) {"
            },
            {
              "step": 20,
              "variableName": "cmd",
              "startLine": 341,
              "startColumn": 70,
              "endLine": 341,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "new Runnable(...) { ... } [cmd, extFields, <map.value>] : String",
              "code": "                }\n\n                if (exception == null) {\n                    response = pair.getObject1().processRequest(ctx, cmd);\n                } else {\n                    response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR, null);\n                }"
            },
            {
              "step": 21,
              "variableName": "cmd",
              "startLine": 341,
              "startColumn": 70,
              "endLine": 341,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                }\n\n                if (exception == null) {\n                    response = pair.getObject1().processRequest(ctx, cmd);\n                } else {\n                    response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR, null);\n                }"
            },
            {
              "step": 22,
              "variableName": "RemotingCommand request",
              "startLine": 77,
              "startColumn": 9,
              "endLine": 77,
              "endColumn": 32,
              "uri": "rocketmq-rocketmq-all-5.3.2/broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "\n    @Override\n    public RemotingCommand processRequest(final ChannelHandlerContext ctx,\n        RemotingCommand request) throws RemotingCommandException {\n        request.addExtFieldIfNotExist(BORN_TIME, String.valueOf(System.currentTimeMillis()));\n        if (Objects.equals(request.getExtFields().get(BORN_TIME), \"0\")) {\n            request.addExtField(BORN_TIME, String.valueOf(System.currentTimeMillis()));"
            },
            {
              "step": 23,
              "variableName": "request",
              "startLine": 87,
              "startColumn": 41,
              "endLine": 87,
              "endColumn": 48,
              "uri": "rocketmq-rocketmq-all-5.3.2/broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        RemotingCommand response = RemotingCommand.createResponseCommand(NotificationResponseHeader.class);\n        final NotificationResponseHeader responseHeader = (NotificationResponseHeader) response.readCustomHeader();\n        final NotificationRequestHeader requestHeader =\n            (NotificationRequestHeader) request.decodeCommandCustomHeader(NotificationRequestHeader.class);\n\n        response.setOpaque(request.getOpaque());\n"
            },
            {
              "step": 24,
              "variableName": "decodeCommandCustomHeader",
              "startLine": 265,
              "startColumn": 46,
              "endLine": 265,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.customHeader = customHeader;\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader) throws RemotingCommandException {\n        return decodeCommandCustomHeader(classHeader, false);\n    }"
            },
            {
              "step": 25,
              "variableName": "decodeCommandCustomHeader(classHeader, false)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader) throws RemotingCommandException {\n        return decodeCommandCustomHeader(classHeader, false);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader("
            },
            {
              "step": 26,
              "variableName": "decodeCommandCustomHeader",
              "startLine": 270,
              "startColumn": 46,
              "endLine": 270,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        return decodeCommandCustomHeader(classHeader, false);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeader(\n        Class<T> classHeader, boolean isCached) throws RemotingCommandException {\n        if (isCached && cachedHeader != null) {\n            return classHeader.cast(cachedHeader);"
            },
            {
              "step": 27,
              "variableName": "decodeCommandCustomHeaderDirectly(classHeader, true)",
              "startLine": 275,
              "startColumn": 24,
              "endLine": 275,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (isCached && cachedHeader != null) {\n            return classHeader.cast(cachedHeader);\n        }\n        cachedHeader = decodeCommandCustomHeaderDirectly(classHeader, true);\n        if (cachedHeader == null) {\n            return null;\n        }"
            },
            {
              "step": 28,
              "variableName": "decodeCommandCustomHeaderDirectly",
              "startLine": 282,
              "startColumn": 46,
              "endLine": 282,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        return classHeader.cast(cachedHeader);\n    }\n\n    public <T extends CommandCustomHeader> T decodeCommandCustomHeaderDirectly(Class<T> classHeader,\n        boolean useFastEncode) throws RemotingCommandException {\n        T objectHeader;\n        try {"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 48,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 30,
              "variableName": "this.extFields",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 58,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 31,
              "variableName": "this.extFields.get(fieldName)",
              "startLine": 304,
              "startColumn": 44,
              "endLine": 304,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "                    String fieldName = field.getName();\n                    if (!fieldName.startsWith(\"this\")) {\n                        try {\n                            String value = this.extFields.get(fieldName);\n                            if (null == value) {\n                                if (!isFieldNullable(field)) {\n                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");"
            },
            {
              "step": 32,
              "variableName": "value",
              "startLine": 327,
              "startColumn": 68,
              "endLine": 327,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "                            } else if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n                                valueParsed = Double.parseDouble(value);\n                            } else if (type.equals(BOUNDARY_TYPE_CANONICAL_NAME)) {\n                                valueParsed = BoundaryType.getType(value);\n                            } else {\n                                throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n                            }"
            },
            {
              "step": 33,
              "variableName": "String name",
              "startLine": 40,
              "startColumn": 40,
              "endLine": 40,
              "endColumn": 51,
              "uri": "rocketmq-rocketmq-all-5.3.2/common/src/main/java/org/apache/rocketmq/common/BoundaryType.java",
              "type": "String",
              "code": "        return name;\n    }\n\n    public static BoundaryType getType(String name) {\n        if (BoundaryType.UPPER.getName().equalsIgnoreCase(name)) {\n            return UPPER;\n        }"
            },
            {
              "step": 34,
              "variableName": "name",
              "startLine": 41,
              "startColumn": 59,
              "endLine": 41,
              "endColumn": 63,
              "uri": "rocketmq-rocketmq-all-5.3.2/common/src/main/java/org/apache/rocketmq/common/BoundaryType.java",
              "type": "",
              "code": "    }\n\n    public static BoundaryType getType(String name) {\n        if (BoundaryType.UPPER.getName().equalsIgnoreCase(name)) {\n            return UPPER;\n        }\n        return LOWER;"
            }
          ],
          "label": "Yes",
          "probability": 0.3242932856082916
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "ZoneRouteRPCHook.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 37,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        try {\n            Mac mac = Mac.getInstance(algorithm.toString());\n            mac.init(new SecretKeySpec(key, algorithm.toString()));\n            return mac.doFinal(data);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 1,
              "variableName": "sign(data, key.getBytes(charset), algorithm)",
              "startLine": 80,
              "startColumn": 32,
              "endLine": 80,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)\n        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());"
            },
            {
              "step": 2,
              "variableName": "Base64.encodeBase64(signature)",
              "startLine": 81,
              "startColumn": 31,
              "endLine": 81,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 3,
              "variableName": "new String(Base64.encodeBase64(signature), DEFAULT_CHARSET)",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 4,
              "variableName": "signAndBase64Encode(data, key, algorithm, charset)",
              "startLine": 74,
              "startColumn": 16,
              "endLine": 74,
              "endColumn": 66,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,\n        Charset charset) throws AclException {\n        return signAndBase64Encode(data, key, algorithm, charset);\n    }\n\n    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)"
            },
            {
              "step": 5,
              "variableName": "calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String key) throws AclException {\n        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n    }\n\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,"
            },
            {
              "step": 6,
              "variableName": "AclSigner.calSignature(data, secretKey)",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 55,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String secretKey) {\n        return AclSigner.calSignature(data, secretKey);\n    }\n\n    public static void IPv6AddressCheck(String netAddress) {"
            },
            {
              "step": 7,
              "variableName": "AclUtils.calSignature(total, sessionCredentials.getSecretKey())",
              "startLine": 45,
              "startColumn": 28,
              "endLine": 45,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "            request.addExtField(SECURITY_TOKEN, sessionCredentials.getSecurityToken());\n        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "signature",
              "startLine": 46,
              "startColumn": 40,
              "endLine": 46,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "String value",
              "startLine": 612,
              "startColumn": 41,
              "endLine": 612,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 10,
              "variableName": "value",
              "startLine": 616,
              "startColumn": 28,
              "endLine": 616,
              "endColumn": 33,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 11,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 12,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 13,
              "variableName": "addExtField",
              "startLine": 612,
              "startColumn": 17,
              "endLine": 612,
              "endColumn": 28,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 14,
              "variableName": "request",
              "startLine": 46,
              "startColumn": 9,
              "endLine": 46,
              "endColumn": 16,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "RemotingCommand request",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        // Add AccessKey and SecurityToken into signature calculating.\n        request.addExtField(ACCESS_KEY, sessionCredentials.getAccessKey());\n        // The SecurityToken value is unnecessary,user can choose this one."
            },
            {
              "step": 16,
              "variableName": "request",
              "startLine": 196,
              "startColumn": 47,
              "endLine": 196,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);\n            }\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "RemotingCommand request",
              "startLine": 193,
              "startColumn": 50,
              "endLine": 193,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);"
            },
            {
              "step": 18,
              "variableName": "cmd",
              "startLine": 329,
              "startColumn": 50,
              "endLine": 329,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "            try {\n                remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n                try {\n                    doBeforeRpcHooks(remoteAddr, cmd);\n                } catch (AbortProcessException e) {\n                    throw e;\n                } catch (Exception e) {"
            },
            {
              "step": 19,
              "variableName": "cmd",
              "startLine": 329,
              "startColumn": 50,
              "endLine": 329,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "new Runnable(...) { ... } [cmd, extFields, <map.value>] : String",
              "code": "            try {\n                remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n                try {\n                    doBeforeRpcHooks(remoteAddr, cmd);\n                } catch (AbortProcessException e) {\n                    throw e;\n                } catch (Exception e) {"
            },
            {
              "step": 20,
              "variableName": "cmd",
              "startLine": 347,
              "startColumn": 49,
              "endLine": 347,
              "endColumn": 52,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "new Runnable(...) { ... } [cmd, extFields, <map.value>] : String",
              "code": "                }\n\n                try {\n                    doAfterRpcHooks(remoteAddr, cmd, response);\n                } catch (AbortProcessException e) {\n                    throw e;\n                } catch (Exception e) {"
            },
            {
              "step": 21,
              "variableName": "cmd",
              "startLine": 347,
              "startColumn": 49,
              "endLine": 347,
              "endColumn": 52,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                }\n\n                try {\n                    doAfterRpcHooks(remoteAddr, cmd, response);\n                } catch (AbortProcessException e) {\n                    throw e;\n                } catch (Exception e) {"
            },
            {
              "step": 22,
              "variableName": "RemotingCommand request",
              "startLine": 201,
              "startColumn": 46,
              "endLine": 201,
              "endColumn": 69,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    public void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doAfterResponse(addr, request, response);"
            },
            {
              "step": 23,
              "variableName": "request",
              "startLine": 204,
              "startColumn": 47,
              "endLine": 204,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    public void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doAfterResponse(addr, request, response);\n            }\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "RemotingCommand request",
              "startLine": 43,
              "startColumn": 52,
              "endLine": 43,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doAfterResponse(String remoteAddr, RemotingCommand request, RemotingCommand response) {\n        if (RequestCode.GET_ROUTEINFO_BY_TOPIC != request.getCode()) {\n            return;\n        }"
            },
            {
              "step": 25,
              "variableName": "request",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 34,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 26,
              "variableName": "getExtFields",
              "startLine": 604,
              "startColumn": 36,
              "endLine": 604,
              "endColumn": 48,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.suspended = suspended;\n    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n"
            },
            {
              "step": 27,
              "variableName": "extFields",
              "startLine": 605,
              "startColumn": 16,
              "endLine": 605,
              "endColumn": 25,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n\n    public void setExtFields(HashMap<String, String> extFields) {"
            },
            {
              "step": 28,
              "variableName": "extFields",
              "startLine": 605,
              "startColumn": 16,
              "endLine": 605,
              "endColumn": 25,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n\n    public void setExtFields(HashMap<String, String> extFields) {"
            },
            {
              "step": 29,
              "variableName": "request.getExtFields()",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 30,
              "variableName": "request.getExtFields().get(MixAll.ZONE_NAME)",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 31,
              "variableName": "zoneName",
              "startLine": 59,
              "startColumn": 59,
              "endLine": 59,
              "endColumn": 67,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "            return;\n        }\n        TopicRouteData topicRouteData = RemotingSerializable.decode(response.getBody(), TopicRouteData.class);\n        response.setBody(filterByZoneName(topicRouteData, zoneName).encode());\n    }\n\n    private TopicRouteData filterByZoneName(TopicRouteData topicRouteData, String zoneName) {"
            },
            {
              "step": 32,
              "variableName": "String zoneName",
              "startLine": 62,
              "startColumn": 76,
              "endLine": 62,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "        response.setBody(filterByZoneName(topicRouteData, zoneName).encode());\n    }\n\n    private TopicRouteData filterByZoneName(TopicRouteData topicRouteData, String zoneName) {\n        List<BrokerData> brokerDataReserved = new ArrayList<>();\n        Map<String, BrokerData> brokerDataRemoved = new HashMap<>();\n        for (BrokerData brokerData : topicRouteData.getBrokerDatas()) {"
            },
            {
              "step": 33,
              "variableName": "zoneName",
              "startLine": 71,
              "startColumn": 75,
              "endLine": 71,
              "endColumn": 83,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "",
              "code": "            }\n            //master down, consume from slave. break nearby route rule.\n            if (brokerData.getBrokerAddrs().get(MixAll.MASTER_ID) == null\n                || StringUtils.equalsIgnoreCase(brokerData.getZoneName(), zoneName)) {\n                brokerDataReserved.add(brokerData);\n            } else {\n                brokerDataRemoved.put(brokerData.getBrokerName(), brokerData);"
            }
          ],
          "label": "No",
          "probability": 0.15204712748527527
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 37,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        try {\n            Mac mac = Mac.getInstance(algorithm.toString());\n            mac.init(new SecretKeySpec(key, algorithm.toString()));\n            return mac.doFinal(data);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 1,
              "variableName": "sign(data, key.getBytes(charset), algorithm)",
              "startLine": 80,
              "startColumn": 32,
              "endLine": 80,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)\n        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());"
            },
            {
              "step": 2,
              "variableName": "Base64.encodeBase64(signature)",
              "startLine": 81,
              "startColumn": 31,
              "endLine": 81,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 3,
              "variableName": "new String(Base64.encodeBase64(signature), DEFAULT_CHARSET)",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 4,
              "variableName": "signAndBase64Encode(data, key, algorithm, charset)",
              "startLine": 74,
              "startColumn": 16,
              "endLine": 74,
              "endColumn": 66,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,\n        Charset charset) throws AclException {\n        return signAndBase64Encode(data, key, algorithm, charset);\n    }\n\n    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)"
            },
            {
              "step": 5,
              "variableName": "calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String key) throws AclException {\n        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n    }\n\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,"
            },
            {
              "step": 6,
              "variableName": "AclSigner.calSignature(data, secretKey)",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 55,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String secretKey) {\n        return AclSigner.calSignature(data, secretKey);\n    }\n\n    public static void IPv6AddressCheck(String netAddress) {"
            },
            {
              "step": 7,
              "variableName": "AclUtils.calSignature(total, sessionCredentials.getSecretKey())",
              "startLine": 45,
              "startColumn": 28,
              "endLine": 45,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "            request.addExtField(SECURITY_TOKEN, sessionCredentials.getSecurityToken());\n        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "signature",
              "startLine": 46,
              "startColumn": 40,
              "endLine": 46,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "String value",
              "startLine": 612,
              "startColumn": 41,
              "endLine": 612,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 10,
              "variableName": "value",
              "startLine": 616,
              "startColumn": 28,
              "endLine": 616,
              "endColumn": 33,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 11,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 12,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 13,
              "variableName": "addExtField",
              "startLine": 612,
              "startColumn": 17,
              "endLine": 612,
              "endColumn": 28,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 14,
              "variableName": "request",
              "startLine": 46,
              "startColumn": 9,
              "endLine": 46,
              "endColumn": 16,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "RemotingCommand request",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        // Add AccessKey and SecurityToken into signature calculating.\n        request.addExtField(ACCESS_KEY, sessionCredentials.getAccessKey());\n        // The SecurityToken value is unnecessary,user can choose this one."
            },
            {
              "step": 16,
              "variableName": "request",
              "startLine": 196,
              "startColumn": 47,
              "endLine": 196,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);\n            }\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "RemotingCommand request",
              "startLine": 193,
              "startColumn": 50,
              "endLine": 193,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);"
            },
            {
              "step": 18,
              "variableName": "request",
              "startLine": 826,
              "startColumn": 45,
              "endLine": 826,
              "endColumn": 52,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        final long timeoutMillis) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String channelRemoteAddr = RemotingHelper.parseChannelRemoteAddr(channel);\n        doBeforeRpcHooks(channelRemoteAddr, request);\n\n        return super.invokeImpl(channel, request, timeoutMillis).thenCompose(responseFuture -> {\n            RemotingCommand response = responseFuture.getResponseCommand();"
            },
            {
              "step": 19,
              "variableName": "request : RemotingCommand [extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 20,
              "variableName": "...->... : new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 21,
              "variableName": "parameter this : new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 22,
              "variableName": "request",
              "startLine": 870,
              "startColumn": 52,
              "endLine": 870,
              "endColumn": 59,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }\n        });\n    }"
            },
            {
              "step": 23,
              "variableName": "request",
              "startLine": 870,
              "startColumn": 52,
              "endLine": 870,
              "endColumn": 59,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }\n        });\n    }"
            },
            {
              "step": 24,
              "variableName": "RemotingCommand request",
              "startLine": 201,
              "startColumn": 46,
              "endLine": 201,
              "endColumn": 69,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    public void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doAfterResponse(addr, request, response);"
            },
            {
              "step": 25,
              "variableName": "request",
              "startLine": 204,
              "startColumn": 47,
              "endLine": 204,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    public void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doAfterResponse(addr, request, response);\n            }\n        }\n    }"
            },
            {
              "step": 26,
              "variableName": "RemotingCommand request",
              "startLine": 43,
              "startColumn": 52,
              "endLine": 43,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doAfterResponse(String remoteAddr, RemotingCommand request, RemotingCommand response) {\n        if (RequestCode.GET_ROUTEINFO_BY_TOPIC != request.getCode()) {\n            return;\n        }"
            },
            {
              "step": 27,
              "variableName": "request",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 34,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 28,
              "variableName": "getExtFields",
              "startLine": 604,
              "startColumn": 36,
              "endLine": 604,
              "endColumn": 48,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.suspended = suspended;\n    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n"
            },
            {
              "step": 29,
              "variableName": "extFields",
              "startLine": 605,
              "startColumn": 16,
              "endLine": 605,
              "endColumn": 25,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n\n    public void setExtFields(HashMap<String, String> extFields) {"
            },
            {
              "step": 30,
              "variableName": "extFields",
              "startLine": 605,
              "startColumn": 16,
              "endLine": 605,
              "endColumn": 25,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n\n    public void setExtFields(HashMap<String, String> extFields) {"
            },
            {
              "step": 31,
              "variableName": "request.getExtFields()",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 32,
              "variableName": "request.getExtFields().get(MixAll.ZONE_NAME)",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 33,
              "variableName": "zoneName",
              "startLine": 59,
              "startColumn": 59,
              "endLine": 59,
              "endColumn": 67,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "            return;\n        }\n        TopicRouteData topicRouteData = RemotingSerializable.decode(response.getBody(), TopicRouteData.class);\n        response.setBody(filterByZoneName(topicRouteData, zoneName).encode());\n    }\n\n    private TopicRouteData filterByZoneName(TopicRouteData topicRouteData, String zoneName) {"
            },
            {
              "step": 34,
              "variableName": "String zoneName",
              "startLine": 62,
              "startColumn": 76,
              "endLine": 62,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "        response.setBody(filterByZoneName(topicRouteData, zoneName).encode());\n    }\n\n    private TopicRouteData filterByZoneName(TopicRouteData topicRouteData, String zoneName) {\n        List<BrokerData> brokerDataReserved = new ArrayList<>();\n        Map<String, BrokerData> brokerDataRemoved = new HashMap<>();\n        for (BrokerData brokerData : topicRouteData.getBrokerDatas()) {"
            },
            {
              "step": 35,
              "variableName": "zoneName",
              "startLine": 71,
              "startColumn": 75,
              "endLine": 71,
              "endColumn": 83,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "",
              "code": "            }\n            //master down, consume from slave. break nearby route rule.\n            if (brokerData.getBrokerAddrs().get(MixAll.MASTER_ID) == null\n                || StringUtils.equalsIgnoreCase(brokerData.getZoneName(), zoneName)) {\n                brokerDataReserved.add(brokerData);\n            } else {\n                brokerDataRemoved.put(brokerData.getBrokerName(), brokerData);"
            }
          ],
          "label": "No",
          "probability": 0.15204712748527527
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "mac.doFinal(data)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 37,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        try {\n            Mac mac = Mac.getInstance(algorithm.toString());\n            mac.init(new SecretKeySpec(key, algorithm.toString()));\n            return mac.doFinal(data);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 1,
              "variableName": "sign(data, key.getBytes(charset), algorithm)",
              "startLine": 80,
              "startColumn": 32,
              "endLine": 80,
              "endColumn": 76,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)\n        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());"
            },
            {
              "step": 2,
              "variableName": "Base64.encodeBase64(signature)",
              "startLine": 81,
              "startColumn": 31,
              "endLine": 81,
              "endColumn": 61,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "byte[]",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 3,
              "variableName": "new String(Base64.encodeBase64(signature), DEFAULT_CHARSET)",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 79,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "        throws AclException {\n        try {\n            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n        } catch (Exception e) {\n            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n            log.error(message, e);"
            },
            {
              "step": 4,
              "variableName": "signAndBase64Encode(data, key, algorithm, charset)",
              "startLine": 74,
              "startColumn": 16,
              "endLine": 74,
              "endColumn": 66,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,\n        Charset charset) throws AclException {\n        return signAndBase64Encode(data, key, algorithm, charset);\n    }\n\n    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)"
            },
            {
              "step": 5,
              "variableName": "calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String key) throws AclException {\n        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n    }\n\n    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,"
            },
            {
              "step": 6,
              "variableName": "AclSigner.calSignature(data, secretKey)",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 55,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java",
              "type": "String",
              "code": "    }\n\n    public static String calSignature(byte[] data, String secretKey) {\n        return AclSigner.calSignature(data, secretKey);\n    }\n\n    public static void IPv6AddressCheck(String netAddress) {"
            },
            {
              "step": 7,
              "variableName": "AclUtils.calSignature(total, sessionCredentials.getSecretKey())",
              "startLine": 45,
              "startColumn": 28,
              "endLine": 45,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "            request.addExtField(SECURITY_TOKEN, sessionCredentials.getSecurityToken());\n        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "signature",
              "startLine": 46,
              "startColumn": 40,
              "endLine": 46,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "String value",
              "startLine": 612,
              "startColumn": 41,
              "endLine": 612,
              "endColumn": 53,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 10,
              "variableName": "value",
              "startLine": 616,
              "startColumn": 28,
              "endLine": 616,
              "endColumn": 33,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 11,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 12,
              "variableName": "extFields",
              "startLine": 616,
              "startColumn": 9,
              "endLine": 616,
              "endColumn": 18,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }\n        extFields.put(key, value);\n    }\n\n    public void addExtFieldIfNotExist(String key, String value) {"
            },
            {
              "step": 13,
              "variableName": "addExtField",
              "startLine": 612,
              "startColumn": 17,
              "endLine": 612,
              "endColumn": 28,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.extFields = extFields;\n    }\n\n    public void addExtField(String key, String value) {\n        if (null == extFields) {\n            extFields = new HashMap<>(256);\n        }"
            },
            {
              "step": 14,
              "variableName": "request",
              "startLine": 46,
              "startColumn": 9,
              "endLine": 46,
              "endColumn": 16,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n        byte[] total = AclUtils.combineRequestContent(request, parseRequestContent(request));\n        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());\n        request.addExtField(SIGNATURE, signature);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "RemotingCommand request",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        // Add AccessKey and SecurityToken into signature calculating.\n        request.addExtField(ACCESS_KEY, sessionCredentials.getAccessKey());\n        // The SecurityToken value is unnecessary,user can choose this one."
            },
            {
              "step": 16,
              "variableName": "request",
              "startLine": 196,
              "startColumn": 47,
              "endLine": 196,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);\n            }\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "RemotingCommand request",
              "startLine": 193,
              "startColumn": 50,
              "endLine": 193,
              "endColumn": 73,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doBeforeRequest(addr, request);"
            },
            {
              "step": 18,
              "variableName": "request",
              "startLine": 826,
              "startColumn": 45,
              "endLine": 826,
              "endColumn": 52,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        final long timeoutMillis) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String channelRemoteAddr = RemotingHelper.parseChannelRemoteAddr(channel);\n        doBeforeRpcHooks(channelRemoteAddr, request);\n\n        return super.invokeImpl(channel, request, timeoutMillis).thenCompose(responseFuture -> {\n            RemotingCommand response = responseFuture.getResponseCommand();"
            },
            {
              "step": 19,
              "variableName": "final RemotingCommand request",
              "startLine": 822,
              "startColumn": 80,
              "endLine": 822,
              "endColumn": 109,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public CompletableFuture<ResponseFuture> invokeImpl(final Channel channel, final RemotingCommand request,\n        final long timeoutMillis) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String channelRemoteAddr = RemotingHelper.parseChannelRemoteAddr(channel);"
            },
            {
              "step": 20,
              "variableName": "request",
              "startLine": 502,
              "startColumn": 40,
              "endLine": 502,
              "endColumn": 47,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        final long timeoutMillis)\n        throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException {\n        try {\n            return invokeImpl(channel, request, timeoutMillis).thenApply(ResponseFuture::getResponseCommand)\n                .get(timeoutMillis, TimeUnit.MILLISECONDS);\n        } catch (ExecutionException e) {\n            throw new RemotingSendRequestException(channel.remoteAddress().toString(), e.getCause());"
            },
            {
              "step": 21,
              "variableName": "final RemotingCommand request",
              "startLine": 498,
              "startColumn": 66,
              "endLine": 498,
              "endColumn": 95,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    public RemotingCommand invokeSyncImpl(final Channel channel, final RemotingCommand request,\n        final long timeoutMillis)\n        throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException {\n        try {"
            },
            {
              "step": 22,
              "variableName": "request",
              "startLine": 565,
              "startColumn": 73,
              "endLine": 565,
              "endColumn": 80,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                if (left <= 0) {\n                    throw new RemotingTimeoutException(\"invokeSync call the addr[\" + channelRemoteAddr + \"] timeout\");\n                }\n                RemotingCommand response = this.invokeSyncImpl(channel, request, left);\n                updateChannelLastResponseTime(addr);\n                return response;\n            } catch (RemotingSendRequestException e) {"
            },
            {
              "step": 23,
              "variableName": "final RemotingCommand request",
              "startLine": 552,
              "startColumn": 52,
              "endLine": 552,
              "endColumn": 81,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public RemotingCommand invokeSync(String addr, final RemotingCommand request, long timeoutMillis)\n        throws InterruptedException, RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException {\n        long beginStartTime = System.currentTimeMillis();\n        final Channel channel = this.getAndCreateChannel(addr);"
            },
            {
              "step": 24,
              "variableName": "request",
              "startLine": 2290,
              "startColumn": 88,
              "endLine": 2290,
              "endColumn": 95,
              "uri": "rocketmq-rocketmq-all-5.3.2/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (nameServerAddressList != null) {\n            RemotingCommand errResponse = null;\n            for (String namesrvAddr : nameServerAddressList) {\n                RemotingCommand response = this.remotingClient.invokeSync(namesrvAddr, request, timeoutMillis);\n                assert response != null;\n                switch (response.getCode()) {\n                    case ResponseCode.SUCCESS: {"
            },
            {
              "step": 25,
              "variableName": "request",
              "startLine": 2290,
              "startColumn": 88,
              "endLine": 2290,
              "endColumn": 95,
              "uri": "rocketmq-rocketmq-all-5.3.2/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (nameServerAddressList != null) {\n            RemotingCommand errResponse = null;\n            for (String namesrvAddr : nameServerAddressList) {\n                RemotingCommand response = this.remotingClient.invokeSync(namesrvAddr, request, timeoutMillis);\n                assert response != null;\n                switch (response.getCode()) {\n                    case ResponseCode.SUCCESS: {"
            },
            {
              "step": 26,
              "variableName": "final RemotingCommand request",
              "startLine": 552,
              "startColumn": 52,
              "endLine": 552,
              "endColumn": 81,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public RemotingCommand invokeSync(String addr, final RemotingCommand request, long timeoutMillis)\n        throws InterruptedException, RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException {\n        long beginStartTime = System.currentTimeMillis();\n        final Channel channel = this.getAndCreateChannel(addr);"
            },
            {
              "step": 27,
              "variableName": "request",
              "startLine": 565,
              "startColumn": 73,
              "endLine": 565,
              "endColumn": 80,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                if (left <= 0) {\n                    throw new RemotingTimeoutException(\"invokeSync call the addr[\" + channelRemoteAddr + \"] timeout\");\n                }\n                RemotingCommand response = this.invokeSyncImpl(channel, request, left);\n                updateChannelLastResponseTime(addr);\n                return response;\n            } catch (RemotingSendRequestException e) {"
            },
            {
              "step": 28,
              "variableName": "final RemotingCommand request",
              "startLine": 498,
              "startColumn": 66,
              "endLine": 498,
              "endColumn": 95,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    public RemotingCommand invokeSyncImpl(final Channel channel, final RemotingCommand request,\n        final long timeoutMillis)\n        throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException {\n        try {"
            },
            {
              "step": 29,
              "variableName": "request",
              "startLine": 502,
              "startColumn": 40,
              "endLine": 502,
              "endColumn": 47,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        final long timeoutMillis)\n        throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException {\n        try {\n            return invokeImpl(channel, request, timeoutMillis).thenApply(ResponseFuture::getResponseCommand)\n                .get(timeoutMillis, TimeUnit.MILLISECONDS);\n        } catch (ExecutionException e) {\n            throw new RemotingSendRequestException(channel.remoteAddress().toString(), e.getCause());"
            },
            {
              "step": 30,
              "variableName": "final RemotingCommand request",
              "startLine": 822,
              "startColumn": 80,
              "endLine": 822,
              "endColumn": 109,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public CompletableFuture<ResponseFuture> invokeImpl(final Channel channel, final RemotingCommand request,\n        final long timeoutMillis) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String channelRemoteAddr = RemotingHelper.parseChannelRemoteAddr(channel);"
            },
            {
              "step": 31,
              "variableName": "request : RemotingCommand [extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 32,
              "variableName": "...->... : new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 33,
              "variableName": "parameter this : new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "startLine": 868,
              "startColumn": 25,
              "endLine": 872,
              "endColumn": 10,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "                return FutureUtils.completeExceptionally(new RemotingSendRequestException(channelRemoteAddr, new Throwable(\"Receive GO_AWAY from channelId=\" + channel.id())));\n            }\n            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }"
            },
            {
              "step": 34,
              "variableName": "request",
              "startLine": 870,
              "startColumn": 52,
              "endLine": 870,
              "endColumn": 59,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "new BiConsumer<ResponseFuture,Throwable>(...) { ... } [request, extFields, <map.value>] : String",
              "code": "            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }\n        });\n    }"
            },
            {
              "step": 35,
              "variableName": "request",
              "startLine": 870,
              "startColumn": 52,
              "endLine": 870,
              "endColumn": 59,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "            return CompletableFuture.completedFuture(responseFuture);\n        }).whenComplete((v, t) -> {\n            if (t == null) {\n                doAfterRpcHooks(channelRemoteAddr, request, v.getResponseCommand());\n            }\n        });\n    }"
            },
            {
              "step": 36,
              "variableName": "RemotingCommand request",
              "startLine": 201,
              "startColumn": 46,
              "endLine": 201,
              "endColumn": 69,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        }\n    }\n\n    public void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doAfterResponse(addr, request, response);"
            },
            {
              "step": 37,
              "variableName": "request",
              "startLine": 204,
              "startColumn": 47,
              "endLine": 204,
              "endColumn": 54,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    public void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n        if (rpcHooks.size() > 0) {\n            for (RPCHook rpcHook : rpcHooks) {\n                rpcHook.doAfterResponse(addr, request, response);\n            }\n        }\n    }"
            },
            {
              "step": 38,
              "variableName": "RemotingCommand request",
              "startLine": 43,
              "startColumn": 52,
              "endLine": 43,
              "endColumn": 75,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void doAfterResponse(String remoteAddr, RemotingCommand request, RemotingCommand response) {\n        if (RequestCode.GET_ROUTEINFO_BY_TOPIC != request.getCode()) {\n            return;\n        }"
            },
            {
              "step": 39,
              "variableName": "request",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 34,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 40,
              "variableName": "getExtFields",
              "startLine": 604,
              "startColumn": 36,
              "endLine": 604,
              "endColumn": 48,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "        this.suspended = suspended;\n    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n"
            },
            {
              "step": 41,
              "variableName": "extFields",
              "startLine": 605,
              "startColumn": 16,
              "endLine": 605,
              "endColumn": 25,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "RemotingCommand [extFields, <map.value>] : String",
              "code": "    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n\n    public void setExtFields(HashMap<String, String> extFields) {"
            },
            {
              "step": 42,
              "variableName": "extFields",
              "startLine": 605,
              "startColumn": 16,
              "endLine": 605,
              "endColumn": 25,
              "uri": "rocketmq-rocketmq-all-5.3.2/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    public HashMap<String, String> getExtFields() {\n        return extFields;\n    }\n\n    public void setExtFields(HashMap<String, String> extFields) {"
            },
            {
              "step": 43,
              "variableName": "request.getExtFields()",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 49,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 44,
              "variableName": "request.getExtFields().get(MixAll.ZONE_NAME)",
              "startLine": 54,
              "startColumn": 27,
              "endLine": 54,
              "endColumn": 71,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "        if (!zoneMode) {\n            return;\n        }\n        String zoneName = request.getExtFields().get(MixAll.ZONE_NAME);\n        if (StringUtils.isBlank(zoneName)) {\n            return;\n        }"
            },
            {
              "step": 45,
              "variableName": "zoneName",
              "startLine": 59,
              "startColumn": 59,
              "endLine": 59,
              "endColumn": 67,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "            return;\n        }\n        TopicRouteData topicRouteData = RemotingSerializable.decode(response.getBody(), TopicRouteData.class);\n        response.setBody(filterByZoneName(topicRouteData, zoneName).encode());\n    }\n\n    private TopicRouteData filterByZoneName(TopicRouteData topicRouteData, String zoneName) {"
            },
            {
              "step": 46,
              "variableName": "String zoneName",
              "startLine": 62,
              "startColumn": 76,
              "endLine": 62,
              "endColumn": 91,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "String",
              "code": "        response.setBody(filterByZoneName(topicRouteData, zoneName).encode());\n    }\n\n    private TopicRouteData filterByZoneName(TopicRouteData topicRouteData, String zoneName) {\n        List<BrokerData> brokerDataReserved = new ArrayList<>();\n        Map<String, BrokerData> brokerDataRemoved = new HashMap<>();\n        for (BrokerData brokerData : topicRouteData.getBrokerDatas()) {"
            },
            {
              "step": 47,
              "variableName": "zoneName",
              "startLine": 71,
              "startColumn": 75,
              "endLine": 71,
              "endColumn": 83,
              "uri": "rocketmq-rocketmq-all-5.3.2/namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java",
              "type": "",
              "code": "            }\n            //master down, consume from slave. break nearby route rule.\n            if (brokerData.getBrokerAddrs().get(MixAll.MASTER_ID) == null\n                || StringUtils.equalsIgnoreCase(brokerData.getZoneName(), zoneName)) {\n                brokerDataReserved.add(brokerData);\n            } else {\n                brokerDataRemoved.put(brokerData.getBrokerName(), brokerData);"
            }
          ],
          "label": "No",
          "probability": 0.15204712748527527
        }
      ]
    }
  ]
}