{
  "201": [
    {
      "resultIndex": 0,
      "fileName": "DirectAuthorizationService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ClientAccessToken",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            },
            {
              "step": 1,
              "variableName": "Response.ok(clientToken)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ResponseBuilder",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            },
            {
              "step": 2,
              "variableName": "Response.ok(clientToken).build()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
              "type": "ClientAccessToken",
              "code": "            serverToken.getEncodedToken() != null ? serverToken.getEncodedToken() : serverToken.getTokenKey();\n        ClientAccessToken clientToken = new ClientAccessToken(serverToken.getTokenType(),\n                                                              tokenKey);\n        clientToken.setRefreshToken(serverToken.getRefreshToken());\n        if (supportOptionalParams) {\n            clientToken.setExpiresIn(serverToken.getExpiresIn());\n            List<OAuthPermission> perms = serverToken.getScopes();"
            },
            {
              "step": 1,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
              "type": "ClientAccessToken",
              "code": "            }\n            clientToken.setParameters(new HashMap<String, String>(serverToken.getParameters()));\n        }\n        return clientToken;\n    }\n\n    public static JwsSignatureProvider getClientSecretSignatureProvider(String clientSecret) {"
            },
            {
              "step": 2,
              "variableName": "OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters())",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ClientAccessToken",
              "code": "        reg.setRequestedScope(requestedScope);\n        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ClientAccessToken",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            },
            {
              "step": 4,
              "variableName": "Response.ok(clientToken)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ResponseBuilder",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            },
            {
              "step": 5,
              "variableName": "Response.ok(clientToken).build()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
              "type": "ClientAccessToken",
              "code": "                                                              tokenKey);\n        clientToken.setRefreshToken(serverToken.getRefreshToken());\n        if (supportOptionalParams) {\n            clientToken.setExpiresIn(serverToken.getExpiresIn());\n            List<OAuthPermission> perms = serverToken.getScopes();\n            String scopeString = OAuthUtils.convertPermissionsToScope(perms);\n            if (!StringUtils.isEmpty(scopeString)) {"
            },
            {
              "step": 1,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
              "type": "ClientAccessToken",
              "code": "            }\n            clientToken.setParameters(new HashMap<String, String>(serverToken.getParameters()));\n        }\n        return clientToken;\n    }\n\n    public static JwsSignatureProvider getClientSecretSignatureProvider(String clientSecret) {"
            },
            {
              "step": 2,
              "variableName": "OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters())",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ClientAccessToken",
              "code": "        reg.setRequestedScope(requestedScope);\n        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ClientAccessToken",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            },
            {
              "step": 4,
              "variableName": "Response.ok(clientToken)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ResponseBuilder",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            },
            {
              "step": 5,
              "variableName": "Response.ok(clientToken).build()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
              "type": "ClientAccessToken",
              "code": "            List<OAuthPermission> perms = serverToken.getScopes();\n            String scopeString = OAuthUtils.convertPermissionsToScope(perms);\n            if (!StringUtils.isEmpty(scopeString)) {\n                clientToken.setApprovedScope(scopeString);\n            }\n            clientToken.setParameters(new HashMap<String, String>(serverToken.getParameters()));\n        }"
            },
            {
              "step": 1,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
              "type": "ClientAccessToken",
              "code": "            }\n            clientToken.setParameters(new HashMap<String, String>(serverToken.getParameters()));\n        }\n        return clientToken;\n    }\n\n    public static JwsSignatureProvider getClientSecretSignatureProvider(String clientSecret) {"
            },
            {
              "step": 2,
              "variableName": "OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters())",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ClientAccessToken",
              "code": "        reg.setRequestedScope(requestedScope);\n        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "clientToken",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ClientAccessToken",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            },
            {
              "step": 4,
              "variableName": "Response.ok(clientToken)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "ResponseBuilder",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            },
            {
              "step": 5,
              "variableName": "Response.ok(clientToken).build()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/DirectAuthorizationService.java",
              "type": "",
              "code": "        reg.setApprovedScope(requestedScope);\n        ServerAccessToken token = getDataProvider().createAccessToken(reg);\n        ClientAccessToken clientToken = OAuthUtils.toClientAccessToken(token, isWriteOptionalParameters());\n        return Response.ok(clientToken).build();\n    }\n\n    protected SecurityContext getAndValidateSecurityContext(MultivaluedMap<String, String> params) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "MetadataService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "document",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/staxutils/W3CDOMStreamWriter.java",
              "type": "Document",
              "code": "    }\n\n    public Document getDocument() {\n        return document;\n    }\n\n    public void writeStartElement(String local) throws XMLStreamException {"
            },
            {
              "step": 1,
              "variableName": "writer.getDocument()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "            LOG.debug(\"***************** unsigned ****************\");\n        }\n\n        Document doc = writer.getDocument();\n\n        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);"
            },
            {
              "step": 2,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }\n\n    private void writeSAMLMetadata("
            },
            {
              "step": 3,
              "variableName": "metadataWriter.getMetaData(rawPa",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "",
              "code": "            if (addEndpointAddressToContext) {\n                Message message = JAXRSUtils.getCurrentMessage();\n                String rawPath = (String)message.get(\"http.base.path\");\n                return metadataWriter.getMetaData(rawPath + serviceAddress,\n                                                  rawPath + assertionConsumerServiceAddress,\n                                                  rawPath + logoutServiceAddress,\n                                                  privateKey, issuerCerts[0],"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        Document doc = writer.getDocument();\n\n        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }"
            },
            {
              "step": 1,
              "variableName": "Document doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "    }\n\n    private static Document signMetaInfo(X509Certificate signingCert, Key signingKey,\n                                         Document doc, String referenceID\n    ) throws Exception {\n        final String signatureMethod;\n        if (\"SHA1withDSA\".equals(signingCert.getSigAlgName())) {"
            },
            {
              "step": 2,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        signature.sign(dsc);\n\n        // Output the resulting document.\n        return doc;\n    }\n\n}"
            },
            {
              "step": 3,
              "variableName": "signMetaInfo(signingCert, signingKey, doc, referenceID)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        Document doc = writer.getDocument();\n\n        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }"
            },
            {
              "step": 4,
              "variableName": "metadataWriter.getMetaData(rawPa",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "",
              "code": "            if (addEndpointAddressToContext) {\n                Message message = JAXRSUtils.getCurrentMessage();\n                String rawPath = (String)message.get(\"http.base.path\");\n                return metadataWriter.getMetaData(rawPath + serviceAddress,\n                                                  rawPath + assertionConsumerServiceAddress,\n                                                  rawPath + logoutServiceAddress,\n                                                  privateKey, issuerCerts[0],"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }\n\n    private void writeSAMLMetadata("
            },
            {
              "step": 1,
              "variableName": "metadataWriter.getMetaData(rawPa",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "",
              "code": "            if (addEndpointAddressToContext) {\n                Message message = JAXRSUtils.getCurrentMessage();\n                String rawPath = (String)message.get(\"http.base.path\");\n                return metadataWriter.getMetaData(rawPath + serviceAddress,\n                                                  rawPath + assertionConsumerServiceAddress,\n                                                  rawPath + logoutServiceAddress,\n                                                  privateKey, issuerCerts[0],"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        // Create a DOMSignContext and specify the RSA PrivateKey and\n        // location of the resulting XMLSignature's parent element.\n        //DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());\n        DOMSignContext dsc = new DOMSignContext(signingKey, doc.getDocumentElement());\n        dsc.setIdAttributeNS(doc.getDocumentElement(), null, \"ID\");\n        dsc.setNextSibling(doc.getDocumentElement().getFirstChild());\n"
            },
            {
              "step": 1,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        signature.sign(dsc);\n\n        // Output the resulting document.\n        return doc;\n    }\n\n}"
            },
            {
              "step": 2,
              "variableName": "signMetaInfo(signingCert, signingKey, doc, referenceID)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        Document doc = writer.getDocument();\n\n        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }"
            },
            {
              "step": 3,
              "variableName": "metadataWriter.getMetaData(rawPa",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "",
              "code": "            if (addEndpointAddressToContext) {\n                Message message = JAXRSUtils.getCurrentMessage();\n                String rawPath = (String)message.get(\"http.base.path\");\n                return metadataWriter.getMetaData(rawPath + serviceAddress,\n                                                  rawPath + assertionConsumerServiceAddress,\n                                                  rawPath + logoutServiceAddress,\n                                                  privateKey, issuerCerts[0],"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "MetadataService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "document",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/staxutils/W3CDOMStreamWriter.java",
              "type": "Document",
              "code": "    }\n\n    public Document getDocument() {\n        return document;\n    }\n\n    public void writeStartElement(String local) throws XMLStreamException {"
            },
            {
              "step": 1,
              "variableName": "writer.getDocument()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "            LOG.debug(\"***************** unsigned ****************\");\n        }\n\n        Document doc = writer.getDocument();\n\n        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);"
            },
            {
              "step": 2,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }\n\n    private void writeSAMLMetadata("
            },
            {
              "step": 3,
              "variableName": "metadataWriter.getM",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "Document",
              "code": "                                                  privateKey, issuerCerts[0],\n                                                  true);\n            }\n            Document metadata = metadataWriter.getMetaData(serviceAddress, assertionConsumerServiceAddress,\n                                              logoutServiceAddress,\n                                              privateKey, issuerCerts[0],\n                                              true);"
            },
            {
              "step": 4,
              "variableName": "metadata",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "",
              "code": "                // ignore\n            }\n\n            return metadata;\n        } catch (Exception ex) {\n            LOG.log(Level.FINE, ex.getMessage(), ex);\n            throw ExceptionUtils.toInternalServerErrorException(ex, null);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        Document doc = writer.getDocument();\n\n        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }"
            },
            {
              "step": 1,
              "variableName": "Document doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "    }\n\n    private static Document signMetaInfo(X509Certificate signingCert, Key signingKey,\n                                         Document doc, String referenceID\n    ) throws Exception {\n        final String signatureMethod;\n        if (\"SHA1withDSA\".equals(signingCert.getSigAlgName())) {"
            },
            {
              "step": 2,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        signature.sign(dsc);\n\n        // Output the resulting document.\n        return doc;\n    }\n\n}"
            },
            {
              "step": 3,
              "variableName": "signMetaInfo(signingCert, signingKey, doc, referenceID)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        Document doc = writer.getDocument();\n\n        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }"
            },
            {
              "step": 4,
              "variableName": "metadataWriter.getM",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "Document",
              "code": "                                                  privateKey, issuerCerts[0],\n                                                  true);\n            }\n            Document metadata = metadataWriter.getMetaData(serviceAddress, assertionConsumerServiceAddress,\n                                              logoutServiceAddress,\n                                              privateKey, issuerCerts[0],\n                                              true);"
            },
            {
              "step": 5,
              "variableName": "metadata",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "",
              "code": "                // ignore\n            }\n\n            return metadata;\n        } catch (Exception ex) {\n            LOG.log(Level.FINE, ex.getMessage(), ex);\n            throw ExceptionUtils.toInternalServerErrorException(ex, null);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }\n\n    private void writeSAMLMetadata("
            },
            {
              "step": 1,
              "variableName": "metadataWriter.getM",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "Document",
              "code": "                                                  privateKey, issuerCerts[0],\n                                                  true);\n            }\n            Document metadata = metadataWriter.getMetaData(serviceAddress, assertionConsumerServiceAddress,\n                                              logoutServiceAddress,\n                                              privateKey, issuerCerts[0],\n                                              true);"
            },
            {
              "step": 2,
              "variableName": "metadata",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "",
              "code": "                // ignore\n            }\n\n            return metadata;\n        } catch (Exception ex) {\n            LOG.log(Level.FINE, ex.getMessage(), ex);\n            throw ExceptionUtils.toInternalServerErrorException(ex, null);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        // Create a DOMSignContext and specify the RSA PrivateKey and\n        // location of the resulting XMLSignature's parent element.\n        //DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());\n        DOMSignContext dsc = new DOMSignContext(signingKey, doc.getDocumentElement());\n        dsc.setIdAttributeNS(doc.getDocumentElement(), null, \"ID\");\n        dsc.setNextSibling(doc.getDocumentElement().getFirstChild());\n"
            },
            {
              "step": 1,
              "variableName": "doc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        signature.sign(dsc);\n\n        // Output the resulting document.\n        return doc;\n    }\n\n}"
            },
            {
              "step": 2,
              "variableName": "signMetaInfo(signingCert, signingKey, doc, referenceID)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataWriter.java",
              "type": "Document",
              "code": "        Document doc = writer.getDocument();\n\n        if (signingKey != null) {\n            return signMetaInfo(signingCert, signingKey, doc, referenceID);\n        }\n        return doc;\n    }"
            },
            {
              "step": 3,
              "variableName": "metadataWriter.getM",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "Document",
              "code": "                                                  privateKey, issuerCerts[0],\n                                                  true);\n            }\n            Document metadata = metadataWriter.getMetaData(serviceAddress, assertionConsumerServiceAddress,\n                                              logoutServiceAddress,\n                                              privateKey, issuerCerts[0],\n                                              true);"
            },
            {
              "step": 4,
              "variableName": "metadata",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/MetadataService.java",
              "type": "",
              "code": "                // ignore\n            }\n\n            return metadata;\n        } catch (Exception ex) {\n            LOG.log(Level.FINE, ex.getMessage(), ex);\n            throw ExceptionUtils.toInternalServerErrorException(ex, null);"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "208": [
    {
      "resultIndex": 3,
      "fileName": "ServiceListJAASAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(HEADER_AUTHORIZATION)",
              "uri": "cxf-cxf-4.1.1/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/servicelist/ServiceListJAASAuthenticator.java",
              "type": "String",
              "code": "\n    public boolean authenticate(HttpServletRequest request, HttpServletResponse response) {\n        // Return immediately if the header is missing\n        String authHeader = request.getHeader(HEADER_AUTHORIZATION);\n        if (authHeader != null && authHeader.length() > 0) {\n\n            // Get the authType (Basic, Digest) and authInfo (user/password)"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "uri": "cxf-cxf-4.1.1/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/servicelist/ServiceListJAASAuthenticator.java",
              "type": "String",
              "code": "\n            // Get the authType (Basic, Digest) and authInfo (user/password)\n            // from the header\n            authHeader = authHeader.trim();\n            int blank = authHeader.indexOf(' ');\n            if (blank > 0) {\n                String authType = authHeader.substring(0, blank);"
            },
            {
              "step": 2,
              "variableName": "authHeader.trim()",
              "uri": "cxf-cxf-4.1.1/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/servicelist/ServiceListJAASAuthenticator.java",
              "type": "String",
              "code": "\n            // Get the authType (Basic, Digest) and authInfo (user/password)\n            // from the header\n            authHeader = authHeader.trim();\n            int blank = authHeader.indexOf(' ');\n            if (blank > 0) {\n                String authType = authHeader.substring(0, blank);"
            },
            {
              "step": 3,
              "variableName": "authHeader",
              "uri": "cxf-cxf-4.1.1/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/servicelist/ServiceListJAASAuthenticator.java",
              "type": "String",
              "code": "            authHeader = authHeader.trim();\n            int blank = authHeader.indexOf(' ');\n            if (blank > 0) {\n                String authType = authHeader.substring(0, blank);\n                String authInfo = authHeader.substring(blank).trim();\n\n"
            },
            {
              "step": 4,
              "variableName": "authHeader.substring(0, blank)",
              "uri": "cxf-cxf-4.1.1/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/servicelist/ServiceListJAASAuthenticator.java",
              "type": "String",
              "code": "            authHeader = authHeader.trim();\n            int blank = authHeader.indexOf(' ');\n            if (blank > 0) {\n                String authType = authHeader.substring(0, blank);\n                String authInfo = authHeader.substring(blank).trim();\n\n"
            },
            {
              "step": 5,
              "variableName": "authType",
              "uri": "cxf-cxf-4.1.1/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/servicelist/ServiceListJAASAuthenticator.java",
              "type": "",
              "code": "                String authInfo = authHeader.substring(blank).trim();\n\n\n                if (authType.equalsIgnoreCase(AUTHENTICATION_SCHEME_BASIC)) {\n                    try {\n                        String srcString = base64Decode(authInfo);\n"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 4,
      "fileName": "AbstractDelegatingLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "         */\n        if (Level.FINE.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "         */\n        if (Level.FINE.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "         */\n        if (Level.FINE.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "         */\n        if (Level.FINE.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.INFO.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.INFO.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.INFO.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.INFO.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.INFO.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.info(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.INFO.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.info(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.INFO.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.info(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.INFO.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.info(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.info(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, t);\n            }\n        } else if (Level.WARNING.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.info(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, t);\n            }\n        } else if (Level.WARNING.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.info(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, t);\n            }\n        } else if (Level.WARNING.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.info(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, t);\n            }\n        } else if (Level.WARNING.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.WARNING.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.warn(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.WARNING.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.warn(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.WARNING.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.warn(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.WARNING.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.warn(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.warn(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, t);\n            }\n        } else if (Level.FINER.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.warn(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, t);\n            }\n        } else if (Level.FINER.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.warn(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, t);\n            }\n        } else if (Level.FINER.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.warn(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, t);\n            }\n        } else if (Level.FINER.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.FINER.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.FINER.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.FINER.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.FINER.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.FINEST.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.FINEST.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.FINEST.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.FINEST.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.FINEST.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.FINEST.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.FINEST.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.FINEST.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, t);\n            }\n        } else if (Level.ALL.equals(level)) {\n            // should never occur, all is used to configure java.util.logging"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, t);\n            }\n        } else if (Level.ALL.equals(level)) {\n            // should never occur, all is used to configure java.util.logging"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, t);\n            }\n        } else if (Level.ALL.equals(level)) {\n            // should never occur, all is used to configure java.util.logging"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.trace(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, t);\n            }\n        } else if (Level.ALL.equals(level)) {\n            // should never occur, all is used to configure java.util.logging"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            // should never occur, all is used to configure java.util.logging\n            // but not accessible by the API Logger.xxx() API\n            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            // should never occur, all is used to configure java.util.logging\n            // but not accessible by the API Logger.xxx() API\n            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            // should never occur, all is used to configure java.util.logging\n            // but not accessible by the API Logger.xxx() API\n            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            // should never occur, all is used to configure java.util.logging\n            // but not accessible by the API Logger.xxx() API\n            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }\n        } else if (Level.SEVERE.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }\n        } else if (Level.SEVERE.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }\n        } else if (Level.SEVERE.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }\n        } else if (Level.SEVERE.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 17,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.SEVERE.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.SEVERE.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.SEVERE.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.SEVERE.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 18,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }\n        } else if (Level.CONFIG.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }\n        } else if (Level.CONFIG.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }\n        } else if (Level.CONFIG.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.error(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, t);\n            }\n        } else if (Level.CONFIG.equals(level)) {\n            if (locationAwareLogger == null) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 19,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.CONFIG.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.CONFIG.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.CONFIG.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            }\n        } else if (Level.CONFIG.equals(level)) {\n            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 20,
      "fileName": "Slf4jLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.OFF.equals(level)) {\n            // don't log"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 20,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 21,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 22,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 25,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 26,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 27,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 29,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 30,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 32,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 34,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 35,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.OFF.equals(level)) {\n            // don't log"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.OFF.equals(level)) {\n            // don't log"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            },
            {
              "step": 21,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);"
            },
            {
              "step": 22,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "new LogRecord(Level.WARNING, msg)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    @Override\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "LogRecord lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        throw new UnsupportedOperationException();\n    }\n\n    protected void doLog(LogRecord lr) {\n        lr.setLoggerName(getName());\n        String rbname = getResourceBundleName();\n        if (rbname != null) {"
            },
            {
              "step": 26,
              "variableName": "lr",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "            lr.setResourceBundleName(rbname);\n            lr.setResourceBundle(getResourceBundle());\n        }\n        internalLog(lr);\n    }\n\n    protected void doLog(LogRecord lr, String rbname) {"
            },
            {
              "step": 27,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        internalLog(lr);\n    }\n\n    protected void internalLog(LogRecord record) {\n        Filter filter = getFilter();\n        if (filter != null && !filter.isLoggable(record)) {\n            return;"
            },
            {
              "step": 28,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "LogRecord record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "\n    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {"
            },
            {
              "step": 30,
              "variableName": "record",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "LogRecord",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 31,
              "variableName": "record.getMessage()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "    protected abstract void internalLogFormatted(String msg, LogRecord record);\n\n    protected String formatMessage(LogRecord record) {\n        String format = record.getMessage();\n        ResourceBundle catalog = record.getResourceBundle();\n        if (catalog != null) {\n            try {"
            },
            {
              "step": 32,
              "variableName": "format",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        try {\n            Object[] parameters = record.getParameters();\n            if (parameters == null || parameters.length == 0) {\n                return format;\n            }\n            if (format.indexOf(\"{0\") >= 0 || format.indexOf(\"{1\") >= 0\n                        || format.indexOf(\"{2\") >= 0 || format.indexOf(\"{3\") >= 0) {"
            },
            {
              "step": 33,
              "variableName": "formatMessage(record)",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "        if (filter != null && !filter.isLoggable(record)) {\n            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/AbstractDelegatingLogger.java",
              "type": "String",
              "code": "            return;\n        }\n        String msg = formatMessage(record);\n        internalLogFormatted(msg, record);\n    }\n\n    protected abstract void internalLogFormatted(String msg, LogRecord record);"
            },
            {
              "step": 35,
              "variableName": "String msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "String",
              "code": "\n\n    @Override\n    protected void internalLogFormatted(String msg, LogRecord record) {\n\n        Level level = record.getLevel();\n        Throwable t = record.getThrown();"
            },
            {
              "step": 36,
              "variableName": "msg",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/logging/Slf4jLogger.java",
              "type": "",
              "code": "            if (locationAwareLogger == null) {\n                logger.debug(msg, t);\n            } else {\n                locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, t);\n            }\n        } else if (Level.OFF.equals(level)) {\n            // don't log"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 21,
      "fileName": "Base64Utility.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        if (JoseConstants.HEADER_JSON_WEB_KEY.equals(props.get(JoseConstants.RSSEC_KEY_STORE_TYPE))) {\n            JsonWebKey jwk = JwkUtils.loadJsonWebKey(m, props, KeyOperation.VERIFY, inHeaderKid);\n            if (jwk != null) {\n                SignatureAlgorithm signatureAlgo = getSignatureAlgorithm(m, props,\n                                                             SignatureAlgorithm.getAlgorithm(jwk.getAlgorithm()),"
            },
            {
              "step": 7,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    public static JsonWebKey loadJsonWebKey(Message m, Properties props, KeyOperation keyOper) {\n        return loadJsonWebKey(m, props, keyOper, null);\n    }\n    public static JsonWebKey loadJsonWebKey(Message m, Properties props, KeyOperation keyOper, String inHeaderKid) {\n        PrivateKeyPasswordProvider cb = KeyManagementUtils.loadPasswordProvider(m, props, keyOper);\n        JsonWebKeys jwkSet = loadJwkSet(m, props, cb);\n        final String kid;"
            },
            {
              "step": 8,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n    public static JsonWebKey loadJsonWebKey(Message m, Properties props, KeyOperation keyOper, String inHeaderKid) {\n        PrivateKeyPasswordProvider cb = KeyManagementUtils.loadPasswordProvider(m, props, keyOper);\n        JsonWebKeys jwkSet = loadJwkSet(m, props, cb);\n        final String kid;\n        if (inHeaderKid != null\n            && MessageUtils.getContextualBoolean(m, JoseConstants.RSSEC_ACCEPT_PUBLIC_KEY, false)) {"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    public static JsonWebKeys loadPublicJwkSet(Message m, Properties props) {\n        return loadJwkSet(m, props, null);\n    }\n    public static JsonWebKeys loadJwkSet(Message m, Properties props, PrivateKeyPasswordProvider cb) {\n        String key = (String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE);\n        JsonWebKeys jwkSet = null;\n        if (key != null && m != null) {"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "            }\n        }\n        if (jwkSet == null) {\n            jwkSet = loadJwkSet(props, m != null ? m.getExchange().getBus() : null, cb);\n            if (key != null && m != null) {\n                m.getExchange().put(key, jwkSet);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return jwkSet;\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, PrivateKeyPasswordProvider cb) {\n        JweDecryptionProvider decryption = cb != null\n            ? new AesCbcHmacJweDecryption(new PbesHmacAesWrapKeyDecryptionAlgorithm(\n                cb.getPassword(props))) : null;"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        JweDecryptionProvider decryption = cb != null\n            ? new AesCbcHmacJweDecryption(new PbesHmacAesWrapKeyDecryptionAlgorithm(\n                cb.getPassword(props))) : null;\n        return loadJwkSet(props, bus, decryption);\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionProvider jwe) {\n        String keyContent;"
            },
            {
              "step": 13,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                cb.getPassword(props))) : null;\n        return loadJwkSet(props, bus, decryption);\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionProvider jwe) {\n        String keyContent;\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        if (keyStoreLoc != null) {"
            },
            {
              "step": 14,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                throw new JwkException(ex);\n            }\n        } else {\n            keyContent = props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKSET);\n            if (keyContent == null) {\n                keyContent = props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKKEY);\n            }"
            },
            {
              "step": 15,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKSET)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "String",
              "code": "                throw new JwkException(ex);\n            }\n        } else {\n            keyContent = props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKSET);\n            if (keyContent == null) {\n                keyContent = props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKKEY);\n            }"
            },
            {
              "step": 16,
              "variableName": "keyContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (jwe != null) {\n            keyContent = jwe.decrypt(keyContent).getContentText();\n        }\n        JwkReaderWriter reader = new JwkReaderWriter();\n        if (props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKKEY) == null) {"
            },
            {
              "step": 17,
              "variableName": "String content",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/AbstractJweDecryption.java",
              "type": "String",
              "code": "        this.contentDecryptionAlgo = contentDecryptionAlgo;\n    }\n\n    public JweDecryptionOutput decrypt(String content) {\n        JweCompactConsumer consumer = new JweCompactConsumer(content);\n        byte[] cek = keyDecryptionAlgo.getDecryptedContentEncryptionKey(consumer.getJweDecryptionInput());\n        return doDecrypt(consumer.getJweDecryptionInput(), cek);"
            },
            {
              "step": 18,
              "variableName": "content",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/AbstractJweDecryption.java",
              "type": "String",
              "code": "    }\n\n    public JweDecryptionOutput decrypt(String content) {\n        JweCompactConsumer consumer = new JweCompactConsumer(content);\n        byte[] cek = keyDecryptionAlgo.getDecryptedContentEncryptionKey(consumer.getJweDecryptionInput());\n        return doDecrypt(consumer.getJweDecryptionInput(), cek);\n    }"
            },
            {
              "step": 19,
              "variableName": "String jweContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/JweCompactConsumer.java",
              "type": "String",
              "code": "    protected static final Logger LOG = LogUtils.getL7dLogger(JweCompactConsumer.class);\n    private final JweDecryptionInput jweDecryptionInput;\n\n    public JweCompactConsumer(String jweContent) {\n        String[] parts = JoseUtils.getCompactParts(jweContent);\n        if (parts.length != 5) {\n            LOG.warning(\"5 JWE parts are expected\");"
            },
            {
              "step": 20,
              "variableName": "jweContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/JweCompactConsumer.java",
              "type": "String",
              "code": "    private final JweDecryptionInput jweDecryptionInput;\n\n    public JweCompactConsumer(String jweContent) {\n        String[] parts = JoseUtils.getCompactParts(jweContent);\n        if (parts.length != 5) {\n            LOG.warning(\"5 JWE parts are expected\");\n            throw new JweException(JweException.Error.INVALID_COMPACT_JWE);"
            },
            {
              "step": 21,
              "variableName": "String compactContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    private JoseUtils() {\n\n    }\n    public static String[] getCompactParts(String compactContent) {\n        if (compactContent.startsWith(\"\\\"\") && compactContent.endsWith(\"\\\"\")) {\n            compactContent = compactContent.substring(1, compactContent.length() - 1);\n        }"
            },
            {
              "step": 22,
              "variableName": "compactContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        if (compactContent.startsWith(\"\\\"\") && compactContent.endsWith(\"\\\"\")) {\n            compactContent = compactContent.substring(1, compactContent.length() - 1);\n        }\n        return compactContent.split(\"\\\\.\");\n    }\n    public static void setJoseContextProperty(JoseHeaders headers) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();"
            },
            {
              "step": 23,
              "variableName": "compactContent.split(\"\\\\.\")",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String[]",
              "code": "        if (compactContent.startsWith(\"\\\"\") && compactContent.endsWith(\"\\\"\")) {\n            compactContent = compactContent.substring(1, compactContent.length() - 1);\n        }\n        return compactContent.split(\"\\\\.\");\n    }\n    public static void setJoseContextProperty(JoseHeaders headers) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();"
            },
            {
              "step": 24,
              "variableName": "JoseUtils.getCompactParts(jweContent)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/JweCompactConsumer.java",
              "type": "String[]",
              "code": "    private final JweDecryptionInput jweDecryptionInput;\n\n    public JweCompactConsumer(String jweContent) {\n        String[] parts = JoseUtils.getCompactParts(jweContent);\n        if (parts.length != 5) {\n            LOG.warning(\"5 JWE parts are expected\");\n            throw new JweException(JweException.Error.INVALID_COMPACT_JWE);"
            },
            {
              "step": 25,
              "variableName": "parts[0]",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/JweCompactConsumer.java",
              "type": "String",
              "code": "            throw new JweException(JweException.Error.INVALID_COMPACT_JWE);\n        }\n        try {\n            String headersJson = new String(Base64UrlUtility.decode(parts[0]));\n            byte[] encryptedCEK = Base64UrlUtility.decode(parts[1]);\n            byte[] initVector = Base64UrlUtility.decode(parts[2]);\n            byte[] encryptedContent = Base64UrlUtility.decode(parts[3]);"
            },
            {
              "step": 26,
              "variableName": "String encoded",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64UrlUtility.java",
              "type": "String",
              "code": "        //utility class, never constructed\n    }\n\n    public static byte[] decode(String encoded) throws Base64Exception {\n        return Base64Utility.decode(encoded, true);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "encoded",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64UrlUtility.java",
              "type": "String",
              "code": "    }\n\n    public static byte[] decode(String encoded) throws Base64Exception {\n        return Base64Utility.decode(encoded, true);\n    }\n\n    public static String encode(String str) {"
            },
            {
              "step": 28,
              "variableName": "String id",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java",
              "type": "String",
              "code": "        return decode(id, false);\n    }\n\n    public static byte[] decode(String id, boolean urlSafe) throws Base64Exception {\n        if (urlSafe) {\n            id = id.replace('-', '+').replace('_', '/');\n            switch (id.length() % 4) {"
            },
            {
              "step": 29,
              "variableName": "\"Invalid base64 encoded string : \" + id",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java",
              "type": "",
              "code": "            char[] cd = id.toCharArray();\n            return decodeChunk(cd, 0, cd.length);\n        } catch (Exception e) {\n            LOG.warning(\"Invalid base64 encoded string : \" + id);\n            throw new Base64Exception(new Message(\"BASE64_RUNTIME_EXCEPTION\", LOG), e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        if (JoseConstants.HEADER_JSON_WEB_KEY.equals(props.get(JoseConstants.RSSEC_KEY_STORE_TYPE))) {\n            JsonWebKey jwk = JwkUtils.loadJsonWebKey(m, props, KeyOperation.VERIFY, inHeaderKid);\n            if (jwk != null) {\n                SignatureAlgorithm signatureAlgo = getSignatureAlgorithm(m, props,\n                                                             SignatureAlgorithm.getAlgorithm(jwk.getAlgorithm()),"
            },
            {
              "step": 7,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    public static JsonWebKey loadJsonWebKey(Message m, Properties props, KeyOperation keyOper) {\n        return loadJsonWebKey(m, props, keyOper, null);\n    }\n    public static JsonWebKey loadJsonWebKey(Message m, Properties props, KeyOperation keyOper, String inHeaderKid) {\n        PrivateKeyPasswordProvider cb = KeyManagementUtils.loadPasswordProvider(m, props, keyOper);\n        JsonWebKeys jwkSet = loadJwkSet(m, props, cb);\n        final String kid;"
            },
            {
              "step": 8,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n    public static JsonWebKey loadJsonWebKey(Message m, Properties props, KeyOperation keyOper, String inHeaderKid) {\n        PrivateKeyPasswordProvider cb = KeyManagementUtils.loadPasswordProvider(m, props, keyOper);\n        JsonWebKeys jwkSet = loadJwkSet(m, props, cb);\n        final String kid;\n        if (inHeaderKid != null\n            && MessageUtils.getContextualBoolean(m, JoseConstants.RSSEC_ACCEPT_PUBLIC_KEY, false)) {"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    public static JsonWebKeys loadPublicJwkSet(Message m, Properties props) {\n        return loadJwkSet(m, props, null);\n    }\n    public static JsonWebKeys loadJwkSet(Message m, Properties props, PrivateKeyPasswordProvider cb) {\n        String key = (String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE);\n        JsonWebKeys jwkSet = null;\n        if (key != null && m != null) {"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "            }\n        }\n        if (jwkSet == null) {\n            jwkSet = loadJwkSet(props, m != null ? m.getExchange().getBus() : null, cb);\n            if (key != null && m != null) {\n                m.getExchange().put(key, jwkSet);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return jwkSet;\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, PrivateKeyPasswordProvider cb) {\n        JweDecryptionProvider decryption = cb != null\n            ? new AesCbcHmacJweDecryption(new PbesHmacAesWrapKeyDecryptionAlgorithm(\n                cb.getPassword(props))) : null;"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        JweDecryptionProvider decryption = cb != null\n            ? new AesCbcHmacJweDecryption(new PbesHmacAesWrapKeyDecryptionAlgorithm(\n                cb.getPassword(props))) : null;\n        return loadJwkSet(props, bus, decryption);\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionProvider jwe) {\n        String keyContent;"
            },
            {
              "step": 13,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                cb.getPassword(props))) : null;\n        return loadJwkSet(props, bus, decryption);\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionProvider jwe) {\n        String keyContent;\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        if (keyStoreLoc != null) {"
            },
            {
              "step": 14,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                throw new JwkException(ex);\n            }\n        } else {\n            keyContent = props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKSET);\n            if (keyContent == null) {\n                keyContent = props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKKEY);\n            }"
            },
            {
              "step": 15,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKSET)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "String",
              "code": "                throw new JwkException(ex);\n            }\n        } else {\n            keyContent = props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKSET);\n            if (keyContent == null) {\n                keyContent = props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKKEY);\n            }"
            },
            {
              "step": 16,
              "variableName": "keyContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "String",
              "code": "            }\n        }\n        if (jwe != null) {\n            keyContent = jwe.decrypt(keyContent).getContentText();\n        }\n        JwkReaderWriter reader = new JwkReaderWriter();\n        if (props.getProperty(JoseConstants.RSSEC_KEY_STORE_JWKKEY) == null) {"
            },
            {
              "step": 17,
              "variableName": "String content",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/AbstractJweDecryption.java",
              "type": "String",
              "code": "        this.contentDecryptionAlgo = contentDecryptionAlgo;\n    }\n\n    public JweDecryptionOutput decrypt(String content) {\n        JweCompactConsumer consumer = new JweCompactConsumer(content);\n        byte[] cek = keyDecryptionAlgo.getDecryptedContentEncryptionKey(consumer.getJweDecryptionInput());\n        return doDecrypt(consumer.getJweDecryptionInput(), cek);"
            },
            {
              "step": 18,
              "variableName": "content",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/AbstractJweDecryption.java",
              "type": "String",
              "code": "    }\n\n    public JweDecryptionOutput decrypt(String content) {\n        JweCompactConsumer consumer = new JweCompactConsumer(content);\n        byte[] cek = keyDecryptionAlgo.getDecryptedContentEncryptionKey(consumer.getJweDecryptionInput());\n        return doDecrypt(consumer.getJweDecryptionInput(), cek);\n    }"
            },
            {
              "step": 19,
              "variableName": "String jweContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/JweCompactConsumer.java",
              "type": "String",
              "code": "    protected static final Logger LOG = LogUtils.getL7dLogger(JweCompactConsumer.class);\n    private final JweDecryptionInput jweDecryptionInput;\n\n    public JweCompactConsumer(String jweContent) {\n        String[] parts = JoseUtils.getCompactParts(jweContent);\n        if (parts.length != 5) {\n            LOG.warning(\"5 JWE parts are expected\");"
            },
            {
              "step": 20,
              "variableName": "jweContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/JweCompactConsumer.java",
              "type": "String",
              "code": "    private final JweDecryptionInput jweDecryptionInput;\n\n    public JweCompactConsumer(String jweContent) {\n        String[] parts = JoseUtils.getCompactParts(jweContent);\n        if (parts.length != 5) {\n            LOG.warning(\"5 JWE parts are expected\");\n            throw new JweException(JweException.Error.INVALID_COMPACT_JWE);"
            },
            {
              "step": 21,
              "variableName": "String compactContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    private JoseUtils() {\n\n    }\n    public static String[] getCompactParts(String compactContent) {\n        if (compactContent.startsWith(\"\\\"\") && compactContent.endsWith(\"\\\"\")) {\n            compactContent = compactContent.substring(1, compactContent.length() - 1);\n        }"
            },
            {
              "step": 22,
              "variableName": "compactContent",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        if (compactContent.startsWith(\"\\\"\") && compactContent.endsWith(\"\\\"\")) {\n            compactContent = compactContent.substring(1, compactContent.length() - 1);\n        }\n        return compactContent.split(\"\\\\.\");\n    }\n    public static void setJoseContextProperty(JoseHeaders headers) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();"
            },
            {
              "step": 23,
              "variableName": "compactContent.split(\"\\\\.\")",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String[]",
              "code": "        if (compactContent.startsWith(\"\\\"\") && compactContent.endsWith(\"\\\"\")) {\n            compactContent = compactContent.substring(1, compactContent.length() - 1);\n        }\n        return compactContent.split(\"\\\\.\");\n    }\n    public static void setJoseContextProperty(JoseHeaders headers) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();"
            },
            {
              "step": 24,
              "variableName": "JoseUtils.getCompactParts(jweContent)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/JweCompactConsumer.java",
              "type": "String[]",
              "code": "    private final JweDecryptionInput jweDecryptionInput;\n\n    public JweCompactConsumer(String jweContent) {\n        String[] parts = JoseUtils.getCompactParts(jweContent);\n        if (parts.length != 5) {\n            LOG.warning(\"5 JWE parts are expected\");\n            throw new JweException(JweException.Error.INVALID_COMPACT_JWE);"
            },
            {
              "step": 25,
              "variableName": "parts[0]",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwe/JweCompactConsumer.java",
              "type": "String",
              "code": "            throw new JweException(JweException.Error.INVALID_COMPACT_JWE);\n        }\n        try {\n            String headersJson = new String(Base64UrlUtility.decode(parts[0]));\n            byte[] encryptedCEK = Base64UrlUtility.decode(parts[1]);\n            byte[] initVector = Base64UrlUtility.decode(parts[2]);\n            byte[] encryptedContent = Base64UrlUtility.decode(parts[3]);"
            },
            {
              "step": 26,
              "variableName": "String encoded",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64UrlUtility.java",
              "type": "String",
              "code": "        //utility class, never constructed\n    }\n\n    public static byte[] decode(String encoded) throws Base64Exception {\n        return Base64Utility.decode(encoded, true);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "encoded",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64UrlUtility.java",
              "type": "String",
              "code": "    }\n\n    public static byte[] decode(String encoded) throws Base64Exception {\n        return Base64Utility.decode(encoded, true);\n    }\n\n    public static String encode(String str) {"
            },
            {
              "step": 28,
              "variableName": "String id",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java",
              "type": "String",
              "code": "        return decode(id, false);\n    }\n\n    public static byte[] decode(String id, boolean urlSafe) throws Base64Exception {\n        if (urlSafe) {\n            id = id.replace('-', '+').replace('_', '/');\n            switch (id.length() % 4) {"
            },
            {
              "step": 29,
              "variableName": "\"Invalid base64 encoded string : \" + id",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java",
              "type": "",
              "code": "            char[] cd = id.toCharArray();\n            return decodeChunk(cd, 0, cd.length);\n        } catch (Exception e) {\n            LOG.warning(\"Invalid base64 encoded string : \" + id);\n            throw new Base64Exception(new Message(\"BASE64_RUNTIME_EXCEPTION\", LOG), e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "clientSecret",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
              "type": "String",
              "code": "\n    public static JwsSignatureProvider getClientSecretSignatureProvider(String clientSecret) {\n        Properties sigProps = JwsUtils.loadSignatureOutProperties(false);\n        return JwsUtils.getHmacSignatureProvider(clientSecret,\n                                                 getClientSecretSignatureAlgorithm(sigProps));\n    }\n    public static JwsSignatureVerifier getClientSecretSignatureVerifier(String clientSecret) {"
            },
            {
              "step": 1,
              "variableName": "String encodedKey",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "String",
              "code": "        return null;\n    }\n\n    public static JwsSignatureProvider getHmacSignatureProvider(String encodedKey, SignatureAlgorithm algo) {\n        return getHmacSignatureProvider(JoseUtils.decode(encodedKey), algo);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "encodedKey",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "String",
              "code": "    }\n\n    public static JwsSignatureProvider getHmacSignatureProvider(String encodedKey, SignatureAlgorithm algo) {\n        return getHmacSignatureProvider(JoseUtils.decode(encodedKey), algo);\n    }\n\n    public static JwsSignatureProvider getHmacSignatureProvider(byte[] key, SignatureAlgorithm algo) {"
            },
            {
              "step": 3,
              "variableName": "String encoded",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    public static String decodeToString(String encoded) {\n        return new String(decode(encoded), StandardCharsets.UTF_8);\n    }\n    public static byte[] decode(String encoded) {\n        return CryptoUtils.decodeSequence(encoded);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "encoded",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return new String(decode(encoded), StandardCharsets.UTF_8);\n    }\n    public static byte[] decode(String encoded) {\n        return CryptoUtils.decodeSequence(encoded);\n    }\n\n    public static boolean validateCriticalHeaders(JoseHeaders headers) {"
            },
            {
              "step": 5,
              "variableName": "String encodedSequence",
              "uri": "cxf-cxf-4.1.1/rt/security/src/main/java/org/apache/cxf/rt/security/crypto/CryptoUtils.java",
              "type": "String",
              "code": "    public static SecretKey createSecretKeySpec(byte[] bytes, String algo) {\n        return new SecretKeySpec(bytes, convertJCECipherToSecretKeyName(algo));\n    }\n    public static byte[] decodeSequence(String encodedSequence) throws SecurityException {\n        try {\n            return Base64UrlUtility.decode(encodedSequence);\n        } catch (Exception ex) {"
            },
            {
              "step": 6,
              "variableName": "encodedSequence",
              "uri": "cxf-cxf-4.1.1/rt/security/src/main/java/org/apache/cxf/rt/security/crypto/CryptoUtils.java",
              "type": "String",
              "code": "    }\n    public static byte[] decodeSequence(String encodedSequence) throws SecurityException {\n        try {\n            return Base64UrlUtility.decode(encodedSequence);\n        } catch (Exception ex) {\n            throw new SecurityException(ex);\n        }"
            },
            {
              "step": 7,
              "variableName": "String encoded",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64UrlUtility.java",
              "type": "String",
              "code": "        //utility class, never constructed\n    }\n\n    public static byte[] decode(String encoded) throws Base64Exception {\n        return Base64Utility.decode(encoded, true);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "encoded",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64UrlUtility.java",
              "type": "String",
              "code": "    }\n\n    public static byte[] decode(String encoded) throws Base64Exception {\n        return Base64Utility.decode(encoded, true);\n    }\n\n    public static String encode(String str) {"
            },
            {
              "step": 9,
              "variableName": "String id",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java",
              "type": "String",
              "code": "        return decode(id, false);\n    }\n\n    public static byte[] decode(String id, boolean urlSafe) throws Base64Exception {\n        if (urlSafe) {\n            id = id.replace('-', '+').replace('_', '/');\n            switch (id.length() % 4) {"
            },
            {
              "step": 10,
              "variableName": "\"Invalid base64 encoded string : \" + id",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java",
              "type": "",
              "code": "            char[] cd = id.toCharArray();\n            return decodeChunk(cd, 0, cd.length);\n        } catch (Exception e) {\n            LOG.warning(\"Invalid base64 encoded string : \" + id);\n            throw new Base64Exception(new Message(\"BASE64_RUNTIME_EXCEPTION\", LOG), e);\n        }\n    }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "clientSecret",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
              "type": "String",
              "code": "    }\n    public static JwsSignatureVerifier getClientSecretSignatureVerifier(String clientSecret) {\n        Properties sigProps = JwsUtils.loadSignatureOutProperties(false);\n        return JwsUtils.getHmacSignatureVerifier(clientSecret,\n                                                 getClientSecretSignatureAlgorithm(sigProps));\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String encodedKey",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "String",
              "code": "        return null;\n    }\n\n    public static JwsSignatureVerifier getHmacSignatureVerifier(String encodedKey, SignatureAlgorithm algo) {\n        return getHmacSignatureVerifier(JoseUtils.decode(encodedKey), algo);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "encodedKey",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "String",
              "code": "    }\n\n    public static JwsSignatureVerifier getHmacSignatureVerifier(String encodedKey, SignatureAlgorithm algo) {\n        return getHmacSignatureVerifier(JoseUtils.decode(encodedKey), algo);\n    }\n\n    public static JwsSignatureVerifier getHmacSignatureVerifier(byte[] key, SignatureAlgorithm algo) {"
            },
            {
              "step": 3,
              "variableName": "String encoded",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    public static String decodeToString(String encoded) {\n        return new String(decode(encoded), StandardCharsets.UTF_8);\n    }\n    public static byte[] decode(String encoded) {\n        return CryptoUtils.decodeSequence(encoded);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "encoded",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return new String(decode(encoded), StandardCharsets.UTF_8);\n    }\n    public static byte[] decode(String encoded) {\n        return CryptoUtils.decodeSequence(encoded);\n    }\n\n    public static boolean validateCriticalHeaders(JoseHeaders headers) {"
            },
            {
              "step": 5,
              "variableName": "String encodedSequence",
              "uri": "cxf-cxf-4.1.1/rt/security/src/main/java/org/apache/cxf/rt/security/crypto/CryptoUtils.java",
              "type": "String",
              "code": "    public static SecretKey createSecretKeySpec(byte[] bytes, String algo) {\n        return new SecretKeySpec(bytes, convertJCECipherToSecretKeyName(algo));\n    }\n    public static byte[] decodeSequence(String encodedSequence) throws SecurityException {\n        try {\n            return Base64UrlUtility.decode(encodedSequence);\n        } catch (Exception ex) {"
            },
            {
              "step": 6,
              "variableName": "encodedSequence",
              "uri": "cxf-cxf-4.1.1/rt/security/src/main/java/org/apache/cxf/rt/security/crypto/CryptoUtils.java",
              "type": "String",
              "code": "    }\n    public static byte[] decodeSequence(String encodedSequence) throws SecurityException {\n        try {\n            return Base64UrlUtility.decode(encodedSequence);\n        } catch (Exception ex) {\n            throw new SecurityException(ex);\n        }"
            },
            {
              "step": 7,
              "variableName": "String encoded",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64UrlUtility.java",
              "type": "String",
              "code": "        //utility class, never constructed\n    }\n\n    public static byte[] decode(String encoded) throws Base64Exception {\n        return Base64Utility.decode(encoded, true);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "encoded",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64UrlUtility.java",
              "type": "String",
              "code": "    }\n\n    public static byte[] decode(String encoded) throws Base64Exception {\n        return Base64Utility.decode(encoded, true);\n    }\n\n    public static String encode(String str) {"
            },
            {
              "step": 9,
              "variableName": "String id",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java",
              "type": "String",
              "code": "        return decode(id, false);\n    }\n\n    public static byte[] decode(String id, boolean urlSafe) throws Base64Exception {\n        if (urlSafe) {\n            id = id.replace('-', '+').replace('_', '/');\n            switch (id.length() % 4) {"
            },
            {
              "step": 10,
              "variableName": "\"Invalid base64 encoded string : \" + id",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java",
              "type": "",
              "code": "            char[] cd = id.toCharArray();\n            return decodeChunk(cd, 0, cd.length);\n        } catch (Exception e) {\n            LOG.warning(\"Invalid base64 encoded string : \" + id);\n            throw new Base64Exception(new Message(\"BASE64_RUNTIME_EXCEPTION\", LOG), e);\n        }\n    }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 22,
      "fileName": "DefaultResourceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                url = new URL(loc);\n            } catch (Exception ex) {\n                // it can be either a classpath or file resource without a scheme\n                url = getClasspathResourceURL(loc, KeyManagementUtils.class, bus);\n                if (url == null) {\n                    File file = new File(loc);\n                    if (file.exists()) {"
            },
            {
              "step": 20,
              "variableName": "String path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url;\n    }\n\n    private static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n        URL url = ClassLoaderUtils.getResource(path, callingClass);\n        return url == null ? getResource(path, URL.class, bus) : url;\n    }"
            },
            {
              "step": 21,
              "variableName": "path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "\n    private static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n        URL url = ClassLoaderUtils.getResource(path, callingClass);\n        return url == null ? getResource(path, URL.class, bus) : url;\n    }\n\n    private static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {"
            },
            {
              "step": 22,
              "variableName": "String path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? getResource(path, URL.class, bus) : url;\n    }\n\n    private static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n        if (bus != null) {\n            ResourceManager rm = bus.getExtension(ResourceManager.class);\n            if (rm != null) {"
            },
            {
              "step": 23,
              "variableName": "path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (bus != null) {\n            ResourceManager rm = bus.getExtension(ResourceManager.class);\n            if (rm != null) {\n                return rm.resolveResource(path, resourceClass);\n            }\n        }\n        return null;"
            },
            {
              "step": 24,
              "variableName": "String name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "        firstCalled = true;\n    }\n\n    public final <T> T resolveResource(String name, Class<T> type) {\n        return findResource(name, type, false, registeredResolvers);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "    }\n\n    public final <T> T resolveResource(String name, Class<T> type) {\n        return findResource(name, type, false, registeredResolvers);\n    }\n\n    public final <T> T resolveResource(String name, Class<T> type, List<ResourceResolver> resolvers) {"
            },
            {
              "step": 26,
              "variableName": "String name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "    }\n\n\n    private <T> T findResource(String name, Class<T> type, boolean asStream,\n                               List<ResourceResolver> resolvers) {\n        if (!firstCalled) {\n            onFirstResolve();"
            },
            {
              "step": 27,
              "variableName": "\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "",
              "code": "        }\n\n        if (LOG.isLoggable(Level.FINE)) {\n            LOG.fine(\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"\n                                                            : \" type <\" + type + \">\"));\n        }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                url = new URL(loc);\n            } catch (Exception ex) {\n                // it can be either a classpath or file resource without a scheme\n                url = getClasspathResourceURL(loc, KeyManagementUtils.class, bus);\n                if (url == null) {\n                    File file = new File(loc);\n                    if (file.exists()) {"
            },
            {
              "step": 20,
              "variableName": "String path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url;\n    }\n\n    private static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n        URL url = ClassLoaderUtils.getResource(path, callingClass);\n        return url == null ? getResource(path, URL.class, bus) : url;\n    }"
            },
            {
              "step": 21,
              "variableName": "path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "\n    private static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n        URL url = ClassLoaderUtils.getResource(path, callingClass);\n        return url == null ? getResource(path, URL.class, bus) : url;\n    }\n\n    private static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {"
            },
            {
              "step": 22,
              "variableName": "String path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? getResource(path, URL.class, bus) : url;\n    }\n\n    private static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n        if (bus != null) {\n            ResourceManager rm = bus.getExtension(ResourceManager.class);\n            if (rm != null) {"
            },
            {
              "step": 23,
              "variableName": "path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (bus != null) {\n            ResourceManager rm = bus.getExtension(ResourceManager.class);\n            if (rm != null) {\n                return rm.resolveResource(path, resourceClass);\n            }\n        }\n        return null;"
            },
            {
              "step": 24,
              "variableName": "String name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "        firstCalled = true;\n    }\n\n    public final <T> T resolveResource(String name, Class<T> type) {\n        return findResource(name, type, false, registeredResolvers);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "    }\n\n    public final <T> T resolveResource(String name, Class<T> type) {\n        return findResource(name, type, false, registeredResolvers);\n    }\n\n    public final <T> T resolveResource(String name, Class<T> type, List<ResourceResolver> resolvers) {"
            },
            {
              "step": 26,
              "variableName": "String name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "    }\n\n\n    private <T> T findResource(String name, Class<T> type, boolean asStream,\n                               List<ResourceResolver> resolvers) {\n        if (!firstCalled) {\n            onFirstResolve();"
            },
            {
              "step": 27,
              "variableName": "\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "",
              "code": "        }\n\n        if (LOG.isLoggable(Level.FINE)) {\n            LOG.fine(\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"\n                                                            : \" type <\" + type + \">\"));\n        }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "                url = new URL(loc);\n            } catch (Exception ex) {\n                // it can be either a classpath or file resource without a scheme\n                url = JoseUtils.getClasspathResourceURL(loc, JoseUtils.class, bus);\n                if (url == null) {\n                    File file = new File(loc);\n                    if (file.exists()) {"
            },
            {
              "step": 21,
              "variableName": "String path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url;\n    }\n\n    public static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n        URL url = ClassLoaderUtils.getResource(path, callingClass);\n        return url == null ? getResource(path, URL.class, bus) : url;\n    }"
            },
            {
              "step": 22,
              "variableName": "path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "\n    public static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n        URL url = ClassLoaderUtils.getResource(path, callingClass);\n        return url == null ? getResource(path, URL.class, bus) : url;\n    }\n\n    public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {"
            },
            {
              "step": 23,
              "variableName": "String path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? getResource(path, URL.class, bus) : url;\n    }\n\n    public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n        if (bus != null) {\n            ResourceManager rm = bus.getExtension(ResourceManager.class);\n            if (rm != null) {"
            },
            {
              "step": 24,
              "variableName": "path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        if (bus != null) {\n            ResourceManager rm = bus.getExtension(ResourceManager.class);\n            if (rm != null) {\n                return rm.resolveResource(path, resourceClass);\n            }\n        }\n        return null;"
            },
            {
              "step": 25,
              "variableName": "String name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "        firstCalled = true;\n    }\n\n    public final <T> T resolveResource(String name, Class<T> type) {\n        return findResource(name, type, false, registeredResolvers);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "    }\n\n    public final <T> T resolveResource(String name, Class<T> type) {\n        return findResource(name, type, false, registeredResolvers);\n    }\n\n    public final <T> T resolveResource(String name, Class<T> type, List<ResourceResolver> resolvers) {"
            },
            {
              "step": 27,
              "variableName": "String name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "    }\n\n\n    private <T> T findResource(String name, Class<T> type, boolean asStream,\n                               List<ResourceResolver> resolvers) {\n        if (!firstCalled) {\n            onFirstResolve();"
            },
            {
              "step": 28,
              "variableName": "\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "",
              "code": "        }\n\n        if (LOG.isLoggable(Level.FINE)) {\n            LOG.fine(\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"\n                                                            : \" type <\" + type + \">\"));\n        }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "                url = new URL(loc);\n            } catch (Exception ex) {\n                // it can be either a classpath or file resource without a scheme\n                url = JoseUtils.getClasspathResourceURL(loc, JoseUtils.class, bus);\n                if (url == null) {\n                    File file = new File(loc);\n                    if (file.exists()) {"
            },
            {
              "step": 21,
              "variableName": "String path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url;\n    }\n\n    public static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n        URL url = ClassLoaderUtils.getResource(path, callingClass);\n        return url == null ? getResource(path, URL.class, bus) : url;\n    }"
            },
            {
              "step": 22,
              "variableName": "path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "\n    public static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n        URL url = ClassLoaderUtils.getResource(path, callingClass);\n        return url == null ? getResource(path, URL.class, bus) : url;\n    }\n\n    public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {"
            },
            {
              "step": 23,
              "variableName": "String path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? getResource(path, URL.class, bus) : url;\n    }\n\n    public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n        if (bus != null) {\n            ResourceManager rm = bus.getExtension(ResourceManager.class);\n            if (rm != null) {"
            },
            {
              "step": 24,
              "variableName": "path",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        if (bus != null) {\n            ResourceManager rm = bus.getExtension(ResourceManager.class);\n            if (rm != null) {\n                return rm.resolveResource(path, resourceClass);\n            }\n        }\n        return null;"
            },
            {
              "step": 25,
              "variableName": "String name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "        firstCalled = true;\n    }\n\n    public final <T> T resolveResource(String name, Class<T> type) {\n        return findResource(name, type, false, registeredResolvers);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "    }\n\n    public final <T> T resolveResource(String name, Class<T> type) {\n        return findResource(name, type, false, registeredResolvers);\n    }\n\n    public final <T> T resolveResource(String name, Class<T> type, List<ResourceResolver> resolvers) {"
            },
            {
              "step": 27,
              "variableName": "String name",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "String",
              "code": "    }\n\n\n    private <T> T findResource(String name, Class<T> type, boolean asStream,\n                               List<ResourceResolver> resolvers) {\n        if (!firstCalled) {\n            onFirstResolve();"
            },
            {
              "step": 28,
              "variableName": "\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java",
              "type": "",
              "code": "        }\n\n        if (LOG.isLoggable(Level.FINE)) {\n            LOG.fine(\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"\n                                                            : \" type <\" + type + \">\"));\n        }\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 23,
      "fileName": "KeyManagementUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(HTTPSignatureConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n            }\n        }"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return props;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props) {"
            },
            {
              "step": 3,
              "variableName": "loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties() {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return loadStoreProperties(m, HTTPSignatureConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                   HTTPSignatureConstants.RSSEC_SIGNATURE_PROPS);\n\n    }"
            },
            {
              "step": 4,
              "variableName": "KeyManagementUtils.loadSignatureInProperties()",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    protected MessageVerifier createMessageVerifier() {\n        Properties props = KeyManagementUtils.loadSignatureInProperties();\n        if (props == null) {\n            throw new SignatureException(\"Signature properties are not configured correctly\");\n        }"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/filters/AbstractSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        PublicKey publicKey = KeyManagementUtils.loadPublicKey(m, props);\n\n        String signatureAlgorithm = (String)m.getContextualProperty(HTTPSignatureConstants.RSSEC_SIGNATURE_ALGORITHM);\n        if (signatureAlgorithm == null) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, alias);\n    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PublicKey loadPublicKey(Message m, Properties props) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n\n        String alias = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_ALIAS);\n        return CryptoUtils.loadCertificate(keyStore, alias).getPublicKey();"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    private static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(HTTPSignatureConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 12,
              "variableName": "props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    }\n\n    private static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(HTTPSignatureConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,"
            },
            {
              "step": 14,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n\n    private static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 15,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "            throw new SignatureException(\"No keystore password was defined\");\n        }\n        try {\n            InputStream is = getResourceStream(keyStoreLoc, bus);\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 16,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 17,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "    //\n\n    private static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    private static URL getResourceURL(String loc, Bus bus) throws Exception {\n        URL url;\n        if (loc.startsWith(CLASSPATH_PREFIX)) {\n            String path = loc.substring(CLASSPATH_PREFIX.length());"
            },
            {
              "step": 19,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/utils/KeyManagementUtils.java",
              "type": "",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 24,
      "fileName": "JoseUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keystorePassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n                if (keystorePassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_STORE_PSWD, keystorePassword);\n                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(m, required,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    public static Properties loadSignatureInProperties(boolean required) {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        return KeyManagementUtils.loadStoreProperties(m, required,\n                                                      JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                      JoseConstants.RSSEC_SIGNATURE_PROPS);\n"
            },
            {
              "step": 4,
              "variableName": "JwsUtils.loadSignatureInProperties(true)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/JwksService.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    private static JsonWebKeys getFromLocalStore(boolean stripPrivateParameters) {\n        Properties props = JwsUtils.loadSignatureInProperties(true);\n        return JwsUtils.loadPublicVerificationKeys(JAXRSUtils.getCurrentMessage(), props, stripPrivateParameters);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/JwksService.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n    private static JsonWebKeys getFromLocalStore(boolean stripPrivateParameters) {\n        Properties props = JwsUtils.loadSignatureInProperties(true);\n        return JwsUtils.loadPublicVerificationKeys(JAXRSUtils.getCurrentMessage(), props, stripPrivateParameters);\n    }\n\n    public void setKeyServiceClient(WebClient keyServiceClient) {"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return loadPublicVerificationKeys(m, props, true);\n    }\n\n    public static JsonWebKeys loadPublicVerificationKeys(Message m, Properties props, boolean stripPrivateParameters) {\n        String storeType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        if (\"jwk\".equals(storeType)) {\n            List<JsonWebKey> jsonWebKeys = JwkUtils.loadJsonWebKeys(m, props, KeyOperation.SIGN, null);"
            },
            {
              "step": 7,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    public static JsonWebKeys loadPublicVerificationKeys(Message m, Properties props, boolean stripPrivateParameters) {\n        String storeType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        if (\"jwk\".equals(storeType)) {\n            List<JsonWebKey> jsonWebKeys = JwkUtils.loadJsonWebKeys(m, props, KeyOperation.SIGN, null);\n            if (jsonWebKeys == null || jsonWebKeys.isEmpty()) {\n                throw new JoseException(\"Error loading keys\");\n            }"
            },
            {
              "step": 8,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static List<JsonWebKey> loadJsonWebKeys(Message m,\n                                                   Properties props,\n                                                   KeyOperation keyOper,\n                                                   PrivateKeyPasswordProvider cb) {\n        JsonWebKeys jwkSet = loadJwkSet(m, props, cb);"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   Properties props,\n                                                   KeyOperation keyOper,\n                                                   PrivateKeyPasswordProvider cb) {\n        JsonWebKeys jwkSet = loadJwkSet(m, props, cb);\n        String kid = KeyManagementUtils.getKeyId(m, props, JoseConstants.RSSEC_KEY_STORE_ALIAS, keyOper);\n        if (kid != null) {\n            return Collections.singletonList(jwkSet.getKey(kid));"
            },
            {
              "step": 10,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    public static JsonWebKeys loadPublicJwkSet(Message m, Properties props) {\n        return loadJwkSet(m, props, null);\n    }\n    public static JsonWebKeys loadJwkSet(Message m, Properties props, PrivateKeyPasswordProvider cb) {\n        String key = (String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE);\n        JsonWebKeys jwkSet = null;\n        if (key != null && m != null) {"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "            }\n        }\n        if (jwkSet == null) {\n            jwkSet = loadJwkSet(props, m != null ? m.getExchange().getBus() : null, cb);\n            if (key != null && m != null) {\n                m.getExchange().put(key, jwkSet);\n            }"
            },
            {
              "step": 12,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return jwkSet;\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, PrivateKeyPasswordProvider cb) {\n        JweDecryptionProvider decryption = cb != null\n            ? new AesCbcHmacJweDecryption(new PbesHmacAesWrapKeyDecryptionAlgorithm(\n                cb.getPassword(props))) : null;"
            },
            {
              "step": 13,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        JweDecryptionProvider decryption = cb != null\n            ? new AesCbcHmacJweDecryption(new PbesHmacAesWrapKeyDecryptionAlgorithm(\n                cb.getPassword(props))) : null;\n        return loadJwkSet(props, bus, decryption);\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionProvider jwe) {\n        String keyContent;"
            },
            {
              "step": 14,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                cb.getPassword(props))) : null;\n        return loadJwkSet(props, bus, decryption);\n    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionProvider jwe) {\n        String keyContent;\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        if (keyStoreLoc != null) {"
            },
            {
              "step": 15,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionProvider jwe) {\n        String keyContent;\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        if (keyStoreLoc != null) {\n            try (InputStream isResource = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n                if (isResource == null) {"
            },
            {
              "step": 16,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "String",
              "code": "    }\n    public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionProvider jwe) {\n        String keyContent;\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        if (keyStoreLoc != null) {\n            try (InputStream isResource = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n                if (isResource == null) {"
            },
            {
              "step": 17,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
              "type": "String",
              "code": "        String keyContent;\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        if (keyStoreLoc != null) {\n            try (InputStream isResource = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n                if (isResource == null) {\n                    throw new JwkException(\"Error in loading keystore location: \" + keyStoreLoc);\n                }"
            },
            {
              "step": 18,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 19,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 20,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 21,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPassword",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 1,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                }\n                String keyPassword = (String)m.getContextualProperty(JoseConstants.RSSEC_KEY_PSWD);\n                if (keyPassword != null) {\n                    props.setProperty(JoseConstants.RSSEC_KEY_PSWD, keyPassword);\n                }\n                String signatureAlgorithm = (String)m.getContextualProperty(JoseConstants.RSSEC_SIGNATURE_ALGORITHM);\n                if (signatureAlgorithm != null) {"
            },
            {
              "step": 2,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                props = new Properties();\n            }\n        }\n        return props;\n    }\n    public static PrivateKey loadPrivateKey(Message m, Properties props,\n                                            X509Certificate inCert,"
            },
            {
              "step": 3,
              "variableName": "KeyManagementUtils.loadStoreProperties(message, true,",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        final JwsSignatureVerifier theVerifier;\n        if (verifier == null) {\n            Properties props = KeyManagementUtils.loadStoreProperties(message, true,\n                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            "
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/multipart/JwsMultipartSignatureInFilter.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                                   JoseConstants.RSSEC_SIGNATURE_IN_PROPS,\n                                                   JoseConstants.RSSEC_SIGNATURE_PROPS);\n            \n            theVerifier = JwsUtils.loadSignatureVerifier(message, props, headers);\n        } else {\n            theVerifier = verifier;\n        }"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureVerifier loadSignatureVerifier(Message m,\n                                                              Properties props,\n                                                              JwsHeaders inHeaders) {\n        JwsSignatureVerifier theVerifier = null;\n        String inHeaderKid = null;"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "                                            inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_CHAIN) != null) {\n                List<X509Certificate> chain = KeyManagementUtils.toX509CertificateChain(inHeaders.getX509Chain());\n                KeyManagementUtils.validateCertificateChain(props, chain);\n                return getPublicKeySignatureVerifier(chain.get(0),\n                                                     inHeaders.getSignatureAlgorithm());\n            } else if (inHeaders.getHeader(JoseConstants.HEADER_X509_THUMBPRINT) != null) {"
            },
            {
              "step": 7,
              "variableName": "Properties storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 8,
              "variableName": "storeProperties",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    //TODO: enhance the certificate validation code\n    public static void validateCertificateChain(Properties storeProperties, List<X509Certificate> inCerts) {\n        Message message = PhaseInterceptorChain.getCurrentMessage();\n        KeyStore ks = loadPersistKeyStore(message, storeProperties);\n        String enableRevocationProp = storeProperties.getProperty(RSSecurityConstants.RSSEC_ENABLE_REVOCATION);\n        if (enableRevocationProp == null) {\n            enableRevocationProp = (String)message.getContextualProperty(JoseConstants.RSSEC_ENABLE_REVOCATION);"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "cxf-cxf-4.1.1/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
              "type": "String",
              "code": "                signingProperties.put(JoseConstants.RSSEC_KEY_STORE_ALIAS, alias);\n            }\n            if (password != null) {\n                signingProperties.put(JoseConstants.RSSEC_KEY_PSWD, password);\n            } else {\n                throw new STSException(\"Can't get the password\", STSException.REQUEST_FAILED);\n            }"
            },
            {
              "step": 1,
              "variableName": "signingProperties",
              "uri": "cxf-cxf-4.1.1/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
              "type": "Properties [<map.value>] : String",
              "code": "                signingProperties.put(JoseConstants.RSSEC_KEY_STORE_ALIAS, alias);\n            }\n            if (password != null) {\n                signingProperties.put(JoseConstants.RSSEC_KEY_PSWD, password);\n            } else {\n                throw new STSException(\"Can't get the password\", STSException.REQUEST_FAILED);\n            }"
            },
            {
              "step": 2,
              "variableName": "signingProperties",
              "uri": "cxf-cxf-4.1.1/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
              "type": "Properties [<map.value>] : String",
              "code": "            JwsJwtCompactProducer jws = new JwsJwtCompactProducer(jwsHeaders, claims);\n\n            JwsSignatureProvider sigProvider =\n                JwsUtils.loadSignatureProvider(signingProperties, jwsHeaders);\n\n            return jws.signWith(sigProvider);\n        }"
            },
            {
              "step": 3,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return JoseUtils.validateCriticalHeaders(headers);\n    }\n\n    public static JwsSignatureProvider loadSignatureProvider(Properties props,\n                                                             JwsHeaders headers) {\n        return loadSignatureProvider(PhaseInterceptorChain.getCurrentMessage(),\n                                     props, headers);"
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    public static JwsSignatureProvider loadSignatureProvider(Properties props,\n                                                             JwsHeaders headers) {\n        return loadSignatureProvider(PhaseInterceptorChain.getCurrentMessage(),\n                                     props, headers);\n    }\n\n    public static JwsSignatureProvider loadSignatureProvider(String propertiesLoc, Bus bus) {"
            },
            {
              "step": 5,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static JwsSignatureProvider loadSignatureProvider(Message m,\n                                                             Properties props,\n                                                             JwsHeaders headers) {\n        JwsSignatureProvider theSigProvider = null;\n"
            },
            {
              "step": 6,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "            if (signatureAlgo == SignatureAlgorithm.NONE) {\n                theSigProvider = new NoneJwsSignatureProvider();\n            } else {\n                PrivateKey pk = KeyManagementUtils.loadPrivateKey(m, props, KeyOperation.SIGN);\n                if (signatureAlgo == null) {\n                    signatureAlgo = getDefaultPrivateKeyAlgorithm(pk);\n                }"
            },
            {
              "step": 7,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return cb;\n    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props, KeyOperation keyOper) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "    }\n\n    public static PrivateKey loadPrivateKey(Message m, Properties props, KeyOperation keyOper) {\n        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {"
            },
            {
              "step": 9,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        KeyStore keyStore = loadPersistKeyStore(m, props);\n        return loadPrivateKey(keyStore, m, props, keyOper, null);\n    }\n    public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n        KeyStore keyStore = null;\n        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "\n        if (keyStore == null) {\n            Bus bus = m != null ? m.getExchange().getBus() : null;\n            keyStore = loadKeyStore(props, bus);\n            if (m != null) {\n                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n            }"
            },
            {
              "step": 11,
              "variableName": "Properties props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        }\n        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "Properties [<map.value>] : String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 13,
              "variableName": "props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE)",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        return keyStore;\n    }\n    public static KeyStore loadKeyStore(Properties props, Bus bus) {\n        String keyStoreLoc = props.getProperty(JoseConstants.RSSEC_KEY_STORE_FILE);\n        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n"
            },
            {
              "step": 14,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        String keyStoreType = props.getProperty(JoseConstants.RSSEC_KEY_STORE_TYPE);\n        String keyStorePswd = props.getProperty(JoseConstants.RSSEC_KEY_STORE_PSWD);\n\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,"
            },
            {
              "step": 15,
              "variableName": "String keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "\n        return loadKeyStore(keyStoreLoc, keyStoreType, keyStorePswd, bus);\n    }\n    public static KeyStore loadKeyStore(String keyStoreLoc,\n                                        String keyStoreType,\n                                        String keyStorePswd,\n                                        Bus bus) {"
            },
            {
              "step": 16,
              "variableName": "keyStoreLoc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
              "type": "String",
              "code": "        if (keyStorePswd == null) {\n            throw new JoseException(\"No keystore password was defined\");\n        }\n        try (InputStream is = JoseUtils.getResourceStream(keyStoreLoc, bus)) {\n            return CryptoUtils.loadKeyStore(is, keyStorePswd.toCharArray(), keyStoreType);\n        } catch (Exception ex) {\n            LOG.warning(\"Key store can not be loaded\");"
            },
            {
              "step": 17,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    // <Start> Copied from JAX-RS RT FRONTEND ResourceUtils\n    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }"
            },
            {
              "step": 18,
              "variableName": "loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "    //\n\n    public static InputStream getResourceStream(String loc, Bus bus) throws IOException {\n        URL url = getResourceURL(loc, bus);\n        return url == null ? null : url.openStream();\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String loc",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "String",
              "code": "        return url == null ? null : url.openStream();\n    }\n\n    public static URL getResourceURL(String loc, Bus bus) throws IOException {\n        if (loc == null) {\n            return null;\n        }"
            },
            {
              "step": 20,
              "variableName": "\"No resource \" + loc + \" is available\"",
              "uri": "cxf-cxf-4.1.1/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
              "type": "",
              "code": "            }\n        }\n        if (url == null) {\n            LOG.warning(\"No resource \" + loc + \" is available\");\n        }\n        return url;\n    }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 25,
      "fileName": "SymmetricKeyHandler.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "binarySecretType",
              "uri": "cxf-cxf-4.1.1/services/sts/sts-core/src/main/java/org/apache/cxf/sts/request/BinarySecret.java",
              "type": "String",
              "code": "    }\n\n    public String getBinarySecretType() {\n        return binarySecretType;\n    }\n\n    public void setBinarySecretType(String binarySecretType) {"
            },
            {
              "step": 1,
              "variableName": "binarySecret.getBinarySecretType()",
              "uri": "cxf-cxf-4.1.1/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/SymmetricKeyHandler.java",
              "type": "String",
              "code": "                }\n            } else {\n                LOG.log(\n                    Level.WARNING, \"The type \" + binarySecret.getBinarySecretType() + \" is not supported\"\n                );\n                throw new STSException(\n                    \"No user supplied entropy for SymmetricKey case\", STSException.INVALID_REQUEST"
            },
            {
              "step": 2,
              "variableName": "\"The type \" + binarySecret.getBinarySecretType() + \" is not supported\"",
              "uri": "cxf-cxf-4.1.1/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/SymmetricKeyHandler.java",
              "type": "",
              "code": "                }\n            } else {\n                LOG.log(\n                    Level.WARNING, \"The type \" + binarySecret.getBinarySecretType() + \" is not supported\"\n                );\n                throw new STSException(\n                    \"No user supplied entropy for SymmetricKey case\", STSException.INVALID_REQUEST"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "537": [
    {
      "resultIndex": 26,
      "fileName": "Compiler.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "File[]",
              "code": "\n    }\n    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "File",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 2,
              "variableName": "file.getAbsolutePath()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 3,
              "variableName": "f",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 4,
              "variableName": "f",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());"
            },
            {
              "step": 5,
              "variableName": "f.toArray(new String[0])",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());"
            },
            {
              "step": 6,
              "variableName": "String[] files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(String[] files) {\n        String endorsed = SystemPropertyAction.getProperty(\"java.endorsed.dirs\");\n        if (!forceFork) {\n            return useJava6Compiler(files);"
            },
            {
              "step": 7,
              "variableName": "files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        String classpath = list.get(classpathIdx + 1);\n        checkLongClasspath(classpath, list, classpathIdx);\n        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }"
            },
            {
              "step": 8,
              "variableName": "list",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        String classpath = list.get(classpathIdx + 1);\n        checkLongClasspath(classpath, list, classpathIdx);\n        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }\n\n    protected boolean useJava6Compiler(String[] files) {"
            },
            {
              "step": 10,
              "variableName": "list.toArray(new String[0])",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }\n\n    protected boolean useJava6Compiler(String[] files) {"
            },
            {
              "step": 11,
              "variableName": "String[] args",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        return ret;\n    }\n\n    public boolean internalCompile(String[] args, int sourceFileIndex) {\n        File tmpFile = null;\n        try {\n            final String[] cmdArray;"
            },
            {
              "step": 12,
              "variableName": "args",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            },
            {
              "step": 13,
              "variableName": "args[0]",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            },
            {
              "step": 14,
              "variableName": "\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\"",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "File[]",
              "code": "    }\n    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "File",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 2,
              "variableName": "file.getAbsolutePath()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 3,
              "variableName": "f",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 4,
              "variableName": "f",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());"
            },
            {
              "step": 5,
              "variableName": "f.toArray(new String[0])",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());"
            },
            {
              "step": 6,
              "variableName": "String[] files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(String[] files) {\n        String endorsed = SystemPropertyAction.getProperty(\"java.endorsed.dirs\");\n        if (!forceFork) {\n            return useJava6Compiler(files);"
            },
            {
              "step": 7,
              "variableName": "files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        String classpath = list.get(classpathIdx + 1);\n        checkLongClasspath(classpath, list, classpathIdx);\n        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }"
            },
            {
              "step": 8,
              "variableName": "list",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        String classpath = list.get(classpathIdx + 1);\n        checkLongClasspath(classpath, list, classpathIdx);\n        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }\n\n    protected boolean useJava6Compiler(String[] files) {"
            },
            {
              "step": 10,
              "variableName": "list.toArray(new String[0])",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }\n\n    protected boolean useJava6Compiler(String[] files) {"
            },
            {
              "step": 11,
              "variableName": "String[] args",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        return ret;\n    }\n\n    public boolean internalCompile(String[] args, int sourceFileIndex) {\n        File tmpFile = null;\n        try {\n            final String[] cmdArray;"
            },
            {
              "step": 12,
              "variableName": "args",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            },
            {
              "step": 13,
              "variableName": "args[0]",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            },
            {
              "step": 14,
              "variableName": "\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\"",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "File",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 2,
              "variableName": "f",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "    public boolean compileFiles(File[] files) {\n        List<String> f = new ArrayList<>(files.length);\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 3,
              "variableName": "f",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());"
            },
            {
              "step": 4,
              "variableName": "f.toArray(new String[0])",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());"
            },
            {
              "step": 5,
              "variableName": "String[] files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(String[] files) {\n        String endorsed = SystemPropertyAction.getProperty(\"java.endorsed.dirs\");\n        if (!forceFork) {\n            return useJava6Compiler(files);"
            },
            {
              "step": 6,
              "variableName": "files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        String classpath = list.get(classpathIdx + 1);\n        checkLongClasspath(classpath, list, classpathIdx);\n        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }"
            },
            {
              "step": 7,
              "variableName": "list",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        String classpath = list.get(classpathIdx + 1);\n        checkLongClasspath(classpath, list, classpathIdx);\n        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }"
            },
            {
              "step": 8,
              "variableName": "list",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }\n\n    protected boolean useJava6Compiler(String[] files) {"
            },
            {
              "step": 9,
              "variableName": "list.toArray(new String[0])",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }\n\n    protected boolean useJava6Compiler(String[] files) {"
            },
            {
              "step": 10,
              "variableName": "String[] args",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        return ret;\n    }\n\n    public boolean internalCompile(String[] args, int sourceFileIndex) {\n        File tmpFile = null;\n        try {\n            final String[] cmdArray;"
            },
            {
              "step": 11,
              "variableName": "args",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            },
            {
              "step": 12,
              "variableName": "args[0]",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            },
            {
              "step": 13,
              "variableName": "\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\"",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "List",
              "code": "        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "File",
              "code": "    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 2,
              "variableName": "file.getAbsolutePath()",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String",
              "code": "    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 3,
              "variableName": "f",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "    public boolean compileFiles(List<File> files) {\n        List<String> f = new ArrayList<>(files.size());\n        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }"
            },
            {
              "step": 4,
              "variableName": "f",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(String[] files) {\n        String endorsed = SystemPropertyAction.getProperty(\"java.endorsed.dirs\");"
            },
            {
              "step": 5,
              "variableName": "f.toArray(new String[0])",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        for (File file : files) {\n            f.add(file.getAbsolutePath());\n        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(String[] files) {\n        String endorsed = SystemPropertyAction.getProperty(\"java.endorsed.dirs\");"
            },
            {
              "step": 6,
              "variableName": "String[] files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        }\n        return compileFiles(f.toArray(new String[0]));\n    }\n    public boolean compileFiles(String[] files) {\n        String endorsed = SystemPropertyAction.getProperty(\"java.endorsed.dirs\");\n        if (!forceFork) {\n            return useJava6Compiler(files);"
            },
            {
              "step": 7,
              "variableName": "files",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        String classpath = list.get(classpathIdx + 1);\n        checkLongClasspath(classpath, list, classpathIdx);\n        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }"
            },
            {
              "step": 8,
              "variableName": "list",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        String classpath = list.get(classpathIdx + 1);\n        checkLongClasspath(classpath, list, classpathIdx);\n        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "ArrayList [<element>] : String",
              "code": "        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }\n\n    protected boolean useJava6Compiler(String[] files) {"
            },
            {
              "step": 10,
              "variableName": "list.toArray(new String[0])",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        int idx = list.size();\n        Collections.addAll(list, files);\n\n        return internalCompile(list.toArray(new String[0]), idx);\n    }\n\n    protected boolean useJava6Compiler(String[] files) {"
            },
            {
              "step": 11,
              "variableName": "String[] args",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "        return ret;\n    }\n\n    public boolean internalCompile(String[] args, int sourceFileIndex) {\n        File tmpFile = null;\n        try {\n            final String[] cmdArray;"
            },
            {
              "step": 12,
              "variableName": "args",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String[] [[]] : String",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            },
            {
              "step": 13,
              "variableName": "args[0]",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "String",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            },
            {
              "step": 14,
              "variableName": "\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\"",
              "uri": "cxf-cxf-4.1.1/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
              "type": "",
              "code": "\n            return p.waitFor() == 0;\n        } catch (SecurityException e) {\n            System.err.println(\"[ERROR] SecurityException during exec() of compiler \\\"\" + args[0] + \"\\\".\");\n        } catch (InterruptedException e) {\n            // ignore\n"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}