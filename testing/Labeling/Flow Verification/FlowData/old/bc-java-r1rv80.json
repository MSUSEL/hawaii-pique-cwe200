{
  "208": [
    {
      "resultIndex": 0,
      "fileName": "Arrays.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "c.doFinal(Hex.decode(\"00000000000000000000000000000000\"))",
              "uri": "bc-java-r1rv80/prov/src/test/java/org/bouncycastle/jce/provider/test/AESSICTest.java",
              "type": "byte[]",
              "code": "            Cipher.ENCRYPT_MODE, sk,\n            new IvParameterSpec(Hex.decode(\"F0F1F2F3F4F5F6F7F8F9FAFBFCFD0001\")));\n\n        byte[] crypt = c.doFinal(Hex.decode(\"00000000000000000000000000000000\"));\n\n        if (!areEqual(crypt, Hex.decode(\"D23513162B02D0F72A43A2FE4A5F97AB\")))\n        {"
            },
            {
              "step": 1,
              "variableName": "crypt",
              "uri": "bc-java-r1rv80/prov/src/test/java/org/bouncycastle/jce/provider/test/AESSICTest.java",
              "type": "byte[]",
              "code": "\n        byte[] crypt = c.doFinal(Hex.decode(\"00000000000000000000000000000000\"));\n\n        if (!areEqual(crypt, Hex.decode(\"D23513162B02D0F72A43A2FE4A5F97AB\")))\n        {\n            fail(\"AESSIC failed test 2\");\n        }"
            },
            {
              "step": 2,
              "variableName": "byte[] a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "    }\n\n    protected boolean areEqual(\n        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);"
            },
            {
              "step": 3,
              "variableName": "a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }\n\n    protected boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            },
            {
              "step": 4,
              "variableName": "byte[] a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }"
            },
            {
              "step": 5,
              "variableName": "a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "",
              "code": "\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "c.doFinal(crypt)",
              "uri": "bc-java-r1rv80/prov/src/test/java/org/bouncycastle/jce/provider/test/AESSICTest.java",
              "type": "byte[]",
              "code": "                Cipher.DECRYPT_MODE, sk,\n                new IvParameterSpec(Hex.decode(\"F0F1F2F3F4F5F6F7F8F9FAFBFCFD0001\")));\n        \n        crypt = c.doFinal(crypt);\n        \n        if (!areEqual(crypt, Hex.decode(\"12345678\")))\n        {"
            },
            {
              "step": 1,
              "variableName": "crypt",
              "uri": "bc-java-r1rv80/prov/src/test/java/org/bouncycastle/jce/provider/test/AESSICTest.java",
              "type": "byte[]",
              "code": "        \n        crypt = c.doFinal(crypt);\n        \n        if (!areEqual(crypt, Hex.decode(\"12345678\")))\n        {\n            fail(\"AESSIC failed partial test\");\n        }"
            },
            {
              "step": 2,
              "variableName": "byte[] a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "    }\n\n    protected boolean areEqual(\n        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);"
            },
            {
              "step": 3,
              "variableName": "a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }\n\n    protected boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            },
            {
              "step": 4,
              "variableName": "byte[] a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }"
            },
            {
              "step": 5,
              "variableName": "a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "",
              "code": "\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "in.doFinal(P)",
              "uri": "bc-java-r1rv80/prov/src/test/java/org/bouncycastle/jce/provider/test/AESTest.java",
              "type": "byte[]",
              "code": "\n        in.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(N));\n\n        byte[] enc = in.doFinal(P);\n        if (!areEqual(enc, C))\n        {\n            fail(\"ciphertext doesn't match in EAX\");"
            },
            {
              "step": 1,
              "variableName": "enc",
              "uri": "bc-java-r1rv80/prov/src/test/java/org/bouncycastle/jce/provider/test/AESTest.java",
              "type": "byte[]",
              "code": "        in.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(N));\n\n        byte[] enc = in.doFinal(P);\n        if (!areEqual(enc, C))\n        {\n            fail(\"ciphertext doesn't match in EAX\");\n        }"
            },
            {
              "step": 2,
              "variableName": "byte[] a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "    }\n\n    protected boolean areEqual(\n        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);"
            },
            {
              "step": 3,
              "variableName": "a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }\n\n    protected boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            },
            {
              "step": 4,
              "variableName": "byte[] a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }"
            },
            {
              "step": 5,
              "variableName": "a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "",
              "code": "\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "in.doFinal(P)",
              "uri": "bc-java-r1rv80/prov/src/test/java/org/bouncycastle/jce/provider/test/AESTest.java",
              "type": "byte[]",
              "code": "\n        in.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(N));\n\n        byte[] enc = in.doFinal(P);\n        if (!areEqual(enc, C))\n        {\n            fail(\"ciphertext doesn't match in CCM\");"
            },
            {
              "step": 1,
              "variableName": "enc",
              "uri": "bc-java-r1rv80/prov/src/test/java/org/bouncycastle/jce/provider/test/AESTest.java",
              "type": "byte[]",
              "code": "        in.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(N));\n\n        byte[] enc = in.doFinal(P);\n        if (!areEqual(enc, C))\n        {\n            fail(\"ciphertext doesn't match in CCM\");\n        }"
            },
            {
              "step": 2,
              "variableName": "byte[] a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "    }\n\n    protected boolean areEqual(\n        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);"
            },
            {
              "step": 3,
              "variableName": "a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }\n\n    protected boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            },
            {
              "step": 4,
              "variableName": "byte[] a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }"
            },
            {
              "step": 5,
              "variableName": "a",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "",
              "code": "\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "Arrays.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "signature.sign()",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/operator/jcajce/JcaPGPContentSignerBuilder.java",
              "type": "byte[]",
              "code": "                    {\r\n                        signature.update(edDigestCalculator.getDigest());\r\n                    }\r\n                    return signature.sign();\r\n                }\r\n                catch (SignatureException e)\r\n                {\r"
            },
            {
              "step": 1,
              "variableName": "contentSigner.getSignature()",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignatureGenerator.java",
              "type": "byte[]",
              "code": "            // Ed25519, Ed448 use raw encoding instead of MPI\r\n\r\n            sigPckt = new SignaturePacket(version, sigType, contentSigner.getKeyID(), contentSigner.getKeyAlgorithm(),\r\n                    contentSigner.getHashAlgorithm(), hashed, unhashed, fingerPrint, contentSigner.getSignature(), salt);\r\n        }\r\n        return new PGPSignature(sigPckt);\r\n    }\r"
            },
            {
              "step": 2,
              "variableName": "byte[]                  signatureEncoding",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "byte[]",
              "code": "            SignatureSubpacket[]    hashedData,\r\n            SignatureSubpacket[]    unhashedData,\r\n            byte[]                  fingerPrint,\r\n            byte[]                  signatureEncoding,\r\n            byte[]                  salt)\r\n    {\r\n        super(SIGNATURE);\r"
            },
            {
              "step": 3,
              "variableName": "signatureEncoding",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "byte[]",
              "code": "        this.hashedData = hashedData;\r\n        this.unhashedData = unhashedData;\r\n        this.fingerPrint = fingerPrint;\r\n        this.signatureEncoding = Arrays.clone(signatureEncoding);\r\n        this.salt = Arrays.clone(salt);\r\n        if (hashedData != null)\r\n        {\r"
            },
            {
              "step": 4,
              "variableName": "byte[] data",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return null == data ? null : data.clone();\n    }\n\n    public static byte[] clone(byte[] data)\n    {\n        return null == data ? null : data.clone();\n    }"
            },
            {
              "step": 5,
              "variableName": "null == data ? null : data.clone()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "... : byte[]",
              "code": "\n    public static byte[] clone(byte[] data)\n    {\n        return null == data ? null : data.clone();\n    }\n\n    public static char[] clone(char[] data)"
            },
            {
              "step": 6,
              "variableName": "Arrays.clone(signatureEncoding)",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "byte[]",
              "code": "        this.hashedData = hashedData;\r\n        this.unhashedData = unhashedData;\r\n        this.fingerPrint = fingerPrint;\r\n        this.signatureEncoding = Arrays.clone(signatureEncoding);\r\n        this.salt = Arrays.clone(salt);\r\n        if (hashedData != null)\r\n        {\r"
            },
            {
              "step": 7,
              "variableName": "this",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "        this.hashedData = hashedData;\r\n        this.unhashedData = unhashedData;\r\n        this.fingerPrint = fingerPrint;\r\n        this.signatureEncoding = Arrays.clone(signatureEncoding);\r\n        this.salt = Arrays.clone(salt);\r\n        if (hashedData != null)\r\n        {\r"
            },
            {
              "step": 8,
              "variableName": "SignaturePacket",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "        }\r\n    }\r\n\r\n    public SignaturePacket(\r\n            int                     version,\r\n            int                     signatureType,\r\n            long                    keyID,\r"
            },
            {
              "step": 9,
              "variableName": "new SignaturePacket(version, sigType, contentSigner.getKeyID(), contentSigner.getKeyAlgorithm(),\r",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignatureGenerator.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "        {\r\n            // Ed25519, Ed448 use raw encoding instead of MPI\r\n\r\n            sigPckt = new SignaturePacket(version, sigType, contentSigner.getKeyID(), contentSigner.getKeyAlgorithm(),\r\n                    contentSigner.getHashAlgorithm(), hashed, unhashed, fingerPrint, contentSigner.getSignature(), salt);\r\n        }\r\n        return new PGPSignature(sigPckt);\r"
            },
            {
              "step": 10,
              "variableName": "sigPckt",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignatureGenerator.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "            sigPckt = new SignaturePacket(version, sigType, contentSigner.getKeyID(), contentSigner.getKeyAlgorithm(),\r\n                    contentSigner.getHashAlgorithm(), hashed, unhashed, fingerPrint, contentSigner.getSignature(), salt);\r\n        }\r\n        return new PGPSignature(sigPckt);\r\n    }\r\n\r\n    protected void prepareSignatureSubpackets()\r"
            },
            {
              "step": 11,
              "variableName": "SignaturePacket sigPacket",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "    }\r\n\r\n    PGPSignature(\r\n        SignaturePacket sigPacket)\r\n    {\r\n        this(sigPacket, null);\r\n    }\r"
            },
            {
              "step": 12,
              "variableName": "sigPacket",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "    PGPSignature(\r\n        SignaturePacket sigPacket)\r\n    {\r\n        this(sigPacket, null);\r\n    }\r\n\r\n    PGPSignature(\r"
            },
            {
              "step": 13,
              "variableName": "SignaturePacket sigPacket",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "    }\r\n\r\n    PGPSignature(\r\n        SignaturePacket sigPacket,\r\n        TrustPacket trustPacket)\r\n    {\r\n        super(sigPacket.getVersion());\r"
            },
            {
              "step": 14,
              "variableName": "sigPacket",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "        TrustPacket trustPacket)\r\n    {\r\n        super(sigPacket.getVersion());\r\n        this.sigPck = sigPacket;\r\n        this.sigType = sigPck.getSignatureType();\r\n        this.trustPck = trustPacket;\r\n    }\r"
            },
            {
              "step": 15,
              "variableName": "this",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "        TrustPacket trustPacket)\r\n    {\r\n        super(sigPacket.getVersion());\r\n        this.sigPck = sigPacket;\r\n        this.sigType = sigPck.getSignatureType();\r\n        this.trustPck = trustPacket;\r\n    }\r"
            },
            {
              "step": 16,
              "variableName": "PGPSignature",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "        this(sigPacket, null);\r\n    }\r\n\r\n    PGPSignature(\r\n        SignaturePacket sigPacket,\r\n        TrustPacket trustPacket)\r\n    {\r"
            },
            {
              "step": 17,
              "variableName": "this(sigPacket, null);",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "    PGPSignature(\r\n        SignaturePacket sigPacket)\r\n    {\r\n        this(sigPacket, null);\r\n    }\r\n\r\n    PGPSignature(\r"
            },
            {
              "step": 18,
              "variableName": "PGPSignature",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "        trustPck = signature.trustPck;\r\n    }\r\n\r\n    PGPSignature(\r\n        SignaturePacket sigPacket)\r\n    {\r\n        this(sigPacket, null);\r"
            },
            {
              "step": 19,
              "variableName": "new PGPSignature(sigPckt)",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignatureGenerator.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "            sigPckt = new SignaturePacket(version, sigType, contentSigner.getKeyID(), contentSigner.getKeyAlgorithm(),\r\n                    contentSigner.getHashAlgorithm(), hashed, unhashed, fingerPrint, contentSigner.getSignature(), salt);\r\n        }\r\n        return new PGPSignature(sigPckt);\r\n    }\r\n\r\n    protected void prepareSignatureSubpackets()\r"
            },
            {
              "step": 20,
              "variableName": "sigGen.generate()",
              "uri": "bc-java-r1rv80/pg/src/test/java/org/bouncycastle/openpgp/test/DedicatedEd25519KeyPairTest.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "        PGPSignatureGenerator sigGen = new PGPSignatureGenerator(contSigBuilder);\n        sigGen.init(PGPSignature.BINARY_DOCUMENT, keyPair.getPrivateKey());\n        sigGen.update(data);\n        PGPSignature signature = sigGen.generate();\n\n        PGPContentVerifierBuilderProvider contVerBuilder = new JcaPGPContentVerifierBuilderProvider()\n            .setProvider(new BouncyCastleProvider());"
            },
            {
              "step": 21,
              "variableName": "signature",
              "uri": "bc-java-r1rv80/pg/src/test/java/org/bouncycastle/openpgp/test/DedicatedEd25519KeyPairTest.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "            .setProvider(new BouncyCastleProvider());\n        signature.init(contVerBuilder, keyPair.getPublicKey());\n        signature.update(data);\n        isTrue(signature.verify());\n    }\n\n    private void testV4SigningVerificationWithBcKey()"
            },
            {
              "step": 22,
              "variableName": "verify",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "     * @return true if the signature is correct\r\n     * @throws PGPException\r\n     */\r\n    public boolean verify()\r\n        throws PGPException\r\n    {\r\n        try\r"
            },
            {
              "step": 23,
              "variableName": "this",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "            throw new PGPException(e.getMessage(), e);\r\n        }\r\n\r\n        return verifier.verify(this.getSignature());\r\n    }\r\n\r\n\r"
            },
            {
              "step": 24,
              "variableName": "getSignature",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "     * @return cryptographic signature\r\n     * @throws PGPException\r\n     */\r\n    public byte[] getSignature()\r\n        throws PGPException\r\n    {\r\n        MPInteger[] sigValues = sigPck.getSignature();\r"
            },
            {
              "step": 25,
              "variableName": "sigPck",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "PGPSignature [sigPck, signatureEncoding] : byte[]",
              "code": "        }\r\n        else\r\n        {\r\n            signature = sigPck.getSignatureBytes();\r\n        }\r\n\r\n        return signature;\r"
            },
            {
              "step": 26,
              "variableName": "sigPck",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "        }\r\n        else\r\n        {\r\n            signature = sigPck.getSignatureBytes();\r\n        }\r\n\r\n        return signature;\r"
            },
            {
              "step": 27,
              "variableName": "getSignatureBytes",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "     * Return the byte encoding of the signature section.\r\n     * @return uninterpreted signature bytes.\r\n     */\r\n    public byte[] getSignatureBytes()\r\n    {\r\n        if (signatureEncoding != null)\r\n        {\r"
            },
            {
              "step": 28,
              "variableName": "signatureEncoding",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "SignaturePacket [signatureEncoding] : byte[]",
              "code": "    {\r\n        if (signatureEncoding != null)\r\n        {\r\n            return Arrays.clone(signatureEncoding);\r\n        }\r\n\r\n        ByteArrayOutputStream bOut = new ByteArrayOutputStream();\r"
            },
            {
              "step": 29,
              "variableName": "signatureEncoding",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "byte[]",
              "code": "    {\r\n        if (signatureEncoding != null)\r\n        {\r\n            return Arrays.clone(signatureEncoding);\r\n        }\r\n\r\n        ByteArrayOutputStream bOut = new ByteArrayOutputStream();\r"
            },
            {
              "step": 30,
              "variableName": "byte[] data",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return null == data ? null : data.clone();\n    }\n\n    public static byte[] clone(byte[] data)\n    {\n        return null == data ? null : data.clone();\n    }"
            },
            {
              "step": 31,
              "variableName": "null == data ? null : data.clone()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "... : byte[]",
              "code": "\n    public static byte[] clone(byte[] data)\n    {\n        return null == data ? null : data.clone();\n    }\n\n    public static char[] clone(char[] data)"
            },
            {
              "step": 32,
              "variableName": "Arrays.clone(signatureEncoding)",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/bcpg/SignaturePacket.java",
              "type": "byte[]",
              "code": "    {\r\n        if (signatureEncoding != null)\r\n        {\r\n            return Arrays.clone(signatureEncoding);\r\n        }\r\n\r\n        ByteArrayOutputStream bOut = new ByteArrayOutputStream();\r"
            },
            {
              "step": 33,
              "variableName": "sigPck.getSignatureBytes()",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "byte[]",
              "code": "        }\r\n        else\r\n        {\r\n            signature = sigPck.getSignatureBytes();\r\n        }\r\n\r\n        return signature;\r"
            },
            {
              "step": 34,
              "variableName": "signature",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "byte[]",
              "code": "            signature = sigPck.getSignatureBytes();\r\n        }\r\n\r\n        return signature;\r\n    }\r\n\r\n    /**\r"
            },
            {
              "step": 35,
              "variableName": "this.getSignature()",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/PGPSignature.java",
              "type": "byte[]",
              "code": "            throw new PGPException(e.getMessage(), e);\r\n        }\r\n\r\n        return verifier.verify(this.getSignature());\r\n    }\r\n\r\n\r"
            },
            {
              "step": 36,
              "variableName": "byte[] expected",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/operator/bc/BcPGPContentVerifierBuilderProvider.java",
              "type": "byte[]",
              "code": "                    return publicKey.getKeyID();\r\n                }\r\n\r\n                public boolean verify(byte[] expected)\r\n                {\r\n                    return signer.verifySignature(expected);\r\n                }\r"
            },
            {
              "step": 37,
              "variableName": "expected",
              "uri": "bc-java-r1rv80/pg/build/generated-src/org/bouncycastle/openpgp/operator/bc/BcPGPContentVerifierBuilderProvider.java",
              "type": "byte[]",
              "code": "\r\n                public boolean verify(byte[] expected)\r\n                {\r\n                    return signer.verifySignature(expected);\r\n                }\r\n\r\n                public OutputStream getOutputStream()\r"
            },
            {
              "step": 38,
              "variableName": "byte[] signature",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/signers/DSADigestSigner.java",
              "type": "byte[]",
              "code": "    }\n\n    public boolean verifySignature(\n        byte[] signature)\n    {\n        if (forSigning)\n        {"
            },
            {
              "step": 39,
              "variableName": "signature",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/signers/DSADigestSigner.java",
              "type": "byte[]",
              "code": "\n        try\n        {\n            BigInteger[] sig = encoding.decode(getOrder(), signature);\n\n            return dsa.verifySignature(hash, sig[0], sig[1]);\n        }"
            },
            {
              "step": 40,
              "variableName": "byte[] encoding",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/signers/StandardDSAEncoding.java",
              "type": "byte[]",
              "code": "        return new DERSequence(v).getEncoded(ASN1Encoding.DER);\n    }\n\n    public BigInteger[] decode(BigInteger n, byte[] encoding) throws IOException\n    {\n        ASN1Sequence seq = (ASN1Sequence)ASN1Primitive.fromByteArray(encoding);\n        if (seq.size() == 2)"
            },
            {
              "step": 41,
              "variableName": "encoding",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/signers/StandardDSAEncoding.java",
              "type": "byte[]",
              "code": "            BigInteger s = decodeValue(n, seq, 1);\n\n            byte[] expectedEncoding = encode(n, r, s);\n            if (Arrays.areEqual(expectedEncoding,  encoding))\n            {\n                return new BigInteger[]{ r, s };\n            }"
            },
            {
              "step": 42,
              "variableName": "byte[] b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }"
            },
            {
              "step": 43,
              "variableName": "b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "",
              "code": "\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "c.doFinal(out)",
              "uri": "bc-java-r1rv80/pg/src/test/java/org/bouncycastle/openpgp/test/BcPGPRSATest.java",
              "type": "byte[]",
              "code": "\n        c.init(Cipher.DECRYPT_MODE, new JcaPGPKeyConverter().setProvider(\"BC\").getPrivateKey(pgpPrivKey));\n\n        out = c.doFinal(out);\n\n        if (!areEqual(in, out))\n        {"
            },
            {
              "step": 1,
              "variableName": "out",
              "uri": "bc-java-r1rv80/pg/src/test/java/org/bouncycastle/openpgp/test/BcPGPRSATest.java",
              "type": "byte[]",
              "code": "\n        out = c.doFinal(out);\n\n        if (!areEqual(in, out))\n        {\n            fail(\"decryption failed.\");\n        }"
            },
            {
              "step": 2,
              "variableName": "byte[] b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "\n    protected boolean areEqual(\n        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }"
            },
            {
              "step": 3,
              "variableName": "b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }\n\n    protected boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            },
            {
              "step": 4,
              "variableName": "byte[] b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }"
            },
            {
              "step": 5,
              "variableName": "b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "",
              "code": "\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "c.doFinal(out)",
              "uri": "bc-java-r1rv80/pg/src/test/java/org/bouncycastle/openpgp/test/PGPDSAElGamalTest.java",
              "type": "byte[]",
              "code": "            \n            c.init(Cipher.DECRYPT_MODE, new JcaPGPKeyConverter().setProvider(\"BC\").getPrivateKey(pgpPrivKey));\n            \n            out = c.doFinal(out);\n            \n            if (!areEqual(in, out))\n            {"
            },
            {
              "step": 1,
              "variableName": "out",
              "uri": "bc-java-r1rv80/pg/src/test/java/org/bouncycastle/openpgp/test/PGPDSAElGamalTest.java",
              "type": "byte[]",
              "code": "            \n            out = c.doFinal(out);\n            \n            if (!areEqual(in, out))\n            {\n                fail(\"decryption failed.\");\n            }"
            },
            {
              "step": 2,
              "variableName": "byte[] b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "\n    protected boolean areEqual(\n        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }"
            },
            {
              "step": 3,
              "variableName": "b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }\n\n    protected boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            },
            {
              "step": 4,
              "variableName": "byte[] b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }"
            },
            {
              "step": 5,
              "variableName": "b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "",
              "code": "\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "c.doFinal(out)",
              "uri": "bc-java-r1rv80/pg/src/test/java/org/bouncycastle/openpgp/test/PGPRSATest.java",
              "type": "byte[]",
              "code": "        \n        c.init(Cipher.DECRYPT_MODE, new JcaPGPKeyConverter().setProvider(\"BC\").getPrivateKey(pgpPrivKey));\n        \n        out = c.doFinal(out);\n        \n        if (!areEqual(in, out))\n        {"
            },
            {
              "step": 1,
              "variableName": "out",
              "uri": "bc-java-r1rv80/pg/src/test/java/org/bouncycastle/openpgp/test/PGPRSATest.java",
              "type": "byte[]",
              "code": "        \n        out = c.doFinal(out);\n        \n        if (!areEqual(in, out))\n        {\n            fail(\"decryption failed.\");\n        }"
            },
            {
              "step": 2,
              "variableName": "byte[] b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "\n    protected boolean areEqual(\n        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }"
            },
            {
              "step": 3,
              "variableName": "b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/test/SimpleTest.java",
              "type": "byte[]",
              "code": "        byte[] a,\n        byte[] b)\n    {\n        return Arrays.areEqual(a, b);\n    }\n\n    protected boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            },
            {
              "step": 4,
              "variableName": "byte[] b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "byte[]",
              "code": "        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }"
            },
            {
              "step": 5,
              "variableName": "b",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/util/Arrays.java",
              "type": "",
              "code": "\n    public static boolean areEqual(byte[] a, byte[] b)\n    {\n        return java.util.Arrays.equals(a, b);\n    }\n\n    public static boolean areEqual(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "209": [
    {
      "resultIndex": 2,
      "fileName": "DESExample.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keyfile",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "String",
              "code": "            keyfile = args[2];\n        }\n\n        DESExample de = new DESExample(infile, outfile, keyfile, encrypt);\n        de.process();\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String keyfile",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "String",
              "code": "    public DESExample(\n                String infile,\n                String outfile,\n                String keyfile,\n                boolean encrypt)\n    {\n        /* "
            },
            {
              "step": 2,
              "variableName": "\"Could not decry",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "",
              "code": "            {\n                // -DM System.err.print\n                // -DM System.exit\n                System.err.println(\"Could not decryption create key file \"+\n                                    \"[\"+keyfile+\"]\");\n                System.exit(1);\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyfile",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "String",
              "code": "                 * at it with a text editor if we so desire\n                 */\n                BufferedOutputStream keystream = \n                    new BufferedOutputStream(new FileOutputStream(keyfile));\n                byte[] keyhex = Hex.encode(key);\n                keystream.write(keyhex, 0, keyhex.length);\n                keystream.flush();"
            },
            {
              "step": 1,
              "variableName": "\"Could not decry",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "",
              "code": "            {\n                // -DM System.err.print\n                // -DM System.exit\n                System.err.println(\"Could not decryption create key file \"+\n                                    \"[\"+keyfile+\"]\");\n                System.exit(1);\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keyfile",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "String",
              "code": "                // -DM System.err.print\n                // -DM System.exit\n                System.err.println(\"Could not decryption create key file \"+\n                                    \"[\"+keyfile+\"]\");\n                System.exit(1);\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "\"Could not decry",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "",
              "code": "            {\n                // -DM System.err.print\n                // -DM System.exit\n                System.err.println(\"Could not decryption create key file \"+\n                                    \"[\"+keyfile+\"]\");\n                System.exit(1);\n            }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "DESExample.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keyfile",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "String",
              "code": "            keyfile = args[2];\n        }\n\n        DESExample de = new DESExample(infile, outfile, keyfile, encrypt);\n        de.process();\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String keyfile",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "String",
              "code": "    public DESExample(\n                String infile,\n                String outfile,\n                String keyfile,\n                boolean encrypt)\n    {\n        /* "
            },
            {
              "step": 2,
              "variableName": "\"Decryption key file not foun",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "",
              "code": "            {\n                // -DM System.err.print\n                // -DM System.exit\n                System.err.println(\"Decryption key file not found, \"+\n                                    \"or not valid [\"+keyfile+\"]\");\n                System.exit(1);\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keyfile",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "String",
              "code": "            {\n                // read the key, and decode from hex encoding\n                BufferedInputStream keystream = \n                    new BufferedInputStream(new FileInputStream(keyfile));\n                int len = keystream.available();\n                byte[] keyhex = new byte[len];\n                keystream.read(keyhex, 0, len);"
            },
            {
              "step": 1,
              "variableName": "\"Decryption key file not foun",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "",
              "code": "            {\n                // -DM System.err.print\n                // -DM System.exit\n                System.err.println(\"Decryption key file not found, \"+\n                                    \"or not valid [\"+keyfile+\"]\");\n                System.exit(1);\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keyfile",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "String",
              "code": "                // -DM System.err.print\n                // -DM System.exit\n                System.err.println(\"Decryption key file not found, \"+\n                                    \"or not valid [\"+keyfile+\"]\");\n                System.exit(1);\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "\"Decryption key file not foun",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/examples/DESExample.java",
              "type": "",
              "code": "            {\n                // -DM System.err.print\n                // -DM System.exit\n                System.err.println(\"Decryption key file not found, \"+\n                                    \"or not valid [\"+keyfile+\"]\");\n                System.exit(1);\n            }"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "214": [
    {
      "resultIndex": 4,
      "fileName": "ARIAEngine.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tempInput",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)\n            {"
            },
            {
              "step": 1,
              "variableName": "byte[] m",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "        }\n    }\n\n    private int processBytes(byte[] m, byte[] output, int outOff, int nb_it, int nblocks_m, int nblocks_c, int mlen,\n                             int nblocks_ad, boolean isDofinal)\n    {\n        int rv = 0;"
            },
            {
              "step": 2,
              "variableName": "m",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                }\n                else\n                {\n                    System.arraycopy(m, rv, outputMessage, 0, r_size);\n                }\n\n                outOff += r_size;"
            },
            {
              "step": 3,
              "variableName": "outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                }\n                else\n                {\n                    System.arraycopy(m, rv, outputMessage, 0, r_size);\n                }\n\n                outOff += r_size;"
            },
            {
              "step": 4,
              "variableName": "outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            previous_mask = current_mask;\n            current_mask = next_mask;\n            next_mask = temp;\n            System.arraycopy(outputMessage, 0, previous_outputMessage, 0, BLOCK_SIZE);\n        }\n        nb_its = i;\n        return rv;"
            },
            {
              "step": 5,
              "variableName": "previous_outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            previous_mask = current_mask;\n            current_mask = next_mask;\n            next_mask = temp;\n            System.arraycopy(outputMessage, 0, previous_outputMessage, 0, BLOCK_SIZE);\n        }\n        nb_its = i;\n        return rv;"
            },
            {
              "step": 6,
              "variableName": "previous_outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                    // Fill with ciphertext if available\n                    if (BLOCK_SIZE <= r_clen)\n                    { // enough ciphertext\n                        System.arraycopy(previous_outputMessage, 0, buffer, 0, BLOCK_SIZE);\n                    }\n                    else\n                    { // not enough ciphertext, need to pad"
            },
            {
              "step": 7,
              "variableName": "buffer",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                    // Fill with ciphertext if available\n                    if (BLOCK_SIZE <= r_clen)\n                    { // enough ciphertext\n                        System.arraycopy(previous_outputMessage, 0, buffer, 0, BLOCK_SIZE);\n                    }\n                    else\n                    { // not enough ciphertext, need to pad"
            },
            {
              "step": 8,
              "variableName": "buffer",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                xor_block(buffer, next_mask, 0, BLOCK_SIZE);\n\n                xor_block(buffer, m, rv, r_size);\n                System.arraycopy(buffer, 0, output, outOff, r_size);\n                if (forEncryption)\n                {\n                    System.arraycopy(buffer, 0, outputMessage, 0, r_size);"
            },
            {
              "step": 9,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                xor_block(buffer, next_mask, 0, BLOCK_SIZE);\n\n                xor_block(buffer, m, rv, r_size);\n                System.arraycopy(buffer, 0, output, outOff, r_size);\n                if (forEncryption)\n                {\n                    System.arraycopy(buffer, 0, outputMessage, 0, r_size);"
            },
            {
              "step": 10,
              "variableName": "byte[] output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "        }\n    }\n\n    private int processBytes(byte[] m, byte[] output, int outOff, int nb_it, int nblocks_m, int nblocks_c, int mlen,\n                             int nblocks_ad, boolean isDofinal)\n    {\n        int rv = 0;"
            },
            {
              "step": 11,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)\n            {"
            },
            {
              "step": 12,
              "variableName": "byte[] output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "    }\n\n    @Override\n    public int processBytes(byte[] input, int inOff, int len, byte[] output, int outOff)\n        throws DataLengthException\n    {\n        if (inOff + len > input.length)"
            },
            {
              "step": 13,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AEADTestUtil.java",
              "type": "byte[]",
              "code": "    private static void crypt(AEADCipher cipher, byte[] plaintext, byte[] output)\n        throws InvalidCipherTextException\n    {\n        int len = cipher.processBytes(plaintext, 0, plaintext.length, output, 0);\n        cipher.doFinal(output, len);\n    }\n"
            },
            {
              "step": 14,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AEADTestUtil.java",
              "type": "byte[]",
              "code": "        throws InvalidCipherTextException\n    {\n        int len = cipher.processBytes(plaintext, 0, plaintext.length, output, 0);\n        cipher.doFinal(output, len);\n    }\n\n    public static void testOutputSizes(Test test, AEADBlockCipher cipher, AEADParameters params)"
            },
            {
              "step": 15,
              "variableName": "byte[] out",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
              "type": "byte[]",
              "code": "        return resultLen;\n    }\n\n    public int doFinal(byte[] out, int outOff) throws IllegalStateException, InvalidCipherTextException\n    {\n        if (null == out)\n        {"
            },
            {
              "step": 16,
              "variableName": "out",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
              "type": "byte[]",
              "code": "            if (bufPos > 0)\n            {\n                processData(buf, 0, bufPos, out, outOff);\n                poly1305.update(out, outOff, bufPos);\n            }\n\n            finishData(State.ENC_FINAL);"
            },
            {
              "step": 17,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/macs/BlockCipherMac.java",
              "type": "byte[]",
              "code": "    }\n\n    public void update(\n        byte[]      in,\n        int         inOff,\n        int         len)\n    {"
            },
            {
              "step": 18,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/macs/BlockCipherMac.java",
              "type": "byte[]",
              "code": "\n            while (len > blockSize)\n            {\n                resultLen += cipher.processBlock(in, inOff, mac, 0);\n\n                len -= blockSize;\n                inOff += blockSize;"
            },
            {
              "step": 19,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "     * @return the number of bytes processed and produced.\n     */\n    public int processBlock(\n        byte[]      in,\n        int         inOff,\n        byte[]      out,\n        int         outOff)"
            },
            {
              "step": 20,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "        int         outOff)\n        throws DataLengthException, IllegalStateException\n    {\n        return (encrypting) ? encryptBlock(in, inOff, out, outOff) : decryptBlock(in, inOff, out, outOff);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "     * @return the number of bytes processed and produced.\n     */\n    private int decryptBlock(\n        byte[]      in,\n        int         inOff,\n        byte[]      out,\n        int         outOff)"
            },
            {
              "step": 22,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(in, inOff, cbcNextV, 0, blockSize);\n\n        int length = cipher.processBlock(in, inOff, out, outOff);\n\n        /*\n         * XOR the cbcV and the output"
            },
            {
              "step": 23,
              "variableName": "byte[] in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        return BLOCK_SIZE;\n    }\n\n    public int processBlock(byte[] in, int inOff, byte[] out, int outOff)\n        throws DataLengthException, IllegalStateException\n    {\n        if (roundKeys == null)"
            },
            {
              "step": 24,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        byte[] z = new byte[BLOCK_SIZE];\n        System.arraycopy(in, inOff, z, 0, BLOCK_SIZE);\n\n        int i = 0, rounds = roundKeys.length - 3;\n        while (i < rounds)"
            },
            {
              "step": 25,
              "variableName": "z",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        byte[] z = new byte[BLOCK_SIZE];\n        System.arraycopy(in, inOff, z, 0, BLOCK_SIZE);\n\n        int i = 0, rounds = roundKeys.length - 3;\n        while (i < rounds)"
            },
            {
              "step": 26,
              "variableName": "z",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "",
              "code": "        while (i < rounds)\n        {\n            FO(z, roundKeys[i++]);\n            FE(z, roundKeys[i++]);\n        }\n\n        FO(z, roundKeys[i++]);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "tempInput",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            int nblocks_ad = 1 + (IV_SIZE + adlen) / BLOCK_SIZE;\n            int nb_it = Math.max(nblocks_c + 1, nblocks_ad - 1);\n            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;"
            },
            {
              "step": 1,
              "variableName": "tempInput",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)\n            {"
            },
            {
              "step": 2,
              "variableName": "byte[] m",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "        }\n    }\n\n    private int processBytes(byte[] m, byte[] output, int outOff, int nb_it, int nblocks_m, int nblocks_c, int mlen,\n                             int nblocks_ad, boolean isDofinal)\n    {\n        int rv = 0;"
            },
            {
              "step": 3,
              "variableName": "m",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                }\n                else\n                {\n                    System.arraycopy(m, rv, outputMessage, 0, r_size);\n                }\n\n                outOff += r_size;"
            },
            {
              "step": 4,
              "variableName": "outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                }\n                else\n                {\n                    System.arraycopy(m, rv, outputMessage, 0, r_size);\n                }\n\n                outOff += r_size;"
            },
            {
              "step": 5,
              "variableName": "outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            previous_mask = current_mask;\n            current_mask = next_mask;\n            next_mask = temp;\n            System.arraycopy(outputMessage, 0, previous_outputMessage, 0, BLOCK_SIZE);\n        }\n        nb_its = i;\n        return rv;"
            },
            {
              "step": 6,
              "variableName": "previous_outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            previous_mask = current_mask;\n            current_mask = next_mask;\n            next_mask = temp;\n            System.arraycopy(outputMessage, 0, previous_outputMessage, 0, BLOCK_SIZE);\n        }\n        nb_its = i;\n        return rv;"
            },
            {
              "step": 7,
              "variableName": "previous_outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                    // Fill with ciphertext if available\n                    if (BLOCK_SIZE <= r_clen)\n                    { // enough ciphertext\n                        System.arraycopy(previous_outputMessage, 0, buffer, 0, BLOCK_SIZE);\n                    }\n                    else\n                    { // not enough ciphertext, need to pad"
            },
            {
              "step": 8,
              "variableName": "buffer",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                    // Fill with ciphertext if available\n                    if (BLOCK_SIZE <= r_clen)\n                    { // enough ciphertext\n                        System.arraycopy(previous_outputMessage, 0, buffer, 0, BLOCK_SIZE);\n                    }\n                    else\n                    { // not enough ciphertext, need to pad"
            },
            {
              "step": 9,
              "variableName": "buffer",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                xor_block(buffer, next_mask, 0, BLOCK_SIZE);\n\n                xor_block(buffer, m, rv, r_size);\n                System.arraycopy(buffer, 0, output, outOff, r_size);\n                if (forEncryption)\n                {\n                    System.arraycopy(buffer, 0, outputMessage, 0, r_size);"
            },
            {
              "step": 10,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                xor_block(buffer, next_mask, 0, BLOCK_SIZE);\n\n                xor_block(buffer, m, rv, r_size);\n                System.arraycopy(buffer, 0, output, outOff, r_size);\n                if (forEncryption)\n                {\n                    System.arraycopy(buffer, 0, outputMessage, 0, r_size);"
            },
            {
              "step": 11,
              "variableName": "byte[] output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "        }\n    }\n\n    private int processBytes(byte[] m, byte[] output, int outOff, int nb_it, int nblocks_m, int nblocks_c, int mlen,\n                             int nblocks_ad, boolean isDofinal)\n    {\n        int rv = 0;"
            },
            {
              "step": 12,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)\n            {"
            },
            {
              "step": 13,
              "variableName": "byte[] output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "    }\n\n    @Override\n    public int processBytes(byte[] input, int inOff, int len, byte[] output, int outOff)\n        throws DataLengthException\n    {\n        if (inOff + len > input.length)"
            },
            {
              "step": 14,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AEADTestUtil.java",
              "type": "byte[]",
              "code": "    private static void crypt(AEADCipher cipher, byte[] plaintext, byte[] output)\n        throws InvalidCipherTextException\n    {\n        int len = cipher.processBytes(plaintext, 0, plaintext.length, output, 0);\n        cipher.doFinal(output, len);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AEADTestUtil.java",
              "type": "byte[]",
              "code": "        throws InvalidCipherTextException\n    {\n        int len = cipher.processBytes(plaintext, 0, plaintext.length, output, 0);\n        cipher.doFinal(output, len);\n    }\n\n    public static void testOutputSizes(Test test, AEADBlockCipher cipher, AEADParameters params)"
            },
            {
              "step": 16,
              "variableName": "byte[] out",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
              "type": "byte[]",
              "code": "        return resultLen;\n    }\n\n    public int doFinal(byte[] out, int outOff) throws IllegalStateException, InvalidCipherTextException\n    {\n        if (null == out)\n        {"
            },
            {
              "step": 17,
              "variableName": "out",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
              "type": "byte[]",
              "code": "            if (bufPos > 0)\n            {\n                processData(buf, 0, bufPos, out, outOff);\n                poly1305.update(out, outOff, bufPos);\n            }\n\n            finishData(State.ENC_FINAL);"
            },
            {
              "step": 18,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/macs/BlockCipherMac.java",
              "type": "byte[]",
              "code": "    }\n\n    public void update(\n        byte[]      in,\n        int         inOff,\n        int         len)\n    {"
            },
            {
              "step": 19,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/macs/BlockCipherMac.java",
              "type": "byte[]",
              "code": "\n            while (len > blockSize)\n            {\n                resultLen += cipher.processBlock(in, inOff, mac, 0);\n\n                len -= blockSize;\n                inOff += blockSize;"
            },
            {
              "step": 20,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "     * @return the number of bytes processed and produced.\n     */\n    public int processBlock(\n        byte[]      in,\n        int         inOff,\n        byte[]      out,\n        int         outOff)"
            },
            {
              "step": 21,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "        int         outOff)\n        throws DataLengthException, IllegalStateException\n    {\n        return (encrypting) ? encryptBlock(in, inOff, out, outOff) : decryptBlock(in, inOff, out, outOff);\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "     * @return the number of bytes processed and produced.\n     */\n    private int decryptBlock(\n        byte[]      in,\n        int         inOff,\n        byte[]      out,\n        int         outOff)"
            },
            {
              "step": 23,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(in, inOff, cbcNextV, 0, blockSize);\n\n        int length = cipher.processBlock(in, inOff, out, outOff);\n\n        /*\n         * XOR the cbcV and the output"
            },
            {
              "step": 24,
              "variableName": "byte[] in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        return BLOCK_SIZE;\n    }\n\n    public int processBlock(byte[] in, int inOff, byte[] out, int outOff)\n        throws DataLengthException, IllegalStateException\n    {\n        if (roundKeys == null)"
            },
            {
              "step": 25,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        byte[] z = new byte[BLOCK_SIZE];\n        System.arraycopy(in, inOff, z, 0, BLOCK_SIZE);\n\n        int i = 0, rounds = roundKeys.length - 3;\n        while (i < rounds)"
            },
            {
              "step": 26,
              "variableName": "z",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        byte[] z = new byte[BLOCK_SIZE];\n        System.arraycopy(in, inOff, z, 0, BLOCK_SIZE);\n\n        int i = 0, rounds = roundKeys.length - 3;\n        while (i < rounds)"
            },
            {
              "step": 27,
              "variableName": "z",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "",
              "code": "        while (i < rounds)\n        {\n            FO(z, roundKeys[i++]);\n            FE(z, roundKeys[i++]);\n        }\n\n        FO(z, roundKeys[i++]);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "tempInput",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            int nb_it = Math.max(nblocks_c + 1, nblocks_ad - 1);\n            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)"
            },
            {
              "step": 1,
              "variableName": "tempInput",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)\n            {"
            },
            {
              "step": 2,
              "variableName": "byte[] m",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "        }\n    }\n\n    private int processBytes(byte[] m, byte[] output, int outOff, int nb_it, int nblocks_m, int nblocks_c, int mlen,\n                             int nblocks_ad, boolean isDofinal)\n    {\n        int rv = 0;"
            },
            {
              "step": 3,
              "variableName": "m",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                }\n                else\n                {\n                    System.arraycopy(m, rv, outputMessage, 0, r_size);\n                }\n\n                outOff += r_size;"
            },
            {
              "step": 4,
              "variableName": "outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                }\n                else\n                {\n                    System.arraycopy(m, rv, outputMessage, 0, r_size);\n                }\n\n                outOff += r_size;"
            },
            {
              "step": 5,
              "variableName": "outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            previous_mask = current_mask;\n            current_mask = next_mask;\n            next_mask = temp;\n            System.arraycopy(outputMessage, 0, previous_outputMessage, 0, BLOCK_SIZE);\n        }\n        nb_its = i;\n        return rv;"
            },
            {
              "step": 6,
              "variableName": "previous_outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            previous_mask = current_mask;\n            current_mask = next_mask;\n            next_mask = temp;\n            System.arraycopy(outputMessage, 0, previous_outputMessage, 0, BLOCK_SIZE);\n        }\n        nb_its = i;\n        return rv;"
            },
            {
              "step": 7,
              "variableName": "previous_outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                    // Fill with ciphertext if available\n                    if (BLOCK_SIZE <= r_clen)\n                    { // enough ciphertext\n                        System.arraycopy(previous_outputMessage, 0, buffer, 0, BLOCK_SIZE);\n                    }\n                    else\n                    { // not enough ciphertext, need to pad"
            },
            {
              "step": 8,
              "variableName": "buffer",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                    // Fill with ciphertext if available\n                    if (BLOCK_SIZE <= r_clen)\n                    { // enough ciphertext\n                        System.arraycopy(previous_outputMessage, 0, buffer, 0, BLOCK_SIZE);\n                    }\n                    else\n                    { // not enough ciphertext, need to pad"
            },
            {
              "step": 9,
              "variableName": "buffer",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                xor_block(buffer, next_mask, 0, BLOCK_SIZE);\n\n                xor_block(buffer, m, rv, r_size);\n                System.arraycopy(buffer, 0, output, outOff, r_size);\n                if (forEncryption)\n                {\n                    System.arraycopy(buffer, 0, outputMessage, 0, r_size);"
            },
            {
              "step": 10,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                xor_block(buffer, next_mask, 0, BLOCK_SIZE);\n\n                xor_block(buffer, m, rv, r_size);\n                System.arraycopy(buffer, 0, output, outOff, r_size);\n                if (forEncryption)\n                {\n                    System.arraycopy(buffer, 0, outputMessage, 0, r_size);"
            },
            {
              "step": 11,
              "variableName": "byte[] output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "        }\n    }\n\n    private int processBytes(byte[] m, byte[] output, int outOff, int nb_it, int nblocks_m, int nblocks_c, int mlen,\n                             int nblocks_ad, boolean isDofinal)\n    {\n        int rv = 0;"
            },
            {
              "step": 12,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)\n            {"
            },
            {
              "step": 13,
              "variableName": "byte[] output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "    }\n\n    @Override\n    public int processBytes(byte[] input, int inOff, int len, byte[] output, int outOff)\n        throws DataLengthException\n    {\n        if (inOff + len > input.length)"
            },
            {
              "step": 14,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AEADTestUtil.java",
              "type": "byte[]",
              "code": "    private static void crypt(AEADCipher cipher, byte[] plaintext, byte[] output)\n        throws InvalidCipherTextException\n    {\n        int len = cipher.processBytes(plaintext, 0, plaintext.length, output, 0);\n        cipher.doFinal(output, len);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AEADTestUtil.java",
              "type": "byte[]",
              "code": "        throws InvalidCipherTextException\n    {\n        int len = cipher.processBytes(plaintext, 0, plaintext.length, output, 0);\n        cipher.doFinal(output, len);\n    }\n\n    public static void testOutputSizes(Test test, AEADBlockCipher cipher, AEADParameters params)"
            },
            {
              "step": 16,
              "variableName": "byte[] out",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
              "type": "byte[]",
              "code": "        return resultLen;\n    }\n\n    public int doFinal(byte[] out, int outOff) throws IllegalStateException, InvalidCipherTextException\n    {\n        if (null == out)\n        {"
            },
            {
              "step": 17,
              "variableName": "out",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
              "type": "byte[]",
              "code": "            if (bufPos > 0)\n            {\n                processData(buf, 0, bufPos, out, outOff);\n                poly1305.update(out, outOff, bufPos);\n            }\n\n            finishData(State.ENC_FINAL);"
            },
            {
              "step": 18,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/macs/BlockCipherMac.java",
              "type": "byte[]",
              "code": "    }\n\n    public void update(\n        byte[]      in,\n        int         inOff,\n        int         len)\n    {"
            },
            {
              "step": 19,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/macs/BlockCipherMac.java",
              "type": "byte[]",
              "code": "\n            while (len > blockSize)\n            {\n                resultLen += cipher.processBlock(in, inOff, mac, 0);\n\n                len -= blockSize;\n                inOff += blockSize;"
            },
            {
              "step": 20,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "     * @return the number of bytes processed and produced.\n     */\n    public int processBlock(\n        byte[]      in,\n        int         inOff,\n        byte[]      out,\n        int         outOff)"
            },
            {
              "step": 21,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "        int         outOff)\n        throws DataLengthException, IllegalStateException\n    {\n        return (encrypting) ? encryptBlock(in, inOff, out, outOff) : decryptBlock(in, inOff, out, outOff);\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "     * @return the number of bytes processed and produced.\n     */\n    private int decryptBlock(\n        byte[]      in,\n        int         inOff,\n        byte[]      out,\n        int         outOff)"
            },
            {
              "step": 23,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(in, inOff, cbcNextV, 0, blockSize);\n\n        int length = cipher.processBlock(in, inOff, out, outOff);\n\n        /*\n         * XOR the cbcV and the output"
            },
            {
              "step": 24,
              "variableName": "byte[] in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        return BLOCK_SIZE;\n    }\n\n    public int processBlock(byte[] in, int inOff, byte[] out, int outOff)\n        throws DataLengthException, IllegalStateException\n    {\n        if (roundKeys == null)"
            },
            {
              "step": 25,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        byte[] z = new byte[BLOCK_SIZE];\n        System.arraycopy(in, inOff, z, 0, BLOCK_SIZE);\n\n        int i = 0, rounds = roundKeys.length - 3;\n        while (i < rounds)"
            },
            {
              "step": 26,
              "variableName": "z",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        byte[] z = new byte[BLOCK_SIZE];\n        System.arraycopy(in, inOff, z, 0, BLOCK_SIZE);\n\n        int i = 0, rounds = roundKeys.length - 3;\n        while (i < rounds)"
            },
            {
              "step": 27,
              "variableName": "z",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "",
              "code": "        while (i < rounds)\n        {\n            FO(z, roundKeys[i++]);\n            FE(z, roundKeys[i++]);\n        }\n\n        FO(z, roundKeys[i++]);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "tempInput",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            int nb_it = Math.max(nblocks_c + 1, nblocks_ad - 1);\n            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)"
            },
            {
              "step": 1,
              "variableName": "tempInput",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)\n            {"
            },
            {
              "step": 2,
              "variableName": "byte[] m",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "        }\n    }\n\n    private int processBytes(byte[] m, byte[] output, int outOff, int nb_it, int nblocks_m, int nblocks_c, int mlen,\n                             int nblocks_ad, boolean isDofinal)\n    {\n        int rv = 0;"
            },
            {
              "step": 3,
              "variableName": "m",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                }\n                else\n                {\n                    System.arraycopy(m, rv, outputMessage, 0, r_size);\n                }\n\n                outOff += r_size;"
            },
            {
              "step": 4,
              "variableName": "outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                }\n                else\n                {\n                    System.arraycopy(m, rv, outputMessage, 0, r_size);\n                }\n\n                outOff += r_size;"
            },
            {
              "step": 5,
              "variableName": "outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            previous_mask = current_mask;\n            current_mask = next_mask;\n            next_mask = temp;\n            System.arraycopy(outputMessage, 0, previous_outputMessage, 0, BLOCK_SIZE);\n        }\n        nb_its = i;\n        return rv;"
            },
            {
              "step": 6,
              "variableName": "previous_outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            previous_mask = current_mask;\n            current_mask = next_mask;\n            next_mask = temp;\n            System.arraycopy(outputMessage, 0, previous_outputMessage, 0, BLOCK_SIZE);\n        }\n        nb_its = i;\n        return rv;"
            },
            {
              "step": 7,
              "variableName": "previous_outputMessage",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                    // Fill with ciphertext if available\n                    if (BLOCK_SIZE <= r_clen)\n                    { // enough ciphertext\n                        System.arraycopy(previous_outputMessage, 0, buffer, 0, BLOCK_SIZE);\n                    }\n                    else\n                    { // not enough ciphertext, need to pad"
            },
            {
              "step": 8,
              "variableName": "buffer",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                    // Fill with ciphertext if available\n                    if (BLOCK_SIZE <= r_clen)\n                    { // enough ciphertext\n                        System.arraycopy(previous_outputMessage, 0, buffer, 0, BLOCK_SIZE);\n                    }\n                    else\n                    { // not enough ciphertext, need to pad"
            },
            {
              "step": 9,
              "variableName": "buffer",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                xor_block(buffer, next_mask, 0, BLOCK_SIZE);\n\n                xor_block(buffer, m, rv, r_size);\n                System.arraycopy(buffer, 0, output, outOff, r_size);\n                if (forEncryption)\n                {\n                    System.arraycopy(buffer, 0, outputMessage, 0, r_size);"
            },
            {
              "step": 10,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "                xor_block(buffer, next_mask, 0, BLOCK_SIZE);\n\n                xor_block(buffer, m, rv, r_size);\n                System.arraycopy(buffer, 0, output, outOff, r_size);\n                if (forEncryption)\n                {\n                    System.arraycopy(buffer, 0, outputMessage, 0, r_size);"
            },
            {
              "step": 11,
              "variableName": "byte[] output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "        }\n    }\n\n    private int processBytes(byte[] m, byte[] output, int outOff, int nb_it, int nblocks_m, int nblocks_c, int mlen,\n                             int nblocks_ad, boolean isDofinal)\n    {\n        int rv = 0;"
            },
            {
              "step": 12,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "            byte[] tempInput = new byte[Math.max(nblocks_c, 1) * BLOCK_SIZE];\n            System.arraycopy(inputMessage, 0, tempInput, 0, inputOff);\n            System.arraycopy(input, inOff, tempInput, inputOff, Math.min(len, tempInput.length - inputOff));\n            int rv = processBytes(tempInput, output, outOff, nb_it, nblocks_m, nblocks_c, mlen, nblocks_ad, false);\n            int copyLen = rv - inputOff;\n            if (copyLen >= 0)\n            {"
            },
            {
              "step": 13,
              "variableName": "byte[] output",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ElephantEngine.java",
              "type": "byte[]",
              "code": "    }\n\n    @Override\n    public int processBytes(byte[] input, int inOff, int len, byte[] output, int outOff)\n        throws DataLengthException\n    {\n        if (inOff + len > input.length)"
            },
            {
              "step": 14,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AEADTestUtil.java",
              "type": "byte[]",
              "code": "    private static void crypt(AEADCipher cipher, byte[] plaintext, byte[] output)\n        throws InvalidCipherTextException\n    {\n        int len = cipher.processBytes(plaintext, 0, plaintext.length, output, 0);\n        cipher.doFinal(output, len);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "output",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AEADTestUtil.java",
              "type": "byte[]",
              "code": "        throws InvalidCipherTextException\n    {\n        int len = cipher.processBytes(plaintext, 0, plaintext.length, output, 0);\n        cipher.doFinal(output, len);\n    }\n\n    public static void testOutputSizes(Test test, AEADBlockCipher cipher, AEADParameters params)"
            },
            {
              "step": 16,
              "variableName": "byte[] out",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
              "type": "byte[]",
              "code": "        return resultLen;\n    }\n\n    public int doFinal(byte[] out, int outOff) throws IllegalStateException, InvalidCipherTextException\n    {\n        if (null == out)\n        {"
            },
            {
              "step": 17,
              "variableName": "out",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
              "type": "byte[]",
              "code": "            if (bufPos > 0)\n            {\n                processData(buf, 0, bufPos, out, outOff);\n                poly1305.update(out, outOff, bufPos);\n            }\n\n            finishData(State.ENC_FINAL);"
            },
            {
              "step": 18,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/macs/BlockCipherMac.java",
              "type": "byte[]",
              "code": "    }\n\n    public void update(\n        byte[]      in,\n        int         inOff,\n        int         len)\n    {"
            },
            {
              "step": 19,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/macs/BlockCipherMac.java",
              "type": "byte[]",
              "code": "\n            while (len > blockSize)\n            {\n                resultLen += cipher.processBlock(in, inOff, mac, 0);\n\n                len -= blockSize;\n                inOff += blockSize;"
            },
            {
              "step": 20,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "     * @return the number of bytes processed and produced.\n     */\n    public int processBlock(\n        byte[]      in,\n        int         inOff,\n        byte[]      out,\n        int         outOff)"
            },
            {
              "step": 21,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "        int         outOff)\n        throws DataLengthException, IllegalStateException\n    {\n        return (encrypting) ? encryptBlock(in, inOff, out, outOff) : decryptBlock(in, inOff, out, outOff);\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "byte[]      in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "     * @return the number of bytes processed and produced.\n     */\n    private int decryptBlock(\n        byte[]      in,\n        int         inOff,\n        byte[]      out,\n        int         outOff)"
            },
            {
              "step": 23,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(in, inOff, cbcNextV, 0, blockSize);\n\n        int length = cipher.processBlock(in, inOff, out, outOff);\n\n        /*\n         * XOR the cbcV and the output"
            },
            {
              "step": 24,
              "variableName": "byte[] in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        return BLOCK_SIZE;\n    }\n\n    public int processBlock(byte[] in, int inOff, byte[] out, int outOff)\n        throws DataLengthException, IllegalStateException\n    {\n        if (roundKeys == null)"
            },
            {
              "step": 25,
              "variableName": "in",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        byte[] z = new byte[BLOCK_SIZE];\n        System.arraycopy(in, inOff, z, 0, BLOCK_SIZE);\n\n        int i = 0, rounds = roundKeys.length - 3;\n        while (i < rounds)"
            },
            {
              "step": 26,
              "variableName": "z",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        byte[] z = new byte[BLOCK_SIZE];\n        System.arraycopy(in, inOff, z, 0, BLOCK_SIZE);\n\n        int i = 0, rounds = roundKeys.length - 3;\n        while (i < rounds)"
            },
            {
              "step": 27,
              "variableName": "z",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "",
              "code": "        while (i < rounds)\n        {\n            FO(z, roundKeys[i++]);\n            FE(z, roundKeys[i++]);\n        }\n\n        FO(z, roundKeys[i++]);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "ARIAEngine.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    public KeyParameter(\n        byte[]  key)\n    {\n        this(key, 0, key.length);\n    }\n\n    public KeyParameter("
            },
            {
              "step": 1,
              "variableName": "byte[]  key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    }\n\n    public KeyParameter(\n        byte[]  key,\n        int     keyOff,\n        int     keyLen)\n    {"
            },
            {
              "step": 2,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 3,
              "variableName": "this.key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 4,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 5,
              "variableName": "KeyParameter",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        this(key, 0, key.length);\n    }\n\n    public KeyParameter(\n        byte[]  key,\n        int     keyOff,\n        int     keyLen)"
            },
            {
              "step": 6,
              "variableName": "this(key, 0, key.length);",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "    public KeyParameter(\n        byte[]  key)\n    {\n        this(key, 0, key.length);\n    }\n\n    public KeyParameter("
            },
            {
              "step": 7,
              "variableName": "KeyParameter",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "{\n    private byte[]  key;\n\n    public KeyParameter(\n        byte[]  key)\n    {\n        this(key, 0, key.length);"
            },
            {
              "step": 8,
              "variableName": "new KeyParameter(new byte[16])",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/SymmetricConstraintsTest.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        ARIAEngine engine = new ARIAEngine();\n        try\n        {\n            engine.init(true, new KeyParameter(new byte[16]));\n            fail(\"no exception!\");\n        }\n        catch (CryptoServiceConstraintsException e)"
            },
            {
              "step": 9,
              "variableName": "CipherParameters params",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), 256));\n    }\n\n    public void init(boolean forEncryption, CipherParameters params) throws IllegalArgumentException\n    {\n        if (!(params instanceof KeyParameter))\n        {"
            },
            {
              "step": 10,
              "variableName": "(KeyParameter)params",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        }\n\n        this.forEncryption = forEncryption;\n        this.roundKeys = keySchedule(forEncryption, ((KeyParameter)params).getKey());\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), bitsOfSecurity(), params, Utils.getPurpose(forEncryption)));\n    }\n"
            },
            {
              "step": 11,
              "variableName": "getKey",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        System.arraycopy(key, 0, buf, off, len);\n    }\n\n    public byte[] getKey()\n    {\n        return key;\n    }"
            },
            {
              "step": 12,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "\n    public byte[] getKey()\n    {\n        return key;\n    }\n\n    public int getKeyLength()"
            },
            {
              "step": 13,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "\n    public byte[] getKey()\n    {\n        return key;\n    }\n\n    public int getKeyLength()"
            },
            {
              "step": 14,
              "variableName": "((KeyParameter)params).getKey()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        this.forEncryption = forEncryption;\n        this.roundKeys = keySchedule(forEncryption, ((KeyParameter)params).getKey());\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), bitsOfSecurity(), params, Utils.getPurpose(forEncryption)));\n    }\n"
            },
            {
              "step": 15,
              "variableName": "byte[] K",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        A(D);\n    }\n\n    protected static byte[][] keySchedule(boolean forEncryption, byte[] K)\n    {\n        int keyLen = K.length;\n        if (keyLen < 16 || keyLen > 32 || (keyLen & 7) != 0)"
            },
            {
              "step": 16,
              "variableName": "K",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] CK3 = C[(keyLenIdx + 2) % 3];\n\n        byte[] KL = new byte[16], KR = new byte[16];\n        System.arraycopy(K, 0, KL, 0, 16);\n        System.arraycopy(K, 16, KR, 0, keyLen - 16);\n\n        byte[] W0 = new byte[16];"
            },
            {
              "step": 17,
              "variableName": "KL",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] CK3 = C[(keyLenIdx + 2) % 3];\n\n        byte[] KL = new byte[16], KR = new byte[16];\n        System.arraycopy(K, 0, KL, 0, 16);\n        System.arraycopy(K, 16, KR, 0, keyLen - 16);\n\n        byte[] W0 = new byte[16];"
            },
            {
              "step": 18,
              "variableName": "KL",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] W2 = new byte[16];\n        byte[] W3 = new byte[16];\n\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);"
            },
            {
              "step": 19,
              "variableName": "W0",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] W2 = new byte[16];\n        byte[] W3 = new byte[16];\n\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);"
            },
            {
              "step": 20,
              "variableName": "W0",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);\n        xor(W1, KR);\n"
            },
            {
              "step": 21,
              "variableName": "W1",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);\n        xor(W1, KR);\n"
            },
            {
              "step": 22,
              "variableName": "W1",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        FO(W1, CK1);\n        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n"
            },
            {
              "step": 23,
              "variableName": "W2",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        FO(W1, CK1);\n        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n"
            },
            {
              "step": 24,
              "variableName": "W2",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "",
              "code": "        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n\n        System.arraycopy(W2, 0, W3, 0, 16);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    public KeyParameter(\n        byte[]  key)\n    {\n        this(key, 0, key.length);\n    }\n\n    public KeyParameter("
            },
            {
              "step": 1,
              "variableName": "byte[]  key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    }\n\n    public KeyParameter(\n        byte[]  key,\n        int     keyOff,\n        int     keyLen)\n    {"
            },
            {
              "step": 2,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 3,
              "variableName": "this.key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 4,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 5,
              "variableName": "KeyParameter",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        this(key, 0, key.length);\n    }\n\n    public KeyParameter(\n        byte[]  key,\n        int     keyOff,\n        int     keyLen)"
            },
            {
              "step": 6,
              "variableName": "this(key, 0, key.length);",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "    public KeyParameter(\n        byte[]  key)\n    {\n        this(key, 0, key.length);\n    }\n\n    public KeyParameter("
            },
            {
              "step": 7,
              "variableName": "KeyParameter",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "{\n    private byte[]  key;\n\n    public KeyParameter(\n        byte[]  key)\n    {\n        this(key, 0, key.length);"
            },
            {
              "step": 8,
              "variableName": "new KeyParameter(new byte[16])",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/SymmetricConstraintsTest.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        }\n\n\n        engine.init(false, new KeyParameter(new byte[16]));\n\n        engine.init(true, new KeyParameter(new byte[24]));\n        engine.init(false, new KeyParameter(new byte[24]));"
            },
            {
              "step": 9,
              "variableName": "CipherParameters params",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), 256));\n    }\n\n    public void init(boolean forEncryption, CipherParameters params) throws IllegalArgumentException\n    {\n        if (!(params instanceof KeyParameter))\n        {"
            },
            {
              "step": 10,
              "variableName": "(KeyParameter)params",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        }\n\n        this.forEncryption = forEncryption;\n        this.roundKeys = keySchedule(forEncryption, ((KeyParameter)params).getKey());\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), bitsOfSecurity(), params, Utils.getPurpose(forEncryption)));\n    }\n"
            },
            {
              "step": 11,
              "variableName": "getKey",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        System.arraycopy(key, 0, buf, off, len);\n    }\n\n    public byte[] getKey()\n    {\n        return key;\n    }"
            },
            {
              "step": 12,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "\n    public byte[] getKey()\n    {\n        return key;\n    }\n\n    public int getKeyLength()"
            },
            {
              "step": 13,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "\n    public byte[] getKey()\n    {\n        return key;\n    }\n\n    public int getKeyLength()"
            },
            {
              "step": 14,
              "variableName": "((KeyParameter)params).getKey()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        this.forEncryption = forEncryption;\n        this.roundKeys = keySchedule(forEncryption, ((KeyParameter)params).getKey());\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), bitsOfSecurity(), params, Utils.getPurpose(forEncryption)));\n    }\n"
            },
            {
              "step": 15,
              "variableName": "byte[] K",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        A(D);\n    }\n\n    protected static byte[][] keySchedule(boolean forEncryption, byte[] K)\n    {\n        int keyLen = K.length;\n        if (keyLen < 16 || keyLen > 32 || (keyLen & 7) != 0)"
            },
            {
              "step": 16,
              "variableName": "K",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] CK3 = C[(keyLenIdx + 2) % 3];\n\n        byte[] KL = new byte[16], KR = new byte[16];\n        System.arraycopy(K, 0, KL, 0, 16);\n        System.arraycopy(K, 16, KR, 0, keyLen - 16);\n\n        byte[] W0 = new byte[16];"
            },
            {
              "step": 17,
              "variableName": "KL",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] CK3 = C[(keyLenIdx + 2) % 3];\n\n        byte[] KL = new byte[16], KR = new byte[16];\n        System.arraycopy(K, 0, KL, 0, 16);\n        System.arraycopy(K, 16, KR, 0, keyLen - 16);\n\n        byte[] W0 = new byte[16];"
            },
            {
              "step": 18,
              "variableName": "KL",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] W2 = new byte[16];\n        byte[] W3 = new byte[16];\n\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);"
            },
            {
              "step": 19,
              "variableName": "W0",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] W2 = new byte[16];\n        byte[] W3 = new byte[16];\n\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);"
            },
            {
              "step": 20,
              "variableName": "W0",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);\n        xor(W1, KR);\n"
            },
            {
              "step": 21,
              "variableName": "W1",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);\n        xor(W1, KR);\n"
            },
            {
              "step": 22,
              "variableName": "W1",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        FO(W1, CK1);\n        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n"
            },
            {
              "step": 23,
              "variableName": "W2",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        FO(W1, CK1);\n        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n"
            },
            {
              "step": 24,
              "variableName": "W2",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "",
              "code": "        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n\n        System.arraycopy(W2, 0, W3, 0, 16);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 1,
              "variableName": "this.key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 2,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "    {\n        this(keyLen);\n\n        System.arraycopy(key, keyOff, this.key, 0, keyLen);\n    }\n\n    private KeyParameter(int length)"
            },
            {
              "step": 3,
              "variableName": "KeyParameter",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        this(key, 0, key.length);\n    }\n\n    public KeyParameter(\n        byte[]  key,\n        int     keyOff,\n        int     keyLen)"
            },
            {
              "step": 4,
              "variableName": "this(key, 0, key.length);",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "    public KeyParameter(\n        byte[]  key)\n    {\n        this(key, 0, key.length);\n    }\n\n    public KeyParameter("
            },
            {
              "step": 5,
              "variableName": "KeyParameter",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "{\n    private byte[]  key;\n\n    public KeyParameter(\n        byte[]  key)\n    {\n        this(key, 0, key.length);"
            },
            {
              "step": 6,
              "variableName": "new KeyParameter(new byte[16])",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/SymmetricConstraintsTest.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        ARIAEngine engine = new ARIAEngine();\n        try\n        {\n            engine.init(true, new KeyParameter(new byte[16]));\n            fail(\"no exception!\");\n        }\n        catch (CryptoServiceConstraintsException e)"
            },
            {
              "step": 7,
              "variableName": "CipherParameters params",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), 256));\n    }\n\n    public void init(boolean forEncryption, CipherParameters params) throws IllegalArgumentException\n    {\n        if (!(params instanceof KeyParameter))\n        {"
            },
            {
              "step": 8,
              "variableName": "(KeyParameter)params",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        }\n\n        this.forEncryption = forEncryption;\n        this.roundKeys = keySchedule(forEncryption, ((KeyParameter)params).getKey());\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), bitsOfSecurity(), params, Utils.getPurpose(forEncryption)));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "getKey",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "        System.arraycopy(key, 0, buf, off, len);\n    }\n\n    public byte[] getKey()\n    {\n        return key;\n    }"
            },
            {
              "step": 10,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "KeyParameter [key] : byte[]",
              "code": "\n    public byte[] getKey()\n    {\n        return key;\n    }\n\n    public int getKeyLength()"
            },
            {
              "step": 11,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "\n    public byte[] getKey()\n    {\n        return key;\n    }\n\n    public int getKeyLength()"
            },
            {
              "step": 12,
              "variableName": "((KeyParameter)params).getKey()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        this.forEncryption = forEncryption;\n        this.roundKeys = keySchedule(forEncryption, ((KeyParameter)params).getKey());\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), bitsOfSecurity(), params, Utils.getPurpose(forEncryption)));\n    }\n"
            },
            {
              "step": 13,
              "variableName": "byte[] K",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        A(D);\n    }\n\n    protected static byte[][] keySchedule(boolean forEncryption, byte[] K)\n    {\n        int keyLen = K.length;\n        if (keyLen < 16 || keyLen > 32 || (keyLen & 7) != 0)"
            },
            {
              "step": 14,
              "variableName": "K",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] CK3 = C[(keyLenIdx + 2) % 3];\n\n        byte[] KL = new byte[16], KR = new byte[16];\n        System.arraycopy(K, 0, KL, 0, 16);\n        System.arraycopy(K, 16, KR, 0, keyLen - 16);\n\n        byte[] W0 = new byte[16];"
            },
            {
              "step": 15,
              "variableName": "KL",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] CK3 = C[(keyLenIdx + 2) % 3];\n\n        byte[] KL = new byte[16], KR = new byte[16];\n        System.arraycopy(K, 0, KL, 0, 16);\n        System.arraycopy(K, 16, KR, 0, keyLen - 16);\n\n        byte[] W0 = new byte[16];"
            },
            {
              "step": 16,
              "variableName": "KL",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] W2 = new byte[16];\n        byte[] W3 = new byte[16];\n\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);"
            },
            {
              "step": 17,
              "variableName": "W0",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] W2 = new byte[16];\n        byte[] W3 = new byte[16];\n\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);"
            },
            {
              "step": 18,
              "variableName": "W0",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);\n        xor(W1, KR);\n"
            },
            {
              "step": 19,
              "variableName": "W1",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);\n        xor(W1, KR);\n"
            },
            {
              "step": 20,
              "variableName": "W1",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        FO(W1, CK1);\n        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n"
            },
            {
              "step": 21,
              "variableName": "W2",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        FO(W1, CK1);\n        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n"
            },
            {
              "step": 22,
              "variableName": "W2",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "",
              "code": "        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n\n        System.arraycopy(W2, 0, W3, 0, 16);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "key",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/KeyParameter.java",
              "type": "byte[]",
              "code": "\n    public byte[] getKey()\n    {\n        return key;\n    }\n\n    public int getKeyLength()"
            },
            {
              "step": 1,
              "variableName": "((KeyParameter)params).getKey()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        }\n\n        this.forEncryption = forEncryption;\n        this.roundKeys = keySchedule(forEncryption, ((KeyParameter)params).getKey());\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(getAlgorithmName(), bitsOfSecurity(), params, Utils.getPurpose(forEncryption)));\n    }\n"
            },
            {
              "step": 2,
              "variableName": "byte[] K",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        A(D);\n    }\n\n    protected static byte[][] keySchedule(boolean forEncryption, byte[] K)\n    {\n        int keyLen = K.length;\n        if (keyLen < 16 || keyLen > 32 || (keyLen & 7) != 0)"
            },
            {
              "step": 3,
              "variableName": "K",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] CK3 = C[(keyLenIdx + 2) % 3];\n\n        byte[] KL = new byte[16], KR = new byte[16];\n        System.arraycopy(K, 0, KL, 0, 16);\n        System.arraycopy(K, 16, KR, 0, keyLen - 16);\n\n        byte[] W0 = new byte[16];"
            },
            {
              "step": 4,
              "variableName": "KL",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] CK3 = C[(keyLenIdx + 2) % 3];\n\n        byte[] KL = new byte[16], KR = new byte[16];\n        System.arraycopy(K, 0, KL, 0, 16);\n        System.arraycopy(K, 16, KR, 0, keyLen - 16);\n\n        byte[] W0 = new byte[16];"
            },
            {
              "step": 5,
              "variableName": "KL",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] W2 = new byte[16];\n        byte[] W3 = new byte[16];\n\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);"
            },
            {
              "step": 6,
              "variableName": "W0",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        byte[] W2 = new byte[16];\n        byte[] W3 = new byte[16];\n\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);"
            },
            {
              "step": 7,
              "variableName": "W0",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);\n        xor(W1, KR);\n"
            },
            {
              "step": 8,
              "variableName": "W1",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "\n        System.arraycopy(KL, 0, W0, 0, 16);\n\n        System.arraycopy(W0, 0, W1, 0, 16);\n        FO(W1, CK1);\n        xor(W1, KR);\n"
            },
            {
              "step": 9,
              "variableName": "W1",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        FO(W1, CK1);\n        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n"
            },
            {
              "step": 10,
              "variableName": "W2",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "byte[]",
              "code": "        FO(W1, CK1);\n        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n"
            },
            {
              "step": 11,
              "variableName": "W2",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/ARIAEngine.java",
              "type": "",
              "code": "        xor(W1, KR);\n\n        System.arraycopy(W1, 0, W2, 0, 16);\n        FE(W2, CK2);\n        xor(W2, W0);\n\n        System.arraycopy(W2, 0, W3, 0, 16);"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "215": [
    {
      "resultIndex": 7,
      "fileName": "NaccacheSternEngine.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            }\n            NaccacheSternPrivateKeyParameters priv = (NaccacheSternPrivateKeyParameters)key;\n            Vector primes = priv.getSmallPrimes();\n            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 3,
              "variableName": "(BigInteger)primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "BigInteger",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 4,
              "variableName": "\"Constructing lookup ArrayList for \" + actualPrimeValue",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                if (debug)\n                {\n                    // -DM System.out.print\n                    System.out.println(\"Constructing lookup ArrayList for \" + actualPrimeValue);\n                }\n\n                BigInteger accJ = ZERO;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            NaccacheSternPrivateKeyParameters priv = (NaccacheSternPrivateKeyParameters)key;\n            Vector primes = priv.getSmallPrimes();\n            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 3,
              "variableName": "(BigInteger)primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "BigInteger",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 4,
              "variableName": "\"Constructing lookup ArrayList for \" + actualPrimeValue",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                if (debug)\n                {\n                    // -DM System.out.print\n                    System.out.println(\"Constructing lookup ArrayList for \" + actualPrimeValue);\n                }\n\n                BigInteger accJ = ZERO;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 1,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 2,
              "variableName": "(BigInteger)primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "BigInteger",
              "code": "            lookup = new Vector[primes.size()];\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();"
            },
            {
              "step": 3,
              "variableName": "\"Constructing lookup ArrayList for \" + actualPrimeValue",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                if (debug)\n                {\n                    // -DM System.out.print\n                    System.out.println(\"Constructing lookup ArrayList for \" + actualPrimeValue);\n                }\n\n                BigInteger accJ = ZERO;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "actualPrime",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "BigInteger",
              "code": "            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger actualPrime = (BigInteger)primes.elementAt(i);\n                int actualPrimeValue = actualPrime.intValue();\n\n                lookup[i] = new Vector();\n                lookup[i].addElement(ONE);"
            },
            {
              "step": 1,
              "variableName": "\"Constructing lookup ArrayList for \" + actualPrimeValue",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                if (debug)\n                {\n                    // -DM System.out.print\n                    System.out.println(\"Constructing lookup ArrayList for \" + actualPrimeValue);\n                }\n\n                BigInteger accJ = ZERO;"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "NaccacheSternEngine.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            NaccacheSternPrivateKeyParameters priv = (NaccacheSternPrivateKeyParameters)key;\n            Vector primes = priv.getSmallPrimes();\n            // Get Chinese Remainders of CipherText\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            },
            {
              "step": 3,
              "variableName": "\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            // Get Chinese Remainders of CipherText\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];\n                if (lookup[i].size() != ((BigInteger)primes.elementAt(i)).intValue())\n                {"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            },
            {
              "step": 3,
              "variableName": "\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];\n                if (lookup[i].size() != ((BigInteger)primes.elementAt(i)).intValue())\n                {\n                    if (debug)\n                    {"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            },
            {
              "step": 3,
              "variableName": "\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            },
            {
              "step": 1,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            },
            {
              "step": 2,
              "variableName": "\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"Prime is \" + primes.elementAt(i) + \", lookup table has size \" + al.size());\n                    }\n                    throw new InvalidCipherTextException(\"Error in lookup Array for \"\n                                    + ((BigInteger)primes.elementAt(i)).intValue()"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "NaccacheSternEngine.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            NaccacheSternPrivateKeyParameters priv = (NaccacheSternPrivateKeyParameters)key;\n            Vector primes = priv.getSmallPrimes();\n            // Get Chinese Remainders of CipherText\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 3,
              "variableName": "\"Actual prime is \" + primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            // Get Chinese Remainders of CipherText\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];\n                if (lookup[i].size() != ((BigInteger)primes.elementAt(i)).intValue())\n                {"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 3,
              "variableName": "\"Actual prime is \" + primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];\n                if (lookup[i].size() != ((BigInteger)primes.elementAt(i)).intValue())\n                {\n                    if (debug)\n                    {"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 3,
              "variableName": "\"Actual prime is \" + primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 1,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 2,
              "variableName": "\"Actual prime is \" + primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "NaccacheSternEngine.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            NaccacheSternPrivateKeyParameters priv = (NaccacheSternPrivateKeyParameters)key;\n            Vector primes = priv.getSmallPrimes();\n            // Get Chinese Remainders of CipherText\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            },
            {
              "step": 3,
              "variableName": "\"Looku",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            // Get Chinese Remainders of CipherText\n            for (int i = 0; i < primes.size(); i++)\n            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];\n                if (lookup[i].size() != ((BigInteger)primes.elementAt(i)).intValue())\n                {"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            },
            {
              "step": 3,
              "variableName": "\"Looku",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "            {\n                BigInteger exp = input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)), priv.getModulus());\n                Vector al = lookup[i];\n                if (lookup[i].size() != ((BigInteger)primes.elementAt(i)).intValue())\n                {\n                    if (debug)\n                    {"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            },
            {
              "step": 3,
              "variableName": "\"Looku",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM 3 System.out.print\n                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()"
            },
            {
              "step": 1,
              "variableName": "primes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Vector",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            },
            {
              "step": 2,
              "variableName": "primes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "Object",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            },
            {
              "step": 3,
              "variableName": "\"Looku",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/engines/NaccacheSternEngine.java",
              "type": "",
              "code": "                        System.out.println(\"Actual prime is \" + primes.elementAt(i));\n                        System.out.println(\"Decrypted value is \" + exp);\n\n                        System.out.println(\"LookupList for \" + primes.elementAt(i) + \" with size \" + lookup[i].size()\n                                        + \" is: \");\n                        for (int j = 0; j < lookup[i].size(); j++)\n                        {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "NaccacheSternKeyPairGenerator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "     */\n    public NaccacheSternKeyGenerationParameters(SecureRandom random, int strength, int certainty, int cntSmallPrimes)\n    {\n        this(random, strength, certainty, cntSmallPrimes, false);\n    }\n\n    /**"
            },
            {
              "step": 1,
              "variableName": "int cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "     *            caution)\n     */\n    public NaccacheSternKeyGenerationParameters(SecureRandom random,\n            int strength, int certainty, int cntSmallPrimes, boolean debug)\n    {\n        super(random, strength);\n"
            },
            {
              "step": 2,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }\n        this.cntSmallPrimes = cntSmallPrimes;\n\n        this.debug = debug;\n    }"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }\n        this.cntSmallPrimes = cntSmallPrimes;\n\n        this.debug = debug;\n    }"
            },
            {
              "step": 4,
              "variableName": "NaccacheSternKeyGenerationParameters",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     *            Turn debugging on or off (reveals secret information, use with\n     *            caution)\n     */\n    public NaccacheSternKeyGenerationParameters(SecureRandom random,\n            int strength, int certainty, int cntSmallPrimes, boolean debug)\n    {\n        super(random, strength);"
            },
            {
              "step": 5,
              "variableName": "this(random, strength, certainty, cntSmallPrimes, false);",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public NaccacheSternKeyGenerationParameters(SecureRandom random, int strength, int certainty, int cntSmallPrimes)\n    {\n        this(random, strength, certainty, cntSmallPrimes, false);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "NaccacheSternKeyGenerationParameters",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     * @param cntSmallPrimes\n     *            How many small key factors are desired\n     */\n    public NaccacheSternKeyGenerationParameters(SecureRandom random, int strength, int certainty, int cntSmallPrimes)\n    {\n        this(random, strength, certainty, cntSmallPrimes, false);\n    }"
            },
            {
              "step": 7,
              "variableName": "new NaccacheSternKeyGenerationParameters(random, 1024, 8, 40)",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AsymmetricConstraintsTest.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "\n        NaccacheSternKeyPairGenerator kpGen = new NaccacheSternKeyPairGenerator();\n\n        kpGen.init(new NaccacheSternKeyGenerationParameters(random, 1024, 8, 40));\n\n        CryptoServicesRegistrar.setServicesConstraints(new LegacyBitsOfSecurityConstraint(128, 80));\n"
            },
            {
              "step": 8,
              "variableName": "KeyGenerationParameters param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#init(org.bouncycastle.crypto.KeyGenerationParameters)\n     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n"
            },
            {
              "step": 9,
              "variableName": "(NaccacheSternKeyGenerationParameters)param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(\n                       \"NaccacheStern KeyGen\", ConstraintUtils.bitsOfSecurityForFF(param.getStrength()), param, CryptoServicePurpose.KEYGEN));"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(\n                       \"NaccacheStern KeyGen\", ConstraintUtils.bitsOfSecurityForFF(param.getStrength()), param, CryptoServicePurpose.KEYGEN));"
            },
            {
              "step": 11,
              "variableName": "init",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#init(org.bouncycastle.crypto.KeyGenerationParameters)\n     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n"
            },
            {
              "step": 12,
              "variableName": "kpGen",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AsymmetricConstraintsTest.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "\n        NaccacheSternKeyPairGenerator kpGen = new NaccacheSternKeyPairGenerator();\n\n        kpGen.init(new NaccacheSternKeyGenerationParameters(random, 1024, 8, 40));\n\n        CryptoServicesRegistrar.setServicesConstraints(new LegacyBitsOfSecurityConstraint(128, 80));\n"
            },
            {
              "step": 13,
              "variableName": "kpGen",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/AsymmetricConstraintsTest.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "\n        CryptoServicesRegistrar.setServicesConstraints(new LegacyBitsOfSecurityConstraint(128, 80));\n\n        AsymmetricCipherKeyPair kp = kpGen.generateKeyPair();\n\n        NaccacheSternEngine nsEngine = new NaccacheSternEngine();\n"
            },
            {
              "step": 14,
              "variableName": "generateKeyPair",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#generateKeyPair()\n     */\n    public AsymmetricCipherKeyPair generateKeyPair()\n    {\n        int strength = param.getStrength();\n        SecureRandom rand = param.getRandom();"
            },
            {
              "step": 15,
              "variableName": "param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 16,
              "variableName": "param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 17,
              "variableName": "getCntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "    /**\n     * @return Returns the cntSmallPrimes.\n     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }"
            },
            {
              "step": 18,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }\n\n    public boolean isDebug()"
            },
            {
              "step": 19,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }\n\n    public boolean isDebug()"
            },
            {
              "step": 20,
              "variableName": "param.getCntSmallPrimes()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 21,
              "variableName": "\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\"",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "        super(random, strength);\n\n        this.certainty = certainty;\n        if (cntSmallPrimes % 2 == 1)\n        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be a multiple of 2\");\n        }"
            },
            {
              "step": 1,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }\n        this.cntSmallPrimes = cntSmallPrimes;\n\n        this.debug = debug;\n    }"
            },
            {
              "step": 2,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }\n        this.cntSmallPrimes = cntSmallPrimes;\n\n        this.debug = debug;\n    }"
            },
            {
              "step": 3,
              "variableName": "NaccacheSternKeyGenerationParameters",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     *            Turn debugging on or off (reveals secret information, use with\n     *            caution)\n     */\n    public NaccacheSternKeyGenerationParameters(SecureRandom random,\n            int strength, int certainty, int cntSmallPrimes, boolean debug)\n    {\n        super(random, strength);"
            },
            {
              "step": 4,
              "variableName": "new NaccacheSternKeyGenerationParameters(new SecureRandom(), 768, 8, 30, debug)",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "\n        // specify key generation parameters\n        NaccacheSternKeyGenerationParameters genParam\n            = new NaccacheSternKeyGenerationParameters(new SecureRandom(), 768, 8, 30, debug);\n\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();"
            },
            {
              "step": 5,
              "variableName": "genParam",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n"
            },
            {
              "step": 6,
              "variableName": "KeyGenerationParameters param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#init(org.bouncycastle.crypto.KeyGenerationParameters)\n     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n"
            },
            {
              "step": 7,
              "variableName": "(NaccacheSternKeyGenerationParameters)param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(\n                       \"NaccacheStern KeyGen\", ConstraintUtils.bitsOfSecurityForFF(param.getStrength()), param, CryptoServicePurpose.KEYGEN));"
            },
            {
              "step": 8,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(\n                       \"NaccacheStern KeyGen\", ConstraintUtils.bitsOfSecurityForFF(param.getStrength()), param, CryptoServicePurpose.KEYGEN));"
            },
            {
              "step": 9,
              "variableName": "init",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#init(org.bouncycastle.crypto.KeyGenerationParameters)\n     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n"
            },
            {
              "step": 10,
              "variableName": "pGen",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n"
            },
            {
              "step": 11,
              "variableName": "pGen",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n\n        if (((NaccacheSternKeyParameters)pair.getPublic()).getModulus().bitLength() < 768)\n        {"
            },
            {
              "step": 12,
              "variableName": "generateKeyPair",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#generateKeyPair()\n     */\n    public AsymmetricCipherKeyPair generateKeyPair()\n    {\n        int strength = param.getStrength();\n        SecureRandom rand = param.getRandom();"
            },
            {
              "step": 13,
              "variableName": "param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 14,
              "variableName": "param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 15,
              "variableName": "getCntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "    /**\n     * @return Returns the cntSmallPrimes.\n     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }"
            },
            {
              "step": 16,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }\n\n    public boolean isDebug()"
            },
            {
              "step": 17,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }\n\n    public boolean isDebug()"
            },
            {
              "step": 18,
              "variableName": "param.getCntSmallPrimes()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 19,
              "variableName": "\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\"",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be a multiple of 2\");\n        }\n        if (cntSmallPrimes < 30)\n        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }"
            },
            {
              "step": 1,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }\n        this.cntSmallPrimes = cntSmallPrimes;\n\n        this.debug = debug;\n    }"
            },
            {
              "step": 2,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }\n        this.cntSmallPrimes = cntSmallPrimes;\n\n        this.debug = debug;\n    }"
            },
            {
              "step": 3,
              "variableName": "NaccacheSternKeyGenerationParameters",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     *            Turn debugging on or off (reveals secret information, use with\n     *            caution)\n     */\n    public NaccacheSternKeyGenerationParameters(SecureRandom random,\n            int strength, int certainty, int cntSmallPrimes, boolean debug)\n    {\n        super(random, strength);"
            },
            {
              "step": 4,
              "variableName": "new NaccacheSternKeyGenerationParameters(new SecureRandom(), 768, 8, 30, debug)",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "\n        // specify key generation parameters\n        NaccacheSternKeyGenerationParameters genParam\n            = new NaccacheSternKeyGenerationParameters(new SecureRandom(), 768, 8, 30, debug);\n\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();"
            },
            {
              "step": 5,
              "variableName": "genParam",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n"
            },
            {
              "step": 6,
              "variableName": "KeyGenerationParameters param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#init(org.bouncycastle.crypto.KeyGenerationParameters)\n     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n"
            },
            {
              "step": 7,
              "variableName": "(NaccacheSternKeyGenerationParameters)param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(\n                       \"NaccacheStern KeyGen\", ConstraintUtils.bitsOfSecurityForFF(param.getStrength()), param, CryptoServicePurpose.KEYGEN));"
            },
            {
              "step": 8,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(\n                       \"NaccacheStern KeyGen\", ConstraintUtils.bitsOfSecurityForFF(param.getStrength()), param, CryptoServicePurpose.KEYGEN));"
            },
            {
              "step": 9,
              "variableName": "init",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#init(org.bouncycastle.crypto.KeyGenerationParameters)\n     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n"
            },
            {
              "step": 10,
              "variableName": "pGen",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n"
            },
            {
              "step": 11,
              "variableName": "pGen",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n\n        if (((NaccacheSternKeyParameters)pair.getPublic()).getModulus().bitLength() < 768)\n        {"
            },
            {
              "step": 12,
              "variableName": "generateKeyPair",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#generateKeyPair()\n     */\n    public AsymmetricCipherKeyPair generateKeyPair()\n    {\n        int strength = param.getStrength();\n        SecureRandom rand = param.getRandom();"
            },
            {
              "step": 13,
              "variableName": "param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 14,
              "variableName": "param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 15,
              "variableName": "getCntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "    /**\n     * @return Returns the cntSmallPrimes.\n     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }"
            },
            {
              "step": 16,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }\n\n    public boolean isDebug()"
            },
            {
              "step": 17,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }\n\n    public boolean isDebug()"
            },
            {
              "step": 18,
              "variableName": "param.getCntSmallPrimes()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 19,
              "variableName": "\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\"",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }\n        this.cntSmallPrimes = cntSmallPrimes;\n\n        this.debug = debug;\n    }"
            },
            {
              "step": 1,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "        {\n            throw new IllegalArgumentException(\"cntSmallPrimes must be >= 30 for security reasons\");\n        }\n        this.cntSmallPrimes = cntSmallPrimes;\n\n        this.debug = debug;\n    }"
            },
            {
              "step": 2,
              "variableName": "NaccacheSternKeyGenerationParameters",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     *            Turn debugging on or off (reveals secret information, use with\n     *            caution)\n     */\n    public NaccacheSternKeyGenerationParameters(SecureRandom random,\n            int strength, int certainty, int cntSmallPrimes, boolean debug)\n    {\n        super(random, strength);"
            },
            {
              "step": 3,
              "variableName": "new NaccacheSternKeyGenerationParameters(new SecureRandom(), 768, 8, 30, debug)",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "\n        // specify key generation parameters\n        NaccacheSternKeyGenerationParameters genParam\n            = new NaccacheSternKeyGenerationParameters(new SecureRandom(), 768, 8, 30, debug);\n\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();"
            },
            {
              "step": 4,
              "variableName": "genParam",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n"
            },
            {
              "step": 5,
              "variableName": "KeyGenerationParameters param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#init(org.bouncycastle.crypto.KeyGenerationParameters)\n     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n"
            },
            {
              "step": 6,
              "variableName": "(NaccacheSternKeyGenerationParameters)param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(\n                       \"NaccacheStern KeyGen\", ConstraintUtils.bitsOfSecurityForFF(param.getStrength()), param, CryptoServicePurpose.KEYGEN));"
            },
            {
              "step": 7,
              "variableName": "this",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n\n        CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(\n                       \"NaccacheStern KeyGen\", ConstraintUtils.bitsOfSecurityForFF(param.getStrength()), param, CryptoServicePurpose.KEYGEN));"
            },
            {
              "step": 8,
              "variableName": "init",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#init(org.bouncycastle.crypto.KeyGenerationParameters)\n     */\n    public void init(KeyGenerationParameters param)\n    {\n        this.param = (NaccacheSternKeyGenerationParameters)param;\n"
            },
            {
              "step": 9,
              "variableName": "pGen",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "\n        // Initialize Key generator and generate key pair\n        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n"
            },
            {
              "step": 10,
              "variableName": "pGen",
              "uri": "bc-java-r1rv80/core/src/test/java/org/bouncycastle/crypto/test/NaccacheSternTest.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "        NaccacheSternKeyPairGenerator pGen = new NaccacheSternKeyPairGenerator();\n        pGen.init(genParam);\n\n        pair = pGen.generateKeyPair();\n\n        if (((NaccacheSternKeyParameters)pair.getPublic()).getModulus().bitLength() < 768)\n        {"
            },
            {
              "step": 11,
              "variableName": "generateKeyPair",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "     * \n     * @see org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator#generateKeyPair()\n     */\n    public AsymmetricCipherKeyPair generateKeyPair()\n    {\n        int strength = param.getStrength();\n        SecureRandom rand = param.getRandom();"
            },
            {
              "step": 12,
              "variableName": "param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyPairGenerator [param, cntSmallPrimes] : Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 13,
              "variableName": "param",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 14,
              "variableName": "getCntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "    /**\n     * @return Returns the cntSmallPrimes.\n     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }"
            },
            {
              "step": 15,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "NaccacheSternKeyGenerationParameters [cntSmallPrimes] : Number",
              "code": "     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }\n\n    public boolean isDebug()"
            },
            {
              "step": 16,
              "variableName": "cntSmallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java",
              "type": "Number",
              "code": "     */\n    public int getCntSmallPrimes()\n    {\n        return cntSmallPrimes;\n    }\n\n    public boolean isDebug()"
            },
            {
              "step": 17,
              "variableName": "param.getCntSmallPrimes()",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Number",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            },
            {
              "step": 18,
              "variableName": "\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\"",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "        if (debug)\n        {\n            // -DM System.out.println\n            System.out.println(\"Fetching first \" + param.getCntSmallPrimes() + \" primes.\");\n        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "NaccacheSternKeyPairGenerator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());\n        smallPrimes = permuteList(smallPrimes, rand);\n\n        BigInteger u = ONE;\n        BigInteger v = ONE;"
            },
            {
              "step": 1,
              "variableName": "Vector arr",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "     * @return a new ArrayList with the permuted elements.\n     */\n    private static Vector permuteList(\n        Vector arr, \n        SecureRandom rand) \n    {\n        Vector retval = new Vector();"
            },
            {
              "step": 2,
              "variableName": "arr",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "        Vector tmp = new Vector();\n        for (int i = 0; i < arr.size(); i++) \n        {\n            tmp.addElement(arr.elementAt(i));\n        }\n        retval.addElement(tmp.elementAt(0));\n        tmp.removeElementAt(0);"
            },
            {
              "step": 3,
              "variableName": "arr.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Object",
              "code": "        Vector tmp = new Vector();\n        for (int i = 0; i < arr.size(); i++) \n        {\n            tmp.addElement(arr.elementAt(i));\n        }\n        retval.addElement(tmp.elementAt(0));\n        tmp.removeElementAt(0);"
            },
            {
              "step": 4,
              "variableName": "tmp",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector [<element>] : Object",
              "code": "        Vector tmp = new Vector();\n        for (int i = 0; i < arr.size(); i++) \n        {\n            tmp.addElement(arr.elementAt(i));\n        }\n        retval.addElement(tmp.elementAt(0));\n        tmp.removeElementAt(0);"
            },
            {
              "step": 5,
              "variableName": "tmp",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector [<element>] : Object",
              "code": "        {\n            tmp.addElement(arr.elementAt(i));\n        }\n        retval.addElement(tmp.elementAt(0));\n        tmp.removeElementAt(0);\n        while (tmp.size() != 0) \n        {"
            },
            {
              "step": 6,
              "variableName": "tmp.elementAt(0)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Object",
              "code": "        {\n            tmp.addElement(arr.elementAt(i));\n        }\n        retval.addElement(tmp.elementAt(0));\n        tmp.removeElementAt(0);\n        while (tmp.size() != 0) \n        {"
            },
            {
              "step": 7,
              "variableName": "retval",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector [<element>] : Object",
              "code": "        {\n            tmp.addElement(arr.elementAt(i));\n        }\n        retval.addElement(tmp.elementAt(0));\n        tmp.removeElementAt(0);\n        while (tmp.size() != 0) \n        {"
            },
            {
              "step": 8,
              "variableName": "retval",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector [<element>] : Object",
              "code": "            retval.insertElementAt(tmp.elementAt(0), getInt(rand, retval.size() + 1));\n            tmp.removeElementAt(0);\n        }\n        return retval;\n    }\n\n    private static int getInt("
            },
            {
              "step": 9,
              "variableName": "permuteList(smallPrimes, rand)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector [<element>] : Object",
              "code": "        }\n\n        Vector smallPrimes = findFirstPrimes(param.getCntSmallPrimes());\n        smallPrimes = permuteList(smallPrimes, rand);\n\n        BigInteger u = ONE;\n        BigInteger v = ONE;"
            },
            {
              "step": 10,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector [<element>] : Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            },
            {
              "step": 11,
              "variableName": "smallPrimes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            },
            {
              "step": 12,
              "variableName": "\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "        BigInteger u = ONE;\n        BigInteger v = ONE;\n\n        for (int i = 0; i < smallPrimes.size() / 2; i++)\n        {\n            u = u.multiply((BigInteger)smallPrimes.elementAt(i));\n        }"
            },
            {
              "step": 1,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            },
            {
              "step": 2,
              "variableName": "smallPrimes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            },
            {
              "step": 3,
              "variableName": "\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "\n        for (int i = 0; i < smallPrimes.size() / 2; i++)\n        {\n            u = u.multiply((BigInteger)smallPrimes.elementAt(i));\n        }\n        for (int i = smallPrimes.size() / 2; i < smallPrimes.size(); i++)\n        {"
            },
            {
              "step": 1,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            },
            {
              "step": 2,
              "variableName": "smallPrimes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            },
            {
              "step": 3,
              "variableName": "\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "        {\n            u = u.multiply((BigInteger)smallPrimes.elementAt(i));\n        }\n        for (int i = smallPrimes.size() / 2; i < smallPrimes.size(); i++)\n        {\n            v = v.multiply((BigInteger)smallPrimes.elementAt(i));\n        }"
            },
            {
              "step": 1,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            },
            {
              "step": 2,
              "variableName": "smallPrimes.elementAt(i)",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Object",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            },
            {
              "step": 3,
              "variableName": "\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "                    if (debug)\n                    {\n                        // -DM System.out.println\n                        System.out.println(\"g has order phi(n)/\" + smallPrimes.elementAt(i) + \"\\n g: \" + g);\n                    }\n                    divisible = true;\n                    break;"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "NaccacheSternKeyPairGenerator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "        BigInteger u = ONE;\n        BigInteger v = ONE;\n\n        for (int i = 0; i < smallPrimes.size() / 2; i++)\n        {\n            u = u.multiply((BigInteger)smallPrimes.elementAt(i));\n        }"
            },
            {
              "step": 1,
              "variableName": "\"smallPrimes: \" + smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "            System.out.println(\"needed \" + tries + \" tries to generate g\");\n            System.out.println();\n            System.out.println(\"found new NaccacheStern cipher variables:\");\n            System.out.println(\"smallPrimes: \" + smallPrimes);\n            System.out.println(\"sigma:...... \" + sigma + \" (\" + sigma.bitLength() + \" bits)\");\n            System.out.println(\"a:.......... \" + a);\n            System.out.println(\"b:.......... \" + b);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "\n        for (int i = 0; i < smallPrimes.size() / 2; i++)\n        {\n            u = u.multiply((BigInteger)smallPrimes.elementAt(i));\n        }\n        for (int i = smallPrimes.size() / 2; i < smallPrimes.size(); i++)\n        {"
            },
            {
              "step": 1,
              "variableName": "\"smallPrimes: \" + smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "            System.out.println(\"needed \" + tries + \" tries to generate g\");\n            System.out.println();\n            System.out.println(\"found new NaccacheStern cipher variables:\");\n            System.out.println(\"smallPrimes: \" + smallPrimes);\n            System.out.println(\"sigma:...... \" + sigma + \" (\" + sigma.bitLength() + \" bits)\");\n            System.out.println(\"a:.......... \" + a);\n            System.out.println(\"b:.......... \" + b);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "        {\n            u = u.multiply((BigInteger)smallPrimes.elementAt(i));\n        }\n        for (int i = smallPrimes.size() / 2; i < smallPrimes.size(); i++)\n        {\n            v = v.multiply((BigInteger)smallPrimes.elementAt(i));\n        }"
            },
            {
              "step": 1,
              "variableName": "\"smallPrimes: \" + smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "            System.out.println(\"needed \" + tries + \" tries to generate g\");\n            System.out.println();\n            System.out.println(\"found new NaccacheStern cipher variables:\");\n            System.out.println(\"smallPrimes: \" + smallPrimes);\n            System.out.println(\"sigma:...... \" + sigma + \" (\" + sigma.bitLength() + \" bits)\");\n            System.out.println(\"a:.......... \" + a);\n            System.out.println(\"b:.......... \" + b);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "Vector",
              "code": "        {\n            u = u.multiply((BigInteger)smallPrimes.elementAt(i));\n        }\n        for (int i = smallPrimes.size() / 2; i < smallPrimes.size(); i++)\n        {\n            v = v.multiply((BigInteger)smallPrimes.elementAt(i));\n        }"
            },
            {
              "step": 1,
              "variableName": "\"smallPrimes: \" + smallPrimes",
              "uri": "bc-java-r1rv80/core/src/main/java/org/bouncycastle/crypto/generators/NaccacheSternKeyPairGenerator.java",
              "type": "",
              "code": "            System.out.println(\"needed \" + tries + \" tries to generate g\");\n            System.out.println();\n            System.out.println(\"found new NaccacheStern cipher variables:\");\n            System.out.println(\"smallPrimes: \" + smallPrimes);\n            System.out.println(\"sigma:...... \" + sigma + \" (\" + sigma.bitLength() + \" bits)\");\n            System.out.println(\"a:.......... \" + a);\n            System.out.println(\"b:.......... \" + b);"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 14,
      "fileName": "DisabledAlgorithmConstraints.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "secretKey",
              "uri": "bc-java-r1rv80/prov/src/main/java/org/bouncycastle/jcajce/SecretKeyWithEncapsulation.java",
              "type": "SecretKey",
              "code": "     */\n    public String getAlgorithm()\n    {\n        return secretKey.getAlgorithm();\n    }\n\n    /**"
            },
            {
              "step": 1,
              "variableName": "secretKey.getAlgorithm()",
              "uri": "bc-java-r1rv80/prov/src/main/java/org/bouncycastle/jcajce/SecretKeyWithEncapsulation.java",
              "type": "String",
              "code": "     */\n    public String getAlgorithm()\n    {\n        return secretKey.getAlgorithm();\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "key.getAlgorithm()",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
              "type": "String",
              "code": "        {\n            return getPublicKeyAlgorithm((PublicKey)key);\n        }\n        return key.getAlgorithm();\n    }\n\n    static String getPrivateKeyAlgorithm(PrivateKey privateKey)"
            },
            {
              "step": 3,
              "variableName": "JsseUtils.getKeyAlgorithm(key)",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "        checkPrimitives(primitives);\n        checkKey(key);\n\n        String keyAlgorithm = JsseUtils.getKeyAlgorithm(key);\n        checkAlgorithmName(keyAlgorithm);\n\n        if (JsseUtils.isNameSpecified(algorithm) &&"
            },
            {
              "step": 4,
              "variableName": "logHeader + \" con",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "",
              "code": "            {\n                if (LOG.isLoggable(Level.FINEST))\n                {\n                    LOG.finest(logHeader + \" constraints for '\" + constraintsAlgorithm + \"' do not permit given '\"\n                        + keyAlgorithm + \"' key\");\n                }\n                return false;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "secretKey",
              "uri": "bc-java-r1rv80/prov/src/main/java/org/bouncycastle/jcajce/SecretKeyWithEncapsulation.java",
              "type": "SecretKey",
              "code": "     */\n    public String getAlgorithm()\n    {\n        return secretKey.getAlgorithm();\n    }\n\n    /**"
            },
            {
              "step": 1,
              "variableName": "secretKey.getAlgorithm()",
              "uri": "bc-java-r1rv80/prov/src/main/java/org/bouncycastle/jcajce/SecretKeyWithEncapsulation.java",
              "type": "String",
              "code": "     */\n    public String getAlgorithm()\n    {\n        return secretKey.getAlgorithm();\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "key.getAlgorithm()",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
              "type": "String",
              "code": "        {\n            return getPublicKeyAlgorithm((PublicKey)key);\n        }\n        return key.getAlgorithm();\n    }\n\n    static String getPrivateKeyAlgorithm(PrivateKey privateKey)"
            },
            {
              "step": 3,
              "variableName": "JsseUtils.getKeyAlgorithm(key)",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "        checkPrimitives(primitives);\n        checkKey(key);\n\n        String keyAlgorithm = JsseUtils.getKeyAlgorithm(key);\n        checkAlgorithmName(keyAlgorithm);\n\n        if (JsseUtils.isNameSpecified(algorithm) &&"
            },
            {
              "step": 4,
              "variableName": "keyAlgorithm",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "\n        // TODO[jsse] SunJSSE also checks the named curve for EC keys\n\n        String constraintsAlgorithm = getCanonicalAlgorithm(keyAlgorithm);\n        for (Constraint constraint : getConstraints(constraintsAlgorithm))\n        {\n            if (!constraint.permits(key))"
            },
            {
              "step": 5,
              "variableName": "String algorithm",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "        constraintList.add(constraint);\n    }\n\n    private static String getCanonicalAlgorithm(String algorithm)\n    {\n        if (\"DiffieHellman\".equalsIgnoreCase(algorithm))\n        {"
            },
            {
              "step": 6,
              "variableName": "algorithm",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "            return \"DH\";\n        }\n\n        return algorithm.toUpperCase(Locale.ENGLISH).replace(\"SHA-\", \"SHA\");\n    }\n\n    private static String getConstraintsAlgorithm(String algorithm, AlgorithmParameters parameters)"
            },
            {
              "step": 7,
              "variableName": "algorithm.toUpperCase(Locale.ENGLISH)",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "            return \"DH\";\n        }\n\n        return algorithm.toUpperCase(Locale.ENGLISH).replace(\"SHA-\", \"SHA\");\n    }\n\n    private static String getConstraintsAlgorithm(String algorithm, AlgorithmParameters parameters)"
            },
            {
              "step": 8,
              "variableName": "algorithm.toUpperCase(Locale.ENGLISH).replace(\"SHA-\", \"SHA\")",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "            return \"DH\";\n        }\n\n        return algorithm.toUpperCase(Locale.ENGLISH).replace(\"SHA-\", \"SHA\");\n    }\n\n    private static String getConstraintsAlgorithm(String algorithm, AlgorithmParameters parameters)"
            },
            {
              "step": 9,
              "variableName": "getCanonicalAlgorithm(keyAlgorithm)",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "\n        // TODO[jsse] SunJSSE also checks the named curve for EC keys\n\n        String constraintsAlgorithm = getCanonicalAlgorithm(keyAlgorithm);\n        for (Constraint constraint : getConstraints(constraintsAlgorithm))\n        {\n            if (!constraint.permits(key))"
            },
            {
              "step": 10,
              "variableName": "logHeader + \" con",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "",
              "code": "            {\n                if (LOG.isLoggable(Level.FINEST))\n                {\n                    LOG.finest(logHeader + \" constraints for '\" + constraintsAlgorithm + \"' do not permit given '\"\n                        + keyAlgorithm + \"' key\");\n                }\n                return false;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "DisabledAlgorithmConstraints.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "secretKey",
              "uri": "bc-java-r1rv80/prov/src/main/java/org/bouncycastle/jcajce/SecretKeyWithEncapsulation.java",
              "type": "SecretKey",
              "code": "     */\n    public String getAlgorithm()\n    {\n        return secretKey.getAlgorithm();\n    }\n\n    /**"
            },
            {
              "step": 1,
              "variableName": "secretKey.getAlgorithm()",
              "uri": "bc-java-r1rv80/prov/src/main/java/org/bouncycastle/jcajce/SecretKeyWithEncapsulation.java",
              "type": "String",
              "code": "     */\n    public String getAlgorithm()\n    {\n        return secretKey.getAlgorithm();\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "key.getAlgorithm()",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
              "type": "String",
              "code": "        {\n            return getPublicKeyAlgorithm((PublicKey)key);\n        }\n        return key.getAlgorithm();\n    }\n\n    static String getPrivateKeyAlgorithm(PrivateKey privateKey)"
            },
            {
              "step": 3,
              "variableName": "JsseUtils.getKeyAlgorithm(key)",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "        checkPrimitives(primitives);\n        checkKey(key);\n\n        String keyAlgorithm = JsseUtils.getKeyAlgorithm(key);\n        checkAlgorithmName(keyAlgorithm);\n\n        if (JsseUtils.isNameSpecified(algorithm) &&"
            },
            {
              "step": 4,
              "variableName": "keyAlgorithm",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "            return false;\n        }\n\n        if (!implPermitsKeyAlgorithm(primitives, keyAlgorithm))\n        {\n            return false;\n        }"
            },
            {
              "step": 5,
              "variableName": "String keyAlgorithm",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "String",
              "code": "        return true;\n    }\n\n    private boolean implPermitsKeyAlgorithm(Set<BCCryptoPrimitive> primitives, String keyAlgorithm)\n    {\n        if (containsAnyPartIgnoreCase(disabledAlgorithms, keyAlgorithm))\n        {"
            },
            {
              "step": 6,
              "variableName": "logHeader + \" disabled key algorithm '\" + keyAlgorithm + \"'\"",
              "uri": "bc-java-r1rv80/tls/src/main/java/org/bouncycastle/jsse/provider/DisabledAlgorithmConstraints.java",
              "type": "",
              "code": "        {\n            if (LOG.isLoggable(Level.FINEST))\n            {\n                LOG.finest(logHeader + \" disabled key algorithm '\" + keyAlgorithm + \"'\");\n            }\n            return false;\n        }"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}