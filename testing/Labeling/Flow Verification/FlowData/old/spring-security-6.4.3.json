{
  "208": [
    {
      "resultIndex": 0,
      "fileName": "User.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"username\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\ttry {\n\t\t\tif (user == null) {\n\t\t\t\tcacheWasUsed = false;\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tif (user == null) {\n\t\t\t\t\tthrow new AuthenticationServiceException(\n\t\t\t\t\t\t\t\"AuthenticationDao returned null, which is an interface contract violation\");"
            },
            {
              "step": 37,
              "variableName": "getUsername",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\treturn this.nonceExpiryTime < now;\n\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {"
            },
            {
              "step": 39,
              "variableName": "this.username",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {"
            },
            {
              "step": 40,
              "variableName": "digestAuth.getUsername()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\ttry {\n\t\t\tif (user == null) {\n\t\t\t\tcacheWasUsed = false;\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tif (user == null) {\n\t\t\t\t\tthrow new AuthenticationServiceException(\n\t\t\t\t\t\t\t\"AuthenticationDao returned null, which is an interface contract violation\");"
            },
            {
              "step": 41,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t}\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tList<UserDetails> users = loadUsersByUsername(username);\n\t\tif (users.isEmpty()) {\n\t\t\tthis.logger.debug(\"Query returned no results for user '\" + username + \"'\");"
            },
            {
              "step": 42,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t\t\tthrow new UsernameNotFoundException(this.messages.getMessage(\"JdbcDaoImpl.noAuthority\",\n\t\t\t\t\tnew Object[] { username }, \"User {0} has no GrantedAuthority\"));\n\t\t}\n\t\treturn createUserDetails(username, user, dbAuths);\n\t}\n\n\t/**"
            },
            {
              "step": 43,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t * loading queries.\n\t * @return the final UserDetails which should be used in the system.\n\t */\n\tprotected UserDetails createUserDetails(String username, UserDetails userFromUserQuery,\n\t\t\tList<GrantedAuthority> combinedAuthorities) {\n\t\tString returnUsername = userFromUserQuery.getUsername();\n\t\tif (!this.usernameBasedPrimaryKey) {"
            },
            {
              "step": 44,
              "variableName": "returnUsername",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t\tif (!this.usernameBasedPrimaryKey) {\n\t\t\treturnUsername = username;\n\t\t}\n\t\treturn new User(returnUsername, userFromUserQuery.getPassword(), userFromUserQuery.isEnabled(),\n\t\t\t\tuserFromUserQuery.isAccountNonExpired(), userFromUserQuery.isCredentialsNonExpired(),\n\t\t\t\tuserFromUserQuery.isAccountNonLocked(), combinedAuthorities);\n\t}"
            },
            {
              "step": 45,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/User.java",
              "type": "String",
              "code": "\t * @throws IllegalArgumentException if a <code>null</code> value was passed either as\n\t * a parameter or as an element in the <code>GrantedAuthority</code> collection\n\t */\n\tpublic User(String username, String password, boolean enabled, boolean accountNonExpired,\n\t\t\tboolean credentialsNonExpired, boolean accountNonLocked,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tAssert.isTrue(username != null && !\"\".equals(username) && password != null,"
            },
            {
              "step": 46,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/User.java",
              "type": "",
              "code": "\tpublic User(String username, String password, boolean enabled, boolean accountNonExpired,\n\t\t\tboolean credentialsNonExpired, boolean accountNonLocked,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tAssert.isTrue(username != null && !\"\".equals(username) && password != null,\n\t\t\t\t\"Cannot pass null or empty values to constructor\");\n\t\tthis.username = username;\n\t\tthis.password = password;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 7,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 8,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 9,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 10,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 11,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 12,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 13,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 14,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 15,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 16,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 17,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 18,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 19,
              "variableName": "StringUtils.replace(s, removeCharacters, \"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 20,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 21,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 22,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "toSplit.substring(offset + 1)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 24,
              "variableName": "afterDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 25,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 26,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 27,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 28,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 30,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 33,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 34,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 35,
              "variableName": "headerMap.get(\"username\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 36,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 37,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 38,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 39,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\t// If digest is incorrect, try refreshing from backend and recomputing\n\t\t\tif (!serverDigestMd5.equals(digestAuth.getResponse()) && cacheWasUsed) {\n\t\t\t\tlogger.debug(\"Digest comparison failure; trying to refresh user from DAO in case password had changed\");\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tthis.userCache.putUserInCache(user);\n\t\t\t\tserverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());\n\t\t\t}"
            },
            {
              "step": 40,
              "variableName": "getUsername",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\treturn this.nonceExpiryTime < now;\n\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n"
            },
            {
              "step": 41,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {"
            },
            {
              "step": 42,
              "variableName": "this.username",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {"
            },
            {
              "step": 43,
              "variableName": "digestAuth.getUsername()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t// If digest is incorrect, try refreshing from backend and recomputing\n\t\t\tif (!serverDigestMd5.equals(digestAuth.getResponse()) && cacheWasUsed) {\n\t\t\t\tlogger.debug(\"Digest comparison failure; trying to refresh user from DAO in case password had changed\");\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tthis.userCache.putUserInCache(user);\n\t\t\t\tserverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());\n\t\t\t}"
            },
            {
              "step": 44,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t}\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tList<UserDetails> users = loadUsersByUsername(username);\n\t\tif (users.isEmpty()) {\n\t\t\tthis.logger.debug(\"Query returned no results for user '\" + username + \"'\");"
            },
            {
              "step": 45,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t\t\tthrow new UsernameNotFoundException(this.messages.getMessage(\"JdbcDaoImpl.noAuthority\",\n\t\t\t\t\tnew Object[] { username }, \"User {0} has no GrantedAuthority\"));\n\t\t}\n\t\treturn createUserDetails(username, user, dbAuths);\n\t}\n\n\t/**"
            },
            {
              "step": 46,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t * loading queries.\n\t * @return the final UserDetails which should be used in the system.\n\t */\n\tprotected UserDetails createUserDetails(String username, UserDetails userFromUserQuery,\n\t\t\tList<GrantedAuthority> combinedAuthorities) {\n\t\tString returnUsername = userFromUserQuery.getUsername();\n\t\tif (!this.usernameBasedPrimaryKey) {"
            },
            {
              "step": 47,
              "variableName": "returnUsername",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t\tif (!this.usernameBasedPrimaryKey) {\n\t\t\treturnUsername = username;\n\t\t}\n\t\treturn new User(returnUsername, userFromUserQuery.getPassword(), userFromUserQuery.isEnabled(),\n\t\t\t\tuserFromUserQuery.isAccountNonExpired(), userFromUserQuery.isCredentialsNonExpired(),\n\t\t\t\tuserFromUserQuery.isAccountNonLocked(), combinedAuthorities);\n\t}"
            },
            {
              "step": 48,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/User.java",
              "type": "String",
              "code": "\t * @throws IllegalArgumentException if a <code>null</code> value was passed either as\n\t * a parameter or as an element in the <code>GrantedAuthority</code> collection\n\t */\n\tpublic User(String username, String password, boolean enabled, boolean accountNonExpired,\n\t\t\tboolean credentialsNonExpired, boolean accountNonLocked,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tAssert.isTrue(username != null && !\"\".equals(username) && password != null,"
            },
            {
              "step": 49,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/User.java",
              "type": "",
              "code": "\tpublic User(String username, String password, boolean enabled, boolean accountNonExpired,\n\t\t\tboolean credentialsNonExpired, boolean accountNonLocked,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tAssert.isTrue(username != null && !\"\".equals(username) && password != null,\n\t\t\t\t\"Cannot pass null or empty values to constructor\");\n\t\tthis.username = username;\n\t\tthis.password = password;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"username\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\ttry {\n\t\t\tif (user == null) {\n\t\t\t\tcacheWasUsed = false;\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tif (user == null) {\n\t\t\t\t\tthrow new AuthenticationServiceException(\n\t\t\t\t\t\t\t\"AuthenticationDao returned null, which is an interface contract violation\");"
            },
            {
              "step": 37,
              "variableName": "getUsername",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\treturn this.nonceExpiryTime < now;\n\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {"
            },
            {
              "step": 39,
              "variableName": "this.username",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {"
            },
            {
              "step": 40,
              "variableName": "digestAuth.getUsername()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\ttry {\n\t\t\tif (user == null) {\n\t\t\t\tcacheWasUsed = false;\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tif (user == null) {\n\t\t\t\t\tthrow new AuthenticationServiceException(\n\t\t\t\t\t\t\t\"AuthenticationDao returned null, which is an interface contract violation\");"
            },
            {
              "step": 41,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/authentication/CachingUserDetailsService.java",
              "type": "String",
              "code": "\t}\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) {\n\t\tUserDetails user = this.userCache.getUserFromCache(username);\n\t\tif (user == null) {\n\t\t\tuser = this.delegate.loadUserByUsername(username);"
            },
            {
              "step": 42,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/authentication/CachingUserDetailsService.java",
              "type": "String",
              "code": "\tpublic UserDetails loadUserByUsername(String username) {\n\t\tUserDetails user = this.userCache.getUserFromCache(username);\n\t\tif (user == null) {\n\t\t\tuser = this.delegate.loadUserByUsername(username);\n\t\t}\n\t\tAssert.notNull(user, () -> \"UserDetailsService \" + this.delegate + \" returned null for username \" + username\n\t\t\t\t+ \". \" + \"This is an interface contract violation\");"
            },
            {
              "step": 43,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t}\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tList<UserDetails> users = loadUsersByUsername(username);\n\t\tif (users.isEmpty()) {\n\t\t\tthis.logger.debug(\"Query returned no results for user '\" + username + \"'\");"
            },
            {
              "step": 44,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t\t\tthrow new UsernameNotFoundException(this.messages.getMessage(\"JdbcDaoImpl.noAuthority\",\n\t\t\t\t\tnew Object[] { username }, \"User {0} has no GrantedAuthority\"));\n\t\t}\n\t\treturn createUserDetails(username, user, dbAuths);\n\t}\n\n\t/**"
            },
            {
              "step": 45,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t * loading queries.\n\t * @return the final UserDetails which should be used in the system.\n\t */\n\tprotected UserDetails createUserDetails(String username, UserDetails userFromUserQuery,\n\t\t\tList<GrantedAuthority> combinedAuthorities) {\n\t\tString returnUsername = userFromUserQuery.getUsername();\n\t\tif (!this.usernameBasedPrimaryKey) {"
            },
            {
              "step": 46,
              "variableName": "returnUsername",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t\tif (!this.usernameBasedPrimaryKey) {\n\t\t\treturnUsername = username;\n\t\t}\n\t\treturn new User(returnUsername, userFromUserQuery.getPassword(), userFromUserQuery.isEnabled(),\n\t\t\t\tuserFromUserQuery.isAccountNonExpired(), userFromUserQuery.isCredentialsNonExpired(),\n\t\t\t\tuserFromUserQuery.isAccountNonLocked(), combinedAuthorities);\n\t}"
            },
            {
              "step": 47,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/User.java",
              "type": "String",
              "code": "\t * @throws IllegalArgumentException if a <code>null</code> value was passed either as\n\t * a parameter or as an element in the <code>GrantedAuthority</code> collection\n\t */\n\tpublic User(String username, String password, boolean enabled, boolean accountNonExpired,\n\t\t\tboolean credentialsNonExpired, boolean accountNonLocked,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tAssert.isTrue(username != null && !\"\".equals(username) && password != null,"
            },
            {
              "step": 48,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/User.java",
              "type": "",
              "code": "\tpublic User(String username, String password, boolean enabled, boolean accountNonExpired,\n\t\t\tboolean credentialsNonExpired, boolean accountNonLocked,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tAssert.isTrue(username != null && !\"\".equals(username) && password != null,\n\t\t\t\t\"Cannot pass null or empty values to constructor\");\n\t\tthis.username = username;\n\t\tthis.password = password;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"username\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");"
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\ttry {\n\t\t\tif (user == null) {\n\t\t\t\tcacheWasUsed = false;\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tif (user == null) {\n\t\t\t\t\tthrow new AuthenticationServiceException(\n\t\t\t\t\t\t\t\"AuthenticationDao returned null, which is an interface contract violation\");"
            },
            {
              "step": 37,
              "variableName": "getUsername",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t\treturn this.nonceExpiryTime < now;\n\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [username] : String",
              "code": "\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {"
            },
            {
              "step": 39,
              "variableName": "this.username",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t}\n\n\t\tString getUsername() {\n\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {"
            },
            {
              "step": 40,
              "variableName": "digestAuth.getUsername()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\ttry {\n\t\t\tif (user == null) {\n\t\t\t\tcacheWasUsed = false;\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tif (user == null) {\n\t\t\t\t\tthrow new AuthenticationServiceException(\n\t\t\t\t\t\t\t\"AuthenticationDao returned null, which is an interface contract violation\");"
            },
            {
              "step": 41,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsService.java",
              "type": "String",
              "code": "\t}\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tDirContextOperations userData = this.userSearch.searchForUser(username);\n\t\treturn this.userDetailsMapper.mapUserFromContext(userData, username,\n\t\t\t\tthis.authoritiesPopulator.getGrantedAuthorities(userData, username));"
            },
            {
              "step": 42,
              "variableName": "username",
              "uri": "spring-security-6.4.3/ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsService.java",
              "type": "String",
              "code": "\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tDirContextOperations userData = this.userSearch.searchForUser(username);\n\t\treturn this.userDetailsMapper.mapUserFromContext(userData, username,\n\t\t\t\tthis.authoritiesPopulator.getGrantedAuthorities(userData, username));\n\t}\n\n\tpublic void setUserDetailsMapper(UserDetailsContextMapper userDetailsMapper) {"
            },
            {
              "step": 43,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/ldap/src/main/java/org/springframework/security/ldap/authentication/UserDetailsServiceLdapAuthoritiesPopulator.java",
              "type": "String",
              "code": "\n\t@Override\n\tpublic Collection<? extends GrantedAuthority> getGrantedAuthorities(DirContextOperations userData,\n\t\t\tString username) {\n\t\treturn this.userDetailsService.loadUserByUsername(username).getAuthorities();\n\t}\n"
            },
            {
              "step": 44,
              "variableName": "username",
              "uri": "spring-security-6.4.3/ldap/src/main/java/org/springframework/security/ldap/authentication/UserDetailsServiceLdapAuthoritiesPopulator.java",
              "type": "String",
              "code": "\t@Override\n\tpublic Collection<? extends GrantedAuthority> getGrantedAuthorities(DirContextOperations userData,\n\t\t\tString username) {\n\t\treturn this.userDetailsService.loadUserByUsername(username).getAuthorities();\n\t}\n\n}"
            },
            {
              "step": 45,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t}\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tList<UserDetails> users = loadUsersByUsername(username);\n\t\tif (users.isEmpty()) {\n\t\t\tthis.logger.debug(\"Query returned no results for user '\" + username + \"'\");"
            },
            {
              "step": 46,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t\t\tthrow new UsernameNotFoundException(this.messages.getMessage(\"JdbcDaoImpl.noAuthority\",\n\t\t\t\t\tnew Object[] { username }, \"User {0} has no GrantedAuthority\"));\n\t\t}\n\t\treturn createUserDetails(username, user, dbAuths);\n\t}\n\n\t/**"
            },
            {
              "step": 47,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t * loading queries.\n\t * @return the final UserDetails which should be used in the system.\n\t */\n\tprotected UserDetails createUserDetails(String username, UserDetails userFromUserQuery,\n\t\t\tList<GrantedAuthority> combinedAuthorities) {\n\t\tString returnUsername = userFromUserQuery.getUsername();\n\t\tif (!this.usernameBasedPrimaryKey) {"
            },
            {
              "step": 48,
              "variableName": "returnUsername",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java",
              "type": "String",
              "code": "\t\tif (!this.usernameBasedPrimaryKey) {\n\t\t\treturnUsername = username;\n\t\t}\n\t\treturn new User(returnUsername, userFromUserQuery.getPassword(), userFromUserQuery.isEnabled(),\n\t\t\t\tuserFromUserQuery.isAccountNonExpired(), userFromUserQuery.isCredentialsNonExpired(),\n\t\t\t\tuserFromUserQuery.isAccountNonLocked(), combinedAuthorities);\n\t}"
            },
            {
              "step": 49,
              "variableName": "String username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/User.java",
              "type": "String",
              "code": "\t * @throws IllegalArgumentException if a <code>null</code> value was passed either as\n\t * a parameter or as an element in the <code>GrantedAuthority</code> collection\n\t */\n\tpublic User(String username, String password, boolean enabled, boolean accountNonExpired,\n\t\t\tboolean credentialsNonExpired, boolean accountNonLocked,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tAssert.isTrue(username != null && !\"\".equals(username) && password != null,"
            },
            {
              "step": 50,
              "variableName": "username",
              "uri": "spring-security-6.4.3/core/src/main/java/org/springframework/security/core/userdetails/User.java",
              "type": "",
              "code": "\tpublic User(String username, String password, boolean enabled, boolean accountNonExpired,\n\t\t\tboolean credentialsNonExpired, boolean accountNonLocked,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tAssert.isTrue(username != null && !\"\".equals(username) && password != null,\n\t\t\t\t\"Cannot pass null or empty values to constructor\");\n\t\tthis.username = username;\n\t\tthis.password = password;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "DigestAuthUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"qop\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t\t}\n\t\t\t\tthis.userCache.putUserInCache(user);\n\t\t\t}\n\t\t\tserverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());\n\t\t\t// If digest is incorrect, try refreshing from backend and recomputing\n\t\t\tif (!serverDigestMd5.equals(digestAuth.getResponse()) && cacheWasUsed) {\n\t\t\t\tlogger.debug(\"Digest comparison failure; trying to refresh user from DAO in case password had changed\");"
            },
            {
              "step": 37,
              "variableName": "calculateServerDigest",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t}\n\t\t}\n\n\t\tString calculateServerDigest(String password, String httpMethod) {\n\t\t\t// Compute the expected response-digest (will be in hex form). Don't catch\n\t\t\t// IllegalArgumentException (already checked validity)\n\t\t\treturn DigestAuthUtils.generateDigest(DigestAuthenticationFilter.this.passwordAlreadyEncoded, this.username,"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t// Compute the expected response-digest (will be in hex form). Don't catch\n\t\t\t// IllegalArgumentException (already checked validity)\n\t\t\treturn DigestAuthUtils.generateDigest(DigestAuthenticationFilter.this.passwordAlreadyEncoded, this.username,\n\t\t\t\t\tthis.realm, password, httpMethod, this.uri, this.qop, this.nonce, this.nc, this.cnonce);\n\t\t}\n\n\t\tboolean isNonceExpired() {"
            },
            {
              "step": 39,
              "variableName": "this.qop",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t// Compute the expected response-digest (will be in hex form). Don't catch\n\t\t\t// IllegalArgumentException (already checked validity)\n\t\t\treturn DigestAuthUtils.generateDigest(DigestAuthenticationFilter.this.passwordAlreadyEncoded, this.username,\n\t\t\t\t\tthis.realm, password, httpMethod, this.uri, this.qop, this.nonce, this.nc, this.cnonce);\n\t\t}\n\n\t\tboolean isNonceExpired() {"
            },
            {
              "step": 40,
              "variableName": "String qop",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * @throws IllegalArgumentException if the supplied qop value is unsupported.\n\t */\n\tstatic String generateDigest(boolean passwordAlreadyEncoded, String username, String realm, String password,\n\t\t\tString httpMethod, String uri, String qop, String nonce, String nc, String cnonce)\n\t\t\tthrows IllegalArgumentException {\n\t\tString a2 = httpMethod + \":\" + uri;\n\t\tString a1Md5 = (!passwordAlreadyEncoded) ? DigestAuthUtils.encodePasswordInA1Format(username, realm, password)"
            },
            {
              "step": 41,
              "variableName": "qop",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "",
              "code": "\t\t\t// as per RFC 2069 compliant clients (also reaffirmed by RFC 2617)\n\t\t\treturn md5Hex(a1Md5 + \":\" + nonce + \":\" + a2Md5);\n\t\t}\n\t\tif (\"auth\".equals(qop)) {\n\t\t\t// As per RFC 2617 compliant clients\n\t\t\treturn md5Hex(a1Md5 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + a2Md5);\n\t\t}"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 7,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 8,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 9,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 10,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 11,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 12,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 13,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 14,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 15,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 16,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 17,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 18,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 19,
              "variableName": "StringUtils.replace(s, removeCharacters, \"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 20,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 21,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 22,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "toSplit.substring(offset + 1)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 24,
              "variableName": "afterDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 25,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 26,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 27,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 28,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 30,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 33,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 34,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 35,
              "variableName": "headerMap.get(\"qop\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 36,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 37,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 38,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 39,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t\tlogger.debug(\"Digest comparison failure; trying to refresh user from DAO in case password had changed\");\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tthis.userCache.putUserInCache(user);\n\t\t\t\tserverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());\n\t\t\t}\n\t\t}\n\t\tcatch (UsernameNotFoundException ex) {"
            },
            {
              "step": 40,
              "variableName": "calculateServerDigest",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t}\n\t\t}\n\n\t\tString calculateServerDigest(String password, String httpMethod) {\n\t\t\t// Compute the expected response-digest (will be in hex form). Don't catch\n\t\t\t// IllegalArgumentException (already checked validity)\n\t\t\treturn DigestAuthUtils.generateDigest(DigestAuthenticationFilter.this.passwordAlreadyEncoded, this.username,"
            },
            {
              "step": 41,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t// Compute the expected response-digest (will be in hex form). Don't catch\n\t\t\t// IllegalArgumentException (already checked validity)\n\t\t\treturn DigestAuthUtils.generateDigest(DigestAuthenticationFilter.this.passwordAlreadyEncoded, this.username,\n\t\t\t\t\tthis.realm, password, httpMethod, this.uri, this.qop, this.nonce, this.nc, this.cnonce);\n\t\t}\n\n\t\tboolean isNonceExpired() {"
            },
            {
              "step": 42,
              "variableName": "this.qop",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t// Compute the expected response-digest (will be in hex form). Don't catch\n\t\t\t// IllegalArgumentException (already checked validity)\n\t\t\treturn DigestAuthUtils.generateDigest(DigestAuthenticationFilter.this.passwordAlreadyEncoded, this.username,\n\t\t\t\t\tthis.realm, password, httpMethod, this.uri, this.qop, this.nonce, this.nc, this.cnonce);\n\t\t}\n\n\t\tboolean isNonceExpired() {"
            },
            {
              "step": 43,
              "variableName": "String qop",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * @throws IllegalArgumentException if the supplied qop value is unsupported.\n\t */\n\tstatic String generateDigest(boolean passwordAlreadyEncoded, String username, String realm, String password,\n\t\t\tString httpMethod, String uri, String qop, String nonce, String nc, String cnonce)\n\t\t\tthrows IllegalArgumentException {\n\t\tString a2 = httpMethod + \":\" + uri;\n\t\tString a1Md5 = (!passwordAlreadyEncoded) ? DigestAuthUtils.encodePasswordInA1Format(username, realm, password)"
            },
            {
              "step": 44,
              "variableName": "qop",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "",
              "code": "\t\t\t// as per RFC 2069 compliant clients (also reaffirmed by RFC 2617)\n\t\t\treturn md5Hex(a1Md5 + \":\" + nonce + \":\" + a2Md5);\n\t\t}\n\t\tif (\"auth\".equals(qop)) {\n\t\t\t// As per RFC 2617 compliant clients\n\t\t\treturn md5Hex(a1Md5 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + a2Md5);\n\t\t}"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "DigestAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"response\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\t}\n\t\t\tserverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());\n\t\t\t// If digest is incorrect, try refreshing from backend and recomputing\n\t\t\tif (!serverDigestMd5.equals(digestAuth.getResponse()) && cacheWasUsed) {\n\t\t\t\tlogger.debug(\"Digest comparison failure; trying to refresh user from DAO in case password had changed\");\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tthis.userCache.putUserInCache(user);"
            },
            {
              "step": 37,
              "variableName": "getResponse",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n\n\t}"
            },
            {
              "step": 39,
              "variableName": "this.response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n\n\t}"
            },
            {
              "step": 40,
              "variableName": "digestAuth.getResponse()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\t}\n\t\t\tserverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());\n\t\t\t// If digest is incorrect, try refreshing from backend and recomputing\n\t\t\tif (!serverDigestMd5.equals(digestAuth.getResponse()) && cacheWasUsed) {\n\t\t\t\tlogger.debug(\"Digest comparison failure; trying to refresh user from DAO in case password had changed\");\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tthis.userCache.putUserInCache(user);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 7,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 8,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 9,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 10,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 11,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 12,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 13,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 14,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 15,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 16,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 17,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 18,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 19,
              "variableName": "StringUtils.replace(s, removeCharacters, \"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 20,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 21,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 22,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "toSplit.substring(offset + 1)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 24,
              "variableName": "afterDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 25,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 26,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 27,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 28,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 30,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 33,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 34,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 35,
              "variableName": "headerMap.get(\"response\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 36,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 37,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 38,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 39,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\t}\n\t\t\tserverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());\n\t\t\t// If digest is incorrect, try refreshing from backend and recomputing\n\t\t\tif (!serverDigestMd5.equals(digestAuth.getResponse()) && cacheWasUsed) {\n\t\t\t\tlogger.debug(\"Digest comparison failure; trying to refresh user from DAO in case password had changed\");\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tthis.userCache.putUserInCache(user);"
            },
            {
              "step": 40,
              "variableName": "getResponse",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n"
            },
            {
              "step": 41,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n\n\t}"
            },
            {
              "step": 42,
              "variableName": "this.response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n\n\t}"
            },
            {
              "step": 43,
              "variableName": "digestAuth.getResponse()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\t}\n\t\t\tserverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());\n\t\t\t// If digest is incorrect, try refreshing from backend and recomputing\n\t\t\tif (!serverDigestMd5.equals(digestAuth.getResponse()) && cacheWasUsed) {\n\t\t\t\tlogger.debug(\"Digest comparison failure; trying to refresh user from DAO in case password had changed\");\n\t\t\t\tuser = this.userDetailsService.loadUserByUsername(digestAuth.getUsername());\n\t\t\t\tthis.userCache.putUserInCache(user);"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "DigestAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"response\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\t// If digest is still incorrect, definitely reject authentication attempt\n\t\tif (!serverDigestMd5.equals(digestAuth.getResponse())) {\n\t\t\tlogger.debug(LogMessage.format(\n\t\t\t\t\t\"Expected response: '%s' but received: '%s'; is AuthenticationDao returning clear text passwords?\",\n\t\t\t\t\tserverDigestMd5, digestAuth.getResponse()));"
            },
            {
              "step": 37,
              "variableName": "getResponse",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n\n\t}"
            },
            {
              "step": 39,
              "variableName": "this.response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n\n\t}"
            },
            {
              "step": 40,
              "variableName": "digestAuth.getResponse()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\treturn;\n\t\t}\n\t\t// If digest is still incorrect, definitely reject authentication attempt\n\t\tif (!serverDigestMd5.equals(digestAuth.getResponse())) {\n\t\t\tlogger.debug(LogMessage.format(\n\t\t\t\t\t\"Expected response: '%s' but received: '%s'; is AuthenticationDao returning clear text passwords?\",\n\t\t\t\t\tserverDigestMd5, digestAuth.getResponse()));"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 7,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 8,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 9,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 10,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 11,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 12,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 13,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 14,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 15,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 16,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 17,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 18,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 19,
              "variableName": "StringUtils.replace(s, removeCharacters, \"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 20,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 21,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 22,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "toSplit.substring(offset + 1)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 24,
              "variableName": "afterDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 25,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 26,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 27,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 28,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 30,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 33,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 34,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 35,
              "variableName": "headerMap.get(\"response\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 36,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension"
            },
            {
              "step": 37,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 38,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 39,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\t// If digest is still incorrect, definitely reject authentication attempt\n\t\tif (!serverDigestMd5.equals(digestAuth.getResponse())) {\n\t\t\tlogger.debug(LogMessage.format(\n\t\t\t\t\t\"Expected response: '%s' but received: '%s'; is AuthenticationDao returning clear text passwords?\",\n\t\t\t\t\tserverDigestMd5, digestAuth.getResponse()));"
            },
            {
              "step": 40,
              "variableName": "getResponse",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t\treturn this.username;\n\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n"
            },
            {
              "step": 41,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [response] : String",
              "code": "\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n\n\t}"
            },
            {
              "step": 42,
              "variableName": "this.response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t}\n\n\t\tString getResponse() {\n\t\t\treturn this.response;\n\t\t}\n\n\t}"
            },
            {
              "step": 43,
              "variableName": "digestAuth.getResponse()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\treturn;\n\t\t}\n\t\t// If digest is still incorrect, definitely reject authentication attempt\n\t\tif (!serverDigestMd5.equals(digestAuth.getResponse())) {\n\t\t\tlogger.debug(LogMessage.format(\n\t\t\t\t\t\"Expected response: '%s' but received: '%s'; is AuthenticationDao returning clear text passwords?\",\n\t\t\t\t\tserverDigestMd5, digestAuth.getResponse()));"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "DigestAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"qop\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());\n\t\t}\n\t\tcatch (BadCredentialsException ex) {"
            },
            {
              "step": 37,
              "variableName": "validateAndDecode",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t\t\t\t\tthis.username, this.realm, this.nonce, this.uri, this.response));\n\t\t}\n\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t\t\t\t\"Missing mandatory digest value; received header {0}\"));\n\t\t\t}\n\t\t\t// Check all required parameters for an \"auth\" qop were supplied (ie RFC 2617)\n\t\t\tif (\"auth\".equals(this.qop)) {\n\t\t\t\tif ((this.nc == null) || (this.cnonce == null)) {\n\t\t\t\t\tlogger.debug(LogMessage.format(\"extracted nc: '%s'; cnonce: '%s'\", this.nc, this.cnonce));\n\t\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage("
            },
            {
              "step": 39,
              "variableName": "this.qop",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\t\t\t\t\"Missing mandatory digest value; received header {0}\"));\n\t\t\t}\n\t\t\t// Check all required parameters for an \"auth\" qop were supplied (ie RFC 2617)\n\t\t\tif (\"auth\".equals(this.qop)) {\n\t\t\t\tif ((this.nc == null) || (this.cnonce == null)) {\n\t\t\t\t\tlogger.debug(LogMessage.format(\"extracted nc: '%s'; cnonce: '%s'\", this.nc, this.cnonce));\n\t\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage("
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 7,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 8,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 9,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 10,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 11,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 12,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 13,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 14,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 15,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 16,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 17,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 18,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 19,
              "variableName": "StringUtils.replace(s, removeCharacters, \"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 20,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 21,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 22,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "toSplit.substring(offset + 1)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 24,
              "variableName": "afterDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 25,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 26,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 27,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 28,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 30,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 33,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 34,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 35,
              "variableName": "headerMap.get(\"qop\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 36,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension\n\t\t\tthis.nc = headerMap.get(\"nc\"); // RFC 2617 extension\n\t\t\tthis.cnonce = headerMap.get(\"cnonce\"); // RFC 2617 extension\n\t\t\tlogger.debug("
            },
            {
              "step": 37,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 38,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 39,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());\n\t\t}\n\t\tcatch (BadCredentialsException ex) {"
            },
            {
              "step": 40,
              "variableName": "validateAndDecode",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t\t\t\t\tthis.username, this.realm, this.nonce, this.uri, this.response));\n\t\t}\n\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {"
            },
            {
              "step": 41,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [qop] : String",
              "code": "\t\t\t\t\t\t\"Missing mandatory digest value; received header {0}\"));\n\t\t\t}\n\t\t\t// Check all required parameters for an \"auth\" qop were supplied (ie RFC 2617)\n\t\t\tif (\"auth\".equals(this.qop)) {\n\t\t\t\tif ((this.nc == null) || (this.cnonce == null)) {\n\t\t\t\t\tlogger.debug(LogMessage.format(\"extracted nc: '%s'; cnonce: '%s'\", this.nc, this.cnonce));\n\t\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage("
            },
            {
              "step": 42,
              "variableName": "this.qop",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\t\t\t\t\"Missing mandatory digest value; received header {0}\"));\n\t\t\t}\n\t\t\t// Check all required parameters for an \"auth\" qop were supplied (ie RFC 2617)\n\t\t\tif (\"auth\".equals(this.qop)) {\n\t\t\t\tif ((this.nc == null) || (this.cnonce == null)) {\n\t\t\t\t\tlogger.debug(LogMessage.format(\"extracted nc: '%s'; cnonce: '%s'\", this.nc, this.cnonce));\n\t\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage("
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "DigestAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");"
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"realm\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");"
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");"
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());\n\t\t}\n\t\tcatch (BadCredentialsException ex) {"
            },
            {
              "step": 37,
              "variableName": "validateAndDecode",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\t\t\t\t\t\tthis.username, this.realm, this.nonce, this.uri, this.response));\n\t\t}\n\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\t\t\t}\n\t\t\t}\n\t\t\t// Check realm name equals what we expected\n\t\t\tif (!expectedRealm.equals(this.realm)) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.incorrectRealm\", new Object[] { this.realm, expectedRealm },\n\t\t\t\t\t\t\"Response realm name '{0}' does not match system realm name of '{1}'\"));"
            },
            {
              "step": 39,
              "variableName": "this.realm",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\t\t}\n\t\t\t}\n\t\t\t// Check realm name equals what we expected\n\t\t\tif (!expectedRealm.equals(this.realm)) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.incorrectRealm\", new Object[] { this.realm, expectedRealm },\n\t\t\t\t\t\t\"Response realm name '{0}' does not match system realm name of '{1}'\"));"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 7,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 8,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 9,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 10,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 11,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 12,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 13,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 14,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 15,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 16,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 17,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 18,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 19,
              "variableName": "StringUtils.replace(s, removeCharacters, \"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 20,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 21,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 22,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "toSplit.substring(offset + 1)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 24,
              "variableName": "afterDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 25,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 26,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 27,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 28,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 30,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 33,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 34,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");"
            },
            {
              "step": 35,
              "variableName": "headerMap.get(\"realm\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");"
            },
            {
              "step": 36,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");"
            },
            {
              "step": 37,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 38,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 39,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());\n\t\t}\n\t\tcatch (BadCredentialsException ex) {"
            },
            {
              "step": 40,
              "variableName": "validateAndDecode",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\t\t\t\t\t\t\tthis.username, this.realm, this.nonce, this.uri, this.response));\n\t\t}\n\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {"
            },
            {
              "step": 41,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [realm] : String",
              "code": "\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.missingMandatory\", new Object[] { this.section212response },"
            },
            {
              "step": 42,
              "variableName": "this.realm",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.missingMandatory\", new Object[] { this.section212response },"
            },
            {
              "step": 43,
              "variableName": "this.realm",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\t\t}\n\t\t\t}\n\t\t\t// Check realm name equals what we expected\n\t\t\tif (!expectedRealm.equals(this.realm)) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.incorrectRealm\", new Object[] { this.realm, expectedRealm },\n\t\t\t\t\t\t\"Response realm name '{0}' does not match system realm name of '{1}'\"));"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "DigestAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 6,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 7,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 8,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 9,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\t}\n\t\t\tif (str.charAt(i) == separatorChar) {\n\t\t\t\tif (match) {\n\t\t\t\t\tlist.add(str.substring(start, i));\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t\tstart = ++i;"
            },
            {
              "step": 10,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 11,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 12,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 13,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 14,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 15,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 16,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 17,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 18,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 19,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 20,
              "variableName": "toSplit.substring(0, offset)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}"
            },
            {
              "step": 21,
              "variableName": "beforeDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 22,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 23,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 24,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 25,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 26,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 27,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 30,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 31,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension"
            },
            {
              "step": 32,
              "variableName": "headerMap.get(\"nonce\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension"
            },
            {
              "step": 33,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension"
            },
            {
              "step": 34,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 35,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 36,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());\n\t\t}\n\t\tcatch (BadCredentialsException ex) {"
            },
            {
              "step": 37,
              "variableName": "validateAndDecode",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\t\t\t\t\t\tthis.username, this.realm, this.nonce, this.uri, this.response));\n\t\t}\n\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {"
            },
            {
              "step": 38,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\t\t// Check nonce was Base64 encoded (as sent by DigestAuthenticationEntryPoint)\n\t\t\tfinal byte[] nonceBytes;\n\t\t\ttry {\n\t\t\t\tnonceBytes = Base64.getDecoder().decode(this.nonce.getBytes());\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\tthrow new BadCredentialsException("
            },
            {
              "step": 39,
              "variableName": "this.nonce",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t// Check nonce was Base64 encoded (as sent by DigestAuthenticationEntryPoint)\n\t\t\tfinal byte[] nonceBytes;\n\t\t\ttry {\n\t\t\t\tnonceBytes = Base64.getDecoder().decode(this.nonce.getBytes());\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\tthrow new BadCredentialsException("
            },
            {
              "step": 40,
              "variableName": "this.nonce.getBytes()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "byte[]",
              "code": "\t\t\t// Check nonce was Base64 encoded (as sent by DigestAuthenticationEntryPoint)\n\t\t\tfinal byte[] nonceBytes;\n\t\t\ttry {\n\t\t\t\tnonceBytes = Base64.getDecoder().decode(this.nonce.getBytes());\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\tthrow new BadCredentialsException("
            },
            {
              "step": 41,
              "variableName": "Base64.getDecoder().decode(this.nonce.getBytes())",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "byte[]",
              "code": "\t\t\t// Check nonce was Base64 encoded (as sent by DigestAuthenticationEntryPoint)\n\t\t\tfinal byte[] nonceBytes;\n\t\t\ttry {\n\t\t\t\tnonceBytes = Base64.getDecoder().decode(this.nonce.getBytes());\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\tthrow new BadCredentialsException("
            },
            {
              "step": 42,
              "variableName": "nonceBytes",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "byte[]",
              "code": "\t\t\t}\n\t\t\t// Decode nonce from Base64 format of nonce is: base64(expirationTime + \":\" +\n\t\t\t// md5Hex(expirationTime + \":\" + key))\n\t\t\tString nonceAsPlainText = new String(nonceBytes);\n\t\t\tString[] nonceTokens = StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\");\n\t\t\tif (nonceTokens.length != 2) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage("
            },
            {
              "step": 43,
              "variableName": "new String(nonceBytes)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\t// Decode nonce from Base64 format of nonce is: base64(expirationTime + \":\" +\n\t\t\t// md5Hex(expirationTime + \":\" + key))\n\t\t\tString nonceAsPlainText = new String(nonceBytes);\n\t\t\tString[] nonceTokens = StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\");\n\t\t\tif (nonceTokens.length != 2) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage("
            },
            {
              "step": 44,
              "variableName": "nonceAsPlainText",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t// Decode nonce from Base64 format of nonce is: base64(expirationTime + \":\" +\n\t\t\t// md5Hex(expirationTime + \":\" + key))\n\t\t\tString nonceAsPlainText = new String(nonceBytes);\n\t\t\tString[] nonceTokens = StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\");\n\t\t\tif (nonceTokens.length != 2) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.nonceNotTwoTokens\", new Object[] { nonceAsPlainText },"
            },
            {
              "step": 45,
              "variableName": "StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : Object",
              "code": "\t\t\t// Decode nonce from Base64 format of nonce is: base64(expirationTime + \":\" +\n\t\t\t// md5Hex(expirationTime + \":\" + key))\n\t\t\tString nonceAsPlainText = new String(nonceBytes);\n\t\t\tString[] nonceTokens = StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\");\n\t\t\tif (nonceTokens.length != 2) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.nonceNotTwoTokens\", new Object[] { nonceAsPlainText },"
            },
            {
              "step": 46,
              "variableName": "nonceTokens",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : Object",
              "code": "\t\t\t}\n\t\t\t// Check signature of nonce matches this expiry time\n\t\t\tString expectedNonceSignature = DigestAuthUtils.md5Hex(this.nonceExpiryTime + \":\" + entryPointKey);\n\t\t\tif (!expectedNonceSignature.equals(nonceTokens[1])) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.nonceCompromised\", new Object[] { nonceAsPlainText },\n\t\t\t\t\t\t\"Nonce token compromised {0}\"));"
            },
            {
              "step": 47,
              "variableName": "nonceTokens[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\t}\n\t\t\t// Check signature of nonce matches this expiry time\n\t\t\tString expectedNonceSignature = DigestAuthUtils.md5Hex(this.nonceExpiryTime + \":\" + entryPointKey);\n\t\t\tif (!expectedNonceSignature.equals(nonceTokens[1])) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.nonceCompromised\", new Object[] { nonceAsPlainText },\n\t\t\t\t\t\t\"Nonce token compromised {0}\"));"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(\"Authorization\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\tprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tString header = request.getHeader(\"Authorization\");\n\t\tif (header == null || !header.startsWith(\"Digest \")) {\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;"
            },
            {
              "step": 1,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 2,
              "variableName": "String header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 3,
              "variableName": "header",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 4,
              "variableName": "header.substring(7)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [section212response] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 7,
              "variableName": "this.section212response",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 8,
              "variableName": "String str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\treturn md5Hex(a1);\n\t}\n\n\tstatic String[] splitIgnoringQuotes(String str, char separatorChar) {\n\t\tif (str == null) {\n\t\t\treturn null;\n\t\t}"
            },
            {
              "step": 9,
              "variableName": "str",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 10,
              "variableName": "str.substring(start, i)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 11,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\t\ti++;\n\t\t}\n\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}"
            },
            {
              "step": 12,
              "variableName": "list",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "ArrayList [<element>] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 13,
              "variableName": "list.toArray(new String[0])",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tif (match) {\n\t\t\tlist.add(str.substring(start, i));\n\t\t}\n\t\treturn list.toArray(new String[0]);\n\t}\n\n\t/**"
            },
            {
              "step": 14,
              "variableName": "DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',')",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");"
            },
            {
              "step": 15,
              "variableName": "headerEntries",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 16,
              "variableName": "String[] array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t * @return a <code>Map</code> representing the array contents, or <code>null</code> if\n\t * the array to process was null or empty\n\t */\n\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;"
            },
            {
              "step": 17,
              "variableName": "array",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {"
            },
            {
              "step": 18,
              "variableName": "s",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 19,
              "variableName": "StringUtils.replace(s, removeCharacters, \"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;"
            },
            {
              "step": 20,
              "variableName": "postRemove",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 21,
              "variableName": "String toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t * being after the delimiter (neither element includes the delimiter)\n\t * @throws IllegalArgumentException if an argument was invalid\n\t */\n\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");"
            },
            {
              "step": 22,
              "variableName": "toSplit",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "toSplit.substring(offset + 1)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n"
            },
            {
              "step": 24,
              "variableName": "afterDelimiter",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 25,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 26,
              "variableName": "new String[] { beforeDelimiter, afterDelimiter }",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}\n\n\tstatic String md5Hex(String data) {"
            },
            {
              "step": 27,
              "variableName": "split(postRemove, delimiter)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}"
            },
            {
              "step": 28,
              "variableName": "splitThisArrayElement",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String[] [[]] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 29,
              "variableName": "splitThisArrayElement[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 30,
              "variableName": "splitThisArrayElement[1].trim()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**"
            },
            {
              "step": 33,
              "variableName": "DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");"
            },
            {
              "step": 34,
              "variableName": "headerMap",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension"
            },
            {
              "step": 35,
              "variableName": "headerMap.get(\"nonce\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension"
            },
            {
              "step": 36,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");\n\t\t\tthis.username = headerMap.get(\"username\");\n\t\t\tthis.realm = headerMap.get(\"realm\");\n\t\t\tthis.nonce = headerMap.get(\"nonce\");\n\t\t\tthis.uri = headerMap.get(\"uri\");\n\t\t\tthis.response = headerMap.get(\"response\");\n\t\t\tthis.qop = headerMap.get(\"qop\"); // RFC 2617 extension"
            },
            {
              "step": 37,
              "variableName": "DigestData",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\n\t\tprivate long nonceExpiryTime;\n\n\t\tDigestData(String header) {\n\t\t\tthis.section212response = header.substring(7);\n\t\t\tString[] headerEntries = DigestAuthUtils.splitIgnoringQuotes(this.section212response, ',');\n\t\t\tMap<String, String> headerMap = DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries, \"=\", \"\\\"\");"
            },
            {
              "step": 38,
              "variableName": "new DigestData(header)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\t\treturn;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());"
            },
            {
              "step": 39,
              "variableName": "digestAuth",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\tlogger.debug(LogMessage.format(\"Digest Authorization header received from user agent: %s\", header));\n\t\tDigestData digestAuth = new DigestData(header);\n\t\ttry {\n\t\t\tdigestAuth.validateAndDecode(this.authenticationEntryPoint.getKey(),\n\t\t\t\t\tthis.authenticationEntryPoint.getRealmName());\n\t\t}\n\t\tcatch (BadCredentialsException ex) {"
            },
            {
              "step": 40,
              "variableName": "validateAndDecode",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\t\t\t\t\t\t\tthis.username, this.realm, this.nonce, this.uri, this.response));\n\t\t}\n\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {"
            },
            {
              "step": 41,
              "variableName": "this",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "DigestData [nonce] : String",
              "code": "\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.missingMandatory\", new Object[] { this.section212response },"
            },
            {
              "step": 42,
              "variableName": "this.nonce",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\n\t\tvoid validateAndDecode(String entryPointKey, String expectedRealm) throws BadCredentialsException {\n\t\t\t// Check all required parameters were supplied (ie RFC 2069)\n\t\t\tif ((this.username == null) || (this.realm == null) || (this.nonce == null) || (this.uri == null)\n\t\t\t\t\t|| (this.response == null)) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.missingMandatory\", new Object[] { this.section212response },"
            },
            {
              "step": 43,
              "variableName": "this.nonce",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t// Check nonce was Base64 encoded (as sent by DigestAuthenticationEntryPoint)\n\t\t\tfinal byte[] nonceBytes;\n\t\t\ttry {\n\t\t\t\tnonceBytes = Base64.getDecoder().decode(this.nonce.getBytes());\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\tthrow new BadCredentialsException("
            },
            {
              "step": 44,
              "variableName": "this.nonce.getBytes()",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "byte[]",
              "code": "\t\t\t// Check nonce was Base64 encoded (as sent by DigestAuthenticationEntryPoint)\n\t\t\tfinal byte[] nonceBytes;\n\t\t\ttry {\n\t\t\t\tnonceBytes = Base64.getDecoder().decode(this.nonce.getBytes());\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\tthrow new BadCredentialsException("
            },
            {
              "step": 45,
              "variableName": "Base64.getDecoder().decode(this.nonce.getBytes())",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "byte[]",
              "code": "\t\t\t// Check nonce was Base64 encoded (as sent by DigestAuthenticationEntryPoint)\n\t\t\tfinal byte[] nonceBytes;\n\t\t\ttry {\n\t\t\t\tnonceBytes = Base64.getDecoder().decode(this.nonce.getBytes());\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\tthrow new BadCredentialsException("
            },
            {
              "step": 46,
              "variableName": "nonceBytes",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "byte[]",
              "code": "\t\t\t}\n\t\t\t// Decode nonce from Base64 format of nonce is: base64(expirationTime + \":\" +\n\t\t\t// md5Hex(expirationTime + \":\" + key))\n\t\t\tString nonceAsPlainText = new String(nonceBytes);\n\t\t\tString[] nonceTokens = StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\");\n\t\t\tif (nonceTokens.length != 2) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage("
            },
            {
              "step": 47,
              "variableName": "new String(nonceBytes)",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t}\n\t\t\t// Decode nonce from Base64 format of nonce is: base64(expirationTime + \":\" +\n\t\t\t// md5Hex(expirationTime + \":\" + key))\n\t\t\tString nonceAsPlainText = new String(nonceBytes);\n\t\t\tString[] nonceTokens = StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\");\n\t\t\tif (nonceTokens.length != 2) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage("
            },
            {
              "step": 48,
              "variableName": "nonceAsPlainText",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String",
              "code": "\t\t\t// Decode nonce from Base64 format of nonce is: base64(expirationTime + \":\" +\n\t\t\t// md5Hex(expirationTime + \":\" + key))\n\t\t\tString nonceAsPlainText = new String(nonceBytes);\n\t\t\tString[] nonceTokens = StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\");\n\t\t\tif (nonceTokens.length != 2) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.nonceNotTwoTokens\", new Object[] { nonceAsPlainText },"
            },
            {
              "step": 49,
              "variableName": "StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\")",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : Object",
              "code": "\t\t\t// Decode nonce from Base64 format of nonce is: base64(expirationTime + \":\" +\n\t\t\t// md5Hex(expirationTime + \":\" + key))\n\t\t\tString nonceAsPlainText = new String(nonceBytes);\n\t\t\tString[] nonceTokens = StringUtils.delimitedListToStringArray(nonceAsPlainText, \":\");\n\t\t\tif (nonceTokens.length != 2) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.nonceNotTwoTokens\", new Object[] { nonceAsPlainText },"
            },
            {
              "step": 50,
              "variableName": "nonceTokens",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "String[] [[]] : Object",
              "code": "\t\t\t}\n\t\t\t// Check signature of nonce matches this expiry time\n\t\t\tString expectedNonceSignature = DigestAuthUtils.md5Hex(this.nonceExpiryTime + \":\" + entryPointKey);\n\t\t\tif (!expectedNonceSignature.equals(nonceTokens[1])) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.nonceCompromised\", new Object[] { nonceAsPlainText },\n\t\t\t\t\t\t\"Nonce token compromised {0}\"));"
            },
            {
              "step": 51,
              "variableName": "nonceTokens[1]",
              "uri": "spring-security-6.4.3/web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthenticationFilter.java",
              "type": "",
              "code": "\t\t\t}\n\t\t\t// Check signature of nonce matches this expiry time\n\t\t\tString expectedNonceSignature = DigestAuthUtils.md5Hex(this.nonceExpiryTime + \":\" + entryPointKey);\n\t\t\tif (!expectedNonceSignature.equals(nonceTokens[1])) {\n\t\t\t\tthrow new BadCredentialsException(DigestAuthenticationFilter.this.messages.getMessage(\n\t\t\t\t\t\t\"DigestAuthenticationFilter.nonceCompromised\", new Object[] { nonceAsPlainText },\n\t\t\t\t\t\t\"Nonce token compromised {0}\"));"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 7,
      "fileName": "HttpSecurityBeanDefinitionParser.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "this.wellKnownChangePasswordRedirectFilter",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java",
              "type": "AbstractBeanDefinition",
              "code": "\t\t\tfilters.add(new OrderDecorator(this.csrfFilter, SecurityFilters.CSRF_FILTER));\n\t\t}\n\t\tif (this.wellKnownChangePasswordRedirectFilter != null) {\n\t\t\tfilters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,\n\t\t\t\t\tSecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER));\n\t\t}\n\t\treturn filters;"
            },
            {
              "step": 1,
              "variableName": "BeanMetadataElement bean",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/OrderDecorator.java",
              "type": "AbstractBeanDefinition",
              "code": "\n\tfinal int order;\n\n\tOrderDecorator(BeanMetadataElement bean, SecurityFilters filterOrder) {\n\t\tthis.bean = bean;\n\t\tthis.order = filterOrder.getOrder();\n\t}"
            },
            {
              "step": 2,
              "variableName": "bean",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/OrderDecorator.java",
              "type": "AbstractBeanDefinition",
              "code": "\tfinal int order;\n\n\tOrderDecorator(BeanMetadataElement bean, SecurityFilters filterOrder) {\n\t\tthis.bean = bean;\n\t\tthis.order = filterOrder.getOrder();\n\t}\n"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/OrderDecorator.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\tfinal int order;\n\n\tOrderDecorator(BeanMetadataElement bean, SecurityFilters filterOrder) {\n\t\tthis.bean = bean;\n\t\tthis.order = filterOrder.getOrder();\n\t}\n"
            },
            {
              "step": 4,
              "variableName": "OrderDecorator",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/OrderDecorator.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\n\tfinal int order;\n\n\tOrderDecorator(BeanMetadataElement bean, SecurityFilters filterOrder) {\n\t\tthis.bean = bean;\n\t\tthis.order = filterOrder.getOrder();\n\t}"
            },
            {
              "step": 5,
              "variableName": "new OrderDecorator(this.wellKnownChangePasswordRe",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\t\t\tfilters.add(new OrderDecorator(this.csrfFilter, SecurityFilters.CSRF_FILTER));\n\t\t}\n\t\tif (this.wellKnownChangePasswordRedirectFilter != null) {\n\t\t\tfilters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,\n\t\t\t\t\tSecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER));\n\t\t}\n\t\treturn filters;"
            },
            {
              "step": 6,
              "variableName": "filters",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\t\tfilters.add(new OrderDecorator(this.csrfFilter, SecurityFilters.CSRF_FILTER));\n\t\t}\n\t\tif (this.wellKnownChangePasswordRedirectFilter != null) {\n\t\t\tfilters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,\n\t\t\t\t\tSecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER));\n\t\t}\n\t\treturn filters;"
            },
            {
              "step": 7,
              "variableName": "filters",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\t\tfilters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,\n\t\t\t\t\tSecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER));\n\t\t}\n\t\treturn filters;\n\t}\n\n\tprivate static BeanMetadataElement getObservationRegistry(Element httpElmt) {"
            },
            {
              "step": 8,
              "variableName": "httpBldr.getFilters()",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\thttpBldr.setCsrfIgnoreRequestMatchers(authBldr.getCsrfIgnoreRequestMatchers());\n\t\tauthenticationProviders.addAll(authBldr.getProviders());\n\t\tList<OrderDecorator> unorderedFilterChain = new ArrayList<>();\n\t\tunorderedFilterChain.addAll(httpBldr.getFilters());\n\t\tunorderedFilterChain.addAll(authBldr.getFilters());\n\t\tunorderedFilterChain.addAll(buildCustomFilterList(element, pc));\n\t\tunorderedFilterChain.sort(new OrderComparator());"
            },
            {
              "step": 9,
              "variableName": "unorderedFilterChain",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\thttpBldr.setCsrfIgnoreRequestMatchers(authBldr.getCsrfIgnoreRequestMatchers());\n\t\tauthenticationProviders.addAll(authBldr.getProviders());\n\t\tList<OrderDecorator> unorderedFilterChain = new ArrayList<>();\n\t\tunorderedFilterChain.addAll(httpBldr.getFilters());\n\t\tunorderedFilterChain.addAll(authBldr.getFilters());\n\t\tunorderedFilterChain.addAll(buildCustomFilterList(element, pc));\n\t\tunorderedFilterChain.sort(new OrderComparator());"
            },
            {
              "step": 10,
              "variableName": "unorderedFilterChain",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\tunorderedFilterChain.addAll(authBldr.getFilters());\n\t\tunorderedFilterChain.addAll(buildCustomFilterList(element, pc));\n\t\tunorderedFilterChain.sort(new OrderComparator());\n\t\tcheckFilterChainOrder(unorderedFilterChain, pc, pc.extractSource(element));\n\t\t// The list of filter beans\n\t\tList<BeanMetadataElement> filterChain = new ManagedList<>();\n\t\tfor (OrderDecorator od : unorderedFilterChain) {"
            },
            {
              "step": 11,
              "variableName": "List<OrderDecorator> filters",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\treturn new RuntimeBeanReference(id);\n\t}\n\n\tprivate void checkFilterChainOrder(List<OrderDecorator> filters, ParserContext pc, Object source) {\n\t\tlogger.info(\"Checking sorted filter chain: \" + filters);\n\t\tfor (int i = 0; i < filters.size(); i++) {\n\t\t\tOrderDecorator filter = filters.get(i);"
            },
            {
              "step": 12,
              "variableName": "filters",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\tprivate void checkFilterChainOrder(List<OrderDecorator> filters, ParserContext pc, Object source) {\n\t\tlogger.info(\"Checking sorted filter chain: \" + filters);\n\t\tfor (int i = 0; i < filters.size(); i++) {\n\t\t\tOrderDecorator filter = filters.get(i);\n\t\t\tif (i > 0) {\n\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {"
            },
            {
              "step": 13,
              "variableName": "filters.get(i)",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\tprivate void checkFilterChainOrder(List<OrderDecorator> filters, ParserContext pc, Object source) {\n\t\tlogger.info(\"Checking sorted filter chain: \" + filters);\n\t\tfor (int i = 0; i < filters.size(); i++) {\n\t\t\tOrderDecorator filter = filters.get(i);\n\t\t\tif (i > 0) {\n\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {"
            },
            {
              "step": 14,
              "variableName": "filter",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {\n\t\t\t\t\tpc.getReaderContext()\n\t\t\t\t\t\t.error(\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean\n\t\t\t\t\t\t\t\t+ \"' have the same 'order' value. When using custom filters, \"\n\t\t\t\t\t\t\t\t+ \"please make sure the positions do not conflict with default filters. \"\n\t\t\t\t\t\t\t\t+ \"Alternatively you can disable the default filters by removing the corresponding \""
            },
            {
              "step": 15,
              "variableName": "filter.bean",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "AbstractBeanDefinition",
              "code": "\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {\n\t\t\t\t\tpc.getReaderContext()\n\t\t\t\t\t\t.error(\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean\n\t\t\t\t\t\t\t\t+ \"' have the same 'order' value. When using custom filters, \"\n\t\t\t\t\t\t\t\t+ \"please make sure the positions do not conflict with default filters. \"\n\t\t\t\t\t\t\t\t+ \"Alternatively you can disable the default filters by removing the corresponding \""
            },
            {
              "step": 16,
              "variableName": "\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "",
              "code": "\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {\n\t\t\t\t\tpc.getReaderContext()\n\t\t\t\t\t\t.error(\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean\n\t\t\t\t\t\t\t\t+ \"' have the same 'order' value. When using custom filters, \"\n\t\t\t\t\t\t\t\t+ \"please make sure the positions do not conflict with default filters. \"\n\t\t\t\t\t\t\t\t+ \"Alternatively you can disable the default filters by removing the corresponding \""
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "this.wellKnownChangePasswordRedirectFilter",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java",
              "type": "AbstractBeanDefinition",
              "code": "\t\t\tfilters.add(new OrderDecorator(this.csrfFilter, SecurityFilters.CSRF_FILTER));\n\t\t}\n\t\tif (this.wellKnownChangePasswordRedirectFilter != null) {\n\t\t\tfilters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,\n\t\t\t\t\tSecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER));\n\t\t}\n\t\treturn filters;"
            },
            {
              "step": 1,
              "variableName": "BeanMetadataElement bean",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/OrderDecorator.java",
              "type": "AbstractBeanDefinition",
              "code": "\n\tfinal int order;\n\n\tOrderDecorator(BeanMetadataElement bean, SecurityFilters filterOrder) {\n\t\tthis.bean = bean;\n\t\tthis.order = filterOrder.getOrder();\n\t}"
            },
            {
              "step": 2,
              "variableName": "bean",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/OrderDecorator.java",
              "type": "AbstractBeanDefinition",
              "code": "\tfinal int order;\n\n\tOrderDecorator(BeanMetadataElement bean, SecurityFilters filterOrder) {\n\t\tthis.bean = bean;\n\t\tthis.order = filterOrder.getOrder();\n\t}\n"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/OrderDecorator.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\tfinal int order;\n\n\tOrderDecorator(BeanMetadataElement bean, SecurityFilters filterOrder) {\n\t\tthis.bean = bean;\n\t\tthis.order = filterOrder.getOrder();\n\t}\n"
            },
            {
              "step": 4,
              "variableName": "OrderDecorator",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/OrderDecorator.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\n\tfinal int order;\n\n\tOrderDecorator(BeanMetadataElement bean, SecurityFilters filterOrder) {\n\t\tthis.bean = bean;\n\t\tthis.order = filterOrder.getOrder();\n\t}"
            },
            {
              "step": 5,
              "variableName": "new OrderDecorator(this.wellKnownChangePasswordRe",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\t\t\tfilters.add(new OrderDecorator(this.csrfFilter, SecurityFilters.CSRF_FILTER));\n\t\t}\n\t\tif (this.wellKnownChangePasswordRedirectFilter != null) {\n\t\t\tfilters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,\n\t\t\t\t\tSecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER));\n\t\t}\n\t\treturn filters;"
            },
            {
              "step": 6,
              "variableName": "filters",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\t\tfilters.add(new OrderDecorator(this.csrfFilter, SecurityFilters.CSRF_FILTER));\n\t\t}\n\t\tif (this.wellKnownChangePasswordRedirectFilter != null) {\n\t\t\tfilters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,\n\t\t\t\t\tSecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER));\n\t\t}\n\t\treturn filters;"
            },
            {
              "step": 7,
              "variableName": "filters",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\t\tfilters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,\n\t\t\t\t\tSecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER));\n\t\t}\n\t\treturn filters;\n\t}\n\n\tprivate static BeanMetadataElement getObservationRegistry(Element httpElmt) {"
            },
            {
              "step": 8,
              "variableName": "httpBldr.getFilters()",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\thttpBldr.setCsrfIgnoreRequestMatchers(authBldr.getCsrfIgnoreRequestMatchers());\n\t\tauthenticationProviders.addAll(authBldr.getProviders());\n\t\tList<OrderDecorator> unorderedFilterChain = new ArrayList<>();\n\t\tunorderedFilterChain.addAll(httpBldr.getFilters());\n\t\tunorderedFilterChain.addAll(authBldr.getFilters());\n\t\tunorderedFilterChain.addAll(buildCustomFilterList(element, pc));\n\t\tunorderedFilterChain.sort(new OrderComparator());"
            },
            {
              "step": 9,
              "variableName": "unorderedFilterChain",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\thttpBldr.setCsrfIgnoreRequestMatchers(authBldr.getCsrfIgnoreRequestMatchers());\n\t\tauthenticationProviders.addAll(authBldr.getProviders());\n\t\tList<OrderDecorator> unorderedFilterChain = new ArrayList<>();\n\t\tunorderedFilterChain.addAll(httpBldr.getFilters());\n\t\tunorderedFilterChain.addAll(authBldr.getFilters());\n\t\tunorderedFilterChain.addAll(buildCustomFilterList(element, pc));\n\t\tunorderedFilterChain.sort(new OrderComparator());"
            },
            {
              "step": 10,
              "variableName": "unorderedFilterChain",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\tunorderedFilterChain.addAll(authBldr.getFilters());\n\t\tunorderedFilterChain.addAll(buildCustomFilterList(element, pc));\n\t\tunorderedFilterChain.sort(new OrderComparator());\n\t\tcheckFilterChainOrder(unorderedFilterChain, pc, pc.extractSource(element));\n\t\t// The list of filter beans\n\t\tList<BeanMetadataElement> filterChain = new ManagedList<>();\n\t\tfor (OrderDecorator od : unorderedFilterChain) {"
            },
            {
              "step": 11,
              "variableName": "List<OrderDecorator> filters",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\treturn new RuntimeBeanReference(id);\n\t}\n\n\tprivate void checkFilterChainOrder(List<OrderDecorator> filters, ParserContext pc, Object source) {\n\t\tlogger.info(\"Checking sorted filter chain: \" + filters);\n\t\tfor (int i = 0; i < filters.size(); i++) {\n\t\t\tOrderDecorator filter = filters.get(i);"
            },
            {
              "step": 12,
              "variableName": "filters",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "ArrayList [<element>, bean] : AbstractBeanDefinition",
              "code": "\t\tfor (int i = 0; i < filters.size(); i++) {\n\t\t\tOrderDecorator filter = filters.get(i);\n\t\t\tif (i > 0) {\n\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {\n\t\t\t\t\tpc.getReaderContext()\n\t\t\t\t\t\t.error(\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean"
            },
            {
              "step": 13,
              "variableName": "filters.get(i - 1)",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\t\tfor (int i = 0; i < filters.size(); i++) {\n\t\t\tOrderDecorator filter = filters.get(i);\n\t\t\tif (i > 0) {\n\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {\n\t\t\t\t\tpc.getReaderContext()\n\t\t\t\t\t\t.error(\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean"
            },
            {
              "step": 14,
              "variableName": "previous",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "OrderDecorator [bean] : AbstractBeanDefinition",
              "code": "\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {\n\t\t\t\t\tpc.getReaderContext()\n\t\t\t\t\t\t.error(\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean\n\t\t\t\t\t\t\t\t+ \"' have the same 'order' value. When using custom filters, \"\n\t\t\t\t\t\t\t\t+ \"please make sure the positions do not conflict with default filters. \"\n\t\t\t\t\t\t\t\t+ \"Alternatively you can disable the default filters by removing the corresponding \""
            },
            {
              "step": 15,
              "variableName": "previous.bean",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "AbstractBeanDefinition",
              "code": "\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {\n\t\t\t\t\tpc.getReaderContext()\n\t\t\t\t\t\t.error(\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean\n\t\t\t\t\t\t\t\t+ \"' have the same 'order' value. When using custom filters, \"\n\t\t\t\t\t\t\t\t+ \"please make sure the positions do not conflict with default filters. \"\n\t\t\t\t\t\t\t\t+ \"Alternatively you can disable the default filters by removing the corresponding \""
            },
            {
              "step": 16,
              "variableName": "\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java",
              "type": "",
              "code": "\t\t\t\tOrderDecorator previous = filters.get(i - 1);\n\t\t\t\tif (filter.getOrder() == previous.getOrder()) {\n\t\t\t\t\tpc.getReaderContext()\n\t\t\t\t\t\t.error(\"Filter beans '\" + filter.bean + \"' and '\" + previous.bean\n\t\t\t\t\t\t\t\t+ \"' have the same 'order' value. When using custom filters, \"\n\t\t\t\t\t\t\t\t+ \"please make sure the positions do not conflict with default filters. \"\n\t\t\t\t\t\t\t\t+ \"Alternatively you can disable the default filters by removing the corresponding \""
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "LdapServerBeanDefinitionParser.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "ATT_PASSWORD",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/ldap/LdapServerBeanDefinitionParser.java",
              "type": "String",
              "code": "\t\tif (StringUtils.hasText(managerDn)) {\n\t\t\tif (!StringUtils.hasText(managerPassword)) {\n\t\t\t\tparserContext.getReaderContext()\n\t\t\t\t\t.error(\"You must specify the \" + ATT_PASSWORD + \" if you supply a \" + managerDn, elt);\n\t\t\t}\n\t\t\tcontextSource.getPropertyValues().addPropertyValue(\"userDn\", managerDn);\n\t\t\tcontextSource.getPropertyValues().addPropertyValue(\"password\", managerPassword);"
            },
            {
              "step": 1,
              "variableName": "\"You must specify the \" + ATT_PASSWORD + \" if you supply a \" + managerDn",
              "uri": "spring-security-6.4.3/config/src/main/java/org/springframework/security/config/ldap/LdapServerBeanDefinitionParser.java",
              "type": "",
              "code": "\t\tif (StringUtils.hasText(managerDn)) {\n\t\t\tif (!StringUtils.hasText(managerPassword)) {\n\t\t\t\tparserContext.getReaderContext()\n\t\t\t\t\t.error(\"You must specify the \" + ATT_PASSWORD + \" if you supply a \" + managerDn, elt);\n\t\t\t}\n\t\t\tcontextSource.getPropertyValues().addPropertyValue(\"userDn\", managerDn);\n\t\t\tcontextSource.getPropertyValues().addPropertyValue(\"password\", managerPassword);"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}