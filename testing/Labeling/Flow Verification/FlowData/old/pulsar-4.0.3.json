{
  "209": [
    {
      "resultIndex": 6,
      "fileName": "RawFileKeyReader.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cryptoKeyReader",
              "startLine": 149,
              "startColumn": 17,
              "endLine": 149,
              "endColumn": 32,
              "uri": "pulsar-4.0.3/pulsar-broker/src/main/java/org/apache/pulsar/client/impl/RawBatchMessageContainerImpl.java",
              "type": "CryptoKeyReader",
              "code": "        if (!lastMessage.getEncryptionCtx().isEmpty()) {\n            EncryptionContext encryptionContext = (EncryptionContext) lastMessage.getEncryptionCtx().get();\n\n            if (cryptoKeyReader == null) {\n                IllegalStateException ex =\n                        new IllegalStateException(\"Messages are encrypted but no cryptoKeyReader is provided.\");\n                discard(ex);"
            },
            {
              "step": 1,
              "variableName": "cryptoKeyReader",
              "startLine": 162,
              "startColumn": 66,
              "endLine": 162,
              "endColumn": 81,
              "uri": "pulsar-4.0.3/pulsar-broker/src/main/java/org/apache/pulsar/client/impl/RawBatchMessageContainerImpl.java",
              "type": "CryptoKeyReader",
              "code": "                        new MessageCryptoBc(String.format(\n                                \"[%s] [%s]\", topicName, \"RawBatchMessageContainer\"), true);\n                try {\n                    msgCrypto.addPublicKeyCipher(encryptionKeys, cryptoKeyReader);\n                } catch (PulsarClientException.CryptoException e) {\n                    discard(e);\n                    throw new IllegalArgumentException(\"Failed to set encryption keys\", e);"
            },
            {
              "step": 2,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 306,
              "startColumn": 71,
              "endLine": 306,
              "endColumn": 96,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "     *\n     */\n    @Override\n    public synchronized void addPublicKeyCipher(Set<String> keyNames, CryptoKeyReader keyReader)\n            throws CryptoException {\n\n        // Generate data key"
            },
            {
              "step": 3,
              "variableName": "keyReader",
              "startLine": 313,
              "startColumn": 37,
              "endLine": 313,
              "endColumn": 46,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        dataKey = keyGenerator.generateKey();\n\n        for (String key : keyNames) {\n            addPublicKeyCipher(key, keyReader);\n        }\n    }\n"
            },
            {
              "step": 4,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 317,
              "startColumn": 53,
              "endLine": 317,
              "endColumn": 78,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        }\n    }\n\n    private void addPublicKeyCipher(String keyName, CryptoKeyReader keyReader) throws CryptoException {\n\n        if (keyName == null || keyReader == null) {\n            throw new PulsarClientException.CryptoException(\"Keyname or KeyReader is null\");"
            },
            {
              "step": 5,
              "variableName": "keyReader",
              "startLine": 324,
              "startColumn": 37,
              "endLine": 324,
              "endColumn": 46,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        }\n\n        // Read the public key and its info using callback\n        EncryptionKeyInfo keyInfo = keyReader.getPublicKey(keyName, null);\n\n        PublicKey pubKey;\n"
            },
            {
              "step": 6,
              "variableName": "getPublicKey",
              "startLine": 50,
              "startColumn": 30,
              "endLine": 50,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "RawFileKeyReader",
              "code": "    }\n\n    @Override\n    public EncryptionKeyInfo getPublicKey(String keyName, Map<String, String> keyMeta) {\n        EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));"
            },
            {
              "step": 7,
              "variableName": "\"ERROR: Failed to read public key from file \" + publicKeyFile",
              "startLine": 55,
              "startColumn": 32,
              "endLine": 55,
              "endColumn": 93,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "",
              "code": "        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Failed to read public key from file \" + publicKeyFile);\n            e.printStackTrace();\n        }\n        return keyInfo;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "cryptoKeyReader",
              "startLine": 162,
              "startColumn": 66,
              "endLine": 162,
              "endColumn": 81,
              "uri": "pulsar-4.0.3/pulsar-broker/src/main/java/org/apache/pulsar/client/impl/RawBatchMessageContainerImpl.java",
              "type": "CryptoKeyReader",
              "code": "                        new MessageCryptoBc(String.format(\n                                \"[%s] [%s]\", topicName, \"RawBatchMessageContainer\"), true);\n                try {\n                    msgCrypto.addPublicKeyCipher(encryptionKeys, cryptoKeyReader);\n                } catch (PulsarClientException.CryptoException e) {\n                    discard(e);\n                    throw new IllegalArgumentException(\"Failed to set encryption keys\", e);"
            },
            {
              "step": 1,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 306,
              "startColumn": 71,
              "endLine": 306,
              "endColumn": 96,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "     *\n     */\n    @Override\n    public synchronized void addPublicKeyCipher(Set<String> keyNames, CryptoKeyReader keyReader)\n            throws CryptoException {\n\n        // Generate data key"
            },
            {
              "step": 2,
              "variableName": "keyReader",
              "startLine": 313,
              "startColumn": 37,
              "endLine": 313,
              "endColumn": 46,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        dataKey = keyGenerator.generateKey();\n\n        for (String key : keyNames) {\n            addPublicKeyCipher(key, keyReader);\n        }\n    }\n"
            },
            {
              "step": 3,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 317,
              "startColumn": 53,
              "endLine": 317,
              "endColumn": 78,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        }\n    }\n\n    private void addPublicKeyCipher(String keyName, CryptoKeyReader keyReader) throws CryptoException {\n\n        if (keyName == null || keyReader == null) {\n            throw new PulsarClientException.CryptoException(\"Keyname or KeyReader is null\");"
            },
            {
              "step": 4,
              "variableName": "keyReader",
              "startLine": 324,
              "startColumn": 37,
              "endLine": 324,
              "endColumn": 46,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        }\n\n        // Read the public key and its info using callback\n        EncryptionKeyInfo keyInfo = keyReader.getPublicKey(keyName, null);\n\n        PublicKey pubKey;\n"
            },
            {
              "step": 5,
              "variableName": "getPublicKey",
              "startLine": 50,
              "startColumn": 30,
              "endLine": 50,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "RawFileKeyReader",
              "code": "    }\n\n    @Override\n    public EncryptionKeyInfo getPublicKey(String keyName, Map<String, String> keyMeta) {\n        EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));"
            },
            {
              "step": 6,
              "variableName": "\"ERROR: Failed to read public key from file \" + publicKeyFile",
              "startLine": 55,
              "startColumn": 32,
              "endLine": 55,
              "endColumn": 93,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "",
              "code": "        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Failed to read public key from file \" + publicKeyFile);\n            e.printStackTrace();\n        }\n        return keyInfo;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "cryptoKeyReader",
              "startLine": 95,
              "startColumn": 35,
              "endLine": 95,
              "endColumn": 50,
              "uri": "pulsar-4.0.3/pulsar-broker/src/test/java/org/apache/pulsar/websocket/proxy/ClientSideEncryptionWssProducer.java",
              "type": "CryptoKeyReader",
              "code": "                keyName);\n        EncryptionKey encryptionKey = new EncryptionKey();\n        encryptionKey.setKeyValue(keyValue);\n        encryptionKey.setMetadata(cryptoKeyReader.getPublicKey(keyName, Collections.emptyMap()).getMetadata());\n        Map<String, EncryptionKey> encryptionKeyMap = new HashMap<>();\n        encryptionKeyMap.put(keyName, encryptionKey);\n"
            },
            {
              "step": 1,
              "variableName": "getPublicKey",
              "startLine": 50,
              "startColumn": 30,
              "endLine": 50,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "RawFileKeyReader",
              "code": "    }\n\n    @Override\n    public EncryptionKeyInfo getPublicKey(String keyName, Map<String, String> keyMeta) {\n        EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));"
            },
            {
              "step": 2,
              "variableName": "\"ERROR: Failed to read public key from file \" + publicKeyFile",
              "startLine": 55,
              "startColumn": 32,
              "endLine": 55,
              "endColumn": 93,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "",
              "code": "        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Failed to read public key from file \" + publicKeyFile);\n            e.printStackTrace();\n        }\n        return keyInfo;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "cryptoKeyReader",
              "startLine": 114,
              "startColumn": 47,
              "endLine": 114,
              "endColumn": 62,
              "uri": "pulsar-4.0.3/pulsar-broker/src/test/java/org/apache/pulsar/websocket/proxy/WssClientSideEncryptUtils.java",
              "type": "CryptoKeyReader",
              "code": "    public static byte[] calculateEncryptedKeyValue(MessageCryptoBc msgCrypto, CryptoKeyReader cryptoKeyReader,\n                                                    String publicKeyName)\n            throws PulsarClientException.CryptoException {\n        EncryptionKeyInfo encryptionKeyInfo = cryptoKeyReader.getPublicKey(publicKeyName, Collections.emptyMap());\n        return calculateEncryptedKeyValue(msgCrypto, encryptionKeyInfo.getKey());\n    }\n"
            },
            {
              "step": 1,
              "variableName": "getPublicKey",
              "startLine": 50,
              "startColumn": 30,
              "endLine": 50,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "RawFileKeyReader",
              "code": "    }\n\n    @Override\n    public EncryptionKeyInfo getPublicKey(String keyName, Map<String, String> keyMeta) {\n        EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));"
            },
            {
              "step": 2,
              "variableName": "\"ERROR: Failed to read public key from file \" + publicKeyFile",
              "startLine": 55,
              "startColumn": 32,
              "endLine": 55,
              "endColumn": 93,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "",
              "code": "        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Failed to read public key from file \" + publicKeyFile);\n            e.printStackTrace();\n        }\n        return keyInfo;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "RawFileKeyReader.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cryptoKeyReader",
              "startLine": 126,
              "startColumn": 21,
              "endLine": 126,
              "endColumn": 36,
              "uri": "pulsar-4.0.3/pulsar-broker/src/test/java/org/apache/pulsar/websocket/proxy/ClientSideEncryptionWssConsumer.java",
              "type": "CryptoKeyReader",
              "code": "            }\n            // Decrypt.\n            byte[] decryptedPayload = WssClientSideEncryptUtils.decryptMsgPayload(msg.payload, msg.encryptionContext,\n                    cryptoKeyReader, msgCrypto);\n            // Un-compression if needed.\n            byte[] unCompressedPayload = WssClientSideEncryptUtils.unCompressionIfNeeded(decryptedPayload,\n                    msg.encryptionContext);"
            },
            {
              "step": 1,
              "variableName": "CryptoKeyReader cryptoKeyReader",
              "startLine": 201,
              "startColumn": 44,
              "endLine": 201,
              "endColumn": 75,
              "uri": "pulsar-4.0.3/pulsar-broker/src/test/java/org/apache/pulsar/websocket/proxy/WssClientSideEncryptUtils.java",
              "type": "CryptoKeyReader",
              "code": "    }\n\n    public static byte[] decryptMsgPayload(String payloadString, EncryptionContext encryptionContext,\n                                           CryptoKeyReader cryptoKeyReader, MessageCryptoBc msgCrypto) {\n        byte[] payload = base64Decode(payloadString);\n        if (encryptionContext == null) {\n            return payload;"
            },
            {
              "step": 2,
              "variableName": "cryptoKeyReader",
              "startLine": 227,
              "startColumn": 65,
              "endLine": 227,
              "endColumn": 80,
              "uri": "pulsar-4.0.3/pulsar-broker/src/test/java/org/apache/pulsar/websocket/proxy/WssClientSideEncryptUtils.java",
              "type": "CryptoKeyReader",
              "code": "        input.flip();\n\n        // Decrypt.\n        msgCrypto.decrypt(() -> messageMetadata, input, output, cryptoKeyReader);\n        byte[] res = new byte[output.limit()];\n        output.get(res);\n        return res;"
            },
            {
              "step": 3,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 604,
              "startColumn": 67,
              "endLine": 604,
              "endColumn": 92,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "     */\n    @Override\n    public boolean decrypt(Supplier<MessageMetadata> messageMetadataSupplier,\n                        ByteBuffer payload, ByteBuffer outBuffer, CryptoKeyReader keyReader) {\n\n        MessageMetadata msgMetadata = messageMetadataSupplier.get();\n        // If dataKey is present, attempt to decrypt using the existing key"
            },
            {
              "step": 4,
              "variableName": "keyReader : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 5,
              "variableName": "...->... : new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 6,
              "variableName": "parameter this : new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 7,
              "variableName": "keyReader",
              "startLine": 620,
              "startColumn": 73,
              "endLine": 620,
              "endColumn": 82,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();\n            return decryptDataKey(kbv.getKey(), encDataKey, encKeyMeta, keyReader);\n\n        }).findFirst().orElse(null);\n"
            },
            {
              "step": 8,
              "variableName": "keyReader",
              "startLine": 620,
              "startColumn": 73,
              "endLine": 620,
              "endColumn": 82,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();\n            return decryptDataKey(kbv.getKey(), encDataKey, encKeyMeta, keyReader);\n\n        }).findFirst().orElse(null);\n"
            },
            {
              "step": 9,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 475,
              "startColumn": 13,
              "endLine": 475,
              "endColumn": 38,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "    }\n\n    private boolean decryptDataKey(String keyName, byte[] encryptedDataKey, List<KeyValue> encKeyMeta,\n            CryptoKeyReader keyReader) {\n\n        Map<String, String> keyMeta = new HashMap<String, String>();\n        encKeyMeta.forEach(kv -> {"
            },
            {
              "step": 10,
              "variableName": "keyReader",
              "startLine": 483,
              "startColumn": 37,
              "endLine": 483,
              "endColumn": 46,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        });\n\n        // Read the private key info using callback\n        EncryptionKeyInfo keyInfo = keyReader.getPrivateKey(keyName, keyMeta);\n\n        // Convert key from byte to PrivateKey\n        PrivateKey privateKey;"
            },
            {
              "step": 11,
              "variableName": "getPrivateKey",
              "startLine": 62,
              "startColumn": 30,
              "endLine": 62,
              "endColumn": 43,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "RawFileKeyReader",
              "code": "    }\n\n    @Override\n    public EncryptionKeyInfo getPrivateKey(String keyName, Map<String, String> keyMeta) {\n        EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));"
            },
            {
              "step": 12,
              "variableName": "\"ERROR: Failed to read private key from file \" + privateKeyFile",
              "startLine": 67,
              "startColumn": 32,
              "endLine": 67,
              "endColumn": 95,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "",
              "code": "        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Failed to read private key from file \" + privateKeyFile);\n            e.printStackTrace();\n        }\n        return keyInfo;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "cryptoKeyReader",
              "startLine": 227,
              "startColumn": 65,
              "endLine": 227,
              "endColumn": 80,
              "uri": "pulsar-4.0.3/pulsar-broker/src/test/java/org/apache/pulsar/websocket/proxy/WssClientSideEncryptUtils.java",
              "type": "CryptoKeyReader",
              "code": "        input.flip();\n\n        // Decrypt.\n        msgCrypto.decrypt(() -> messageMetadata, input, output, cryptoKeyReader);\n        byte[] res = new byte[output.limit()];\n        output.get(res);\n        return res;"
            },
            {
              "step": 1,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 604,
              "startColumn": 67,
              "endLine": 604,
              "endColumn": 92,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "     */\n    @Override\n    public boolean decrypt(Supplier<MessageMetadata> messageMetadataSupplier,\n                        ByteBuffer payload, ByteBuffer outBuffer, CryptoKeyReader keyReader) {\n\n        MessageMetadata msgMetadata = messageMetadataSupplier.get();\n        // If dataKey is present, attempt to decrypt using the existing key"
            },
            {
              "step": 2,
              "variableName": "keyReader : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 3,
              "variableName": "...->... : new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 4,
              "variableName": "parameter this : new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 5,
              "variableName": "keyReader",
              "startLine": 620,
              "startColumn": 73,
              "endLine": 620,
              "endColumn": 82,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();\n            return decryptDataKey(kbv.getKey(), encDataKey, encKeyMeta, keyReader);\n\n        }).findFirst().orElse(null);\n"
            },
            {
              "step": 6,
              "variableName": "keyReader",
              "startLine": 620,
              "startColumn": 73,
              "endLine": 620,
              "endColumn": 82,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();\n            return decryptDataKey(kbv.getKey(), encDataKey, encKeyMeta, keyReader);\n\n        }).findFirst().orElse(null);\n"
            },
            {
              "step": 7,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 475,
              "startColumn": 13,
              "endLine": 475,
              "endColumn": 38,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "    }\n\n    private boolean decryptDataKey(String keyName, byte[] encryptedDataKey, List<KeyValue> encKeyMeta,\n            CryptoKeyReader keyReader) {\n\n        Map<String, String> keyMeta = new HashMap<String, String>();\n        encKeyMeta.forEach(kv -> {"
            },
            {
              "step": 8,
              "variableName": "keyReader",
              "startLine": 483,
              "startColumn": 37,
              "endLine": 483,
              "endColumn": 46,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        });\n\n        // Read the private key info using callback\n        EncryptionKeyInfo keyInfo = keyReader.getPrivateKey(keyName, keyMeta);\n\n        // Convert key from byte to PrivateKey\n        PrivateKey privateKey;"
            },
            {
              "step": 9,
              "variableName": "getPrivateKey",
              "startLine": 62,
              "startColumn": 30,
              "endLine": 62,
              "endColumn": 43,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "RawFileKeyReader",
              "code": "    }\n\n    @Override\n    public EncryptionKeyInfo getPrivateKey(String keyName, Map<String, String> keyMeta) {\n        EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));"
            },
            {
              "step": 10,
              "variableName": "\"ERROR: Failed to read private key from file \" + privateKeyFile",
              "startLine": 67,
              "startColumn": 32,
              "endLine": 67,
              "endColumn": 95,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "",
              "code": "        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Failed to read private key from file \" + privateKeyFile);\n            e.printStackTrace();\n        }\n        return keyInfo;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "cryptoKeyReader = null;",
              "startLine": 266,
              "startColumn": 29,
              "endLine": 266,
              "endColumn": 52,
              "uri": "pulsar-4.0.3/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ConsumerConfigurationData.java",
              "type": "CryptoKeyReader",
              "code": "    private long expireTimeOfIncompleteChunkedMessageMillis = TimeUnit.MINUTES.toMillis(1);\n\n    @JsonIgnore\n    private CryptoKeyReader cryptoKeyReader = null;\n\n    @JsonIgnore\n    private transient MessageCrypto messageCrypto = null;"
            },
            {
              "step": 1,
              "variableName": "conf.getCryptoKeyReader()",
              "startLine": 1932,
              "startColumn": 89,
              "endLine": 1932,
              "endColumn": 114,
              "uri": "pulsar-4.0.3/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java",
              "type": "CryptoKeyReader",
              "code": "        int maxDecryptedSize = msgCrypto.getMaxOutputSize(payload.readableBytes());\n        ByteBuf decryptedData = PulsarByteBufAllocator.DEFAULT.buffer(maxDecryptedSize);\n        ByteBuffer nioDecryptedData = decryptedData.nioBuffer(0, maxDecryptedSize);\n        if (msgCrypto.decrypt(() -> msgMetadata, payload.nioBuffer(), nioDecryptedData, conf.getCryptoKeyReader())) {\n            decryptedData.writerIndex(nioDecryptedData.limit());\n            return decryptedData;\n        }"
            },
            {
              "step": 2,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 604,
              "startColumn": 67,
              "endLine": 604,
              "endColumn": 92,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "     */\n    @Override\n    public boolean decrypt(Supplier<MessageMetadata> messageMetadataSupplier,\n                        ByteBuffer payload, ByteBuffer outBuffer, CryptoKeyReader keyReader) {\n\n        MessageMetadata msgMetadata = messageMetadataSupplier.get();\n        // If dataKey is present, attempt to decrypt using the existing key"
            },
            {
              "step": 3,
              "variableName": "keyReader : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 4,
              "variableName": "...->... : new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 5,
              "variableName": "parameter this : new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "startLine": 616,
              "startColumn": 61,
              "endLine": 622,
              "endColumn": 10,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n        // dataKey is null or decryption failed. Attempt to regenerate data key\n        List<EncryptionKeys> encKeys = msgMetadata.getEncryptionKeysList();\n        EncryptionKeys encKeyInfo = encKeys.stream().filter(kbv -> {\n\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();"
            },
            {
              "step": 6,
              "variableName": "keyReader",
              "startLine": 620,
              "startColumn": 73,
              "endLine": 620,
              "endColumn": 82,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "new Predicate<EncryptionKeys>(...) { ... } [keyReader] : CryptoKeyReader",
              "code": "\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();\n            return decryptDataKey(kbv.getKey(), encDataKey, encKeyMeta, keyReader);\n\n        }).findFirst().orElse(null);\n"
            },
            {
              "step": 7,
              "variableName": "keyReader",
              "startLine": 620,
              "startColumn": 73,
              "endLine": 620,
              "endColumn": 82,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "\n            byte[] encDataKey = kbv.getValue();\n            List<KeyValue> encKeyMeta = kbv.getMetadatasList();\n            return decryptDataKey(kbv.getKey(), encDataKey, encKeyMeta, keyReader);\n\n        }).findFirst().orElse(null);\n"
            },
            {
              "step": 8,
              "variableName": "CryptoKeyReader keyReader",
              "startLine": 475,
              "startColumn": 13,
              "endLine": 475,
              "endColumn": 38,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "    }\n\n    private boolean decryptDataKey(String keyName, byte[] encryptedDataKey, List<KeyValue> encKeyMeta,\n            CryptoKeyReader keyReader) {\n\n        Map<String, String> keyMeta = new HashMap<String, String>();\n        encKeyMeta.forEach(kv -> {"
            },
            {
              "step": 9,
              "variableName": "keyReader",
              "startLine": 483,
              "startColumn": 37,
              "endLine": 483,
              "endColumn": 46,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        });\n\n        // Read the private key info using callback\n        EncryptionKeyInfo keyInfo = keyReader.getPrivateKey(keyName, keyMeta);\n\n        // Convert key from byte to PrivateKey\n        PrivateKey privateKey;"
            },
            {
              "step": 10,
              "variableName": "getPrivateKey",
              "startLine": 62,
              "startColumn": 30,
              "endLine": 62,
              "endColumn": 43,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "RawFileKeyReader",
              "code": "    }\n\n    @Override\n    public EncryptionKeyInfo getPrivateKey(String keyName, Map<String, String> keyMeta) {\n        EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));"
            },
            {
              "step": 11,
              "variableName": "\"ERROR: Failed to read private key from file \" + privateKeyFile",
              "startLine": 67,
              "startColumn": 32,
              "endLine": 67,
              "endColumn": 95,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "",
              "code": "        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Failed to read private key from file \" + privateKeyFile);\n            e.printStackTrace();\n        }\n        return keyInfo;"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyReader",
              "startLine": 483,
              "startColumn": 37,
              "endLine": 483,
              "endColumn": 46,
              "uri": "pulsar-4.0.3/pulsar-client-messagecrypto-bc/src/main/java/org/apache/pulsar/client/impl/crypto/MessageCryptoBc.java",
              "type": "CryptoKeyReader",
              "code": "        });\n\n        // Read the private key info using callback\n        EncryptionKeyInfo keyInfo = keyReader.getPrivateKey(keyName, keyMeta);\n\n        // Convert key from byte to PrivateKey\n        PrivateKey privateKey;"
            },
            {
              "step": 1,
              "variableName": "getPrivateKey",
              "startLine": 62,
              "startColumn": 30,
              "endLine": 62,
              "endColumn": 43,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "RawFileKeyReader",
              "code": "    }\n\n    @Override\n    public EncryptionKeyInfo getPrivateKey(String keyName, Map<String, String> keyMeta) {\n        EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));"
            },
            {
              "step": 2,
              "variableName": "\"ERROR: Failed to read private key from file \" + privateKeyFile",
              "startLine": 67,
              "startColumn": 32,
              "endLine": 67,
              "endColumn": 95,
              "uri": "pulsar-4.0.3/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/RawFileKeyReader.java",
              "type": "",
              "code": "        try {\n            keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Failed to read private key from file \" + privateKeyFile);\n            e.printStackTrace();\n        }\n        return keyInfo;"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 8,
      "fileName": "ElasticSearchSink.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password;",
              "startLine": 40,
              "startColumn": 20,
              "endLine": 40,
              "endColumn": 29,
              "uri": "pulsar-4.0.3/pulsar-io/batch-data-generator/src/main/java/org/apache/pulsar/io/batchdatagenerator/Person.java",
              "type": "String",
              "code": "    private String lastName;\n    private String email;\n    private String username;\n    private String password;\n    private Sex sex;\n    private String telephoneNumber;\n    @org.apache.avro.reflect.AvroSchema(\"\"\""
            },
            {
              "step": 1,
              "variableName": "getPassword(...) : String",
              "startLine": 25,
              "endLine": 25,
              "endColumn": 6,
              "uri": "pulsar-4.0.3/pulsar-io/batch-data-generator/src/main/java/org/apache/pulsar/io/batchdatagenerator/Person.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n/**"
            },
            {
              "step": 2,
              "variableName": "... + ... : String",
              "startLine": 25,
              "endLine": 25,
              "endColumn": 6,
              "uri": "pulsar-4.0.3/pulsar-io/batch-data-generator/src/main/java/org/apache/pulsar/io/batchdatagenerator/Person.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n/**"
            },
            {
              "step": 3,
              "variableName": "value.getNativeObject().toString()",
              "startLine": 222,
              "startColumn": 31,
              "endLine": 222,
              "endColumn": 65,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "String",
              "code": "                        // for BWC with the ES-Sink\n                        doc = new String((byte[]) value.getNativeObject(), StandardCharsets.UTF_8);\n                    } else {\n                        doc = value.getNativeObject().toString();\n                    }\n                }\n            }"
            },
            {
              "step": 4,
              "variableName": "doc",
              "startLine": 276,
              "startColumn": 25,
              "endLine": 276,
              "endColumn": 28,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "String",
              "code": "                        record.getClass().getName(),\n                        schemaType,\n                        id,\n                        doc);\n            }\n            doc = sanitizeValue(doc);\n            return Pair.of(id, doc);"
            },
            {
              "step": 5,
              "variableName": "log.debug(\"r",
              "startLine": 272,
              "startColumn": 17,
              "endLine": 276,
              "endColumn": 29,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "",
              "code": "                if (record.getSchema() != null && record.getSchema().getSchemaInfo() != null) {\n                    schemaType = record.getSchema().getSchemaInfo().getType();\n                }\n                log.debug(\"recordType={} schemaType={} id={} doc={}\",\n                        record.getClass().getName(),\n                        schemaType,\n                        id,"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password;",
              "startLine": 40,
              "startColumn": 20,
              "endLine": 40,
              "endColumn": 29,
              "uri": "pulsar-4.0.3/pulsar-io/data-generator/src/main/java/org/apache/pulsar/io/datagenerator/Person.java",
              "type": "String",
              "code": "    private String lastName;\n    private String email;\n    private String username;\n    private String password;\n    private Sex sex;\n    private String telephoneNumber;\n    @org.apache.avro.reflect.AvroSchema(\"{ \\\"type\\\": \\\"long\\\", \\\"logicalType\\\": \\\"timestamp-millis\\\" }\")"
            },
            {
              "step": 1,
              "variableName": "getPassword(...) : String",
              "startLine": 25,
              "endLine": 25,
              "endColumn": 6,
              "uri": "pulsar-4.0.3/pulsar-io/data-generator/src/main/java/org/apache/pulsar/io/datagenerator/Person.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n/**"
            },
            {
              "step": 2,
              "variableName": "... + ... : String",
              "startLine": 25,
              "endLine": 25,
              "endColumn": 6,
              "uri": "pulsar-4.0.3/pulsar-io/data-generator/src/main/java/org/apache/pulsar/io/datagenerator/Person.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n/**"
            },
            {
              "step": 3,
              "variableName": "value.getNativeObject().toString()",
              "startLine": 222,
              "startColumn": 31,
              "endLine": 222,
              "endColumn": 65,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "String",
              "code": "                        // for BWC with the ES-Sink\n                        doc = new String((byte[]) value.getNativeObject(), StandardCharsets.UTF_8);\n                    } else {\n                        doc = value.getNativeObject().toString();\n                    }\n                }\n            }"
            },
            {
              "step": 4,
              "variableName": "doc",
              "startLine": 276,
              "startColumn": 25,
              "endLine": 276,
              "endColumn": 28,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "String",
              "code": "                        record.getClass().getName(),\n                        schemaType,\n                        id,\n                        doc);\n            }\n            doc = sanitizeValue(doc);\n            return Pair.of(id, doc);"
            },
            {
              "step": 5,
              "variableName": "log.debug(\"r",
              "startLine": 272,
              "startColumn": 17,
              "endLine": 276,
              "endColumn": 29,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "",
              "code": "                if (record.getSchema() != null && record.getSchema().getSchemaInfo() != null) {\n                    schemaType = record.getSchema().getSchemaInfo().getType();\n                }\n                log.debug(\"recordType={} schemaType={} id={} doc={}\",\n                        record.getClass().getName(),\n                        schemaType,\n                        id,"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "JavaInstanceRunnable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "this.secretsMap : Map",
              "startLine": 88,
              "endLine": 88,
              "endColumn": 37,
              "uri": "pulsar-4.0.3/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java",
              "type": "Map",
              "code": " * This class implements the Context interface exposed to the user.\n */\n@Slf4j\n@ToString(exclude = {\"pulsarAdmin\"})\nclass ContextImpl implements Context, SinkContext, SourceContext, AutoCloseable {\n    private final ProducerBuilderFactory producerBuilderFactory;\n    private final Map<String, String> producerProperties;"
            },
            {
              "step": 1,
              "variableName": "... + ... : String",
              "startLine": 88,
              "endLine": 88,
              "endColumn": 37,
              "uri": "pulsar-4.0.3/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java",
              "type": "String",
              "code": " * This class implements the Context interface exposed to the user.\n */\n@Slf4j\n@ToString(exclude = {\"pulsarAdmin\"})\nclass ContextImpl implements Context, SinkContext, SourceContext, AutoCloseable {\n    private final ProducerBuilderFactory producerBuilderFactory;\n    private final Map<String, String> producerProperties;"
            },
            {
              "step": 2,
              "variableName": "contextImpl.toString()",
              "startLine": 1078,
              "startColumn": 25,
              "endLine": 1078,
              "endColumn": 47,
              "uri": "pulsar-4.0.3/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java",
              "type": "",
              "code": "        try {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Opening Sink with SinkSpec {} and contextImpl: {} \", sinkSpec.getConfigs(),\n                        contextImpl.toString());\n            }\n            this.sink.open(augmentAndFilterConnectorConfig(sinkSpec.getConfigs()), contextImpl);\n        } catch (Exception e) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "AbstractAwsConnector.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "awsCredentialPluginName",
              "startLine": 40,
              "startColumn": 55,
              "endLine": 40,
              "endColumn": 78,
              "uri": "pulsar-4.0.3/pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AbstractAwsConnector.java",
              "type": "String",
              "code": "    public AwsCredentialProviderPlugin createCredentialProvider(String awsCredentialPluginName,\n                                                                   String awsCredentialPluginParam) {\n        if (StringUtils.isNotBlank(awsCredentialPluginName)) {\n            return createCredentialProviderWithPlugin(awsCredentialPluginName, awsCredentialPluginParam);\n        } else {\n            return defaultCredentialProvider(awsCredentialPluginParam);\n        }"
            },
            {
              "step": 1,
              "variableName": "String pluginFQClassName",
              "startLine": 55,
              "startColumn": 82,
              "endLine": 55,
              "endColumn": 106,
              "uri": "pulsar-4.0.3/pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AbstractAwsConnector.java",
              "type": "String",
              "code": "     * @return\n     * @throws IllegalArgumentException\n     */\n    public static AwsCredentialProviderPlugin createCredentialProviderWithPlugin(String pluginFQClassName, String param)\n            throws IllegalArgumentException {\n        try {\n            Class<?> clazz = Class.forName(pluginFQClassName);"
            },
            {
              "step": 2,
              "variableName": "pluginFQClassName",
              "startLine": 64,
              "startColumn": 78,
              "endLine": 64,
              "endColumn": 95,
              "uri": "pulsar-4.0.3/pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AbstractAwsConnector.java",
              "type": "",
              "code": "            plugin.init(param);\n            return plugin;\n        } catch (Exception e) {\n            log.error(\"Failed to initialize AwsCredentialProviderPlugin {}\", pluginFQClassName, e);\n            throw new IllegalArgumentException(\n                    String.format(\"invalid authplugin name %s, failed to init %s\", pluginFQClassName, e.getMessage()));\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "ElasticSearchSink.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password;",
              "startLine": 40,
              "startColumn": 20,
              "endLine": 40,
              "endColumn": 29,
              "uri": "pulsar-4.0.3/pulsar-io/batch-data-generator/src/main/java/org/apache/pulsar/io/batchdatagenerator/Person.java",
              "type": "String",
              "code": "    private String lastName;\n    private String email;\n    private String username;\n    private String password;\n    private Sex sex;\n    private String telephoneNumber;\n    @org.apache.avro.reflect.AvroSchema(\"\"\""
            },
            {
              "step": 1,
              "variableName": "getPassword(...) : String",
              "startLine": 25,
              "endLine": 25,
              "endColumn": 6,
              "uri": "pulsar-4.0.3/pulsar-io/batch-data-generator/src/main/java/org/apache/pulsar/io/batchdatagenerator/Person.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n/**"
            },
            {
              "step": 2,
              "variableName": "... + ... : String",
              "startLine": 25,
              "endLine": 25,
              "endColumn": 6,
              "uri": "pulsar-4.0.3/pulsar-io/batch-data-generator/src/main/java/org/apache/pulsar/io/batchdatagenerator/Person.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n/**"
            },
            {
              "step": 3,
              "variableName": "value.getNativeObject().toString()",
              "startLine": 222,
              "startColumn": 31,
              "endLine": 222,
              "endColumn": 65,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "String",
              "code": "                        // for BWC with the ES-Sink\n                        doc = new String((byte[]) value.getNativeObject(), StandardCharsets.UTF_8);\n                    } else {\n                        doc = value.getNativeObject().toString();\n                    }\n                }\n            }"
            },
            {
              "step": 4,
              "variableName": "doc",
              "startLine": 276,
              "startColumn": 25,
              "endLine": 276,
              "endColumn": 28,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "",
              "code": "                        record.getClass().getName(),\n                        schemaType,\n                        id,\n                        doc);\n            }\n            doc = sanitizeValue(doc);\n            return Pair.of(id, doc);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password;",
              "startLine": 40,
              "startColumn": 20,
              "endLine": 40,
              "endColumn": 29,
              "uri": "pulsar-4.0.3/pulsar-io/data-generator/src/main/java/org/apache/pulsar/io/datagenerator/Person.java",
              "type": "String",
              "code": "    private String lastName;\n    private String email;\n    private String username;\n    private String password;\n    private Sex sex;\n    private String telephoneNumber;\n    @org.apache.avro.reflect.AvroSchema(\"{ \\\"type\\\": \\\"long\\\", \\\"logicalType\\\": \\\"timestamp-millis\\\" }\")"
            },
            {
              "step": 1,
              "variableName": "getPassword(...) : String",
              "startLine": 25,
              "endLine": 25,
              "endColumn": 6,
              "uri": "pulsar-4.0.3/pulsar-io/data-generator/src/main/java/org/apache/pulsar/io/datagenerator/Person.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n/**"
            },
            {
              "step": 2,
              "variableName": "... + ... : String",
              "startLine": 25,
              "endLine": 25,
              "endColumn": 6,
              "uri": "pulsar-4.0.3/pulsar-io/data-generator/src/main/java/org/apache/pulsar/io/datagenerator/Person.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n/**"
            },
            {
              "step": 3,
              "variableName": "value.getNativeObject().toString()",
              "startLine": 222,
              "startColumn": 31,
              "endLine": 222,
              "endColumn": 65,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "String",
              "code": "                        // for BWC with the ES-Sink\n                        doc = new String((byte[]) value.getNativeObject(), StandardCharsets.UTF_8);\n                    } else {\n                        doc = value.getNativeObject().toString();\n                    }\n                }\n            }"
            },
            {
              "step": 4,
              "variableName": "doc",
              "startLine": 276,
              "startColumn": 25,
              "endLine": 276,
              "endColumn": 28,
              "uri": "pulsar-4.0.3/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
              "type": "",
              "code": "                        record.getClass().getName(),\n                        schemaType,\n                        id,\n                        doc);\n            }\n            doc = sanitizeValue(doc);\n            return Pair.of(id, doc);"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "KafkaAbstractSink.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword;",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaSinkConfig.java",
              "type": "String",
              "code": "            defaultValue = \"\",\n            sensitive = true,\n            help = \"The password for the trust store file.\")\n    private String sslTruststorePassword;\n\n    @FieldDoc(\n            required = true,"
            },
            {
              "step": 1,
              "variableName": "kafkaSinkConfig.getSslTruststorePassword()",
              "startLine": 115,
              "startColumn": 66,
              "endLine": 115,
              "endColumn": 108,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 18,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 125,
              "startColumn": 46,
              "endLine": 125,
              "endColumn": 51,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "",
              "code": "\n        producer = new KafkaProducer<>(beforeCreateProducer(props));\n\n        log.info(\"Kafka sink started : {}.\", props);\n    }\n\n    public abstract KeyValue<K, V> extractKeyValue(Record<byte[]> message);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword;",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaSinkConfig.java",
              "type": "String",
              "code": "            defaultValue = \"\",\n            sensitive = true,\n            help = \"The password for the trust store file.\")\n    private String sslTruststorePassword;\n\n    @FieldDoc(\n            required = true,"
            },
            {
              "step": 1,
              "variableName": "kafkaSinkConfig.getSslTruststorePassword()",
              "startLine": 115,
              "startColumn": 66,
              "endLine": 115,
              "endColumn": 108,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 18,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 123,
              "startColumn": 61,
              "endLine": 123,
              "endColumn": 66,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getKeySerializerClass());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getValueSerializerClass());\n\n        producer = new KafkaProducer<>(beforeCreateProducer(props));\n\n        log.info(\"Kafka sink started : {}.\", props);\n    }"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 125,
              "startColumn": 46,
              "endLine": 125,
              "endColumn": 51,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "",
              "code": "\n        producer = new KafkaProducer<>(beforeCreateProducer(props));\n\n        log.info(\"Kafka sink started : {}.\", props);\n    }\n\n    public abstract KeyValue<K, V> extractKeyValue(Record<byte[]> message);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword;",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaSinkConfig.java",
              "type": "String",
              "code": "            defaultValue = \"\",\n            sensitive = true,\n            help = \"The password for the trust store file.\")\n    private String sslTruststorePassword;\n\n    @FieldDoc(\n            required = true,"
            },
            {
              "step": 1,
              "variableName": "kafkaSinkConfig.getSslTruststorePassword()",
              "startLine": 115,
              "startColumn": 66,
              "endLine": 115,
              "endColumn": 108,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 18,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 18,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "KafkaAbstractSink [props, <map.value>] : String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 117,
              "startColumn": 9,
              "endLine": 117,
              "endColumn": 14,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "KafkaAbstractSink [props, <map.value>] : String",
              "code": "        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));\n        props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getMaxRequestSize()));\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getKeySerializerClass());"
            },
            {
              "step": 5,
              "variableName": "props",
              "startLine": 117,
              "startColumn": 9,
              "endLine": 117,
              "endColumn": 14,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));\n        props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getMaxRequestSize()));\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getKeySerializerClass());"
            },
            {
              "step": 6,
              "variableName": "props",
              "startLine": 125,
              "startColumn": 46,
              "endLine": 125,
              "endColumn": 51,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "",
              "code": "\n        producer = new KafkaProducer<>(beforeCreateProducer(props));\n\n        log.info(\"Kafka sink started : {}.\", props);\n    }\n\n    public abstract KeyValue<K, V> extractKeyValue(Record<byte[]> message);"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "KafkaBytesSink.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword;",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaSinkConfig.java",
              "type": "String",
              "code": "            defaultValue = \"\",\n            sensitive = true,\n            help = \"The password for the trust store file.\")\n    private String sslTruststorePassword;\n\n    @FieldDoc(\n            required = true,"
            },
            {
              "step": 1,
              "variableName": "kafkaSinkConfig.getSslTruststorePassword()",
              "startLine": 115,
              "startColumn": 66,
              "endLine": 115,
              "endColumn": 108,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 18,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 123,
              "startColumn": 61,
              "endLine": 123,
              "endColumn": 66,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getKeySerializerClass());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getValueSerializerClass());\n\n        producer = new KafkaProducer<>(beforeCreateProducer(props));\n\n        log.info(\"Kafka sink started : {}.\", props);\n    }"
            },
            {
              "step": 4,
              "variableName": "Properties props",
              "startLine": 45,
              "startColumn": 47,
              "endLine": 45,
              "endColumn": 63,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaBytesSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "public class KafkaBytesSink extends KafkaAbstractSink<String, byte[]> {\n\n    @Override\n    protected Properties beforeCreateProducer(Properties props) {\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        log.info(\"Created kafka producer config : {}\", props);"
            },
            {
              "step": 5,
              "variableName": "props",
              "startLine": 48,
              "startColumn": 56,
              "endLine": 48,
              "endColumn": 61,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaBytesSink.java",
              "type": "",
              "code": "    protected Properties beforeCreateProducer(Properties props) {\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        log.info(\"Created kafka producer config : {}\", props);\n        return props;\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword;",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaSinkConfig.java",
              "type": "String",
              "code": "            defaultValue = \"\",\n            sensitive = true,\n            help = \"The password for the trust store file.\")\n    private String sslTruststorePassword;\n\n    @FieldDoc(\n            required = true,"
            },
            {
              "step": 1,
              "variableName": "kafkaSinkConfig.getSslTruststorePassword()",
              "startLine": 115,
              "startColumn": 66,
              "endLine": 115,
              "endColumn": 108,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 18,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 18,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "KafkaAbstractSink [props, <map.value>] : String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSinkConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSinkConfig.getSslTruststorePassword());\n        }\n        props.put(ProducerConfig.ACKS_CONFIG, kafkaSinkConfig.getAcks());\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf(kafkaSinkConfig.getBatchSize()));"
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 123,
              "startColumn": 61,
              "endLine": 123,
              "endColumn": 66,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "KafkaAbstractSink [props, <map.value>] : String",
              "code": "        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getKeySerializerClass());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getValueSerializerClass());\n\n        producer = new KafkaProducer<>(beforeCreateProducer(props));\n\n        log.info(\"Kafka sink started : {}.\", props);\n    }"
            },
            {
              "step": 5,
              "variableName": "props",
              "startLine": 123,
              "startColumn": 61,
              "endLine": 123,
              "endColumn": 66,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getKeySerializerClass());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, kafkaSinkConfig.getValueSerializerClass());\n\n        producer = new KafkaProducer<>(beforeCreateProducer(props));\n\n        log.info(\"Kafka sink started : {}.\", props);\n    }"
            },
            {
              "step": 6,
              "variableName": "Properties props",
              "startLine": 45,
              "startColumn": 47,
              "endLine": 45,
              "endColumn": 63,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaBytesSink.java",
              "type": "Properties [<map.value>] : String",
              "code": "public class KafkaBytesSink extends KafkaAbstractSink<String, byte[]> {\n\n    @Override\n    protected Properties beforeCreateProducer(Properties props) {\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        log.info(\"Created kafka producer config : {}\", props);"
            },
            {
              "step": 7,
              "variableName": "props",
              "startLine": 48,
              "startColumn": 56,
              "endLine": 48,
              "endColumn": 61,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaBytesSink.java",
              "type": "",
              "code": "    protected Properties beforeCreateProducer(Properties props) {\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        log.info(\"Created kafka producer config : {}\", props);\n        return props;\n    }\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "KafkaBytesSource.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sslTruststorePassword;",
              "startLine": 81,
              "startColumn": 20,
              "endLine": 81,
              "endColumn": 42,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaSourceConfig.java",
              "type": "String",
              "code": "            defaultValue = \"\",\n            sensitive = true,\n            help = \"The password for the trust store file.\")\n    private String sslTruststorePassword;\n\n    @FieldDoc(\n        required = true,"
            },
            {
              "step": 1,
              "variableName": "kafkaSourceConfig.getSslTruststorePassword()",
              "startLine": 117,
              "startColumn": 66,
              "endLine": 117,
              "endColumn": 110,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSource.java",
              "type": "String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSourceConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSourceConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSourceConfig.getSslTruststorePassword());\n        }\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaSourceConfig.getGroupId());\n        props.put(ConsumerConfig.FETCH_MIN_BYTES_CONFIG, String.valueOf(kafkaSourceConfig.getFetchMinBytes()));"
            },
            {
              "step": 2,
              "variableName": "props",
              "startLine": 117,
              "startColumn": 13,
              "endLine": 117,
              "endColumn": 18,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "            props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, kafkaSourceConfig.getSslTruststoreLocation());\n        }\n        if (StringUtils.isNotEmpty(kafkaSourceConfig.getSslTruststorePassword())) {\n            props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, kafkaSourceConfig.getSslTruststorePassword());\n        }\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaSourceConfig.getGroupId());\n        props.put(ConsumerConfig.FETCH_MIN_BYTES_CONFIG, String.valueOf(kafkaSourceConfig.getFetchMinBytes()));"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 139,
              "startColumn": 65,
              "endLine": 139,
              "endColumn": 70,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "                            .toString());\n        }\n        try {\n            consumer = new KafkaConsumer<>(beforeCreateConsumer(props));\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(\"Unable to instantiate Kafka consumer\", ex);\n        }"
            },
            {
              "step": 4,
              "variableName": "Properties props",
              "startLine": 78,
              "startColumn": 47,
              "endLine": 78,
              "endColumn": 63,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaBytesSource.java",
              "type": "Properties [<map.value>] : String",
              "code": "    private boolean produceKeyValue;\n\n    @Override\n    protected Properties beforeCreateConsumer(Properties props) {\n        props.putIfAbsent(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        props.putIfAbsent(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class.getName());\n        log.info(\"Created kafka consumer config : {}\", props);"
            },
            {
              "step": 5,
              "variableName": "props",
              "startLine": 81,
              "startColumn": 56,
              "endLine": 81,
              "endColumn": 61,
              "uri": "pulsar-4.0.3/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaBytesSource.java",
              "type": "",
              "code": "    protected Properties beforeCreateConsumer(Properties props) {\n        props.putIfAbsent(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        props.putIfAbsent(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class.getName());\n        log.info(\"Created kafka consumer config : {}\", props);\n\n        keySchema = getSchemaFromDeserializerAndAdaptConfiguration(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n                props, true);"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ]
}