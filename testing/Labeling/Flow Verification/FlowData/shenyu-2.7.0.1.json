{
  "208": [
    {
      "resultIndex": 0,
      "fileName": "JsonUtil.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "cipher.doFinal(data.getBytes(StandardCharsets.UTF_8))",
              "startLine": 54,
              "startColumn": 51,
              "endLine": 54,
              "endColumn": 104,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/RsaStrategy.java",
              "type": "byte[]",
              "code": "        RSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(RSA).generatePublic(new X509EncodedKeySpec(decoded));\n        Cipher cipher = Cipher.getInstance(RSA);\n        cipher.init(Cipher.ENCRYPT_MODE, pubKey);\n        return Base64.getEncoder().encodeToString(cipher.doFinal(data.getBytes(StandardCharsets.UTF_8)));\n    }\n}\n"
            },
            {
              "step": 1,
              "variableName": "Base64.getEncoder().encodeToString(cipher.doFinal(data.getBytes(StandardCharsets.UTF_8)))",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 54,
              "endColumn": 105,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/RsaStrategy.java",
              "type": "String",
              "code": "        RSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(RSA).generatePublic(new X509EncodedKeySpec(decoded));\n        Cipher cipher = Cipher.getInstance(RSA);\n        cipher.init(Cipher.ENCRYPT_MODE, pubKey);\n        return Base64.getEncoder().encodeToString(cipher.doFinal(data.getBytes(StandardCharsets.UTF_8)));\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "newInstance(strategyName).encrypt(key, data)",
              "startLine": 79,
              "startColumn": 20,
              "endLine": 79,
              "endColumn": 64,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/CryptorStrategyFactory.java",
              "type": "String",
              "code": "     */\n    private static String encrypt(final String strategyName, final String key, final String data) {\n        try {\n            return newInstance(strategyName).encrypt(key, data);\n        } catch (Exception e) {\n            LOG.error(\"encrypt data error: \", e);\n            return null;"
            },
            {
              "step": 3,
              "variableName": "encrypt(ruleHandle.getStrategyName(), ruleHandle.getEncryptKey(), data)",
              "startLine": 63,
              "startColumn": 24,
              "endLine": 63,
              "endColumn": 95,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/CryptorStrategyFactory.java",
              "type": "String",
              "code": "            case DECRYPT:\n                return decrypt(ruleHandle.getStrategyName(), ruleHandle.getDecryptKey(), data);\n            case ENCRYPT:\n                return encrypt(ruleHandle.getStrategyName(), ruleHandle.getEncryptKey(), data);\n            default:\n                return null;\n        }"
            },
            {
              "step": 4,
              "variableName": "CryptorStrategyFactory.match(ruleHandle, originalData)",
              "startLine": 114,
              "startColumn": 31,
              "endLine": 114,
              "endColumn": 85,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java",
              "type": "String",
              "code": "     */\n    public static String crypt(final CryptorRuleHandler ruleHandle, final String originalData, final String originalBody, final ServerWebExchange exchange) {\n\n        String modifiedData = CryptorStrategyFactory.match(ruleHandle, originalData);\n\n        if (Objects.isNull(modifiedData)) {\n            throw Optional.ofNullable(ruleHandle.getWay())"
            },
            {
              "step": 5,
              "variableName": "modifiedData",
              "startLine": 123,
              "startColumn": 79,
              "endLine": 123,
              "endColumn": 91,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java",
              "type": "String",
              "code": "                    .orElse(new ResponsiveException(ShenyuResultEnum.ENCRYPTION_ERROR, exchange));\n        }\n\n        return MapTypeEnum.mapType(ruleHandle.getMapType()).map(originalBody, modifiedData, ruleHandle.getFieldNames());\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "final String modifiedBody",
              "startLine": 43,
              "startColumn": 54,
              "endLine": 43,
              "endColumn": 79,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/MapTypeEnum.java",
              "type": "String",
              "code": "    ALL(\"all\") {\n        \n        @Override\n        public String map(final String originalBody, final String modifiedBody, final String fieldName) {\n            JsonElement element = JsonParser.parseString(originalBody);\n            JsonElement resultJe = JsonUtil.replaceJsonNode(element, new AtomicInteger(0), modifiedBody, Arrays.asList(fieldName.split(\"\\\\.\")));\n            return resultJe.toString();"
            },
            {
              "step": 7,
              "variableName": "modifiedBody",
              "startLine": 45,
              "startColumn": 92,
              "endLine": 45,
              "endColumn": 104,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/MapTypeEnum.java",
              "type": "String",
              "code": "        @Override\n        public String map(final String originalBody, final String modifiedBody, final String fieldName) {\n            JsonElement element = JsonParser.parseString(originalBody);\n            JsonElement resultJe = JsonUtil.replaceJsonNode(element, new AtomicInteger(0), modifiedBody, Arrays.asList(fieldName.split(\"\\\\.\")));\n            return resultJe.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "final String value",
              "startLine": 95,
              "startColumn": 47,
              "endLine": 95,
              "endColumn": 65,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "String",
              "code": "     */\n    public static JsonElement replaceJsonNode(final JsonElement jsonElement,\n                                              final AtomicInteger initDeep,\n                                              final String value,\n                                              final List<String> deepKey) {\n        if (CollectionUtils.isEmpty(deepKey)) {\n            return jsonElement;"
            },
            {
              "step": 9,
              "variableName": "value",
              "startLine": 122,
              "startColumn": 45,
              "endLine": 122,
              "endColumn": 50,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "String",
              "code": "                String key = entry.getKey();\n                if (initDeep.get() == deepKey.size()) {\n                    initDeep.set(deepKey.size() - 1);\n                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);"
            },
            {
              "step": 10,
              "variableName": "object",
              "startLine": 122,
              "startColumn": 21,
              "endLine": 122,
              "endColumn": 27,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonObject [<map.value>] : Object",
              "code": "                String key = entry.getKey();\n                if (initDeep.get() == deepKey.size()) {\n                    initDeep.set(deepKey.size() - 1);\n                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);"
            },
            {
              "step": 11,
              "variableName": "object",
              "startLine": 124,
              "startColumn": 39,
              "endLine": 124,
              "endColumn": 45,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonObject [<map.value>] : Object",
              "code": "                    initDeep.set(deepKey.size() - 1);\n                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);\n                objectNew.add(key, jsonElementNew);\n            }"
            },
            {
              "step": 12,
              "variableName": "object.get(key)",
              "startLine": 124,
              "startColumn": 39,
              "endLine": 124,
              "endColumn": 54,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonElement",
              "code": "                    initDeep.set(deepKey.size() - 1);\n                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);\n                objectNew.add(key, jsonElementNew);\n            }"
            },
            {
              "step": 13,
              "variableName": "jsonEle",
              "startLine": 125,
              "startColumn": 62,
              "endLine": 125,
              "endColumn": 69,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonElement",
              "code": "                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);\n                objectNew.add(key, jsonElementNew);\n            }\n            return objectNew;"
            },
            {
              "step": 14,
              "variableName": "final JsonElement jsonElement",
              "startLine": 93,
              "startColumn": 47,
              "endLine": 93,
              "endColumn": 76,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonElement",
              "code": "     * @param deepKey json link\n     * @return JsonElement\n     */\n    public static JsonElement replaceJsonNode(final JsonElement jsonElement,\n                                              final AtomicInteger initDeep,\n                                              final String value,\n                                              final List<String> deepKey) {"
            },
            {
              "step": 15,
              "variableName": "jsonElement",
              "startLine": 113,
              "startColumn": 33,
              "endLine": 113,
              "endColumn": 44,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonElement",
              "code": "        }\n\n        if (jsonElement.isJsonObject()) {\n            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {"
            },
            {
              "step": 16,
              "variableName": "jsonElement.getAsJsonObject()",
              "startLine": 113,
              "startColumn": 33,
              "endLine": 113,
              "endColumn": 62,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonObject",
              "code": "        }\n\n        if (jsonElement.isJsonObject()) {\n            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {"
            },
            {
              "step": 17,
              "variableName": "object",
              "startLine": 115,
              "startColumn": 57,
              "endLine": 115,
              "endColumn": 63,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonObject",
              "code": "        if (jsonElement.isJsonObject()) {\n            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {\n                    initDeep.incrementAndGet();\n                }"
            },
            {
              "step": 18,
              "variableName": "object.entrySet()",
              "startLine": 115,
              "startColumn": 57,
              "endLine": 115,
              "endColumn": 74,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "Set [<element>, <map.key>] : Object",
              "code": "        if (jsonElement.isJsonObject()) {\n            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {\n                    initDeep.incrementAndGet();\n                }"
            },
            {
              "step": 19,
              "variableName": "entry",
              "startLine": 116,
              "startColumn": 56,
              "endLine": 116,
              "endColumn": 61,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "Entry [<map.key>] : Object",
              "code": "            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {\n                    initDeep.incrementAndGet();\n                }\n                String key = entry.getKey();"
            },
            {
              "step": 20,
              "variableName": "entry.getKey()",
              "startLine": 116,
              "startColumn": 56,
              "endLine": 116,
              "endColumn": 70,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "",
              "code": "            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {\n                    initDeep.incrementAndGet();\n                }\n                String key = entry.getKey();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "cipher.doFinal(data.getBytes(StandardCharsets.UTF_8))",
              "startLine": 54,
              "startColumn": 51,
              "endLine": 54,
              "endColumn": 104,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/RsaStrategy.java",
              "type": "byte[]",
              "code": "        RSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(RSA).generatePublic(new X509EncodedKeySpec(decoded));\n        Cipher cipher = Cipher.getInstance(RSA);\n        cipher.init(Cipher.ENCRYPT_MODE, pubKey);\n        return Base64.getEncoder().encodeToString(cipher.doFinal(data.getBytes(StandardCharsets.UTF_8)));\n    }\n}\n"
            },
            {
              "step": 1,
              "variableName": "Base64.getEncoder().encodeToString(cipher.doFinal(data.getBytes(StandardCharsets.UTF_8)))",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 54,
              "endColumn": 105,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/RsaStrategy.java",
              "type": "String",
              "code": "        RSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(RSA).generatePublic(new X509EncodedKeySpec(decoded));\n        Cipher cipher = Cipher.getInstance(RSA);\n        cipher.init(Cipher.ENCRYPT_MODE, pubKey);\n        return Base64.getEncoder().encodeToString(cipher.doFinal(data.getBytes(StandardCharsets.UTF_8)));\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "newInstance(strategyName).encrypt(key, data)",
              "startLine": 79,
              "startColumn": 20,
              "endLine": 79,
              "endColumn": 64,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/CryptorStrategyFactory.java",
              "type": "String",
              "code": "     */\n    private static String encrypt(final String strategyName, final String key, final String data) {\n        try {\n            return newInstance(strategyName).encrypt(key, data);\n        } catch (Exception e) {\n            LOG.error(\"encrypt data error: \", e);\n            return null;"
            },
            {
              "step": 3,
              "variableName": "encrypt(ruleHandle.getStrategyName(), ruleHandle.getEncryptKey(), data)",
              "startLine": 63,
              "startColumn": 24,
              "endLine": 63,
              "endColumn": 95,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/CryptorStrategyFactory.java",
              "type": "String",
              "code": "            case DECRYPT:\n                return decrypt(ruleHandle.getStrategyName(), ruleHandle.getDecryptKey(), data);\n            case ENCRYPT:\n                return encrypt(ruleHandle.getStrategyName(), ruleHandle.getEncryptKey(), data);\n            default:\n                return null;\n        }"
            },
            {
              "step": 4,
              "variableName": "CryptorStrategyFactory.match(ruleHandle, pair.getRight())",
              "startLine": 135,
              "startColumn": 103,
              "endLine": 135,
              "endColumn": 160,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java",
              "type": "String",
              "code": "     * @return new body\n     */\n    public static String crypt(final CryptorRuleHandler ruleHandle, final List<Pair<String, String>> pairs, final String originalBody, final ServerWebExchange exchange) {\n        List<Pair<String, String>> modifiedPairs = pairs.stream().map(pair -> Pair.of(pair.getLeft(), CryptorStrategyFactory.match(ruleHandle, pair.getRight())))\n                .filter(pair -> StringUtils.isNoneBlank(pair.getRight()))\n                .collect(Collectors.toList());\n"
            },
            {
              "step": 5,
              "variableName": "Pair.of(pair.getLeft(), CryptorStrategyFactory.match(ruleHandle, pair.getRight()))",
              "startLine": 135,
              "startColumn": 79,
              "endLine": 135,
              "endColumn": 161,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java",
              "type": "Pair [right] : String",
              "code": "     * @return new body\n     */\n    public static String crypt(final CryptorRuleHandler ruleHandle, final List<Pair<String, String>> pairs, final String originalBody, final ServerWebExchange exchange) {\n        List<Pair<String, String>> modifiedPairs = pairs.stream().map(pair -> Pair.of(pair.getLeft(), CryptorStrategyFactory.match(ruleHandle, pair.getRight())))\n                .filter(pair -> StringUtils.isNoneBlank(pair.getRight()))\n                .collect(Collectors.toList());\n"
            },
            {
              "step": 6,
              "variableName": "pairs.stream().map(pair -> Pair.of(pair.getLeft(), CryptorStrategyFactory.match(ruleHandle, pair.getRight())))",
              "startLine": 135,
              "startColumn": 52,
              "endLine": 135,
              "endColumn": 162,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java",
              "type": "Stream [<element>, right] : String",
              "code": "     * @return new body\n     */\n    public static String crypt(final CryptorRuleHandler ruleHandle, final List<Pair<String, String>> pairs, final String originalBody, final ServerWebExchange exchange) {\n        List<Pair<String, String>> modifiedPairs = pairs.stream().map(pair -> Pair.of(pair.getLeft(), CryptorStrategyFactory.match(ruleHandle, pair.getRight())))\n                .filter(pair -> StringUtils.isNoneBlank(pair.getRight()))\n                .collect(Collectors.toList());\n"
            },
            {
              "step": 7,
              "variableName": "pairs.stream().map(pai",
              "startLine": 135,
              "startColumn": 52,
              "endLine": 136,
              "endColumn": 74,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java",
              "type": "Stream [<element>, right] : String",
              "code": "     * @return new body\n     */\n    public static String crypt(final CryptorRuleHandler ruleHandle, final List<Pair<String, String>> pairs, final String originalBody, final ServerWebExchange exchange) {\n        List<Pair<String, String>> modifiedPairs = pairs.stream().map(pair -> Pair.of(pair.getLeft(), CryptorStrategyFactory.match(ruleHandle, pair.getRight())))\n                .filter(pair -> StringUtils.isNoneBlank(pair.getRight()))\n                .collect(Collectors.toList());\n"
            },
            {
              "step": 8,
              "variableName": "collect(...) : List [<element>, right] : String",
              "startLine": 135,
              "startColumn": 52,
              "endLine": 137,
              "endColumn": 46,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java",
              "type": "List [<element>, right] : String",
              "code": "     * @return new body\n     */\n    public static String crypt(final CryptorRuleHandler ruleHandle, final List<Pair<String, String>> pairs, final String originalBody, final ServerWebExchange exchange) {\n        List<Pair<String, String>> modifiedPairs = pairs.stream().map(pair -> Pair.of(pair.getLeft(), CryptorStrategyFactory.match(ruleHandle, pair.getRight())))\n                .filter(pair -> StringUtils.isNoneBlank(pair.getRight()))\n                .collect(Collectors.toList());\n"
            },
            {
              "step": 9,
              "variableName": "modifiedPairs",
              "startLine": 146,
              "startColumn": 79,
              "endLine": 146,
              "endColumn": 92,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java",
              "type": "List [<element>, right] : String",
              "code": "                    .orElse(new ResponsiveException(ShenyuResultEnum.ENCRYPTION_ERROR, exchange));\n        }\n\n        return MapTypeEnum.mapType(ruleHandle.getMapType()).map(originalBody, modifiedPairs);\n\n    }\n}"
            },
            {
              "step": 10,
              "variableName": "final List<Pair<String, String>> modifiedPairs",
              "startLine": 107,
              "startColumn": 50,
              "endLine": 107,
              "endColumn": 96,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/MapTypeEnum.java",
              "type": "List [<element>, right] : String",
              "code": "     * @param modifiedPairs modifiedPairs\n     * @return String\n     */\n    public String map(final String originalBody, final List<Pair<String, String>> modifiedPairs) {\n        if (CollectionUtils.isEmpty(modifiedPairs)) {\n            return originalBody;\n        }"
            },
            {
              "step": 11,
              "variableName": "modifiedPairs",
              "startLine": 112,
              "startColumn": 42,
              "endLine": 112,
              "endColumn": 55,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/MapTypeEnum.java",
              "type": "List [<element>, right] : String",
              "code": "            return originalBody;\n        }\n        String modifiedString = originalBody;\n        for (Pair<String, String> pair : modifiedPairs) {\n            modifiedString = ALL.map(modifiedString, pair.getRight(), pair.getLeft());\n        }\n        return modifiedString;"
            },
            {
              "step": 12,
              "variableName": "pair",
              "startLine": 113,
              "startColumn": 54,
              "endLine": 113,
              "endColumn": 58,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/MapTypeEnum.java",
              "type": "Pair [right] : String",
              "code": "        }\n        String modifiedString = originalBody;\n        for (Pair<String, String> pair : modifiedPairs) {\n            modifiedString = ALL.map(modifiedString, pair.getRight(), pair.getLeft());\n        }\n        return modifiedString;\n    }"
            },
            {
              "step": 13,
              "variableName": "pair.getRight()",
              "startLine": 113,
              "startColumn": 54,
              "endLine": 113,
              "endColumn": 69,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/MapTypeEnum.java",
              "type": "String",
              "code": "        }\n        String modifiedString = originalBody;\n        for (Pair<String, String> pair : modifiedPairs) {\n            modifiedString = ALL.map(modifiedString, pair.getRight(), pair.getLeft());\n        }\n        return modifiedString;\n    }"
            },
            {
              "step": 14,
              "variableName": "final String modifiedBody",
              "startLine": 43,
              "startColumn": 54,
              "endLine": 43,
              "endColumn": 79,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/MapTypeEnum.java",
              "type": "String",
              "code": "    ALL(\"all\") {\n        \n        @Override\n        public String map(final String originalBody, final String modifiedBody, final String fieldName) {\n            JsonElement element = JsonParser.parseString(originalBody);\n            JsonElement resultJe = JsonUtil.replaceJsonNode(element, new AtomicInteger(0), modifiedBody, Arrays.asList(fieldName.split(\"\\\\.\")));\n            return resultJe.toString();"
            },
            {
              "step": 15,
              "variableName": "modifiedBody",
              "startLine": 45,
              "startColumn": 92,
              "endLine": 45,
              "endColumn": 104,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/MapTypeEnum.java",
              "type": "String",
              "code": "        @Override\n        public String map(final String originalBody, final String modifiedBody, final String fieldName) {\n            JsonElement element = JsonParser.parseString(originalBody);\n            JsonElement resultJe = JsonUtil.replaceJsonNode(element, new AtomicInteger(0), modifiedBody, Arrays.asList(fieldName.split(\"\\\\.\")));\n            return resultJe.toString();\n        }\n"
            },
            {
              "step": 16,
              "variableName": "final String value",
              "startLine": 95,
              "startColumn": 47,
              "endLine": 95,
              "endColumn": 65,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "String",
              "code": "     */\n    public static JsonElement replaceJsonNode(final JsonElement jsonElement,\n                                              final AtomicInteger initDeep,\n                                              final String value,\n                                              final List<String> deepKey) {\n        if (CollectionUtils.isEmpty(deepKey)) {\n            return jsonElement;"
            },
            {
              "step": 17,
              "variableName": "value",
              "startLine": 122,
              "startColumn": 45,
              "endLine": 122,
              "endColumn": 50,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "String",
              "code": "                String key = entry.getKey();\n                if (initDeep.get() == deepKey.size()) {\n                    initDeep.set(deepKey.size() - 1);\n                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);"
            },
            {
              "step": 18,
              "variableName": "object",
              "startLine": 122,
              "startColumn": 21,
              "endLine": 122,
              "endColumn": 27,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonObject [<map.value>] : Object",
              "code": "                String key = entry.getKey();\n                if (initDeep.get() == deepKey.size()) {\n                    initDeep.set(deepKey.size() - 1);\n                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);"
            },
            {
              "step": 19,
              "variableName": "object",
              "startLine": 124,
              "startColumn": 39,
              "endLine": 124,
              "endColumn": 45,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonObject [<map.value>] : Object",
              "code": "                    initDeep.set(deepKey.size() - 1);\n                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);\n                objectNew.add(key, jsonElementNew);\n            }"
            },
            {
              "step": 20,
              "variableName": "object.get(key)",
              "startLine": 124,
              "startColumn": 39,
              "endLine": 124,
              "endColumn": 54,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonElement",
              "code": "                    initDeep.set(deepKey.size() - 1);\n                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);\n                objectNew.add(key, jsonElementNew);\n            }"
            },
            {
              "step": 21,
              "variableName": "jsonEle",
              "startLine": 125,
              "startColumn": 62,
              "endLine": 125,
              "endColumn": 69,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonElement",
              "code": "                    object.addProperty(key, value);\n                }\n                JsonElement jsonEle = object.get(key);\n                JsonElement jsonElementNew = replaceJsonNode(jsonEle, initDeep, value, deepKey);\n                objectNew.add(key, jsonElementNew);\n            }\n            return objectNew;"
            },
            {
              "step": 22,
              "variableName": "final JsonElement jsonElement",
              "startLine": 93,
              "startColumn": 47,
              "endLine": 93,
              "endColumn": 76,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonElement",
              "code": "     * @param deepKey json link\n     * @return JsonElement\n     */\n    public static JsonElement replaceJsonNode(final JsonElement jsonElement,\n                                              final AtomicInteger initDeep,\n                                              final String value,\n                                              final List<String> deepKey) {"
            },
            {
              "step": 23,
              "variableName": "jsonElement",
              "startLine": 113,
              "startColumn": 33,
              "endLine": 113,
              "endColumn": 44,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonElement",
              "code": "        }\n\n        if (jsonElement.isJsonObject()) {\n            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {"
            },
            {
              "step": 24,
              "variableName": "jsonElement.getAsJsonObject()",
              "startLine": 113,
              "startColumn": 33,
              "endLine": 113,
              "endColumn": 62,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonObject",
              "code": "        }\n\n        if (jsonElement.isJsonObject()) {\n            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {"
            },
            {
              "step": 25,
              "variableName": "object",
              "startLine": 115,
              "startColumn": 57,
              "endLine": 115,
              "endColumn": 63,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "JsonObject",
              "code": "        if (jsonElement.isJsonObject()) {\n            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {\n                    initDeep.incrementAndGet();\n                }"
            },
            {
              "step": 26,
              "variableName": "object.entrySet()",
              "startLine": 115,
              "startColumn": 57,
              "endLine": 115,
              "endColumn": 74,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "Set [<element>, <map.key>] : Object",
              "code": "        if (jsonElement.isJsonObject()) {\n            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {\n                    initDeep.incrementAndGet();\n                }"
            },
            {
              "step": 27,
              "variableName": "entry",
              "startLine": 116,
              "startColumn": 56,
              "endLine": 116,
              "endColumn": 61,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "Entry [<map.key>] : Object",
              "code": "            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {\n                    initDeep.incrementAndGet();\n                }\n                String key = entry.getKey();"
            },
            {
              "step": 28,
              "variableName": "entry.getKey()",
              "startLine": 116,
              "startColumn": 56,
              "endLine": 116,
              "endColumn": 70,
              "uri": "shenyu-2.7.0.1/shenyu-plugin/shenyu-plugin-security/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java",
              "type": "",
              "code": "            JsonObject object = jsonElement.getAsJsonObject();\n            JsonObject objectNew = new JsonObject();\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                if (deepKey.get(initDeep.get()).equals(entry.getKey())) {\n                    initDeep.incrementAndGet();\n                }\n                String key = entry.getKey();"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 2,
      "fileName": "ShenyuAdminResult.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "ShenyuResultMessage.DASHBOARD_MODIFY_PASSWORD_ERROR",
              "startLine": 168,
              "startColumn": 44,
              "endLine": 168,
              "endColumn": 95,
              "uri": "shenyu-2.7.0.1/shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DashboardUserController.java",
              "type": "String",
              "code": "        }\n        dashboardUserModifyPasswordDTO.setId(id);\n        if (!userInfo.getUserId().equals(id) && !userInfo.getUserName().equals(dashboardUserModifyPasswordDTO.getUserName())) {\n            return ShenyuAdminResult.error(ShenyuResultMessage.DASHBOARD_MODIFY_PASSWORD_ERROR);\n        }\n        dashboardUserModifyPasswordDTO.setPassword(DigestUtils.sha512Hex(dashboardUserModifyPasswordDTO.getPassword()));\n        dashboardUserModifyPasswordDTO.setOldPassword(DigestUtils.sha512Hex(dashboardUserModifyPasswordDTO.getOldPassword()));"
            },
            {
              "step": 1,
              "variableName": "final String msg",
              "startLine": 94,
              "startColumn": 43,
              "endLine": 94,
              "endColumn": 59,
              "uri": "shenyu-2.7.0.1/shenyu-admin/src/main/java/org/apache/shenyu/admin/model/result/ShenyuAdminResult.java",
              "type": "String",
              "code": "     * @param msg error msg\n     * @return {@linkplain ShenyuAdminResult}\n     */\n    public static ShenyuAdminResult error(final String msg) {\n        return error(CommonErrorCode.ERROR, msg);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "msg",
              "startLine": 95,
              "startColumn": 45,
              "endLine": 95,
              "endColumn": 48,
              "uri": "shenyu-2.7.0.1/shenyu-admin/src/main/java/org/apache/shenyu/admin/model/result/ShenyuAdminResult.java",
              "type": "",
              "code": "     * @return {@linkplain ShenyuAdminResult}\n     */\n    public static ShenyuAdminResult error(final String msg) {\n        return error(CommonErrorCode.ERROR, msg);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "DingTalkRobotAlertNotifyStrategy.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accessToken",
              "startLine": 307,
              "startColumn": 16,
              "endLine": 307,
              "endColumn": 27,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/model/AlertReceiverDTO.java",
              "type": "String",
              "code": "     * @return access token\n     */\n    public String getAccessToken() {\n        return accessToken;\n    }\n    \n    /**"
            },
            {
              "step": 1,
              "variableName": "receiver.getAccessToken()",
              "startLine": 55,
              "startColumn": 58,
              "endLine": 55,
              "endColumn": 83,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/DingTalkRobotAlertNotifyStrategy.java",
              "type": "String",
              "code": "            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(MediaType.APPLICATION_JSON);\n            HttpEntity<DingTalkWebHookDto> httpEntity = new HttpEntity<>(dingTalkWebHookDto, headers);\n            String webHookUrl = DING_TALK_WEB_HOOK_URL + receiver.getAccessToken();\n            ResponseEntity<CommonRobotNotifyResp> responseEntity = getRestTemplate().postForEntity(webHookUrl,\n                    httpEntity, CommonRobotNotifyResp.class);\n            if (responseEntity.getStatusCode() == HttpStatus.OK) {"
            },
            {
              "step": 2,
              "variableName": "webHookUrl",
              "startLine": 61,
              "startColumn": 68,
              "endLine": 61,
              "endColumn": 78,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/DingTalkRobotAlertNotifyStrategy.java",
              "type": "",
              "code": "            if (responseEntity.getStatusCode() == HttpStatus.OK) {\n                Objects.requireNonNull(responseEntity.getBody());\n                if (responseEntity.getBody().getErrCode() == 0) {\n                    log.debug(\"Send dingTalk webHook: {} Success\", webHookUrl);\n                } else {\n                    log.warn(\"Send dingTalk webHook: {} Failed: {}\", webHookUrl, responseEntity.getBody().getErrMsg());\n                    throw new AlertNoticeException(responseEntity.getBody().getErrMsg());"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "DingTalkRobotAlertNotifyStrategy.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accessToken",
              "startLine": 307,
              "startColumn": 16,
              "endLine": 307,
              "endColumn": 27,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/model/AlertReceiverDTO.java",
              "type": "String",
              "code": "     * @return access token\n     */\n    public String getAccessToken() {\n        return accessToken;\n    }\n    \n    /**"
            },
            {
              "step": 1,
              "variableName": "receiver.getAccessToken()",
              "startLine": 55,
              "startColumn": 58,
              "endLine": 55,
              "endColumn": 83,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/DingTalkRobotAlertNotifyStrategy.java",
              "type": "String",
              "code": "            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(MediaType.APPLICATION_JSON);\n            HttpEntity<DingTalkWebHookDto> httpEntity = new HttpEntity<>(dingTalkWebHookDto, headers);\n            String webHookUrl = DING_TALK_WEB_HOOK_URL + receiver.getAccessToken();\n            ResponseEntity<CommonRobotNotifyResp> responseEntity = getRestTemplate().postForEntity(webHookUrl,\n                    httpEntity, CommonRobotNotifyResp.class);\n            if (responseEntity.getStatusCode() == HttpStatus.OK) {"
            },
            {
              "step": 2,
              "variableName": "webHookUrl",
              "startLine": 63,
              "startColumn": 70,
              "endLine": 63,
              "endColumn": 80,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/DingTalkRobotAlertNotifyStrategy.java",
              "type": "",
              "code": "                if (responseEntity.getBody().getErrCode() == 0) {\n                    log.debug(\"Send dingTalk webHook: {} Success\", webHookUrl);\n                } else {\n                    log.warn(\"Send dingTalk webHook: {} Failed: {}\", webHookUrl, responseEntity.getBody().getErrMsg());\n                    throw new AlertNoticeException(responseEntity.getBody().getErrMsg());\n                }\n            } else {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "DingTalkRobotAlertNotifyStrategy.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "accessToken",
              "startLine": 307,
              "startColumn": 16,
              "endLine": 307,
              "endColumn": 27,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/model/AlertReceiverDTO.java",
              "type": "String",
              "code": "     * @return access token\n     */\n    public String getAccessToken() {\n        return accessToken;\n    }\n    \n    /**"
            },
            {
              "step": 1,
              "variableName": "receiver.getAccessToken()",
              "startLine": 55,
              "startColumn": 58,
              "endLine": 55,
              "endColumn": 83,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/DingTalkRobotAlertNotifyStrategy.java",
              "type": "String",
              "code": "            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(MediaType.APPLICATION_JSON);\n            HttpEntity<DingTalkWebHookDto> httpEntity = new HttpEntity<>(dingTalkWebHookDto, headers);\n            String webHookUrl = DING_TALK_WEB_HOOK_URL + receiver.getAccessToken();\n            ResponseEntity<CommonRobotNotifyResp> responseEntity = getRestTemplate().postForEntity(webHookUrl,\n                    httpEntity, CommonRobotNotifyResp.class);\n            if (responseEntity.getStatusCode() == HttpStatus.OK) {"
            },
            {
              "step": 2,
              "variableName": "webHookUrl",
              "startLine": 67,
              "startColumn": 66,
              "endLine": 67,
              "endColumn": 76,
              "uri": "shenyu-2.7.0.1/shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/DingTalkRobotAlertNotifyStrategy.java",
              "type": "",
              "code": "                    throw new AlertNoticeException(responseEntity.getBody().getErrMsg());\n                }\n            } else {\n                log.warn(\"Send dingTalk webHook: {} Failed: {}\", webHookUrl, responseEntity.getBody());\n                throw new AlertNoticeException(\"Http StatusCode \" + responseEntity.getStatusCode());\n            }\n        } catch (Exception e) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "JsonUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "secretProperties",
              "startLine": 40,
              "startColumn": 68,
              "endLine": 40,
              "endColumn": 84,
              "uri": "shenyu-2.7.0.1/shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SecretServiceImpl.java",
              "type": "SecretProperties",
              "code": "\n    @Override\n    public String info() {\n        return Base64.getEncoder().encodeToString(JsonUtils.toJson(secretProperties).getBytes());\n    }\n}\n"
            },
            {
              "step": 1,
              "variableName": "final Object object",
              "startLine": 89,
              "startColumn": 33,
              "endLine": 89,
              "endColumn": 52,
              "uri": "shenyu-2.7.0.1/shenyu-common/src/main/java/org/apache/shenyu/common/utils/JsonUtils.java",
              "type": "SecretProperties",
              "code": "     * @param object the object\n     * @return the string\n     */\n    public static String toJson(final Object object) {\n        try {\n            return MAPPER.writeValueAsString(object);\n        } catch (IOException e) {"
            },
            {
              "step": 2,
              "variableName": "object",
              "startLine": 93,
              "startColumn": 56,
              "endLine": 93,
              "endColumn": 62,
              "uri": "shenyu-2.7.0.1/shenyu-common/src/main/java/org/apache/shenyu/common/utils/JsonUtils.java",
              "type": "",
              "code": "        try {\n            return MAPPER.writeValueAsString(object);\n        } catch (IOException e) {\n            LOG.warn(\"write to json string error: {}\", object, e);\n            return Constants.EMPTY_JSON;\n        }\n    }"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ]
}