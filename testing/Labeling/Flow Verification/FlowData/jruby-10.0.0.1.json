{
  "532": [
    {
      "resultIndex": 0,
      "fileName": "Warn.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "passwdStruct",
              "startLine": 2190,
              "startColumn": 16,
              "endLine": 2190,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject getPasswdStruct() {\n        return passwdStruct;\n    }\n    public void setPasswdStruct(RubyClass passwdStruct) {\n        this.passwdStruct = passwdStruct;"
            },
            {
              "step": 1,
              "variableName": "context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 47,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 2,
              "variableName": "(RubyClass) context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 3,
              "variableName": "RubyClass structClass",
              "startLine": 485,
              "startColumn": 63,
              "endLine": 485,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @param block\n     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;"
            },
            {
              "step": 4,
              "variableName": "structClass",
              "startLine": 486,
              "startColumn": 53,
              "endLine": 486,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 5,
              "variableName": "RubyClass rubyClass",
              "startLine": 98,
              "startColumn": 46,
              "endLine": 98,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "        this(runtime.getCurrentContext(), rubyClass);\n    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));"
            },
            {
              "step": 6,
              "variableName": "rubyClass",
              "startLine": 99,
              "startColumn": 32,
              "endLine": 99,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 7,
              "variableName": "super(context.runtime, rubyClass);",
              "startLine": 99,
              "startColumn": 9,
              "endLine": 99,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 8,
              "variableName": "new RubyStruct(context, structClass)",
              "startLine": 486,
              "startColumn": 29,
              "endLine": 486,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 9,
              "variableName": "struct",
              "startLine": 488,
              "startColumn": 16,
              "endLine": 488,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }\n\n}"
            },
            {
              "step": 10,
              "variableName": "newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK)",
              "startLine": 149,
              "startColumn": 16,
              "endLine": 149,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 11,
              "variableName": "setupPasswd(context, pw)",
              "startLine": 300,
              "startColumn": 46,
              "endLine": 300,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                try {\n                    Passwd pw;\n                    while((pw = posix.getpwent()) != null) {\n                        block.yield(context, setupPasswd(context, pw));\n                    }\n                } finally {\n                    posix.endpwent();"
            },
            {
              "step": 12,
              "variableName": "IRubyObject value",
              "startLine": 190,
              "startColumn": 53,
              "endLine": 190,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return body.yieldSpecific(context, this, arg0, arg1, arg2);\n    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 191,
              "startColumn": 42,
              "endLine": 191,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "IRubyObject value",
              "startLine": 104,
              "startColumn": 72,
              "endLine": 104,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "value",
              "startLine": 108,
              "startColumn": 44,
              "endLine": 108,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "IRubyObject value",
              "startLine": 158,
              "startColumn": 68,
              "endLine": 158,
              "endColumn": 85,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/IRBlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        if (block.type == Block.Type.LAMBDA) return doYieldLambda(context, block, value);\n\n        IRubyObject[] args;"
            },
            {
              "step": 17,
              "variableName": "value",
              "startLine": 167,
              "startColumn": 35,
              "endLine": 167,
              "endColumn": 40,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/IRBlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        } else if (!signature.isSpreadable()) {\n            args = new IRubyObject[] { value };\n        } else {\n            args = toAry(context, value);\n        }\n\n        return commonYieldPath(context, block, args, null, Block.NULL_BLOCK);"
            },
            {
              "step": 18,
              "variableName": "IRubyObject value",
              "startLine": 131,
              "startColumn": 62,
              "endLine": 131,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/IRBlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return yieldSpecificMultiArgsCommon(context, block, arg0, arg1, arg2);\n    }\n\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject value) {\n        final IRubyObject ary = Helpers.aryToAry(context, value);\n\n        if (ary instanceof RubyArray<?> array) return array.toJavaArray(context);"
            },
            {
              "step": 19,
              "variableName": "value",
              "startLine": 132,
              "startColumn": 59,
              "endLine": 132,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/IRBlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject value) {\n        final IRubyObject ary = Helpers.aryToAry(context, value);\n\n        if (ary instanceof RubyArray<?> array) return array.toJavaArray(context);\n        if (ary == context.nil) return new IRubyObject[] { value };"
            },
            {
              "step": 20,
              "variableName": "IRubyObject value",
              "startLine": 1982,
              "startColumn": 63,
              "endLine": 1982,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return aryToAry(((RubyBasicObject) value).getCurrentContext(), value);\n    }\n\n    public static IRubyObject aryToAry(ThreadContext context, IRubyObject value) {\n        if (value instanceof RubyArray) return value;\n\n        return respondsTo_to_ary(value) ?"
            },
            {
              "step": 21,
              "variableName": "value",
              "startLine": 1986,
              "startColumn": 63,
              "endLine": 1986,
              "endColumn": 68,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        if (value instanceof RubyArray) return value;\n\n        return respondsTo_to_ary(value) ?\n                TypeConverter.convertToTypeUnchecked(context, value, arrayClass(context), \"to_ary\", false) :\n                newArray(context, value);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "IRubyObject obj",
              "startLine": 94,
              "startColumn": 77,
              "endLine": 94,
              "endColumn": 92,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // This is essentially convertToType but it is used when we already know the method we are going to call will exist\n    // (as much as we can due to possible race conditions all convert methods have).  This is used in places where we\n    // need to explicitly check for the method (e.g. to_ary) before we actually try and convert the value.\n    public static IRubyObject convertToTypeUnchecked(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.callMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }"
            },
            {
              "step": 23,
              "variableName": "obj",
              "startLine": 95,
              "startColumn": 25,
              "endLine": 95,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // (as much as we can due to possible race conditions all convert methods have).  This is used in places where we\n    // need to explicitly check for the method (e.g. to_ary) before we actually try and convert the value.\n    public static IRubyObject convertToTypeUnchecked(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.callMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n"
            },
            {
              "step": 24,
              "variableName": "callMethod",
              "startLine": 371,
              "startColumn": 30,
              "endLine": 371,
              "endColumn": 40,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * Will invoke a named method with no arguments and no block.\n     */\n    @Override\n    public final IRubyObject callMethod(ThreadContext context, String name) {\n        return Helpers.invoke(context, this, name);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "this",
              "startLine": 372,
              "startColumn": 40,
              "endLine": 372,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject callMethod(ThreadContext context, String name) {\n        return Helpers.invoke(context, this, name);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "IRubyObject self",
              "startLine": 787,
              "startColumn": 61,
              "endLine": 787,
              "endColumn": 77,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return self.getMetaClass().finvoke(context, self, name, args, block);\n    }\n\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name) {\n        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {"
            },
            {
              "step": 27,
              "variableName": "self",
              "startLine": 788,
              "startColumn": 16,
              "endLine": 788,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name) {\n        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {\n        return self.getMetaClass().finvoke(context, self, name, arg0);"
            },
            {
              "step": 28,
              "variableName": "getMetaClass",
              "startLine": 492,
              "startColumn": 28,
              "endLine": 492,
              "endColumn": 40,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     *\n     */\n    @Override\n    public final RubyClass getMetaClass() {\n        return metaClass;\n    }\n"
            },
            {
              "step": 29,
              "variableName": "metaClass",
              "startLine": 493,
              "startColumn": 16,
              "endLine": 493,
              "endColumn": 25,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final RubyClass getMetaClass() {\n        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {"
            },
            {
              "step": 30,
              "variableName": "metaClass",
              "startLine": 493,
              "startColumn": 16,
              "endLine": 493,
              "endColumn": 25,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "     */\n    @Override\n    public final RubyClass getMetaClass() {\n        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {"
            },
            {
              "step": 31,
              "variableName": "self.getMetaClass()",
              "startLine": 788,
              "startColumn": 16,
              "endLine": 788,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name) {\n        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {\n        return self.getMetaClass().finvoke(context, self, name, arg0);"
            },
            {
              "step": 32,
              "variableName": "finvoke",
              "startLine": 695,
              "startColumn": 24,
              "endLine": 695,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        return method.call(context, self, entry.sourceModule, name, arg0, arg1, arg2, block);\n    }\n\n    public IRubyObject finvoke(ThreadContext context, IRubyObject self, String name) {\n        CacheEntry entry = searchWithCache(name);\n        DynamicMethod method = entry.method;\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 700,
              "startColumn": 61,
              "endLine": 700,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (shouldCallMethodMissing(method)) {\n            return Helpers.callMethodMissing(context, self, this, method.getVisibility(), name, CallType.FUNCTIONAL, Block.NULL_BLOCK);\n        }\n        return method.call(context, self, entry.sourceModule, name);\n    }"
            },
            {
              "step": 34,
              "variableName": "RubyClass klass",
              "startLine": 173,
              "startColumn": 90,
              "endLine": 173,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return selectMethodMissing(context, klass, visibility, name, callType).call(context, receiver, klass, name, arg0, arg1, arg2, block);\n    }\n\n    public static IRubyObject callMethodMissing(ThreadContext context, IRubyObject self, RubyClass klass, Visibility visibility, String name, CallType callType, Block block) {\n        return selectMethodMissing(context, klass, visibility, name, callType).call(context, self, klass, name, block);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "klass",
              "startLine": 174,
              "startColumn": 100,
              "endLine": 174,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject callMethodMissing(ThreadContext context, IRubyObject self, RubyClass klass, Visibility visibility, String name, CallType callType, Block block) {\n        return selectMethodMissing(context, klass, visibility, name, callType).call(context, self, klass, name, block);\n    }\n\n    public static IRubyObject callMethodMissing(ThreadContext context, IRubyObject receiver, Visibility visibility, String name, CallType callType, Block block) {"
            },
            {
              "step": 36,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 37,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 38,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 39,
              "variableName": "clazz",
              "startLine": 44,
              "startColumn": 90,
              "endLine": 44,
              "endColumn": 95,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());"
            },
            {
              "step": 40,
              "variableName": "RubyModule clazz",
              "startLine": 130,
              "startColumn": 85,
              "endLine": 130,
              "endColumn": 101,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name, null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 41,
              "variableName": "clazz",
              "startLine": 131,
              "startColumn": 89,
              "endLine": 131,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {"
            },
            {
              "step": 42,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 43,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 44,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 45,
              "variableName": "self",
              "startLine": 159,
              "startColumn": 95,
              "endLine": 159,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        break;\n                    case CALL_OP:\n                        if (profile) Profiler.updateCallSite(instr, interpreterContext.getScope(), scopeVersion);\n                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);"
            },
            {
              "step": 46,
              "variableName": "IRubyObject self",
              "startLine": 295,
              "startColumn": 161,
              "endLine": 295,
              "endColumn": 177,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    protected static void processCall(ThreadContext context, Instr instr, Operation operation, DynamicScope currDynScope, StaticScope currScope, Object[] temp, IRubyObject self, String name) {\n        Object result;\n\n        switch(operation) {"
            },
            {
              "step": 47,
              "variableName": "self",
              "startLine": 365,
              "startColumn": 67,
              "endLine": 365,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                break;\n            }\n            case NORESULT_CALL:\n                instr.interpret(context, currScope, currDynScope, self, temp);\n                break;\n            case FRAME_NAME_CALL:\n                setResult(temp, currDynScope, instr, ((FrameNameCallInstr) instr).getFrameName(context, self, name));"
            },
            {
              "step": 48,
              "variableName": "IRubyObject self",
              "startLine": 27,
              "startColumn": 102,
              "endLine": 27,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutConstInstr.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject value = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        IRubyObject module = (IRubyObject) getTarget().retrieve(context, self, currScope, currDynScope, temp);\n"
            },
            {
              "step": 49,
              "variableName": "self",
              "startLine": 29,
              "startColumn": 74,
              "endLine": 29,
              "endColumn": 78,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutConstInstr.java",
              "type": "RubyClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject value = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        IRubyObject module = (IRubyObject) getTarget().retrieve(context, self, currScope, currDynScope, temp);\n\n        String id = getId();\n"
            },
            {
              "step": 50,
              "variableName": "IRubyObject self",
              "startLine": 45,
              "startColumn": 51,
              "endLine": 45,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n"
            },
            {
              "step": 51,
              "variableName": "self",
              "startLine": 46,
              "startColumn": 16,
              "endLine": 46,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n\n    @Override"
            },
            {
              "step": 52,
              "variableName": "getTarget().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 29,
              "startColumn": 44,
              "endLine": 29,
              "endColumn": 110,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutConstInstr.java",
              "type": "RubyClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject value = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        IRubyObject module = (IRubyObject) getTarget().retrieve(context, self, currScope, currDynScope, temp);\n\n        String id = getId();\n"
            },
            {
              "step": 53,
              "variableName": "(IRubyObject) getTarget().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 29,
              "startColumn": 30,
              "endLine": 29,
              "endColumn": 110,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutConstInstr.java",
              "type": "RubyClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject value = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        IRubyObject module = (IRubyObject) getTarget().retrieve(context, self, currScope, currDynScope, temp);\n\n        String id = getId();\n"
            },
            {
              "step": 54,
              "variableName": "module",
              "startLine": 33,
              "startColumn": 50,
              "endLine": 33,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutConstInstr.java",
              "type": "RubyClass",
              "code": "\n        String id = getId();\n\n        IRRuntimeHelpers.putConst(context, self, module, id, value);\n\n        return null;\n    }"
            },
            {
              "step": 55,
              "variableName": "IRubyObject module",
              "startLine": 2545,
              "startColumn": 74,
              "endLine": 2545,
              "endColumn": 92,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Interp\n    public static void putConst(ThreadContext context, IRubyObject self, IRubyObject module, String id, IRubyObject value) {\n        putConst(context, self, module, id, value, context.getFile(), context.getLine() + 1);\n    }\n"
            },
            {
              "step": 56,
              "variableName": "module",
              "startLine": 2546,
              "startColumn": 33,
              "endLine": 2546,
              "endColumn": 39,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "\n    @Interp\n    public static void putConst(ThreadContext context, IRubyObject self, IRubyObject module, String id, IRubyObject value) {\n        putConst(context, self, module, id, value, context.getFile(), context.getLine() + 1);\n    }\n\n    @JIT"
            },
            {
              "step": 57,
              "variableName": "IRubyObject module",
              "startLine": 2554,
              "startColumn": 75,
              "endLine": 2554,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        putConst(context, self, module, id, value, scope.getFile(), line);\n    }\n\n    private static void putConst(ThreadContext context, IRubyObject self, IRubyObject module, String id, IRubyObject value, String filename, int line) {\n        if (!(module instanceof RubyModule mod)) throw typeError(context, module.inspect(context) + \" is not a class/module\");\n\n        warnSetConstInRefinement(context, self);"
            },
            {
              "step": 58,
              "variableName": "mod",
              "startLine": 2559,
              "startColumn": 9,
              "endLine": 2559,
              "endColumn": 12,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "\n        warnSetConstInRefinement(context, self);\n\n        mod.setConstant(context, id, value, filename, line);\n    }\n\n    @Interp @JIT"
            },
            {
              "step": 59,
              "variableName": "setConstant",
              "startLine": 5587,
              "startColumn": 24,
              "endLine": 5587,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "RubyClass",
              "code": "        return setConstant(getCurrentContext(), name, value, file, line);\n    }\n\n    public IRubyObject setConstant(ThreadContext context, String name, IRubyObject value, String file, int line) {\n        return setConstantCommon(context, name, value, false, true, file, line);\n    }\n"
            },
            {
              "step": 60,
              "variableName": "setConstantCommon(context, name, value, false, true, file, line)",
              "startLine": 5588,
              "startColumn": 16,
              "endLine": 5588,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject setConstant(ThreadContext context, String name, IRubyObject value, String file, int line) {\n        return setConstantCommon(context, name, value, false, true, file, line);\n    }\n\n    @Deprecated(since = \"10.0\")"
            },
            {
              "step": 61,
              "variableName": "setConstantCommon",
              "startLine": 5611,
              "startColumn": 25,
              "endLine": 5611,
              "endColumn": 42,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "RubyClass",
              "code": "     *               and its value is being updated.\n     * @return The result of setting the variable.\n     */\n    private IRubyObject setConstantCommon(ThreadContext context, String name, IRubyObject value, boolean hidden,\n                                          boolean warn, String file, int line) {\n        ConstantEntry oldEntry = fetchConstantEntry(context, name, true);\n"
            },
            {
              "step": 62,
              "variableName": "\"already initialized constant \" +",
              "startLine": 5622,
              "startColumn": 35,
              "endLine": 5623,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "String",
              "code": "            boolean notAutoload = oldEntry.value != UNDEF;\n            if (notAutoload || !setAutoloadConstant(context, name, value, file, line)) {\n                if (warn && notAutoload) {\n                    warn(context, \"already initialized constant \" +\n                            (this.equals(objectClass(context)) ? name : (this + \"::\" + name)));\n                }\n"
            },
            {
              "step": 63,
              "variableName": "String message",
              "startLine": 7,
              "startColumn": 52,
              "endLine": 7,
              "endColumn": 66,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Warn.java",
              "type": "String",
              "code": "import org.jruby.runtime.ThreadContext;\n\npublic class Warn {\n    public static void warn(ThreadContext context, String message) {\n        context.runtime.getWarnings().warn(message);\n    }\n"
            },
            {
              "step": 64,
              "variableName": "message",
              "startLine": 8,
              "startColumn": 44,
              "endLine": 8,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Warn.java",
              "type": "",
              "code": "\npublic class Warn {\n    public static void warn(ThreadContext context, String message) {\n        context.runtime.getWarnings().warn(message);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "passwdStruct",
              "startLine": 2190,
              "startColumn": 16,
              "endLine": 2190,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject getPasswdStruct() {\n        return passwdStruct;\n    }\n    public void setPasswdStruct(RubyClass passwdStruct) {\n        this.passwdStruct = passwdStruct;"
            },
            {
              "step": 1,
              "variableName": "context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 47,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 2,
              "variableName": "(RubyClass) context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 3,
              "variableName": "RubyClass structClass",
              "startLine": 485,
              "startColumn": 63,
              "endLine": 485,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @param block\n     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;"
            },
            {
              "step": 4,
              "variableName": "structClass",
              "startLine": 486,
              "startColumn": 53,
              "endLine": 486,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 5,
              "variableName": "RubyClass rubyClass",
              "startLine": 98,
              "startColumn": 46,
              "endLine": 98,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "        this(runtime.getCurrentContext(), rubyClass);\n    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));"
            },
            {
              "step": 6,
              "variableName": "rubyClass",
              "startLine": 99,
              "startColumn": 32,
              "endLine": 99,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 7,
              "variableName": "super(context.runtime, rubyClass);",
              "startLine": 99,
              "startColumn": 9,
              "endLine": 99,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 8,
              "variableName": "new RubyStruct(context, structClass)",
              "startLine": 486,
              "startColumn": 29,
              "endLine": 486,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 9,
              "variableName": "struct",
              "startLine": 488,
              "startColumn": 16,
              "endLine": 488,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }\n\n}"
            },
            {
              "step": 10,
              "variableName": "newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK)",
              "startLine": 149,
              "startColumn": 16,
              "endLine": 149,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 11,
              "variableName": "setupPasswd(context, pw)",
              "startLine": 300,
              "startColumn": 46,
              "endLine": 300,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                try {\n                    Passwd pw;\n                    while((pw = posix.getpwent()) != null) {\n                        block.yield(context, setupPasswd(context, pw));\n                    }\n                } finally {\n                    posix.endpwent();"
            },
            {
              "step": 12,
              "variableName": "IRubyObject value",
              "startLine": 190,
              "startColumn": 53,
              "endLine": 190,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return body.yieldSpecific(context, this, arg0, arg1, arg2);\n    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 191,
              "startColumn": 42,
              "endLine": 191,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "IRubyObject value",
              "startLine": 104,
              "startColumn": 72,
              "endLine": 104,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "value",
              "startLine": 106,
              "startColumn": 68,
              "endLine": 106,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }"
            },
            {
              "step": 16,
              "variableName": "new IRubyObject[] { value }",
              "startLine": 106,
              "startColumn": 48,
              "endLine": 106,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }"
            },
            {
              "step": 17,
              "variableName": "new IRubyObject[] { value }",
              "startLine": 106,
              "startColumn": 48,
              "endLine": 106,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }"
            },
            {
              "step": 18,
              "variableName": "IRubyObject[] args",
              "startLine": 108,
              "startColumn": 75,
              "endLine": 108,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/InterpretedIRBlockBody.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    protected IRubyObject yieldDirect(ThreadContext context, Block block, IRubyObject[] args, IRubyObject self) {\n        ensureInstrsReady(); // so we get debugging output\n        return Interpreter.INTERPRET_BLOCK(context, block, self, fullInterpreterContext, args, block.getBinding().getMethod(), Block.NULL_BLOCK);\n    }"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 110,
              "startColumn": 90,
              "endLine": 110,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/InterpretedIRBlockBody.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "    @Override\n    protected IRubyObject yieldDirect(ThreadContext context, Block block, IRubyObject[] args, IRubyObject self) {\n        ensureInstrsReady(); // so we get debugging output\n        return Interpreter.INTERPRET_BLOCK(context, block, self, fullInterpreterContext, args, block.getBinding().getMethod(), Block.NULL_BLOCK);\n    }\n\n    // TODO: Duplicated in InterpretedIRBlockBody"
            },
            {
              "step": 20,
              "variableName": "IRubyObject[] args",
              "startLine": 117,
              "startColumn": 36,
              "endLine": 117,
              "endColumn": 54,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_BLOCK(ThreadContext context, Block block, IRubyObject self,\n            InterpreterContext ic, IRubyObject[] args, String name, Block blockArg) {\n        try {\n            ThreadContext.pushBacktrace(context, name, ic.getFileName(), ic.getLine());\n            return ic.getEngine().interpret(context, block, self, ic, null, name, args, blockArg);"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 120,
              "startColumn": 83,
              "endLine": 120,
              "endColumn": 87,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "            InterpreterContext ic, IRubyObject[] args, String name, Block blockArg) {\n        try {\n            ThreadContext.pushBacktrace(context, name, ic.getFileName(), ic.getLine());\n            return ic.getEngine().interpret(context, block, self, ic, null, name, args, blockArg);\n        } finally {\n            ThreadContext.popBacktrace(context);\n        }"
            },
            {
              "step": 22,
              "variableName": "IRubyObject[] args",
              "startLine": 111,
              "startColumn": 55,
              "endLine": 111,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();\n        Object[]  temp      = interpreterContext.allocateTemporaryVariables();\n        double[]  floats    = interpreterContext.allocateTemporaryFloatVariables();"
            },
            {
              "step": 23,
              "variableName": "args",
              "startLine": 190,
              "startColumn": 91,
              "endLine": 190,
              "endColumn": 95,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "                            args = IRRuntimeHelpers.prepareSingleBlockArgs(context, block, args);\n                            break;\n                        case PREPARE_FIXED_BLOCK_ARGS:\n                            args = IRRuntimeHelpers.prepareFixedBlockArgs(context, block, args);\n                            break;\n                        case PREPARE_BLOCK_ARGS:\n                            args = IRRuntimeHelpers.prepareBlockArgs(context, block, args, usesKeywords, ruby2Keywords);"
            },
            {
              "step": 24,
              "variableName": "IRubyObject[] args",
              "startLine": 2294,
              "startColumn": 91,
              "endLine": 2294,
              "endColumn": 109,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "    }\n\n    @Interp @JIT\n    public static IRubyObject[] prepareFixedBlockArgs(ThreadContext context, Block block, IRubyObject[] args) {\n        if (args == null) args = IRubyObject.NULL_ARRAY;\n\n        switch (block.type) {"
            },
            {
              "step": 25,
              "variableName": "args",
              "startLine": 2306,
              "startColumn": 39,
              "endLine": 2306,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "            default:\n                // If we need more than 1 reqd arg, convert a single value to an array if possible.\n                // If there are insufficient args, ReceivePreReqdInstr will return nil\n                return toAry(context, args);\n        }\n    }\n"
            },
            {
              "step": 26,
              "variableName": "IRubyObject[] args",
              "startLine": 2178,
              "startColumn": 62,
              "endLine": 2178,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "        return asFixnum(context, i);\n    }\n\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject[] args) {\n        IRubyObject ary;\n        if (args.length == 1 && (ary = Helpers.aryOrToAry(context, args[0])) != context.nil) {\n            if (!(ary instanceof RubyArray)) throw typeError(context, \"\", args[0], \"#to_ary should return Array\");"
            },
            {
              "step": 27,
              "variableName": "args",
              "startLine": 2180,
              "startColumn": 68,
              "endLine": 2180,
              "endColumn": 72,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject[] args) {\n        IRubyObject ary;\n        if (args.length == 1 && (ary = Helpers.aryOrToAry(context, args[0])) != context.nil) {\n            if (!(ary instanceof RubyArray)) throw typeError(context, \"\", args[0], \"#to_ary should return Array\");\n            args = ((RubyArray) ary).toJavaArray(context);\n        }"
            },
            {
              "step": 28,
              "variableName": "args[0]",
              "startLine": 2180,
              "startColumn": 68,
              "endLine": 2180,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject[] args) {\n        IRubyObject ary;\n        if (args.length == 1 && (ary = Helpers.aryOrToAry(context, args[0])) != context.nil) {\n            if (!(ary instanceof RubyArray)) throw typeError(context, \"\", args[0], \"#to_ary should return Array\");\n            args = ((RubyArray) ary).toJavaArray(context);\n        }"
            },
            {
              "step": 29,
              "variableName": "IRubyObject value",
              "startLine": 2000,
              "startColumn": 65,
              "endLine": 2000,
              "endColumn": 82,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public static IRubyObject aryOrToAry(ThreadContext context, IRubyObject value) {\n        if (value instanceof RubyArray) return value;\n\n        return respondsTo_to_ary(value) ?"
            },
            {
              "step": 30,
              "variableName": "value",
              "startLine": 2003,
              "startColumn": 34,
              "endLine": 2003,
              "endColumn": 39,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static IRubyObject aryOrToAry(ThreadContext context, IRubyObject value) {\n        if (value instanceof RubyArray) return value;\n\n        return respondsTo_to_ary(value) ?\n                TypeConverter.convertToTypeUnchecked(context, value, arrayClass(context), \"to_ary\", false) :\n                context.nil;\n    }"
            },
            {
              "step": 31,
              "variableName": "IRubyObject value",
              "startLine": 1990,
              "startColumn": 46,
              "endLine": 1990,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                newArray(context, value);\n    }\n\n    private static boolean respondsTo_to_ary(IRubyObject value) {\n        try {\n            return value.respondsTo(\"to_ary\");\n        } catch (NoMethodError e) {"
            },
            {
              "step": 32,
              "variableName": "value",
              "startLine": 1992,
              "startColumn": 20,
              "endLine": 1992,
              "endColumn": 25,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    private static boolean respondsTo_to_ary(IRubyObject value) {\n        try {\n            return value.respondsTo(\"to_ary\");\n        } catch (NoMethodError e) {\n            // A non-existent respond_to? should still end up calling method_missing but if m_m does not\n            // handle it then we should not raise."
            },
            {
              "step": 33,
              "variableName": "respondsTo",
              "startLine": 590,
              "startColumn": 26,
              "endLine": 590,
              "endColumn": 36,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * haven't been overridden.\n     */\n    @Override\n    public final boolean respondsTo(String name) {\n        final Ruby runtime = metaClass.runtime;\n        final CacheEntry entry = metaClass.searchWithCache(\"respond_to?\");\n        final DynamicMethod respondTo = entry.method;"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 606,
              "startColumn": 66,
              "endLine": 606,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        // respond_to? or respond_to_missing? is not defined, so we must dispatch to trigger method_missing\n        if ( respondTo.isUndefined() ) {\n            return sites(context).respond_to.call(context, this, this, mname).isTrue();\n        } else {\n            return respondTo.callRespondTo(context, this, \"respond_to?\", entry.sourceModule, mname);\n        }"
            },
            {
              "step": 35,
              "variableName": "IRubyObject self",
              "startLine": 237,
              "startColumn": 72,
              "endLine": 237,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 36,
              "variableName": "self",
              "startLine": 238,
              "startColumn": 43,
              "endLine": 238,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {"
            },
            {
              "step": 37,
              "variableName": "IRubyObject arg",
              "startLine": 496,
              "startColumn": 42,
              "endLine": 496,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n"
            },
            {
              "step": 38,
              "variableName": "(RubyBasicObject) arg",
              "startLine": 497,
              "startColumn": 17,
              "endLine": 497,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "((RubyBasicObject) arg).metaClass",
              "startLine": 497,
              "startColumn": 16,
              "endLine": 497,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "getMetaClass(self)",
              "startLine": 238,
              "startColumn": 30,
              "endLine": 238,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {"
            },
            {
              "step": 41,
              "variableName": "selfType",
              "startLine": 244,
              "startColumn": 52,
              "endLine": 244,
              "endColumn": 60,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName, arg1);\n        }\n        return cacheAndCall(context, caller, self, selfType, arg1);\n    }\n\n    public IRubyObject fcall(ThreadContext context, IRubyObject self, IRubyObject arg1) {"
            },
            {
              "step": 42,
              "variableName": "RubyClass selfType",
              "startLine": 464,
              "startColumn": 101,
              "endLine": 464,
              "endColumn": 119,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        return entry.method.call(context, self, entry.sourceModule, methodName, block);\n    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }"
            },
            {
              "step": 43,
              "variableName": "selfType",
              "startLine": 465,
              "startColumn": 55,
              "endLine": 465,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }\n"
            },
            {
              "step": 44,
              "variableName": "RubyClass selfType",
              "startLine": 494,
              "startColumn": 63,
              "endLine": 494,
              "endColumn": 81,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        return entry.method.call(context, self, entry.sourceModule, methodName, arg1, arg2, arg3, block);\n    }\n\n    private CacheEntry populateCacheEntry(IRubyObject caller, RubyClass selfType, ThreadContext context, IRubyObject self) {\n        CacheEntry entry = selfType.searchWithCache(methodName);\n        DynamicMethod method = entry.method;\n"
            },
            {
              "step": 45,
              "variableName": "selfType",
              "startLine": 499,
              "startColumn": 63,
              "endLine": 499,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (methodMissing(method, caller)) {\n            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n        }\n\n        entry = setCache(entry, self);"
            },
            {
              "step": 46,
              "variableName": "RubyClass selfClass",
              "startLine": 594,
              "startColumn": 78,
              "endLine": 594,
              "endColumn": 97,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return (int) length;\n    }\n\n    public static CacheEntry createMethodMissingEntry(ThreadContext context, RubyClass selfClass, CallType callType, Visibility visibility, int token, String methodName) {\n        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,"
            },
            {
              "step": 47,
              "variableName": "selfClass",
              "startLine": 598,
              "startColumn": 17,
              "endLine": 598,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,\n                selfClass,\n                token);\n    }\n"
            },
            {
              "step": 48,
              "variableName": "RubyModule source",
              "startLine": 20,
              "startColumn": 45,
              "endLine": 20,
              "endColumn": 62,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "RubyClass",
              "code": "        this.token = token;\n    }\n\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;"
            },
            {
              "step": 49,
              "variableName": "source",
              "startLine": 22,
              "startColumn": 29,
              "endLine": 22,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "RubyClass",
              "code": "\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;\n    }\n"
            },
            {
              "step": 50,
              "variableName": "this",
              "startLine": 22,
              "startColumn": 9,
              "endLine": 22,
              "endColumn": 13,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;\n    }\n"
            },
            {
              "step": 51,
              "variableName": "new Cac",
              "startLine": 596,
              "startColumn": 16,
              "endLine": 599,
              "endColumn": 23,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    public static CacheEntry createMethodMissingEntry(ThreadContext context, RubyClass selfClass, CallType callType, Visibility visibility, int token, String methodName) {\n        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,\n                selfClass,\n                token);"
            },
            {
              "step": 52,
              "variableName": "Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName)",
              "startLine": 499,
              "startColumn": 21,
              "endLine": 499,
              "endColumn": 131,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (methodMissing(method, caller)) {\n            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n        }\n\n        entry = setCache(entry, self);"
            },
            {
              "step": 53,
              "variableName": "entry",
              "startLine": 502,
              "startColumn": 26,
              "endLine": 502,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n        }\n\n        entry = setCache(entry, self);\n        return entry;\n    }\n"
            },
            {
              "step": 54,
              "variableName": "final CacheEntry entry",
              "startLine": 37,
              "startColumn": 35,
              "endLine": 37,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/BitAndCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "    }\n\n    @Override\n    protected CacheEntry setCache(final CacheEntry entry, final IRubyObject self) {\n        if (self instanceof RubyFixnum && entry.method.isBuiltin()) {\n            return cache = new FixnumEntry(entry); // tagged entry - do isBuiltin check once\n        }"
            },
            {
              "step": 55,
              "variableName": "cache = entry",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 29,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/BitAndCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        if (self instanceof RubyFixnum && entry.method.isBuiltin()) {\n            return cache = new FixnumEntry(entry); // tagged entry - do isBuiltin check once\n        }\n        return cache = entry;\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "setCache(entry, self)",
              "startLine": 502,
              "startColumn": 17,
              "endLine": 502,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n        }\n\n        entry = setCache(entry, self);\n        return entry;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "entry",
              "startLine": 503,
              "startColumn": 16,
              "endLine": 503,
              "endColumn": 21,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        }\n\n        entry = setCache(entry, self);\n        return entry;\n    }\n\n    protected boolean methodMissing(DynamicMethod method, IRubyObject caller) {"
            },
            {
              "step": 58,
              "variableName": "populateCacheEntry(caller, selfType, context, self)",
              "startLine": 465,
              "startColumn": 28,
              "endLine": 465,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "entry",
              "startLine": 466,
              "startColumn": 49,
              "endLine": 466,
              "endColumn": 54,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg, Block block) {"
            },
            {
              "step": 60,
              "variableName": "entry.sourceModule",
              "startLine": 466,
              "startColumn": 49,
              "endLine": 466,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg, Block block) {"
            },
            {
              "step": 61,
              "variableName": "RubyModule clazz",
              "startLine": 77,
              "startColumn": 70,
              "endLine": 77,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "clazz",
              "startLine": 78,
              "startColumn": 36,
              "endLine": 78,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 63,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 64,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 65,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 66,
              "variableName": "clazz",
              "startLine": 45,
              "startColumn": 88,
              "endLine": 45,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());\n        }"
            },
            {
              "step": 67,
              "variableName": "RubyModule clazz",
              "startLine": 126,
              "startColumn": 84,
              "endLine": 126,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    public static IRubyObject INTERPRET_CLASS(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name, null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 68,
              "variableName": "clazz",
              "startLine": 127,
              "startColumn": 89,
              "endLine": 127,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_CLASS(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name, null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {"
            },
            {
              "step": 69,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 70,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 71,
              "variableName": "IRubyObject self",
              "startLine": 24,
              "startColumn": 70,
              "endLine": 24,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/StartupInterpreterEngine.java",
              "type": "RubyClass",
              "code": " * This interpreter is meant to interpret the instructions generated directly from IRBuild.\n */\npublic class StartupInterpreterEngine extends InterpreterEngine {\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                 InterpreterContext interpreterContext, RubyModule implClass,\n                                 String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 72,
              "variableName": "self",
              "startLine": 66,
              "startColumn": 95,
              "endLine": 66,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/StartupInterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        break;\n                    case CALL_OP:\n                        if (profile) Profiler.updateCallSite(instr, interpreterContext.getScope(), scopeVersion);\n                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);"
            },
            {
              "step": 73,
              "variableName": "IRubyObject self",
              "startLine": 295,
              "startColumn": 161,
              "endLine": 295,
              "endColumn": 177,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    protected static void processCall(ThreadContext context, Instr instr, Operation operation, DynamicScope currDynScope, StaticScope currScope, Object[] temp, IRubyObject self, String name) {\n        Object result;\n\n        switch(operation) {"
            },
            {
              "step": 74,
              "variableName": "self",
              "startLine": 372,
              "startColumn": 76,
              "endLine": 372,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                break;\n            case CALL:\n            default:\n                result = instr.interpret(context, currScope, currDynScope, self, temp);\n                setResult(temp, currDynScope, instr, result);\n                break;\n        }"
            },
            {
              "step": 75,
              "variableName": "IRubyObject self",
              "startLine": 57,
              "startColumn": 102,
              "endLine": 57,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/DefineInstanceMethodInstr.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRRuntimeHelpers.defInterpretedInstanceMethod(context, method, currDynScope, self);\n\n        return null; // unused; symbol is propagated"
            },
            {
              "step": 76,
              "variableName": "self",
              "startLine": 58,
              "startColumn": 86,
              "endLine": 58,
              "endColumn": 90,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/DefineInstanceMethodInstr.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRRuntimeHelpers.defInterpretedInstanceMethod(context, method, currDynScope, self);\n\n        return null; // unused; symbol is propagated\n    }"
            },
            {
              "step": 77,
              "variableName": "IRubyObject self",
              "startLine": 1886,
              "startColumn": 119,
              "endLine": 1886,
              "endColumn": 135,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Interp\n    public static void defInterpretedInstanceMethod(ThreadContext context, IRScope method, DynamicScope currDynScope, IRubyObject self) {\n        context.setLine(method.getLine());\n        RubySymbol methodName = method.getName();\n        RubyModule rubyClass = findInstanceMethodContainer(context, currDynScope, self);"
            },
            {
              "step": 78,
              "variableName": "self",
              "startLine": 1889,
              "startColumn": 83,
              "endLine": 1889,
              "endColumn": 87,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    public static void defInterpretedInstanceMethod(ThreadContext context, IRScope method, DynamicScope currDynScope, IRubyObject self) {\n        context.setLine(method.getLine());\n        RubySymbol methodName = method.getName();\n        RubyModule rubyClass = findInstanceMethodContainer(context, currDynScope, self);\n\n        Visibility currVisibility = context.getCurrentVisibility();\n        Visibility newVisibility = Helpers.performNormalMethodChecksAndDetermineVisibility(context, rubyClass, methodName, currVisibility);"
            },
            {
              "step": 79,
              "variableName": "IRubyObject self",
              "startLine": 1198,
              "startColumn": 108,
              "endLine": 1198,
              "endColumn": 124,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    public static RubyModule findInstanceMethodContainer(ThreadContext context, DynamicScope currDynScope, IRubyObject self) {\n        boolean inBindingEval = currDynScope.inBindingEval();\n\n        // Top-level-scripts are special but, not if binding-evals are in force!"
            },
            {
              "step": 80,
              "variableName": "(RubyModule) self",
              "startLine": 1236,
              "startColumn": 73,
              "endLine": 1236,
              "endColumn": 90,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "                //     end\n                //   end\n                // -------------\n                case MODULE_EVAL  : return self instanceof RubyModule ? (RubyModule) self : self.getMetaClass();\n                case INSTANCE_EVAL: return self.singletonClass(context);\n                case BINDING_EVAL : ds = ds.getParentScope(); break;\n                case NONE:"
            },
            {
              "step": 81,
              "variableName": "self instanceof RubyModule ? (RubyModule) self : self.getMetaClass()",
              "startLine": 1236,
              "startColumn": 44,
              "endLine": 1236,
              "endColumn": 112,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "... : RubyClass",
              "code": "                //     end\n                //   end\n                // -------------\n                case MODULE_EVAL  : return self instanceof RubyModule ? (RubyModule) self : self.getMetaClass();\n                case INSTANCE_EVAL: return self.singletonClass(context);\n                case BINDING_EVAL : ds = ds.getParentScope(); break;\n                case NONE:"
            },
            {
              "step": 82,
              "variableName": "findInstanceMethodContainer(context, currDynScope, self)",
              "startLine": 1889,
              "startColumn": 32,
              "endLine": 1889,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    public static void defInterpretedInstanceMethod(ThreadContext context, IRScope method, DynamicScope currDynScope, IRubyObject self) {\n        context.setLine(method.getLine());\n        RubySymbol methodName = method.getName();\n        RubyModule rubyClass = findInstanceMethodContainer(context, currDynScope, self);\n\n        Visibility currVisibility = context.getCurrentVisibility();\n        Visibility newVisibility = Helpers.performNormalMethodChecksAndDetermineVisibility(context, rubyClass, methodName, currVisibility);"
            },
            {
              "step": 83,
              "variableName": "rubyClass",
              "startLine": 1899,
              "startColumn": 35,
              "endLine": 1899,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        DynamicMethod newMethod = instanceConfig(context).getCompileMode() == RubyInstanceConfig.CompileMode.OFF ?\n            new InterpretedIRMethod(method, newVisibility, rubyClass) : new MixedModeIRMethod(method, newVisibility, rubyClass);\n\n        Helpers.addInstanceMethod(rubyClass, methodName, newMethod, currVisibility, context);\n    }\n\n    @JIT"
            },
            {
              "step": 84,
              "variableName": "RubyModule containingClass",
              "startLine": 2076,
              "startColumn": 48,
              "endLine": 2076,
              "endColumn": 74,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return addInstanceMethod(containingClass, symbol, method, visibility, context);\n    }\n\n    public static RubySymbol addInstanceMethod(RubyModule containingClass, RubySymbol symbol, DynamicMethod method, Visibility visibility, ThreadContext context) {\n        containingClass.addMethod(context, symbol.idString(), method);\n\n        if (!containingClass.isRefinement()) callNormalMethodHook(containingClass, context, symbol);"
            },
            {
              "step": 85,
              "variableName": "containingClass",
              "startLine": 2077,
              "startColumn": 9,
              "endLine": 2077,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubySymbol addInstanceMethod(RubyModule containingClass, RubySymbol symbol, DynamicMethod method, Visibility visibility, ThreadContext context) {\n        containingClass.addMethod(context, symbol.idString(), method);\n\n        if (!containingClass.isRefinement()) callNormalMethodHook(containingClass, context, symbol);\n        if (visibility == Visibility.MODULE_FUNCTION) addModuleMethod(containingClass, method, context, symbol);"
            },
            {
              "step": 86,
              "variableName": "addMethod",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/PrependedModule.java",
              "type": "PrependedModule",
              "code": "    }\n\n    @Override\n    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        super.addMethod(context, id, method);\n        method.setDefinedClass(origin);\n    }"
            },
            {
              "step": 87,
              "variableName": "super",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 14,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/PrependedModule.java",
              "type": "PrependedModule",
              "code": "\n    @Override\n    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        super.addMethod(context, id, method);\n        method.setDefinedClass(origin);\n    }\n"
            },
            {
              "step": 88,
              "variableName": "addMethod",
              "startLine": 1897,
              "startColumn": 17,
              "endLine": 1897,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "        addMethod(getCurrentContext(), id, method);\n    }\n\n    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        if (this instanceof MetaClass) {\n            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();"
            },
            {
              "step": 89,
              "variableName": "testFrozen(frozenType())",
              "startLine": 1902,
              "startColumn": 13,
              "endLine": 1902,
              "endColumn": 37,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();\n        } else {\n            testFrozen(frozenType());\n        }\n\n        RubyModule methodLocation = this.methodLocation;"
            },
            {
              "step": 90,
              "variableName": "testFrozen",
              "startLine": 293,
              "startColumn": 25,
              "endLine": 293,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "PrependedModule",
              "code": "     * throw an exception based on the message.\n     * @param message is frozen\n     */\n   protected final void testFrozen(String message) {\n       if (isFrozen()) {\n           throw getRuntime().newFrozenError(message, this);\n       }"
            },
            {
              "step": 91,
              "variableName": "this",
              "startLine": 295,
              "startColumn": 55,
              "endLine": 295,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "PrependedModule",
              "code": "     */\n   protected final void testFrozen(String message) {\n       if (isFrozen()) {\n           throw getRuntime().newFrozenError(message, this);\n       }\n   }\n"
            },
            {
              "step": 92,
              "variableName": "IRubyObject receiver",
              "startLine": 4259,
              "startColumn": 61,
              "endLine": 4259,
              "endColumn": 81,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "PrependedModule",
              "code": "        return loadError;\n    }\n\n    public RaiseException newFrozenError(String objectType, IRubyObject receiver) {\n        ThreadContext context = getCurrentContext();\n\n        IRubyObject inspected = context.safeRecurse(Ruby::inspectFrozenObject, this, receiver, \"inspect\", true);"
            },
            {
              "step": 93,
              "variableName": "receiver",
              "startLine": 4262,
              "startColumn": 86,
              "endLine": 4262,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "PrependedModule",
              "code": "    public RaiseException newFrozenError(String objectType, IRubyObject receiver) {\n        ThreadContext context = getCurrentContext();\n\n        IRubyObject inspected = context.safeRecurse(Ruby::inspectFrozenObject, this, receiver, \"inspect\", true);\n        String message = \"can't modify frozen \" + objectType + \": \" + inspected.convertToString().toString();\n\n        return newFrozenError(receiver, message);"
            },
            {
              "step": 94,
              "variableName": "IRubyObject obj",
              "startLine": 1431,
              "startColumn": 78,
              "endLine": 1431,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "PrependedModule",
              "code": "        IRubyObject call(ThreadContext context, T state, IRubyObject obj, boolean recur);\n    }\n\n    public <T> IRubyObject safeRecurse(RecursiveFunctionEx<T> func, T state, IRubyObject obj, String name, boolean outer) {\n        Map<IRubyObject, IRubyObject> guards = safeRecurseGetGuards(name);\n\n        boolean outermost = outer && !guards.containsKey(NEVER);"
            },
            {
              "step": 95,
              "variableName": "obj",
              "startLine": 1446,
              "startColumn": 54,
              "endLine": 1446,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "PrependedModule",
              "code": "            if (outermost) {\n                return safeRecurseOutermost(func, state, obj, guards);\n            } else {\n                return safeRecurseInner(func, state, obj, guards);\n            }\n        }\n    }"
            },
            {
              "step": 96,
              "variableName": "IRubyObject obj",
              "startLine": 1483,
              "startColumn": 84,
              "endLine": 1483,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "PrependedModule",
              "code": "        return guards;\n    }\n\n    private <T> IRubyObject safeRecurseInner(RecursiveFunctionEx<T> func, T state, IRubyObject obj, Map<IRubyObject, IRubyObject> guards) {\n        try {\n            guards.put(obj, obj);\n            return func.call(this, state, obj, false);"
            },
            {
              "step": 97,
              "variableName": "obj",
              "startLine": 1486,
              "startColumn": 43,
              "endLine": 1486,
              "endColumn": 46,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "PrependedModule",
              "code": "    private <T> IRubyObject safeRecurseInner(RecursiveFunctionEx<T> func, T state, IRubyObject obj, Map<IRubyObject, IRubyObject> guards) {\n        try {\n            guards.put(obj, obj);\n            return func.call(this, state, obj, false);\n        } finally {\n            guards.remove(obj);\n        }"
            },
            {
              "step": 98,
              "variableName": "self",
              "startLine": 145,
              "startColumn": 28,
              "endLine": 145,
              "endColumn": 32,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyComparable.java",
              "type": "PrependedModule",
              "code": "        if (recv == other) return context.tru;\n\n        var result = context.safeRecurse(\n                (ctx, obj, self, recur) -> recur ? ctx.nil : sites(ctx).op_cmp.call(ctx, self, self, obj),\n                other, recv, \"<=>\", true);\n\n        // This is only to prevent throwing exceptions by cmperr - it has poor performance"
            },
            {
              "step": 99,
              "variableName": "self",
              "startLine": 145,
              "startColumn": 96,
              "endLine": 145,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyComparable.java",
              "type": "PrependedModule",
              "code": "        if (recv == other) return context.tru;\n\n        var result = context.safeRecurse(\n                (ctx, obj, self, recur) -> recur ? ctx.nil : sites(ctx).op_cmp.call(ctx, self, self, obj),\n                other, recv, \"<=>\", true);\n\n        // This is only to prevent throwing exceptions by cmperr - it has poor performance"
            },
            {
              "step": 100,
              "variableName": "IRubyObject self",
              "startLine": 237,
              "startColumn": 72,
              "endLine": 237,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "PrependedModule",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 101,
              "variableName": "self",
              "startLine": 242,
              "startColumn": 47,
              "endLine": 242,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "PrependedModule",
              "code": "        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName, arg1);\n        }\n        return cacheAndCall(context, caller, self, selfType, arg1);\n    }"
            },
            {
              "step": 102,
              "variableName": "final IRubyObject self",
              "startLine": 203,
              "startColumn": 62,
              "endLine": 203,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/ext/Module.java",
              "type": "PrependedModule",
              "code": "        }\n\n        @Override\n        public IRubyObject call(final ThreadContext context, final IRubyObject self, final RubyModule klass,\n                                final String name, final IRubyObject constant) {\n            final String constName = ((RubySymbol) constant).idString();\n            final String realName = includedPackages.javaAliases.getOrDefault(constName, constName);"
            },
            {
              "step": 103,
              "variableName": "(RubyModule) self",
              "startLine": 227,
              "startColumn": 52,
              "endLine": 227,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/ext/Module.java",
              "type": "PrependedModule",
              "code": "            }\n\n            try {\n                return Java.setProxyClass(context, (RubyModule) self, constName, foundClass);\n            } catch (NameError e) {\n                String message = \"cannot set Java class \" + foundClass.getName() + \" as '\" + constant + \"' : \" + e.getException().getMessage();\n                throw nameError(context, message, constant);"
            },
            {
              "step": 104,
              "variableName": "final RubyModule target",
              "startLine": 259,
              "startColumn": 71,
              "endLine": 259,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "PrependedModule",
              "code": "        return setProxyClass(runtime.getCurrentContext(), target, constName, javaClass);\n    }\n\n        public static RubyModule setProxyClass(ThreadContext context, final RubyModule target, final String constName,\n                                           final Class<?> javaClass) throws NameError {\n        final RubyModule proxyClass = getProxyClass(context, javaClass);\n        setProxyClass(context, target, constName, proxyClass, true);"
            },
            {
              "step": 105,
              "variableName": "target",
              "startLine": 262,
              "startColumn": 32,
              "endLine": 262,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "PrependedModule",
              "code": "        public static RubyModule setProxyClass(ThreadContext context, final RubyModule target, final String constName,\n                                           final Class<?> javaClass) throws NameError {\n        final RubyModule proxyClass = getProxyClass(context, javaClass);\n        setProxyClass(context, target, constName, proxyClass, true);\n        return proxyClass;\n    }\n"
            },
            {
              "step": 106,
              "variableName": "final RubyModule target",
              "startLine": 266,
              "startColumn": 62,
              "endLine": 266,
              "endColumn": 85,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "PrependedModule",
              "code": "        return proxyClass;\n    }\n\n    private static void setProxyClass(ThreadContext context, final RubyModule target, final String constName, final RubyModule proxyClass, final boolean validateConstant) {\n        if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {\n            synchronized (target) { // synchronize to prevent \"already initialized constant\" warnings with multiple threads\n                if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {"
            },
            {
              "step": 107,
              "variableName": "target",
              "startLine": 271,
              "startColumn": 25,
              "endLine": 271,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "PrependedModule",
              "code": "            synchronized (target) { // synchronize to prevent \"already initialized constant\" warnings with multiple threads\n                if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {\n                    if (validateConstant) {\n                        target.defineConstant(context, constName, proxyClass); // setConstant would not validate const-name\n                    } else {\n                        target.setConstant(context, constName, proxyClass);\n                    }"
            },
            {
              "step": 108,
              "variableName": "defineConstant",
              "startLine": 5697,
              "startColumn": 37,
              "endLine": 5697,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "     * @return itself for a composable API\n     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value) {\n        return (T) defineConstant(context, name, value, false);\n    }\n"
            },
            {
              "step": 109,
              "variableName": "defineConstant(context, name, value, false)",
              "startLine": 5698,
              "startColumn": 20,
              "endLine": 5698,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value) {\n        return (T) defineConstant(context, name, value, false);\n    }\n\n    /**"
            },
            {
              "step": 110,
              "variableName": "defineConstant",
              "startLine": 5711,
              "startColumn": 37,
              "endLine": 5711,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "     * @return itself for a composable API\n     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value, boolean hidden) {\n        if (!IdUtil.isValidConstantName(name)) throw nameError(context, \"bad constant name \" + name, name);\n        setConstantCommon(context, name, value, hidden, true, null, -1);\n        return (T) this;"
            },
            {
              "step": 111,
              "variableName": "setConstantCommon(context, name, value, hidden, true, null, -1)",
              "startLine": 5713,
              "startColumn": 9,
              "endLine": 5713,
              "endColumn": 72,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value, boolean hidden) {\n        if (!IdUtil.isValidConstantName(name)) throw nameError(context, \"bad constant name \" + name, name);\n        setConstantCommon(context, name, value, hidden, true, null, -1);\n        return (T) this;\n    }\n"
            },
            {
              "step": 112,
              "variableName": "setConstantCommon",
              "startLine": 5611,
              "startColumn": 25,
              "endLine": 5611,
              "endColumn": 42,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "     *               and its value is being updated.\n     * @return The result of setting the variable.\n     */\n    private IRubyObject setConstantCommon(ThreadContext context, String name, IRubyObject value, boolean hidden,\n                                          boolean warn, String file, int line) {\n        ConstantEntry oldEntry = fetchConstantEntry(context, name, true);\n"
            },
            {
              "step": 113,
              "variableName": "\"already initialized constant \" +",
              "startLine": 5622,
              "startColumn": 35,
              "endLine": 5623,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "String",
              "code": "            boolean notAutoload = oldEntry.value != UNDEF;\n            if (notAutoload || !setAutoloadConstant(context, name, value, file, line)) {\n                if (warn && notAutoload) {\n                    warn(context, \"already initialized constant \" +\n                            (this.equals(objectClass(context)) ? name : (this + \"::\" + name)));\n                }\n"
            },
            {
              "step": 114,
              "variableName": "String message",
              "startLine": 7,
              "startColumn": 52,
              "endLine": 7,
              "endColumn": 66,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Warn.java",
              "type": "String",
              "code": "import org.jruby.runtime.ThreadContext;\n\npublic class Warn {\n    public static void warn(ThreadContext context, String message) {\n        context.runtime.getWarnings().warn(message);\n    }\n"
            },
            {
              "step": 115,
              "variableName": "message",
              "startLine": 8,
              "startColumn": 44,
              "endLine": 8,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Warn.java",
              "type": "",
              "code": "\npublic class Warn {\n    public static void warn(ThreadContext context, String message) {\n        context.runtime.getWarnings().warn(message);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "passwdStruct",
              "startLine": 2190,
              "startColumn": 16,
              "endLine": 2190,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject getPasswdStruct() {\n        return passwdStruct;\n    }\n    public void setPasswdStruct(RubyClass passwdStruct) {\n        this.passwdStruct = passwdStruct;"
            },
            {
              "step": 1,
              "variableName": "context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 47,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 2,
              "variableName": "(RubyClass) context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 3,
              "variableName": "RubyClass structClass",
              "startLine": 485,
              "startColumn": 63,
              "endLine": 485,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @param block\n     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;"
            },
            {
              "step": 4,
              "variableName": "structClass",
              "startLine": 486,
              "startColumn": 53,
              "endLine": 486,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 5,
              "variableName": "RubyClass rubyClass",
              "startLine": 98,
              "startColumn": 46,
              "endLine": 98,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "        this(runtime.getCurrentContext(), rubyClass);\n    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));"
            },
            {
              "step": 6,
              "variableName": "rubyClass",
              "startLine": 99,
              "startColumn": 32,
              "endLine": 99,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 7,
              "variableName": "super(context.runtime, rubyClass);",
              "startLine": 99,
              "startColumn": 9,
              "endLine": 99,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 8,
              "variableName": "new RubyStruct(context, structClass)",
              "startLine": 486,
              "startColumn": 29,
              "endLine": 486,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 9,
              "variableName": "struct",
              "startLine": 488,
              "startColumn": 16,
              "endLine": 488,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }\n\n}"
            },
            {
              "step": 10,
              "variableName": "newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK)",
              "startLine": 149,
              "startColumn": 16,
              "endLine": 149,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 11,
              "variableName": "setupPasswd(context, pw)",
              "startLine": 300,
              "startColumn": 46,
              "endLine": 300,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                try {\n                    Passwd pw;\n                    while((pw = posix.getpwent()) != null) {\n                        block.yield(context, setupPasswd(context, pw));\n                    }\n                } finally {\n                    posix.endpwent();"
            },
            {
              "step": 12,
              "variableName": "IRubyObject value",
              "startLine": 190,
              "startColumn": 53,
              "endLine": 190,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return body.yieldSpecific(context, this, arg0, arg1, arg2);\n    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 191,
              "startColumn": 42,
              "endLine": 191,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "IRubyObject value",
              "startLine": 104,
              "startColumn": 72,
              "endLine": 104,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "value",
              "startLine": 108,
              "startColumn": 44,
              "endLine": 108,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "IRubyObject value",
              "startLine": 96,
              "startColumn": 71,
              "endLine": 96,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/CallBlock.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    protected IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        return callback.call(context, value, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "value",
              "startLine": 97,
              "startColumn": 39,
              "endLine": 97,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/CallBlock.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    @Override\n    protected IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        return callback.call(context, value, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "IRubyObject arg",
              "startLine": 553,
              "startColumn": 60,
              "endLine": 553,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyEnumerable.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                    return call(ctx, packEnumValues(ctx, args), unused);\n                }\n                @Override\n                public IRubyObject call(ThreadContext ctx, IRubyObject arg, Block unused) {\n                    IRubyObject converted = arg instanceof RubySymbol ? arg : TypeConverter.checkStringType(ctx.runtime, arg);\n\n                    if (((RubyRegexp) pattern).match_p(ctx, converted).isTrue() == isPresent) {"
            },
            {
              "step": 19,
              "variableName": "arg",
              "startLine": 554,
              "startColumn": 122,
              "endLine": 554,
              "endColumn": 125,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyEnumerable.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                }\n                @Override\n                public IRubyObject call(ThreadContext ctx, IRubyObject arg, Block unused) {\n                    IRubyObject converted = arg instanceof RubySymbol ? arg : TypeConverter.checkStringType(ctx.runtime, arg);\n\n                    if (((RubyRegexp) pattern).match_p(ctx, converted).isTrue() == isPresent) {\n                        synchronized (result) { result.append(context, arg); }"
            },
            {
              "step": 20,
              "variableName": "IRubyObject obj",
              "startLine": 332,
              "startColumn": 61,
              "endLine": 332,
              "endColumn": 76,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }"
            },
            {
              "step": 21,
              "variableName": "obj",
              "startLine": 334,
              "startColumn": 53,
              "endLine": 334,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }\n\n    // rb_check_string_type"
            },
            {
              "step": 22,
              "variableName": "IRubyObject obj",
              "startLine": 206,
              "startColumn": 54,
              "endLine": 206,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param convertMethod is the method to be called to try and convert to targeType\n     * @return the converted value\n     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;"
            },
            {
              "step": 23,
              "variableName": "obj",
              "startLine": 208,
              "startColumn": 41,
              "endLine": 208,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;\n        if (!target.isInstance(val)) {\n            throw newTypeErrorMismatch(obj.getRuntime(), obj, target, convertMethod, val);"
            },
            {
              "step": 24,
              "variableName": "IRubyObject obj",
              "startLine": 82,
              "startColumn": 45,
              "endLine": 82,
              "endColumn": 60,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param raise will throw an Error if conversion does not work\n     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "obj",
              "startLine": 83,
              "startColumn": 76,
              "endLine": 83,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {"
            },
            {
              "step": 26,
              "variableName": "IRubyObject obj",
              "startLine": 86,
              "startColumn": 68,
              "endLine": 86,
              "endColumn": 83,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }"
            },
            {
              "step": 27,
              "variableName": "obj",
              "startLine": 87,
              "startColumn": 25,
              "endLine": 87,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n"
            },
            {
              "step": 28,
              "variableName": "checkCallMethod",
              "startLine": 354,
              "startColumn": 30,
              "endLine": 354,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * method missing exists. Otherwise returns null. 1.9: rb_check_funcall\n     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 355,
              "startColumn": 47,
              "endLine": 355,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "IRubyObject self",
              "startLine": 831,
              "startColumn": 68,
              "endLine": 831,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "self",
              "startLine": 832,
              "startColumn": 29,
              "endLine": 832,
              "endColumn": 33,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 32,
              "variableName": "IRubyObject arg",
              "startLine": 496,
              "startColumn": 42,
              "endLine": 496,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n"
            },
            {
              "step": 33,
              "variableName": "(RubyBasicObject) arg",
              "startLine": 497,
              "startColumn": 17,
              "endLine": 497,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 34,
              "variableName": "((RubyBasicObject) arg).metaClass",
              "startLine": 497,
              "startColumn": 16,
              "endLine": 497,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "getMetaClass(self)",
              "startLine": 832,
              "startColumn": 16,
              "endLine": 832,
              "endColumn": 34,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 36,
              "variableName": "finvokeChecked",
              "startLine": 723,
              "startColumn": 30,
              "endLine": 723,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     *\n     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n"
            },
            {
              "step": 37,
              "variableName": "checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY)",
              "startLine": 724,
              "startColumn": 16,
              "endLine": 724,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n\n    /**"
            },
            {
              "step": 38,
              "variableName": "checkFuncallDefault",
              "startLine": 755,
              "startColumn": 25,
              "endLine": 755,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall_default\n    private IRubyObject checkFuncallDefault(ThreadContext context, IRubyObject self, String name, IRubyObject[] args) {\n        final RubyClass klass = this;\n        if (!checkFuncallRespondTo(context, klass, self, name)) return null; // return def;\n"
            },
            {
              "step": 39,
              "variableName": "klass",
              "startLine": 763,
              "startColumn": 43,
              "endLine": 763,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        if (!checkFuncallCallable(context, method, CallType.FUNCTIONAL, self)) {\n            return checkFuncallMissing(context, klass, self, name, args);\n        }\n        return method.call(context, self, klass, name, args);\n    }\n\n    // MRI: rb_check_funcall_default"
            },
            {
              "step": 40,
              "variableName": "RubyModule clazz",
              "startLine": 67,
              "startColumn": 70,
              "endLine": 67,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 41,
              "variableName": "clazz",
              "startLine": 68,
              "startColumn": 36,
              "endLine": 68,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 43,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 44,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 45,
              "variableName": "clazz",
              "startLine": 46,
              "startColumn": 96,
              "endLine": 46,
              "endColumn": 101,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());\n        }\n    }"
            },
            {
              "step": 46,
              "variableName": "RubyModule clazz",
              "startLine": 134,
              "startColumn": 88,
              "endLine": 134,
              "endColumn": 104,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "clazz",
              "startLine": 135,
              "startColumn": 103,
              "endLine": 135,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,"
            },
            {
              "step": 48,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 49,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 50,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 51,
              "variableName": "self",
              "startLine": 162,
              "startColumn": 102,
              "endLine": 162,
              "endColumn": 106,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);\n                    case BRANCH_OP:\n                        switch (operation) {\n                            case JUMP: ipc = ((JumpInstr)instr).getJumpTarget().getTargetPC(); break;"
            },
            {
              "step": 52,
              "variableName": "IRubyObject self",
              "startLine": 441,
              "startColumn": 92,
              "endLine": 441,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "    }\n\n    protected static IRubyObject processReturnOp(ThreadContext context, Block block, Instr instr, Operation operation,\n                                                 DynamicScope currDynScope, Object[] temp, IRubyObject self,\n                                                 StaticScope currScope) {\n        switch(operation) {\n            // --------- Return flavored instructions --------"
            },
            {
              "step": 53,
              "variableName": "self",
              "startLine": 446,
              "startColumn": 95,
              "endLine": 446,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        switch(operation) {\n            // --------- Return flavored instructions --------\n            case RETURN: {\n                return (IRubyObject)retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp);\n            }\n            case BREAK: {\n                BreakInstr bi = (BreakInstr)instr;"
            },
            {
              "step": 54,
              "variableName": "IRubyObject self",
              "startLine": 582,
              "startColumn": 74,
              "endLine": 582,
              "endColumn": 90,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    protected static Object retrieveOp(Operand r, ThreadContext context, IRubyObject self, DynamicScope currDynScope, StaticScope currScope, Object[] temp) {\n        Object res;\n        if (r instanceof Self) {\n            return self;"
            },
            {
              "step": 55,
              "variableName": "self",
              "startLine": 585,
              "startColumn": 20,
              "endLine": 585,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "    protected static Object retrieveOp(Operand r, ThreadContext context, IRubyObject self, DynamicScope currDynScope, StaticScope currScope, Object[] temp) {\n        Object res;\n        if (r instanceof Self) {\n            return self;\n        } else if (r instanceof TemporaryLocalVariable) {\n            res = temp[((TemporaryLocalVariable)r).offset];\n            return res == null ? context.nil : res;"
            },
            {
              "step": 56,
              "variableName": "retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp)",
              "startLine": 446,
              "startColumn": 37,
              "endLine": 446,
              "endColumn": 131,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        switch(operation) {\n            // --------- Return flavored instructions --------\n            case RETURN: {\n                return (IRubyObject)retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp);\n            }\n            case BREAK: {\n                BreakInstr bi = (BreakInstr)instr;"
            },
            {
              "step": 57,
              "variableName": "(IRubyObject)retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp)",
              "startLine": 446,
              "startColumn": 24,
              "endLine": 446,
              "endColumn": 131,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        switch(operation) {\n            // --------- Return flavored instructions --------\n            case RETURN: {\n                return (IRubyObject)retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp);\n            }\n            case BREAK: {\n                BreakInstr bi = (BreakInstr)instr;"
            },
            {
              "step": 58,
              "variableName": "processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope)",
              "startLine": 162,
              "startColumn": 32,
              "endLine": 162,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);\n                    case BRANCH_OP:\n                        switch (operation) {\n                            case JUMP: ipc = ((JumpInstr)instr).getJumpTarget().getTargetPC(); break;"
            },
            {
              "step": 59,
              "variableName": "ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block)",
              "startLine": 174,
              "startColumn": 24,
              "endLine": 174,
              "endColumn": 110,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 60,
              "variableName": "interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK)",
              "startLine": 135,
              "startColumn": 16,
              "endLine": 135,
              "endColumn": 146,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,"
            },
            {
              "step": 61,
              "variableName": "Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility())",
              "startLine": 46,
              "startColumn": 41,
              "endLine": 46,
              "endColumn": 125,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());\n        }\n    }"
            },
            {
              "step": 62,
              "variableName": "callInternal(context, clazz)",
              "startLine": 37,
              "startColumn": 16,
              "endLine": 37,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 63,
              "variableName": "call(context, self, clazz, name, Block.NULL_BLOCK)",
              "startLine": 68,
              "startColumn": 16,
              "endLine": 68,
              "endColumn": 66,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 64,
              "variableName": "method.call(context, self, klass, name, args)",
              "startLine": 763,
              "startColumn": 16,
              "endLine": 763,
              "endColumn": 61,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        if (!checkFuncallCallable(context, method, CallType.FUNCTIONAL, self)) {\n            return checkFuncallMissing(context, klass, self, name, args);\n        }\n        return method.call(context, self, klass, name, args);\n    }\n\n    // MRI: rb_check_funcall_default"
            },
            {
              "step": 65,
              "variableName": "checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY)",
              "startLine": 724,
              "startColumn": 16,
              "endLine": 724,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "getMetaClass(self).finvokeChecked(context, self, name)",
              "startLine": 832,
              "startColumn": 16,
              "endLine": 832,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 67,
              "variableName": "Helpers.invokeChecked(context, this, name)",
              "startLine": 355,
              "startColumn": 16,
              "endLine": 355,
              "endColumn": 58,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n\n    /**"
            },
            {
              "step": 68,
              "variableName": "obj.checkCallMethod(context, convertMethod)",
              "startLine": 87,
              "startColumn": 25,
              "endLine": 87,
              "endColumn": 68,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n"
            },
            {
              "step": 69,
              "variableName": "r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 92,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "... : RubyClass",
              "code": "\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n\n    // This is essentially convertToType but it is used when we already know the method we are going to call will exist"
            },
            {
              "step": 70,
              "variableName": "convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise)",
              "startLine": 83,
              "startColumn": 16,
              "endLine": 83,
              "endColumn": 110,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {"
            },
            {
              "step": 71,
              "variableName": "convertToType(obj, target, convertMethod, false)",
              "startLine": 208,
              "startColumn": 27,
              "endLine": 208,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;\n        if (!target.isInstance(val)) {\n            throw newTypeErrorMismatch(obj.getRuntime(), obj, target, convertMethod, val);"
            },
            {
              "step": 72,
              "variableName": "val",
              "startLine": 209,
              "startColumn": 33,
              "endLine": 209,
              "endColumn": 36,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;\n        if (!target.isInstance(val)) {\n            throw newTypeErrorMismatch(obj.getRuntime(), obj, target, convertMethod, val);\n        }"
            },
            {
              "step": 73,
              "variableName": "TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\")",
              "startLine": 334,
              "startColumn": 16,
              "endLine": 334,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }\n\n    // rb_check_string_type"
            },
            {
              "step": 74,
              "variableName": "IRubyObject obj",
              "startLine": 332,
              "startColumn": 61,
              "endLine": 332,
              "endColumn": 76,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }"
            },
            {
              "step": 75,
              "variableName": "obj",
              "startLine": 334,
              "startColumn": 53,
              "endLine": 334,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }\n\n    // rb_check_string_type"
            },
            {
              "step": 76,
              "variableName": "IRubyObject obj",
              "startLine": 206,
              "startColumn": 54,
              "endLine": 206,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param convertMethod is the method to be called to try and convert to targeType\n     * @return the converted value\n     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;"
            },
            {
              "step": 77,
              "variableName": "obj",
              "startLine": 208,
              "startColumn": 41,
              "endLine": 208,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;\n        if (!target.isInstance(val)) {\n            throw newTypeErrorMismatch(obj.getRuntime(), obj, target, convertMethod, val);"
            },
            {
              "step": 78,
              "variableName": "IRubyObject obj",
              "startLine": 82,
              "startColumn": 45,
              "endLine": 82,
              "endColumn": 60,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param raise will throw an Error if conversion does not work\n     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n"
            },
            {
              "step": 79,
              "variableName": "obj",
              "startLine": 83,
              "startColumn": 76,
              "endLine": 83,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {"
            },
            {
              "step": 80,
              "variableName": "IRubyObject obj",
              "startLine": 86,
              "startColumn": 68,
              "endLine": 86,
              "endColumn": 83,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }"
            },
            {
              "step": 81,
              "variableName": "obj",
              "startLine": 87,
              "startColumn": 25,
              "endLine": 87,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n"
            },
            {
              "step": 82,
              "variableName": "checkCallMethod",
              "startLine": 354,
              "startColumn": 30,
              "endLine": 354,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * method missing exists. Otherwise returns null. 1.9: rb_check_funcall\n     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n"
            },
            {
              "step": 83,
              "variableName": "this",
              "startLine": 355,
              "startColumn": 47,
              "endLine": 355,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n\n    /**"
            },
            {
              "step": 84,
              "variableName": "IRubyObject self",
              "startLine": 831,
              "startColumn": 68,
              "endLine": 831,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n"
            },
            {
              "step": 85,
              "variableName": "self",
              "startLine": 832,
              "startColumn": 29,
              "endLine": 832,
              "endColumn": 33,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 86,
              "variableName": "IRubyObject arg",
              "startLine": 496,
              "startColumn": 42,
              "endLine": 496,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n"
            },
            {
              "step": 87,
              "variableName": "(RubyBasicObject) arg",
              "startLine": 497,
              "startColumn": 17,
              "endLine": 497,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 88,
              "variableName": "((RubyBasicObject) arg).metaClass",
              "startLine": 497,
              "startColumn": 16,
              "endLine": 497,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 89,
              "variableName": "getMetaClass(self)",
              "startLine": 832,
              "startColumn": 16,
              "endLine": 832,
              "endColumn": 34,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 90,
              "variableName": "finvokeChecked",
              "startLine": 723,
              "startColumn": 30,
              "endLine": 723,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     *\n     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n"
            },
            {
              "step": 91,
              "variableName": "checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY)",
              "startLine": 724,
              "startColumn": 16,
              "endLine": 724,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n\n    /**"
            },
            {
              "step": 92,
              "variableName": "checkFuncallDefault",
              "startLine": 755,
              "startColumn": 25,
              "endLine": 755,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall_default\n    private IRubyObject checkFuncallDefault(ThreadContext context, IRubyObject self, String name, IRubyObject[] args) {\n        final RubyClass klass = this;\n        if (!checkFuncallRespondTo(context, klass, self, name)) return null; // return def;\n"
            },
            {
              "step": 93,
              "variableName": "klass",
              "startLine": 763,
              "startColumn": 43,
              "endLine": 763,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        if (!checkFuncallCallable(context, method, CallType.FUNCTIONAL, self)) {\n            return checkFuncallMissing(context, klass, self, name, args);\n        }\n        return method.call(context, self, klass, name, args);\n    }\n\n    // MRI: rb_check_funcall_default"
            },
            {
              "step": 94,
              "variableName": "RubyModule clazz",
              "startLine": 67,
              "startColumn": 70,
              "endLine": 67,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 95,
              "variableName": "clazz",
              "startLine": 68,
              "startColumn": 36,
              "endLine": 68,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 96,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 97,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 98,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 99,
              "variableName": "clazz",
              "startLine": 46,
              "startColumn": 96,
              "endLine": 46,
              "endColumn": 101,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());\n        }\n    }"
            },
            {
              "step": 100,
              "variableName": "RubyModule clazz",
              "startLine": 134,
              "startColumn": 88,
              "endLine": 134,
              "endColumn": 104,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 101,
              "variableName": "clazz",
              "startLine": 135,
              "startColumn": 103,
              "endLine": 135,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,"
            },
            {
              "step": 102,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 103,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 104,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 105,
              "variableName": "self",
              "startLine": 196,
              "startColumn": 96,
              "endLine": 196,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                            args = IRRuntimeHelpers.prepareBlockArgs(context, block, args, usesKeywords, ruby2Keywords);\n                            break;\n                        default:\n                            processBookKeepingOp(context, block, instr, operation, name, args, self, blockArg, implClass, currDynScope, temp, currScope);\n                            break;\n                        }\n                        break;"
            },
            {
              "step": 106,
              "variableName": "IRubyObject self",
              "startLine": 379,
              "startColumn": 79,
              "endLine": 379,
              "endColumn": 95,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "    }\n\n    protected static void processBookKeepingOp(ThreadContext context, Block block, Instr instr, Operation operation,\n                                             String name, IRubyObject[] args, IRubyObject self, Block blockArg, RubyModule implClass,\n                                             DynamicScope currDynScope, Object[] temp, StaticScope currScope) {\n        switch(operation) {\n            case LABEL:"
            },
            {
              "step": 107,
              "variableName": "self",
              "startLine": 435,
              "startColumn": 67,
              "endLine": 435,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                context.setExceptionRequiresBacktrace(((ToggleBacktraceInstr) instr).requiresBacktrace());\n                break;\n            case TRACE:\n                instr.interpret(context, currScope, currDynScope, self, temp);\n                break;\n        }\n    }"
            },
            {
              "step": 108,
              "variableName": "IRubyObject self",
              "startLine": 96,
              "startColumn": 102,
              "endLine": 96,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/ClassSuperInstr.java",
              "type": "RubyClass",
              "code": "    */\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject[] args = prepareArguments(context, self, currScope, currDynScope, temp);\n        Block block = prepareBlock(context, self, currScope, currDynScope, temp);\n"
            },
            {
              "step": 109,
              "variableName": "self",
              "startLine": 105,
              "startColumn": 62,
              "endLine": 105,
              "endColumn": 66,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/ClassSuperInstr.java",
              "type": "RubyClass",
              "code": "        if (isLiteralBlock) {\n            return IRRuntimeHelpers.unresolvedSuperIter(context, self, args, block);\n        } else {\n            return IRRuntimeHelpers.unresolvedSuper(context, self, args, block);\n        }\n    }\n"
            },
            {
              "step": 110,
              "variableName": "IRubyObject self",
              "startLine": 1501,
              "startColumn": 70,
              "endLine": 1501,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Interp\n    public static IRubyObject unresolvedSuper(ThreadContext context, IRubyObject self, IRubyObject[] args, Block block) {\n        // We have to rely on the frame stack to find the implementation class\n        RubyModule klazz = context.getFrameKlazz();\n        String methodName = context.getFrameName();"
            },
            {
              "step": 111,
              "variableName": "self",
              "startLine": 1515,
              "startColumn": 47,
              "endLine": 1515,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        if (entry.method.isUndefined()) {\n            rVal = Helpers.callMethodMissing(context, self, entry.method.getVisibility(), methodName, CallType.SUPER, args, block);\n        } else {\n            rVal = entry.method.call(context, self, entry.sourceModule, methodName, args, block);\n        }\n\n        return rVal;"
            },
            {
              "step": 112,
              "variableName": "IRubyObject self",
              "startLine": 834,
              "startColumn": 62,
              "endLine": 834,
              "endColumn": 78,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/JavaMethod.java",
              "type": "RubyClass",
              "code": "            return call(context, self, clazz, name, new IRubyObject[] {arg0, arg1, arg2});\n        }\n\n        public final IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args, Block block) {\n            switch (args.length) {\n                // still delegate to different arity calls as they might get overriden e.g. for native\n                // JRuby methods that use overloading for different kind arity of received arguments !"
            },
            {
              "step": 113,
              "variableName": "self",
              "startLine": 841,
              "startColumn": 42,
              "endLine": 841,
              "endColumn": 46,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/JavaMethod.java",
              "type": "RubyClass",
              "code": "                case 0:\n                    return call(context, self, clazz, name);\n                case 1:\n                    return call(context, self, clazz, name, args[0]);\n                case 2:\n                    return call(context, self, clazz, name, args[0], args[1]);\n                default:"
            },
            {
              "step": 114,
              "variableName": "IRubyObject self",
              "startLine": 224,
              "startColumn": 64,
              "endLine": 224,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/java/proxies/JavaInterfaceTemplate.java",
              "type": "RubyClass",
              "code": "            singleton.addMethod(context, \"implement\", new JavaMethodOne(clazz, Visibility.PRIVATE, \"implement\") {\n\n                @Override\n                public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject iface) {\n                    final RubyArray ifaces = getJavaInterfaces(self);\n                    if ( ifaces != null && ifaces.includes(context, iface) ) {\n                        return Helpers.invoke(context, iface, \"implement\", self);"
            },
            {
              "step": 115,
              "variableName": "self",
              "startLine": 227,
              "startColumn": 76,
              "endLine": 227,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/java/proxies/JavaInterfaceTemplate.java",
              "type": "RubyClass",
              "code": "                public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject iface) {\n                    final RubyArray ifaces = getJavaInterfaces(self);\n                    if ( ifaces != null && ifaces.includes(context, iface) ) {\n                        return Helpers.invoke(context, iface, \"implement\", self);\n                    }\n                    return context.nil;\n                }"
            },
            {
              "step": 116,
              "variableName": "IRubyObject arg0",
              "startLine": 790,
              "startColumn": 92,
              "endLine": 790,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name) {\n        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {\n        return self.getMetaClass().finvoke(context, self, name, arg0);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0, IRubyObject arg1) {"
            },
            {
              "step": 117,
              "variableName": "arg0",
              "startLine": 791,
              "startColumn": 65,
              "endLine": 791,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {\n        return self.getMetaClass().finvoke(context, self, name, arg0);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0, IRubyObject arg1) {\n        return self.getMetaClass().finvoke(context, self, name, arg0, arg1);"
            },
            {
              "step": 118,
              "variableName": "IRubyObject arg",
              "startLine": 916,
              "startColumn": 13,
              "endLine": 916,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject finvoke(ThreadContext context, IRubyObject self, String name,\n            IRubyObject arg) {\n        CacheEntry entry = searchWithCache(name);\n        DynamicMethod method = entry.method;\n        if (shouldCallMethodMissing(method)) {"
            },
            {
              "step": 119,
              "variableName": "arg",
              "startLine": 922,
              "startColumn": 69,
              "endLine": 922,
              "endColumn": 72,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        if (shouldCallMethodMissing(method)) {\n            return Helpers.callMethodMissing(context, self, this, method.getVisibility(), name, CallType.FUNCTIONAL, arg, Block.NULL_BLOCK);\n        }\n        return method.call(context, self, entry.sourceModule, name, arg);\n    }\n\n    public IRubyObject finvoke(ThreadContext context, IRubyObject self, String name,"
            },
            {
              "step": 120,
              "variableName": "IRubyObject arg0",
              "startLine": 78,
              "startColumn": 101,
              "endLine": 78,
              "endColumn": 117,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/java/invokers/ConstructorInvoker.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0) {\n        if (javaVarargsCallables != null) return call(context, self, clazz, name, new IRubyObject[] {arg0});\n        JavaProxy proxy = castJavaProxy(self);\n        JavaConstructor constructor = (JavaConstructor) findCallableArityOne(self, name, arg0);"
            },
            {
              "step": 121,
              "variableName": "arg0",
              "startLine": 83,
              "startColumn": 24,
              "endLine": 83,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/java/invokers/ConstructorInvoker.java",
              "type": "RubyClass",
              "code": "        JavaProxy proxy = castJavaProxy(self);\n        JavaConstructor constructor = (JavaConstructor) findCallableArityOne(self, name, arg0);\n        final Class<?>[] paramTypes = constructor.getParameterTypes();\n        Object cArg0 = arg0.toJava(paramTypes[0]);\n\n        setAndCacheProxyObject(context, clazz, proxy, constructor.newInstanceDirect(context, cArg0));\n"
            },
            {
              "step": 122,
              "variableName": "toJava",
              "startLine": 850,
              "startColumn": 18,
              "endLine": 850,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "     * @see IRubyObject#toJava\n     */\n    @Override\n    public <T> T toJava(Class<T> target) {\n        return defaultToJava(target);\n    }\n"
            },
            {
              "step": 123,
              "variableName": "defaultToJava(target)",
              "startLine": 851,
              "startColumn": 16,
              "endLine": 851,
              "endColumn": 37,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "     */\n    @Override\n    public <T> T toJava(Class<T> target) {\n        return defaultToJava(target);\n    }\n\n    final <T> T defaultToJava(Class<T> target) {"
            },
            {
              "step": 124,
              "variableName": "defaultToJava",
              "startLine": 854,
              "startColumn": 17,
              "endLine": 854,
              "endColumn": 30,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "        return defaultToJava(target);\n    }\n\n    final <T> T defaultToJava(Class<T> target) {\n        // for callers that unconditionally pass null retval type (JRUBY-4737)\n        if (target == void.class) return null;\n"
            },
            {
              "step": 125,
              "variableName": "this",
              "startLine": 872,
              "startColumn": 90,
              "endLine": 872,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "                if (unwrap_java_object() != null) { // double check under lock\n                    return defaultToJava(target); // concurrent proxy interface impl initialization\n                }\n                return JavaUtil.convertProcToInterface(getRuntime().getCurrentContext(), this, target);\n            }\n        }\n        else if (!target.isAssignableFrom(getClass())) {"
            },
            {
              "step": 126,
              "variableName": "RubyBasicObject rubyObject",
              "startLine": 236,
              "startColumn": 71,
              "endLine": 236,
              "endColumn": 97,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/JavaUtil.java",
              "type": "RubyClass",
              "code": "    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T convertProcToInterface(ThreadContext context, RubyBasicObject rubyObject, Class<T> targetType) {\n        // Capture original class; we only detach the singleton for natural Proc instances\n        RubyClass procClass = rubyObject.getMetaClass();\n"
            },
            {
              "step": 127,
              "variableName": "rubyObject",
              "startLine": 250,
              "startColumn": 46,
              "endLine": 250,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/JavaUtil.java",
              "type": "RubyClass",
              "code": "        if ( rubyObject instanceof RubyProc ) {\n            // Proc implementing an interface, pull in the catch-all code that lets the proc get invoked\n            // no matter what method is called on the interface\n            final RubyClass singletonClass = rubyObject.singletonClass(context);\n\n            if (procClass == procClass(context)) {\n                // We reattach the singleton class to the Proc class object to prevent the method cache in the interface"
            },
            {
              "step": 128,
              "variableName": "singletonClass",
              "startLine": 515,
              "startColumn": 22,
              "endLine": 515,
              "endColumn": 36,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "\n    // MRI: rb_singleton_class\n    @JRubyAPI\n    public RubyClass singletonClass(ThreadContext context) {\n        RubyClass klass = metaClass.toSingletonClass(context, this);\n\n        if (isFrozen()) klass.setFrozen(true);"
            },
            {
              "step": 129,
              "variableName": "this",
              "startLine": 516,
              "startColumn": 63,
              "endLine": 516,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    // MRI: rb_singleton_class\n    @JRubyAPI\n    public RubyClass singletonClass(ThreadContext context) {\n        RubyClass klass = metaClass.toSingletonClass(context, this);\n\n        if (isFrozen()) klass.setFrozen(true);\n"
            },
            {
              "step": 130,
              "variableName": "RubyBasicObject target",
              "startLine": 607,
              "startColumn": 55,
              "endLine": 607,
              "endColumn": 77,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "    /**\n     * @see #singletonClass(ThreadContext)\n     */\n    RubyClass toSingletonClass(ThreadContext context, RubyBasicObject target) {\n        // replaced after makeMetaClass with MetaClass's toSingletonClass\n        return target.makeMetaClass(context, this);\n    }"
            },
            {
              "step": 131,
              "variableName": "target",
              "startLine": 609,
              "startColumn": 16,
              "endLine": 609,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     */\n    RubyClass toSingletonClass(ThreadContext context, RubyBasicObject target) {\n        // replaced after makeMetaClass with MetaClass's toSingletonClass\n        return target.makeMetaClass(context, this);\n    }\n\n    static boolean notVisibleAndNotMethodMissing(DynamicMethod method, String name, IRubyObject caller, CallType callType) {"
            },
            {
              "step": 132,
              "variableName": "makeMetaClass",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "     * @return singleton-class for this (singleton) class\n     */\n    @Override\n    public RubyClass makeMetaClass(ThreadContext context, RubyClass superClass) {\n        MetaClass klass = new MetaClass(context.runtime, getSuperSingletonMetaClass(context), this);\n        setMetaClass(klass);\n"
            },
            {
              "step": 133,
              "variableName": "this",
              "startLine": 109,
              "startColumn": 95,
              "endLine": 109,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "     */\n    @Override\n    public RubyClass makeMetaClass(ThreadContext context, RubyClass superClass) {\n        MetaClass klass = new MetaClass(context.runtime, getSuperSingletonMetaClass(context), this);\n        setMetaClass(klass);\n\n        // Foo.singleton_class.singleton_class: #<Class:#<Class:Foo>>"
            },
            {
              "step": 134,
              "variableName": "RubyBasicObject attached",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "    /**\n     * rb_class_boot for meta classes ({@link #makeMetaClass(ThreadContext, RubyClass)})\n     */\n    MetaClass(Ruby runtime, RubyClass superClass, RubyBasicObject attached) {\n        super(runtime, superClass, false);\n        metaClassInit(superClass, attached);\n"
            },
            {
              "step": 135,
              "variableName": "attached",
              "startLine": 54,
              "startColumn": 35,
              "endLine": 54,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "     */\n    MetaClass(Ruby runtime, RubyClass superClass, RubyBasicObject attached) {\n        super(runtime, superClass, false);\n        metaClassInit(superClass, attached);\n\n        if (LOG_SINGLETONS || LOG_SINGLETONS_VERBOSE) {\n            logSingleton(runtime, superClass, attached);"
            },
            {
              "step": 136,
              "variableName": "RubyBasicObject attached",
              "startLine": 74,
              "startColumn": 54,
              "endLine": 74,
              "endColumn": 78,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "        metaClassInit(superClass, attached);\n    }\n\n    private void metaClassInit(RubyClass superClass, RubyBasicObject attached) {\n        this.attached = attached;\n        // use same ClassIndex as metaclass, since we're technically still of that type\n        classIndex(superClass.getClassIndex());"
            },
            {
              "step": 137,
              "variableName": "attached",
              "startLine": 75,
              "startColumn": 25,
              "endLine": 75,
              "endColumn": 33,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "    }\n\n    private void metaClassInit(RubyClass superClass, RubyBasicObject attached) {\n        this.attached = attached;\n        // use same ClassIndex as metaclass, since we're technically still of that type\n        classIndex(superClass.getClassIndex());\n        superClass.addSubclass(this);"
            },
            {
              "step": 138,
              "variableName": "this",
              "startLine": 75,
              "startColumn": 9,
              "endLine": 75,
              "endColumn": 13,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "    }\n\n    private void metaClassInit(RubyClass superClass, RubyBasicObject attached) {\n        this.attached = attached;\n        // use same ClassIndex as metaclass, since we're technically still of that type\n        classIndex(superClass.getClassIndex());\n        superClass.addSubclass(this);"
            },
            {
              "step": 139,
              "variableName": "metaClassInit(superClass, attached)",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "     */\n    MetaClass(Ruby runtime, RubyClass superClass, RubyBasicObject attached) {\n        super(runtime, superClass, false);\n        metaClassInit(superClass, attached);\n\n        if (LOG_SINGLETONS || LOG_SINGLETONS_VERBOSE) {\n            logSingleton(runtime, superClass, attached);"
            },
            {
              "step": 140,
              "variableName": "new MetaClass(context.runtime, getSuperSingletonMetaClass(context), this)",
              "startLine": 109,
              "startColumn": 27,
              "endLine": 109,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "     */\n    @Override\n    public RubyClass makeMetaClass(ThreadContext context, RubyClass superClass) {\n        MetaClass klass = new MetaClass(context.runtime, getSuperSingletonMetaClass(context), this);\n        setMetaClass(klass);\n\n        // Foo.singleton_class.singleton_class: #<Class:#<Class:Foo>>"
            },
            {
              "step": 141,
              "variableName": "klass",
              "startLine": 116,
              "startColumn": 16,
              "endLine": 116,
              "endColumn": 21,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "        // #<Class:#<Class:Foo>>'s singleton_class == #<Class:#<Class:Foo>>\n        klass.setMetaClass(klass);\n\n        return klass;\n    }\n\n    private RubyClass getSuperSingletonMetaClass(ThreadContext context) {"
            },
            {
              "step": 142,
              "variableName": "target.makeMetaClass(context, this)",
              "startLine": 609,
              "startColumn": 16,
              "endLine": 609,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "     */\n    RubyClass toSingletonClass(ThreadContext context, RubyBasicObject target) {\n        // replaced after makeMetaClass with MetaClass's toSingletonClass\n        return target.makeMetaClass(context, this);\n    }\n\n    static boolean notVisibleAndNotMethodMissing(DynamicMethod method, String name, IRubyObject caller, CallType callType) {"
            },
            {
              "step": 143,
              "variableName": "metaClass.toSingletonClass(context, this)",
              "startLine": 516,
              "startColumn": 27,
              "endLine": 516,
              "endColumn": 68,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "    // MRI: rb_singleton_class\n    @JRubyAPI\n    public RubyClass singletonClass(ThreadContext context) {\n        RubyClass klass = metaClass.toSingletonClass(context, this);\n\n        if (isFrozen()) klass.setFrozen(true);\n"
            },
            {
              "step": 144,
              "variableName": "klass",
              "startLine": 520,
              "startColumn": 16,
              "endLine": 520,
              "endColumn": 21,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "\n        if (isFrozen()) klass.setFrozen(true);\n\n        return klass;\n    }\n\n    @Deprecated(since = \"10.0\")"
            },
            {
              "step": 145,
              "variableName": "rubyObject.singletonClass(context)",
              "startLine": 250,
              "startColumn": 46,
              "endLine": 250,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/JavaUtil.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "        if ( rubyObject instanceof RubyProc ) {\n            // Proc implementing an interface, pull in the catch-all code that lets the proc get invoked\n            // no matter what method is called on the interface\n            final RubyClass singletonClass = rubyObject.singletonClass(context);\n\n            if (procClass == procClass(context)) {\n                // We reattach the singleton class to the Proc class object to prevent the method cache in the interface"
            },
            {
              "step": 146,
              "variableName": "singletonClass",
              "startLine": 259,
              "startColumn": 13,
              "endLine": 259,
              "endColumn": 27,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/JavaUtil.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "            }\n\n            final Java.ProcToInterface procToIface = new Java.ProcToInterface(singletonClass);\n            singletonClass.addMethod(context, \"method_missing\", procToIface);\n            // similar to Iface.impl { ... } - bind interface method(s) to avoid Java-Ruby conflicts\n            // ... e.g. calling a Ruby implemented Predicate#test should not dispatch to Kernel#test\n            // getMethods for interface returns all methods (including ones from super-interfaces)"
            },
            {
              "step": 147,
              "variableName": "addMethod",
              "startLine": 1897,
              "startColumn": 17,
              "endLine": 1897,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "        addMethod(getCurrentContext(), id, method);\n    }\n\n    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        if (this instanceof MetaClass) {\n            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();"
            },
            {
              "step": 148,
              "variableName": "(MetaClass) this",
              "startLine": 1900,
              "startColumn": 14,
              "endLine": 1900,
              "endColumn": 30,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        if (this instanceof MetaClass) {\n            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();\n        } else {\n            testFrozen(frozenType());\n        }"
            },
            {
              "step": 149,
              "variableName": "getAttached",
              "startLine": 143,
              "startColumn": 28,
              "endLine": 143,
              "endColumn": 39,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "        return attached;\n    }\n\n    public RubyBasicObject getAttached() {\n        return attached;\n    }\n"
            },
            {
              "step": 150,
              "variableName": "attached",
              "startLine": 144,
              "startColumn": 16,
              "endLine": 144,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "    }\n\n    public RubyBasicObject getAttached() {\n        return attached;\n    }\n\n    public void setAttached(RubyBasicObject attached) {"
            },
            {
              "step": 151,
              "variableName": "attached",
              "startLine": 144,
              "startColumn": 16,
              "endLine": 144,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "    }\n\n    public RubyBasicObject getAttached() {\n        return attached;\n    }\n\n    public void setAttached(RubyBasicObject attached) {"
            },
            {
              "step": 152,
              "variableName": "((MetaClass) this).getAttached()",
              "startLine": 1900,
              "startColumn": 13,
              "endLine": 1900,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass",
              "code": "    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        if (this instanceof MetaClass) {\n            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();\n        } else {\n            testFrozen(frozenType());\n        }"
            },
            {
              "step": 153,
              "variableName": "testFrozen",
              "startLine": 304,
              "startColumn": 25,
              "endLine": 304,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "MetaClass",
              "code": "     * Helper to test whether this object is frozen, and if it is will\n     * throw an exception based on the message.\n     */\n   protected final void testFrozen() {\n       if (isFrozen()) {\n           var context = getRuntime().getCurrentContext();\n           throw context.runtime.newFrozenError((isClass() ? \"Class: \" : (isModule() ? \"Module: \" : \"object: \")) + inspect(context), this);"
            },
            {
              "step": 154,
              "variableName": "this",
              "startLine": 307,
              "startColumn": 134,
              "endLine": 307,
              "endColumn": 138,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "MetaClass",
              "code": "   protected final void testFrozen() {\n       if (isFrozen()) {\n           var context = getRuntime().getCurrentContext();\n           throw context.runtime.newFrozenError((isClass() ? \"Class: \" : (isModule() ? \"Module: \" : \"object: \")) + inspect(context), this);\n       }\n   }\n"
            },
            {
              "step": 155,
              "variableName": "IRubyObject receiver",
              "startLine": 4259,
              "startColumn": 61,
              "endLine": 4259,
              "endColumn": 81,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "MetaClass",
              "code": "        return loadError;\n    }\n\n    public RaiseException newFrozenError(String objectType, IRubyObject receiver) {\n        ThreadContext context = getCurrentContext();\n\n        IRubyObject inspected = context.safeRecurse(Ruby::inspectFrozenObject, this, receiver, \"inspect\", true);"
            },
            {
              "step": 156,
              "variableName": "receiver",
              "startLine": 4262,
              "startColumn": 86,
              "endLine": 4262,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "MetaClass",
              "code": "    public RaiseException newFrozenError(String objectType, IRubyObject receiver) {\n        ThreadContext context = getCurrentContext();\n\n        IRubyObject inspected = context.safeRecurse(Ruby::inspectFrozenObject, this, receiver, \"inspect\", true);\n        String message = \"can't modify frozen \" + objectType + \": \" + inspected.convertToString().toString();\n\n        return newFrozenError(receiver, message);"
            },
            {
              "step": 157,
              "variableName": "IRubyObject obj",
              "startLine": 1431,
              "startColumn": 78,
              "endLine": 1431,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "MetaClass",
              "code": "        IRubyObject call(ThreadContext context, T state, IRubyObject obj, boolean recur);\n    }\n\n    public <T> IRubyObject safeRecurse(RecursiveFunctionEx<T> func, T state, IRubyObject obj, String name, boolean outer) {\n        Map<IRubyObject, IRubyObject> guards = safeRecurseGetGuards(name);\n\n        boolean outermost = outer && !guards.containsKey(NEVER);"
            },
            {
              "step": 158,
              "variableName": "obj",
              "startLine": 1446,
              "startColumn": 54,
              "endLine": 1446,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "MetaClass",
              "code": "            if (outermost) {\n                return safeRecurseOutermost(func, state, obj, guards);\n            } else {\n                return safeRecurseInner(func, state, obj, guards);\n            }\n        }\n    }"
            },
            {
              "step": 159,
              "variableName": "IRubyObject obj",
              "startLine": 1483,
              "startColumn": 84,
              "endLine": 1483,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "MetaClass",
              "code": "        return guards;\n    }\n\n    private <T> IRubyObject safeRecurseInner(RecursiveFunctionEx<T> func, T state, IRubyObject obj, Map<IRubyObject, IRubyObject> guards) {\n        try {\n            guards.put(obj, obj);\n            return func.call(this, state, obj, false);"
            },
            {
              "step": 160,
              "variableName": "obj",
              "startLine": 1486,
              "startColumn": 43,
              "endLine": 1486,
              "endColumn": 46,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "MetaClass",
              "code": "    private <T> IRubyObject safeRecurseInner(RecursiveFunctionEx<T> func, T state, IRubyObject obj, Map<IRubyObject, IRubyObject> guards) {\n        try {\n            guards.put(obj, obj);\n            return func.call(this, state, obj, false);\n        } finally {\n            guards.remove(obj);\n        }"
            },
            {
              "step": 161,
              "variableName": "self",
              "startLine": 145,
              "startColumn": 28,
              "endLine": 145,
              "endColumn": 32,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyComparable.java",
              "type": "MetaClass",
              "code": "        if (recv == other) return context.tru;\n\n        var result = context.safeRecurse(\n                (ctx, obj, self, recur) -> recur ? ctx.nil : sites(ctx).op_cmp.call(ctx, self, self, obj),\n                other, recv, \"<=>\", true);\n\n        // This is only to prevent throwing exceptions by cmperr - it has poor performance"
            },
            {
              "step": 162,
              "variableName": "self",
              "startLine": 145,
              "startColumn": 96,
              "endLine": 145,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyComparable.java",
              "type": "MetaClass",
              "code": "        if (recv == other) return context.tru;\n\n        var result = context.safeRecurse(\n                (ctx, obj, self, recur) -> recur ? ctx.nil : sites(ctx).op_cmp.call(ctx, self, self, obj),\n                other, recv, \"<=>\", true);\n\n        // This is only to prevent throwing exceptions by cmperr - it has poor performance"
            },
            {
              "step": 163,
              "variableName": "IRubyObject self",
              "startLine": 237,
              "startColumn": 72,
              "endLine": 237,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "MetaClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 164,
              "variableName": "self",
              "startLine": 242,
              "startColumn": 47,
              "endLine": 242,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "MetaClass",
              "code": "        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName, arg1);\n        }\n        return cacheAndCall(context, caller, self, selfType, arg1);\n    }"
            },
            {
              "step": 165,
              "variableName": "final IRubyObject self",
              "startLine": 203,
              "startColumn": 62,
              "endLine": 203,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/ext/Module.java",
              "type": "MetaClass",
              "code": "        }\n\n        @Override\n        public IRubyObject call(final ThreadContext context, final IRubyObject self, final RubyModule klass,\n                                final String name, final IRubyObject constant) {\n            final String constName = ((RubySymbol) constant).idString();\n            final String realName = includedPackages.javaAliases.getOrDefault(constName, constName);"
            },
            {
              "step": 166,
              "variableName": "(RubyModule) self",
              "startLine": 227,
              "startColumn": 52,
              "endLine": 227,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/ext/Module.java",
              "type": "MetaClass",
              "code": "            }\n\n            try {\n                return Java.setProxyClass(context, (RubyModule) self, constName, foundClass);\n            } catch (NameError e) {\n                String message = \"cannot set Java class \" + foundClass.getName() + \" as '\" + constant + \"' : \" + e.getException().getMessage();\n                throw nameError(context, message, constant);"
            },
            {
              "step": 167,
              "variableName": "final RubyModule target",
              "startLine": 259,
              "startColumn": 71,
              "endLine": 259,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "MetaClass",
              "code": "        return setProxyClass(runtime.getCurrentContext(), target, constName, javaClass);\n    }\n\n        public static RubyModule setProxyClass(ThreadContext context, final RubyModule target, final String constName,\n                                           final Class<?> javaClass) throws NameError {\n        final RubyModule proxyClass = getProxyClass(context, javaClass);\n        setProxyClass(context, target, constName, proxyClass, true);"
            },
            {
              "step": 168,
              "variableName": "target",
              "startLine": 262,
              "startColumn": 32,
              "endLine": 262,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "MetaClass",
              "code": "        public static RubyModule setProxyClass(ThreadContext context, final RubyModule target, final String constName,\n                                           final Class<?> javaClass) throws NameError {\n        final RubyModule proxyClass = getProxyClass(context, javaClass);\n        setProxyClass(context, target, constName, proxyClass, true);\n        return proxyClass;\n    }\n"
            },
            {
              "step": 169,
              "variableName": "final RubyModule target",
              "startLine": 266,
              "startColumn": 62,
              "endLine": 266,
              "endColumn": 85,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "MetaClass",
              "code": "        return proxyClass;\n    }\n\n    private static void setProxyClass(ThreadContext context, final RubyModule target, final String constName, final RubyModule proxyClass, final boolean validateConstant) {\n        if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {\n            synchronized (target) { // synchronize to prevent \"already initialized constant\" warnings with multiple threads\n                if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {"
            },
            {
              "step": 170,
              "variableName": "target",
              "startLine": 271,
              "startColumn": 25,
              "endLine": 271,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "MetaClass",
              "code": "            synchronized (target) { // synchronize to prevent \"already initialized constant\" warnings with multiple threads\n                if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {\n                    if (validateConstant) {\n                        target.defineConstant(context, constName, proxyClass); // setConstant would not validate const-name\n                    } else {\n                        target.setConstant(context, constName, proxyClass);\n                    }"
            },
            {
              "step": 171,
              "variableName": "defineConstant",
              "startLine": 5697,
              "startColumn": 37,
              "endLine": 5697,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass",
              "code": "     * @return itself for a composable API\n     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value) {\n        return (T) defineConstant(context, name, value, false);\n    }\n"
            },
            {
              "step": 172,
              "variableName": "defineConstant(context, name, value, false)",
              "startLine": 5698,
              "startColumn": 20,
              "endLine": 5698,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass",
              "code": "     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value) {\n        return (T) defineConstant(context, name, value, false);\n    }\n\n    /**"
            },
            {
              "step": 173,
              "variableName": "defineConstant",
              "startLine": 5711,
              "startColumn": 37,
              "endLine": 5711,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass",
              "code": "     * @return itself for a composable API\n     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value, boolean hidden) {\n        if (!IdUtil.isValidConstantName(name)) throw nameError(context, \"bad constant name \" + name, name);\n        setConstantCommon(context, name, value, hidden, true, null, -1);\n        return (T) this;"
            },
            {
              "step": 174,
              "variableName": "setConstantCommon(context, name, value, hidden, true, null, -1)",
              "startLine": 5713,
              "startColumn": 9,
              "endLine": 5713,
              "endColumn": 72,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass",
              "code": "    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value, boolean hidden) {\n        if (!IdUtil.isValidConstantName(name)) throw nameError(context, \"bad constant name \" + name, name);\n        setConstantCommon(context, name, value, hidden, true, null, -1);\n        return (T) this;\n    }\n"
            },
            {
              "step": 175,
              "variableName": "setConstantCommon",
              "startLine": 5611,
              "startColumn": 25,
              "endLine": 5611,
              "endColumn": 42,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass",
              "code": "     *               and its value is being updated.\n     * @return The result of setting the variable.\n     */\n    private IRubyObject setConstantCommon(ThreadContext context, String name, IRubyObject value, boolean hidden,\n                                          boolean warn, String file, int line) {\n        ConstantEntry oldEntry = fetchConstantEntry(context, name, true);\n"
            },
            {
              "step": 176,
              "variableName": "\"already initialized constant \" +",
              "startLine": 5622,
              "startColumn": 35,
              "endLine": 5623,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "String",
              "code": "            boolean notAutoload = oldEntry.value != UNDEF;\n            if (notAutoload || !setAutoloadConstant(context, name, value, file, line)) {\n                if (warn && notAutoload) {\n                    warn(context, \"already initialized constant \" +\n                            (this.equals(objectClass(context)) ? name : (this + \"::\" + name)));\n                }\n"
            },
            {
              "step": 177,
              "variableName": "String message",
              "startLine": 7,
              "startColumn": 52,
              "endLine": 7,
              "endColumn": 66,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Warn.java",
              "type": "String",
              "code": "import org.jruby.runtime.ThreadContext;\n\npublic class Warn {\n    public static void warn(ThreadContext context, String message) {\n        context.runtime.getWarnings().warn(message);\n    }\n"
            },
            {
              "step": 178,
              "variableName": "message",
              "startLine": 8,
              "startColumn": 44,
              "endLine": 8,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Warn.java",
              "type": "",
              "code": "\npublic class Warn {\n    public static void warn(ThreadContext context, String message) {\n        context.runtime.getWarnings().warn(message);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "passwdStruct",
              "startLine": 2190,
              "startColumn": 16,
              "endLine": 2190,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject getPasswdStruct() {\n        return passwdStruct;\n    }\n    public void setPasswdStruct(RubyClass passwdStruct) {\n        this.passwdStruct = passwdStruct;"
            },
            {
              "step": 1,
              "variableName": "context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 47,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 2,
              "variableName": "(RubyClass) context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 3,
              "variableName": "RubyClass structClass",
              "startLine": 485,
              "startColumn": 63,
              "endLine": 485,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @param block\n     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;"
            },
            {
              "step": 4,
              "variableName": "structClass",
              "startLine": 486,
              "startColumn": 53,
              "endLine": 486,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 5,
              "variableName": "RubyClass rubyClass",
              "startLine": 98,
              "startColumn": 46,
              "endLine": 98,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "        this(runtime.getCurrentContext(), rubyClass);\n    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));"
            },
            {
              "step": 6,
              "variableName": "rubyClass",
              "startLine": 99,
              "startColumn": 32,
              "endLine": 99,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 7,
              "variableName": "super(context.runtime, rubyClass);",
              "startLine": 99,
              "startColumn": 9,
              "endLine": 99,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 8,
              "variableName": "new RubyStruct(context, structClass)",
              "startLine": 486,
              "startColumn": 29,
              "endLine": 486,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 9,
              "variableName": "struct",
              "startLine": 488,
              "startColumn": 16,
              "endLine": 488,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }\n\n}"
            },
            {
              "step": 10,
              "variableName": "newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK)",
              "startLine": 149,
              "startColumn": 16,
              "endLine": 149,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 11,
              "variableName": "setupPasswd(context, pw)",
              "startLine": 300,
              "startColumn": 46,
              "endLine": 300,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                try {\n                    Passwd pw;\n                    while((pw = posix.getpwent()) != null) {\n                        block.yield(context, setupPasswd(context, pw));\n                    }\n                } finally {\n                    posix.endpwent();"
            },
            {
              "step": 12,
              "variableName": "IRubyObject value",
              "startLine": 190,
              "startColumn": 53,
              "endLine": 190,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return body.yieldSpecific(context, this, arg0, arg1, arg2);\n    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 191,
              "startColumn": 42,
              "endLine": 191,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "IRubyObject value",
              "startLine": 104,
              "startColumn": 72,
              "endLine": 104,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "value",
              "startLine": 108,
              "startColumn": 44,
              "endLine": 108,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "IRubyObject value",
              "startLine": 97,
              "startColumn": 71,
              "endLine": 97,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/CallBlock19.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    protected IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        return callback.call(context, value, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "value",
              "startLine": 98,
              "startColumn": 39,
              "endLine": 98,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/CallBlock19.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    @Override\n    protected IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        return callback.call(context, value, Block.NULL_BLOCK);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "IRubyObject arg",
              "startLine": 2212,
              "startColumn": 56,
              "endLine": 2212,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyEnumerable.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n\n        @Override\n        public IRubyObject call(ThreadContext context, IRubyObject arg, Block block) {\n            ThreadContext.resetCallInfo(context);\n            result.append(context, arg);\n            return context.nil;"
            },
            {
              "step": 19,
              "variableName": "arg",
              "startLine": 2214,
              "startColumn": 36,
              "endLine": 2214,
              "endColumn": 39,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyEnumerable.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        @Override\n        public IRubyObject call(ThreadContext context, IRubyObject arg, Block block) {\n            ThreadContext.resetCallInfo(context);\n            result.append(context, arg);\n            return context.nil;\n        }\n"
            },
            {
              "step": 20,
              "variableName": "IRubyObject item",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 81,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/collections/StringArraySet.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    public synchronized RubyArray append(ThreadContext context, IRubyObject item) {\n        RubyArray result = super.append(context, item);\n        set.add(convertToString(item));\n        return result;"
            },
            {
              "step": 21,
              "variableName": "item",
              "startLine": 68,
              "startColumn": 33,
              "endLine": 68,
              "endColumn": 37,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/collections/StringArraySet.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    @Override\n    public synchronized RubyArray append(ThreadContext context, IRubyObject item) {\n        RubyArray result = super.append(context, item);\n        set.add(convertToString(item));\n        return result;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "IRubyObject item",
              "startLine": 316,
              "startColumn": 43,
              "endLine": 316,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/collections/StringArraySet.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        synchronized (this) { return set.contains(element); }\n    }\n\n    private static String convertToString(IRubyObject item) {\n        return item.convertToString().asJavaString();\n    }\n"
            },
            {
              "step": 23,
              "variableName": "item",
              "startLine": 317,
              "startColumn": 16,
              "endLine": 317,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/collections/StringArraySet.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    private static String convertToString(IRubyObject item) {\n        return item.convertToString().asJavaString();\n    }\n\n    private void rehash() {"
            },
            {
              "step": 24,
              "variableName": "convertToString",
              "startLine": 778,
              "startColumn": 23,
              "endLine": 778,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return a string representation of this\n     */\n    @Override\n    public RubyString convertToString() {\n        Ruby runtime = metaClass.runtime;\n        ThreadContext context = runtime.getCurrentContext();\n        BasicObjectSites sites = sites(context);"
            },
            {
              "step": 25,
              "variableName": "this",
              "startLine": 782,
              "startColumn": 66,
              "endLine": 782,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        Ruby runtime = metaClass.runtime;\n        ThreadContext context = runtime.getCurrentContext();\n        BasicObjectSites sites = sites(context);\n        return (RubyString) TypeConverter.convertToType(context, this, stringClass(context), sites.to_str_checked);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "IRubyObject obj",
              "startLine": 138,
              "startColumn": 68,
              "endLine": 138,
              "endColumn": 83,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param sites is the CheckedSites call sites to use to dispatch the convert method\n     * @return the converted value\n     */\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, JavaSites.CheckedSites sites) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(context, obj, target, sites, true);\n        if (!target.isInstance(val)) throw newTypeErrorMismatch(context.runtime, obj, target, sites.methodName, val);"
            },
            {
              "step": 27,
              "variableName": "obj",
              "startLine": 140,
              "startColumn": 50,
              "endLine": 140,
              "endColumn": 53,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, JavaSites.CheckedSites sites) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(context, obj, target, sites, true);\n        if (!target.isInstance(val)) throw newTypeErrorMismatch(context.runtime, obj, target, sites.methodName, val);\n        return val;\n    }"
            },
            {
              "step": 28,
              "variableName": "IRubyObject obj",
              "startLine": 108,
              "startColumn": 68,
              "endLine": 108,
              "endColumn": 83,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param raise will throw an Error if conversion does not work\n     * @return the converted value\n     */\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, JavaSites.CheckedSites sites, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, sites);\n\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;"
            },
            {
              "step": 29,
              "variableName": "obj",
              "startLine": 109,
              "startColumn": 25,
              "endLine": 109,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return the converted value\n     */\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, JavaSites.CheckedSites sites, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, sites);\n\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }"
            },
            {
              "step": 30,
              "variableName": "checkCallMethod",
              "startLine": 363,
              "startColumn": 30,
              "endLine": 363,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * method missing exists. Otherwise returns null. 1.9: rb_check_funcall\n     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, JavaSites.CheckedSites sites) {\n        return Helpers.invokeChecked(context, this, sites);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 47,
              "endLine": 364,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, JavaSites.CheckedSites sites) {\n        return Helpers.invokeChecked(context, this, sites);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "IRubyObject self",
              "startLine": 836,
              "startColumn": 68,
              "endLine": 836,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        return getMetaClass(self).finvokeChecked(context, self, sites);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "self",
              "startLine": 837,
              "startColumn": 59,
              "endLine": 837,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        return getMetaClass(self).finvokeChecked(context, self, sites);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 34,
              "variableName": "IRubyObject self",
              "startLine": 732,
              "startColumn": 68,
              "endLine": 732,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     *\n     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        return checkFuncallDefault(context, self, sites);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "self",
              "startLine": 733,
              "startColumn": 45,
              "endLine": 733,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        return checkFuncallDefault(context, self, sites);\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "IRubyObject self",
              "startLine": 780,
              "startColumn": 68,
              "endLine": 780,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall_default\n    private IRubyObject checkFuncallDefault(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        final RubyClass klass = this;\n        if (!checkFuncallRespondTo(context, klass, self, sites.respond_to_X)) return null; // return def;\n"
            },
            {
              "step": 37,
              "variableName": "self",
              "startLine": 782,
              "startColumn": 52,
              "endLine": 782,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // MRI: rb_check_funcall_default\n    private IRubyObject checkFuncallDefault(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        final RubyClass klass = this;\n        if (!checkFuncallRespondTo(context, klass, self, sites.respond_to_X)) return null; // return def;\n\n        CacheEntry entry = sites.site.retrieveCache(klass);\n        DynamicMethod method = entry.method;"
            },
            {
              "step": 38,
              "variableName": "IRubyObject recv",
              "startLine": 830,
              "startColumn": 90,
              "endLine": 830,
              "endColumn": 106,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     *\n     * MRI: check_funcall_respond_to\n     */\n    private static boolean checkFuncallRespondTo(ThreadContext context, RubyClass klass, IRubyObject recv, RespondToCallSite respondToSite) {\n        DynamicMethod me = respondToSite.retrieveCache(klass).method;\n\n        // NOTE: isBuiltin here would be NOEX_BASIC in MRI, a flag only added to respond_to?, method_missing, and"
            },
            {
              "step": 39,
              "variableName": "recv",
              "startLine": 843,
              "startColumn": 57,
              "endLine": 843,
              "endColumn": 61,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        return required == 1 ?\n                respondToSite.respondsTo(context, recv, recv) :\n                respondToSite.respondsTo(context, recv, recv, true);\n    }\n\n    // MRI: check_funcall_callable"
            },
            {
              "step": 40,
              "variableName": "IRubyObject self",
              "startLine": 99,
              "startColumn": 74,
              "endLine": 99,
              "endColumn": 90,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return super.call(context, caller, self, getRespondToNameSym(context)).isTrue();\n    }\n\n    public boolean respondsTo(ThreadContext context, IRubyObject caller, IRubyObject self, boolean includePrivate) {\n        RubyClass klass = getMetaClass(self);\n        RespondToTuple tuple = respondToTuple;\n        if (tuple.cacheOk(klass)) {"
            },
            {
              "step": 41,
              "variableName": "self",
              "startLine": 107,
              "startColumn": 44,
              "endLine": 107,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "            if (strName.equals(tuple.name) && !includePrivate == tuple.checkVisibility) return tuple.respondsToBoolean;\n        }\n        // go through normal call logic, which will hit overridden cacheAndCall\n        return super.call(context, caller, self, getRespondToNameSym(context), asBoolean(context, includePrivate)).isTrue();\n    }\n\n    private RubySymbol getRespondToNameSym(ThreadContext context) {"
            },
            {
              "step": 42,
              "variableName": "IRubyObject self",
              "startLine": 286,
              "startColumn": 72,
              "endLine": 286,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1, IRubyObject arg2) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 43,
              "variableName": "self",
              "startLine": 287,
              "startColumn": 43,
              "endLine": 287,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1, IRubyObject arg2) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {"
            },
            {
              "step": 44,
              "variableName": "IRubyObject arg",
              "startLine": 496,
              "startColumn": 42,
              "endLine": 496,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n"
            },
            {
              "step": 45,
              "variableName": "(RubyBasicObject) arg",
              "startLine": 497,
              "startColumn": 17,
              "endLine": 497,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 46,
              "variableName": "((RubyBasicObject) arg).metaClass",
              "startLine": 497,
              "startColumn": 16,
              "endLine": 497,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "getMetaClass(self)",
              "startLine": 287,
              "startColumn": 30,
              "endLine": 287,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1, IRubyObject arg2) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {"
            },
            {
              "step": 48,
              "variableName": "selfType",
              "startLine": 293,
              "startColumn": 52,
              "endLine": 293,
              "endColumn": 60,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName, arg1, arg2);\n        }\n        return cacheAndCall(context, caller, self, selfType, arg1, arg2);\n    }\n\n    public IRubyObject fcall(ThreadContext context, IRubyObject self, IRubyObject arg1, IRubyObject arg2) {"
            },
            {
              "step": 49,
              "variableName": "RubyClass selfType",
              "startLine": 138,
              "startColumn": 101,
              "endLine": 138,
              "endColumn": 119,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg0, IRubyObject arg1) {\n        CacheEntry entry = selfType.searchWithCache(methodName);\n        DynamicMethod method = entry.method;\n"
            },
            {
              "step": 50,
              "variableName": "selfType",
              "startLine": 143,
              "startColumn": 63,
              "endLine": 143,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (methodMissing(method, caller)) {\n            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n            method = entry.method;\n        }\n"
            },
            {
              "step": 51,
              "variableName": "RubyClass selfClass",
              "startLine": 594,
              "startColumn": 78,
              "endLine": 594,
              "endColumn": 97,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return (int) length;\n    }\n\n    public static CacheEntry createMethodMissingEntry(ThreadContext context, RubyClass selfClass, CallType callType, Visibility visibility, int token, String methodName) {\n        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,"
            },
            {
              "step": 52,
              "variableName": "selfClass",
              "startLine": 598,
              "startColumn": 17,
              "endLine": 598,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,\n                selfClass,\n                token);\n    }\n"
            },
            {
              "step": 53,
              "variableName": "RubyModule source",
              "startLine": 20,
              "startColumn": 45,
              "endLine": 20,
              "endColumn": 62,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "RubyClass",
              "code": "        this.token = token;\n    }\n\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;"
            },
            {
              "step": 54,
              "variableName": "source",
              "startLine": 22,
              "startColumn": 29,
              "endLine": 22,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "RubyClass",
              "code": "\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;\n    }\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 22,
              "startColumn": 9,
              "endLine": 22,
              "endColumn": 13,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;\n    }\n"
            },
            {
              "step": 56,
              "variableName": "new Cac",
              "startLine": 596,
              "startColumn": 16,
              "endLine": 599,
              "endColumn": 23,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    public static CacheEntry createMethodMissingEntry(ThreadContext context, RubyClass selfClass, CallType callType, Visibility visibility, int token, String methodName) {\n        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,\n                selfClass,\n                token);"
            },
            {
              "step": 57,
              "variableName": "Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName)",
              "startLine": 143,
              "startColumn": 21,
              "endLine": 143,
              "endColumn": 131,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (methodMissing(method, caller)) {\n            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n            method = entry.method;\n        }\n"
            },
            {
              "step": 58,
              "variableName": "entry",
              "startLine": 154,
              "startColumn": 26,
              "endLine": 154,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        }\n\n        // normal logic if it's not the builtin respond_to? method\n        entry = setCache(entry, self); // cache = entry;\n        return method.call(context, self, entry.sourceModule, methodName, arg0, arg1);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "CacheEntry entry",
              "startLine": 31,
              "startColumn": 35,
              "endLine": 31,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        return cache;\n    }\n\n    protected CacheEntry setCache(CacheEntry entry, IRubyObject self) {\n        return cache = entry;\n    }\n"
            },
            {
              "step": 60,
              "variableName": "cache = entry",
              "startLine": 32,
              "startColumn": 16,
              "endLine": 32,
              "endColumn": 29,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "    }\n\n    protected CacheEntry setCache(CacheEntry entry, IRubyObject self) {\n        return cache = entry;\n    }\n\n    public final boolean isOptimizable() {"
            },
            {
              "step": 61,
              "variableName": "setCache(entry, self)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        }\n\n        // normal logic if it's not the builtin respond_to? method\n        entry = setCache(entry, self); // cache = entry;\n        return method.call(context, self, entry.sourceModule, methodName, arg0, arg1);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 43,
              "endLine": 155,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n        // normal logic if it's not the builtin respond_to? method\n        entry = setCache(entry, self); // cache = entry;\n        return method.call(context, self, entry.sourceModule, methodName, arg0, arg1);\n    }\n\n    private IRubyObject fastRespondTo(ThreadContext context, IRubyObject arg, CacheEntry entry, RubyClass selfType, boolean checkVisibility) {"
            },
            {
              "step": 63,
              "variableName": "entry.sourceModule",
              "startLine": 155,
              "startColumn": 43,
              "endLine": 155,
              "endColumn": 61,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyClass",
              "code": "\n        // normal logic if it's not the builtin respond_to? method\n        entry = setCache(entry, self); // cache = entry;\n        return method.call(context, self, entry.sourceModule, methodName, arg0, arg1);\n    }\n\n    private IRubyObject fastRespondTo(ThreadContext context, IRubyObject arg, CacheEntry entry, RubyClass selfType, boolean checkVisibility) {"
            },
            {
              "step": 64,
              "variableName": "RubyModule clazz",
              "startLine": 82,
              "startColumn": 70,
              "endLine": 82,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0, IRubyObject arg1) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 65,
              "variableName": "clazz",
              "startLine": 83,
              "startColumn": 36,
              "endLine": 83,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0, IRubyObject arg1) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 67,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 68,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 69,
              "variableName": "clazz",
              "startLine": 44,
              "startColumn": 90,
              "endLine": 44,
              "endColumn": 95,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());"
            },
            {
              "step": 70,
              "variableName": "RubyModule clazz",
              "startLine": 130,
              "startColumn": 85,
              "endLine": 130,
              "endColumn": 101,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name, null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 71,
              "variableName": "clazz",
              "startLine": 131,
              "startColumn": 89,
              "endLine": 131,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {"
            },
            {
              "step": 72,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 73,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 74,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 75,
              "variableName": "self",
              "startLine": 201,
              "startColumn": 105,
              "endLine": 201,
              "endColumn": 109,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        }\n                        break;\n                    case OTHER_OP:\n                        processOtherOp(context, block, instr, operation, currDynScope, currScope, temp, self, floats, fixnums, booleans);\n                        break;\n                }\n            } catch (Throwable t) {"
            },
            {
              "step": 76,
              "variableName": "IRubyObject self",
              "startLine": 472,
              "startColumn": 80,
              "endLine": 472,
              "endColumn": 96,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "    }\n\n    protected static void processOtherOp(ThreadContext context, Block block, Instr instr, Operation operation, DynamicScope currDynScope,\n                                         StaticScope currScope, Object[] temp, IRubyObject self,\n                                         double[] floats, long[] fixnums, boolean[] booleans) {\n        Object result;\n        switch(operation) {"
            },
            {
              "step": 77,
              "variableName": "self",
              "startLine": 545,
              "startColumn": 76,
              "endLine": 545,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "\n            // ---------- All the rest ---------\n            default:\n                result = instr.interpret(context, currScope, currDynScope, self, temp);\n                setResult(temp, currDynScope, instr, result);\n                break;\n        }"
            },
            {
              "step": 78,
              "variableName": "IRubyObject self",
              "startLine": 56,
              "startColumn": 102,
              "endLine": 56,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/BlockGivenCallInstr.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        Object blk = getBlockArg().retrieve(context, self, currScope, currDynScope, temp);\n\n        return IRRuntimeHelpers.blockGivenOrCall(context, self, blockGivenSite, blk);"
            },
            {
              "step": 79,
              "variableName": "self",
              "startLine": 59,
              "startColumn": 59,
              "endLine": 59,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/BlockGivenCallInstr.java",
              "type": "RubyClass",
              "code": "    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        Object blk = getBlockArg().retrieve(context, self, currScope, currDynScope, temp);\n\n        return IRRuntimeHelpers.blockGivenOrCall(context, self, blockGivenSite, blk);\n    }\n\n    @Override"
            },
            {
              "step": 80,
              "variableName": "IRubyObject self",
              "startLine": 962,
              "startColumn": 71,
              "endLine": 962,
              "endColumn": 87,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        return dynScope;\n    }\n\n    public static IRubyObject blockGivenOrCall(ThreadContext context, IRubyObject self, FunctionalCachingCallSite blockGivenSite, Object blk) {\n        CacheEntry blockGivenEntry = blockGivenSite.retrieveCache(self);\n\n        if (!blockGivenEntry.method.getRealMethod().isBuiltin()) {"
            },
            {
              "step": 81,
              "variableName": "self",
              "startLine": 966,
              "startColumn": 55,
              "endLine": 966,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        CacheEntry blockGivenEntry = blockGivenSite.retrieveCache(self);\n\n        if (!blockGivenEntry.method.getRealMethod().isBuiltin()) {\n            return blockGivenSite.call(context, self, self);\n        }\n\n        return isBlockGiven(context, blk);"
            },
            {
              "step": 82,
              "variableName": "IRubyObject self",
              "startLine": 188,
              "startColumn": 72,
              "endLine": 188,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 83,
              "variableName": "self",
              "startLine": 193,
              "startColumn": 47,
              "endLine": 193,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName);\n        }\n        return cacheAndCall(context, caller, self, selfType);\n    }"
            },
            {
              "step": 84,
              "variableName": "IRubyObject self",
              "startLine": 714,
              "startColumn": 56,
              "endLine": 714,
              "endColumn": 72,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        }\n\n        @Override\n        public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name) {\n            context.setLastCallStatusAndVisibility(lastCallStatus, lastVisibility);\n            return this.entry.method.call(context, self, entry.sourceModule, \"method_missing\", nameToSymbol(context, name));\n        }"
            },
            {
              "step": 85,
              "variableName": "self",
              "startLine": 716,
              "startColumn": 52,
              "endLine": 716,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        @Override\n        public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name) {\n            context.setLastCallStatusAndVisibility(lastCallStatus, lastVisibility);\n            return this.entry.method.call(context, self, entry.sourceModule, \"method_missing\", nameToSymbol(context, name));\n        }\n\n        @Override"
            },
            {
              "step": 86,
              "variableName": "final IRubyObject self",
              "startLine": 203,
              "startColumn": 62,
              "endLine": 203,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/ext/Module.java",
              "type": "RubyClass",
              "code": "        }\n\n        @Override\n        public IRubyObject call(final ThreadContext context, final IRubyObject self, final RubyModule klass,\n                                final String name, final IRubyObject constant) {\n            final String constName = ((RubySymbol) constant).idString();\n            final String realName = includedPackages.javaAliases.getOrDefault(constName, constName);"
            },
            {
              "step": 87,
              "variableName": "(RubyModule) self",
              "startLine": 227,
              "startColumn": 52,
              "endLine": 227,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/ext/Module.java",
              "type": "RubyClass",
              "code": "            }\n\n            try {\n                return Java.setProxyClass(context, (RubyModule) self, constName, foundClass);\n            } catch (NameError e) {\n                String message = \"cannot set Java class \" + foundClass.getName() + \" as '\" + constant + \"' : \" + e.getException().getMessage();\n                throw nameError(context, message, constant);"
            },
            {
              "step": 88,
              "variableName": "final RubyModule target",
              "startLine": 259,
              "startColumn": 71,
              "endLine": 259,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "RubyClass",
              "code": "        return setProxyClass(runtime.getCurrentContext(), target, constName, javaClass);\n    }\n\n        public static RubyModule setProxyClass(ThreadContext context, final RubyModule target, final String constName,\n                                           final Class<?> javaClass) throws NameError {\n        final RubyModule proxyClass = getProxyClass(context, javaClass);\n        setProxyClass(context, target, constName, proxyClass, true);"
            },
            {
              "step": 89,
              "variableName": "target",
              "startLine": 262,
              "startColumn": 32,
              "endLine": 262,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "RubyClass",
              "code": "        public static RubyModule setProxyClass(ThreadContext context, final RubyModule target, final String constName,\n                                           final Class<?> javaClass) throws NameError {\n        final RubyModule proxyClass = getProxyClass(context, javaClass);\n        setProxyClass(context, target, constName, proxyClass, true);\n        return proxyClass;\n    }\n"
            },
            {
              "step": 90,
              "variableName": "final RubyModule target",
              "startLine": 266,
              "startColumn": 62,
              "endLine": 266,
              "endColumn": 85,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "RubyClass",
              "code": "        return proxyClass;\n    }\n\n    private static void setProxyClass(ThreadContext context, final RubyModule target, final String constName, final RubyModule proxyClass, final boolean validateConstant) {\n        if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {\n            synchronized (target) { // synchronize to prevent \"already initialized constant\" warnings with multiple threads\n                if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {"
            },
            {
              "step": 91,
              "variableName": "target",
              "startLine": 271,
              "startColumn": 25,
              "endLine": 271,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/Java.java",
              "type": "RubyClass",
              "code": "            synchronized (target) { // synchronize to prevent \"already initialized constant\" warnings with multiple threads\n                if (constantNotSetOrDifferent(context, target, constName, proxyClass)) {\n                    if (validateConstant) {\n                        target.defineConstant(context, constName, proxyClass); // setConstant would not validate const-name\n                    } else {\n                        target.setConstant(context, constName, proxyClass);\n                    }"
            },
            {
              "step": 92,
              "variableName": "defineConstant",
              "startLine": 5697,
              "startColumn": 37,
              "endLine": 5697,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "RubyClass",
              "code": "     * @return itself for a composable API\n     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value) {\n        return (T) defineConstant(context, name, value, false);\n    }\n"
            },
            {
              "step": 93,
              "variableName": "defineConstant(context, name, value, false)",
              "startLine": 5698,
              "startColumn": 20,
              "endLine": 5698,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "RubyClass",
              "code": "     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value) {\n        return (T) defineConstant(context, name, value, false);\n    }\n\n    /**"
            },
            {
              "step": 94,
              "variableName": "defineConstant",
              "startLine": 5711,
              "startColumn": 37,
              "endLine": 5711,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "RubyClass",
              "code": "     * @return itself for a composable API\n     */\n    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value, boolean hidden) {\n        if (!IdUtil.isValidConstantName(name)) throw nameError(context, \"bad constant name \" + name, name);\n        setConstantCommon(context, name, value, hidden, true, null, -1);\n        return (T) this;"
            },
            {
              "step": 95,
              "variableName": "setConstantCommon(context, name, value, hidden, true, null, -1)",
              "startLine": 5713,
              "startColumn": 9,
              "endLine": 5713,
              "endColumn": 72,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "RubyClass",
              "code": "    @JRubyAPI\n    public <T extends RubyModule> T defineConstant(ThreadContext context, String name, IRubyObject value, boolean hidden) {\n        if (!IdUtil.isValidConstantName(name)) throw nameError(context, \"bad constant name \" + name, name);\n        setConstantCommon(context, name, value, hidden, true, null, -1);\n        return (T) this;\n    }\n"
            },
            {
              "step": 96,
              "variableName": "setConstantCommon",
              "startLine": 5611,
              "startColumn": 25,
              "endLine": 5611,
              "endColumn": 42,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "RubyClass",
              "code": "     *               and its value is being updated.\n     * @return The result of setting the variable.\n     */\n    private IRubyObject setConstantCommon(ThreadContext context, String name, IRubyObject value, boolean hidden,\n                                          boolean warn, String file, int line) {\n        ConstantEntry oldEntry = fetchConstantEntry(context, name, true);\n"
            },
            {
              "step": 97,
              "variableName": "\"already initialized constant \" +",
              "startLine": 5622,
              "startColumn": 35,
              "endLine": 5623,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "String",
              "code": "            boolean notAutoload = oldEntry.value != UNDEF;\n            if (notAutoload || !setAutoloadConstant(context, name, value, file, line)) {\n                if (warn && notAutoload) {\n                    warn(context, \"already initialized constant \" +\n                            (this.equals(objectClass(context)) ? name : (this + \"::\" + name)));\n                }\n"
            },
            {
              "step": 98,
              "variableName": "String message",
              "startLine": 7,
              "startColumn": 52,
              "endLine": 7,
              "endColumn": 66,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Warn.java",
              "type": "String",
              "code": "import org.jruby.runtime.ThreadContext;\n\npublic class Warn {\n    public static void warn(ThreadContext context, String message) {\n        context.runtime.getWarnings().warn(message);\n    }\n"
            },
            {
              "step": 99,
              "variableName": "message",
              "startLine": 8,
              "startColumn": 44,
              "endLine": 8,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Warn.java",
              "type": "",
              "code": "\npublic class Warn {\n    public static void warn(ThreadContext context, String message) {\n        context.runtime.getWarnings().warn(message);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "GlobalVariables.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "passwdStruct",
              "startLine": 2190,
              "startColumn": 16,
              "endLine": 2190,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject getPasswdStruct() {\n        return passwdStruct;\n    }\n    public void setPasswdStruct(RubyClass passwdStruct) {\n        this.passwdStruct = passwdStruct;"
            },
            {
              "step": 1,
              "variableName": "context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 47,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 2,
              "variableName": "(RubyClass) context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 3,
              "variableName": "RubyClass structClass",
              "startLine": 485,
              "startColumn": 63,
              "endLine": 485,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @param block\n     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;"
            },
            {
              "step": 4,
              "variableName": "structClass",
              "startLine": 486,
              "startColumn": 53,
              "endLine": 486,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 5,
              "variableName": "RubyClass rubyClass",
              "startLine": 98,
              "startColumn": 46,
              "endLine": 98,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "        this(runtime.getCurrentContext(), rubyClass);\n    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));"
            },
            {
              "step": 6,
              "variableName": "rubyClass",
              "startLine": 99,
              "startColumn": 32,
              "endLine": 99,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 7,
              "variableName": "super(context.runtime, rubyClass);",
              "startLine": 99,
              "startColumn": 9,
              "endLine": 99,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 8,
              "variableName": "new RubyStruct(context, structClass)",
              "startLine": 486,
              "startColumn": 29,
              "endLine": 486,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 9,
              "variableName": "struct",
              "startLine": 488,
              "startColumn": 16,
              "endLine": 488,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }\n\n}"
            },
            {
              "step": 10,
              "variableName": "newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK)",
              "startLine": 149,
              "startColumn": 16,
              "endLine": 149,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 11,
              "variableName": "setupPasswd(context, pw)",
              "startLine": 300,
              "startColumn": 46,
              "endLine": 300,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                try {\n                    Passwd pw;\n                    while((pw = posix.getpwent()) != null) {\n                        block.yield(context, setupPasswd(context, pw));\n                    }\n                } finally {\n                    posix.endpwent();"
            },
            {
              "step": 12,
              "variableName": "IRubyObject value",
              "startLine": 190,
              "startColumn": 53,
              "endLine": 190,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return body.yieldSpecific(context, this, arg0, arg1, arg2);\n    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 191,
              "startColumn": 42,
              "endLine": 191,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "IRubyObject value",
              "startLine": 104,
              "startColumn": 72,
              "endLine": 104,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "value",
              "startLine": 108,
              "startColumn": 44,
              "endLine": 108,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "IRubyObject value",
              "startLine": 158,
              "startColumn": 68,
              "endLine": 158,
              "endColumn": 85,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/IRBlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        if (block.type == Block.Type.LAMBDA) return doYieldLambda(context, block, value);\n\n        IRubyObject[] args;"
            },
            {
              "step": 17,
              "variableName": "value",
              "startLine": 167,
              "startColumn": 35,
              "endLine": 167,
              "endColumn": 40,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/IRBlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        } else if (!signature.isSpreadable()) {\n            args = new IRubyObject[] { value };\n        } else {\n            args = toAry(context, value);\n        }\n\n        return commonYieldPath(context, block, args, null, Block.NULL_BLOCK);"
            },
            {
              "step": 18,
              "variableName": "IRubyObject value",
              "startLine": 131,
              "startColumn": 62,
              "endLine": 131,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/IRBlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return yieldSpecificMultiArgsCommon(context, block, arg0, arg1, arg2);\n    }\n\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject value) {\n        final IRubyObject ary = Helpers.aryToAry(context, value);\n\n        if (ary instanceof RubyArray<?> array) return array.toJavaArray(context);"
            },
            {
              "step": 19,
              "variableName": "value",
              "startLine": 132,
              "startColumn": 59,
              "endLine": 132,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/IRBlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject value) {\n        final IRubyObject ary = Helpers.aryToAry(context, value);\n\n        if (ary instanceof RubyArray<?> array) return array.toJavaArray(context);\n        if (ary == context.nil) return new IRubyObject[] { value };"
            },
            {
              "step": 20,
              "variableName": "IRubyObject value",
              "startLine": 1982,
              "startColumn": 63,
              "endLine": 1982,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return aryToAry(((RubyBasicObject) value).getCurrentContext(), value);\n    }\n\n    public static IRubyObject aryToAry(ThreadContext context, IRubyObject value) {\n        if (value instanceof RubyArray) return value;\n\n        return respondsTo_to_ary(value) ?"
            },
            {
              "step": 21,
              "variableName": "value",
              "startLine": 1986,
              "startColumn": 63,
              "endLine": 1986,
              "endColumn": 68,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        if (value instanceof RubyArray) return value;\n\n        return respondsTo_to_ary(value) ?\n                TypeConverter.convertToTypeUnchecked(context, value, arrayClass(context), \"to_ary\", false) :\n                newArray(context, value);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "IRubyObject obj",
              "startLine": 94,
              "startColumn": 77,
              "endLine": 94,
              "endColumn": 92,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // This is essentially convertToType but it is used when we already know the method we are going to call will exist\n    // (as much as we can due to possible race conditions all convert methods have).  This is used in places where we\n    // need to explicitly check for the method (e.g. to_ary) before we actually try and convert the value.\n    public static IRubyObject convertToTypeUnchecked(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.callMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }"
            },
            {
              "step": 23,
              "variableName": "obj",
              "startLine": 95,
              "startColumn": 25,
              "endLine": 95,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // (as much as we can due to possible race conditions all convert methods have).  This is used in places where we\n    // need to explicitly check for the method (e.g. to_ary) before we actually try and convert the value.\n    public static IRubyObject convertToTypeUnchecked(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.callMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n"
            },
            {
              "step": 24,
              "variableName": "callMethod",
              "startLine": 371,
              "startColumn": 30,
              "endLine": 371,
              "endColumn": 40,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * Will invoke a named method with no arguments and no block.\n     */\n    @Override\n    public final IRubyObject callMethod(ThreadContext context, String name) {\n        return Helpers.invoke(context, this, name);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "this",
              "startLine": 372,
              "startColumn": 40,
              "endLine": 372,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject callMethod(ThreadContext context, String name) {\n        return Helpers.invoke(context, this, name);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "IRubyObject self",
              "startLine": 787,
              "startColumn": 61,
              "endLine": 787,
              "endColumn": 77,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return self.getMetaClass().finvoke(context, self, name, args, block);\n    }\n\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name) {\n        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {"
            },
            {
              "step": 27,
              "variableName": "self",
              "startLine": 788,
              "startColumn": 16,
              "endLine": 788,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name) {\n        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {\n        return self.getMetaClass().finvoke(context, self, name, arg0);"
            },
            {
              "step": 28,
              "variableName": "getMetaClass",
              "startLine": 492,
              "startColumn": 28,
              "endLine": 492,
              "endColumn": 40,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     *\n     */\n    @Override\n    public final RubyClass getMetaClass() {\n        return metaClass;\n    }\n"
            },
            {
              "step": 29,
              "variableName": "metaClass",
              "startLine": 493,
              "startColumn": 16,
              "endLine": 493,
              "endColumn": 25,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final RubyClass getMetaClass() {\n        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {"
            },
            {
              "step": 30,
              "variableName": "metaClass",
              "startLine": 493,
              "startColumn": 16,
              "endLine": 493,
              "endColumn": 25,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "     */\n    @Override\n    public final RubyClass getMetaClass() {\n        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {"
            },
            {
              "step": 31,
              "variableName": "self.getMetaClass()",
              "startLine": 788,
              "startColumn": 16,
              "endLine": 788,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name) {\n        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {\n        return self.getMetaClass().finvoke(context, self, name, arg0);"
            },
            {
              "step": 32,
              "variableName": "finvoke",
              "startLine": 695,
              "startColumn": 24,
              "endLine": 695,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        return method.call(context, self, entry.sourceModule, name, arg0, arg1, arg2, block);\n    }\n\n    public IRubyObject finvoke(ThreadContext context, IRubyObject self, String name) {\n        CacheEntry entry = searchWithCache(name);\n        DynamicMethod method = entry.method;\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 700,
              "startColumn": 61,
              "endLine": 700,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (shouldCallMethodMissing(method)) {\n            return Helpers.callMethodMissing(context, self, this, method.getVisibility(), name, CallType.FUNCTIONAL, Block.NULL_BLOCK);\n        }\n        return method.call(context, self, entry.sourceModule, name);\n    }"
            },
            {
              "step": 34,
              "variableName": "RubyClass klass",
              "startLine": 173,
              "startColumn": 90,
              "endLine": 173,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return selectMethodMissing(context, klass, visibility, name, callType).call(context, receiver, klass, name, arg0, arg1, arg2, block);\n    }\n\n    public static IRubyObject callMethodMissing(ThreadContext context, IRubyObject self, RubyClass klass, Visibility visibility, String name, CallType callType, Block block) {\n        return selectMethodMissing(context, klass, visibility, name, callType).call(context, self, klass, name, block);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "klass",
              "startLine": 174,
              "startColumn": 100,
              "endLine": 174,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject callMethodMissing(ThreadContext context, IRubyObject self, RubyClass klass, Visibility visibility, String name, CallType callType, Block block) {\n        return selectMethodMissing(context, klass, visibility, name, callType).call(context, self, klass, name, block);\n    }\n\n    public static IRubyObject callMethodMissing(ThreadContext context, IRubyObject receiver, Visibility visibility, String name, CallType callType, Block block) {"
            },
            {
              "step": 36,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 37,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 38,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 39,
              "variableName": "clazz",
              "startLine": 44,
              "startColumn": 90,
              "endLine": 44,
              "endColumn": 95,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());"
            },
            {
              "step": 40,
              "variableName": "RubyModule clazz",
              "startLine": 130,
              "startColumn": 85,
              "endLine": 130,
              "endColumn": 101,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name, null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 41,
              "variableName": "clazz",
              "startLine": 131,
              "startColumn": 89,
              "endLine": 131,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {"
            },
            {
              "step": 42,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 43,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 44,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 45,
              "variableName": "self",
              "startLine": 159,
              "startColumn": 95,
              "endLine": 159,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        break;\n                    case CALL_OP:\n                        if (profile) Profiler.updateCallSite(instr, interpreterContext.getScope(), scopeVersion);\n                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);"
            },
            {
              "step": 46,
              "variableName": "IRubyObject self",
              "startLine": 295,
              "startColumn": 161,
              "endLine": 295,
              "endColumn": 177,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    protected static void processCall(ThreadContext context, Instr instr, Operation operation, DynamicScope currDynScope, StaticScope currScope, Object[] temp, IRubyObject self, String name) {\n        Object result;\n\n        switch(operation) {"
            },
            {
              "step": 47,
              "variableName": "self",
              "startLine": 365,
              "startColumn": 67,
              "endLine": 365,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                break;\n            }\n            case NORESULT_CALL:\n                instr.interpret(context, currScope, currDynScope, self, temp);\n                break;\n            case FRAME_NAME_CALL:\n                setResult(temp, currDynScope, instr, ((FrameNameCallInstr) instr).getFrameName(context, self, name));"
            },
            {
              "step": 48,
              "variableName": "IRubyObject self",
              "startLine": 72,
              "startColumn": 102,
              "endLine": 72,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);"
            },
            {
              "step": 49,
              "variableName": "self",
              "startLine": 74,
              "startColumn": 76,
              "endLine": 74,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "RubyClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 50,
              "variableName": "IRubyObject self",
              "startLine": 45,
              "startColumn": 51,
              "endLine": 45,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n"
            },
            {
              "step": 51,
              "variableName": "self",
              "startLine": 46,
              "startColumn": 16,
              "endLine": 46,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n\n    @Override"
            },
            {
              "step": 52,
              "variableName": "getValue().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 74,
              "startColumn": 47,
              "endLine": 74,
              "endColumn": 112,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "RubyClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 53,
              "variableName": "(IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 74,
              "startColumn": 33,
              "endLine": 74,
              "endColumn": 112,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "RubyClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 54,
              "variableName": "value",
              "startLine": 75,
              "startColumn": 54,
              "endLine": 75,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "RubyClass",
              "code": "    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }\n"
            },
            {
              "step": 55,
              "variableName": "IRubyObject value",
              "startLine": 123,
              "startColumn": 41,
              "endLine": 123,
              "endColumn": 58,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/GlobalVariables.java",
              "type": "RubyClass",
              "code": "        return createIfNotDefined(name);\n    }\n\n    public IRubyObject set(String name, IRubyObject value) {\n        GlobalVariable variable = getVariable(name);\n        IRubyObject result = variable.getAccessor().setValue(value);\n        variable.trace(value);"
            },
            {
              "step": 56,
              "variableName": "value",
              "startLine": 126,
              "startColumn": 24,
              "endLine": 126,
              "endColumn": 29,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/GlobalVariables.java",
              "type": "",
              "code": "    public IRubyObject set(String name, IRubyObject value) {\n        GlobalVariable variable = getVariable(name);\n        IRubyObject result = variable.getAccessor().setValue(value);\n        variable.trace(value);\n        variable.invalidate();\n        return result;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "passwdStruct",
              "startLine": 2190,
              "startColumn": 16,
              "endLine": 2190,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject getPasswdStruct() {\n        return passwdStruct;\n    }\n    public void setPasswdStruct(RubyClass passwdStruct) {\n        this.passwdStruct = passwdStruct;"
            },
            {
              "step": 1,
              "variableName": "context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 47,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 2,
              "variableName": "(RubyClass) context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 3,
              "variableName": "RubyClass structClass",
              "startLine": 485,
              "startColumn": 63,
              "endLine": 485,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @param block\n     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;"
            },
            {
              "step": 4,
              "variableName": "structClass",
              "startLine": 486,
              "startColumn": 53,
              "endLine": 486,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 5,
              "variableName": "RubyClass rubyClass",
              "startLine": 98,
              "startColumn": 46,
              "endLine": 98,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "        this(runtime.getCurrentContext(), rubyClass);\n    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));"
            },
            {
              "step": 6,
              "variableName": "rubyClass",
              "startLine": 99,
              "startColumn": 32,
              "endLine": 99,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 7,
              "variableName": "super(context.runtime, rubyClass);",
              "startLine": 99,
              "startColumn": 9,
              "endLine": 99,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 8,
              "variableName": "new RubyStruct(context, structClass)",
              "startLine": 486,
              "startColumn": 29,
              "endLine": 486,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 9,
              "variableName": "struct",
              "startLine": 488,
              "startColumn": 16,
              "endLine": 488,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }\n\n}"
            },
            {
              "step": 10,
              "variableName": "newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK)",
              "startLine": 149,
              "startColumn": 16,
              "endLine": 149,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 11,
              "variableName": "setupPasswd(context, pw)",
              "startLine": 300,
              "startColumn": 46,
              "endLine": 300,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                try {\n                    Passwd pw;\n                    while((pw = posix.getpwent()) != null) {\n                        block.yield(context, setupPasswd(context, pw));\n                    }\n                } finally {\n                    posix.endpwent();"
            },
            {
              "step": 12,
              "variableName": "IRubyObject value",
              "startLine": 190,
              "startColumn": 53,
              "endLine": 190,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return body.yieldSpecific(context, this, arg0, arg1, arg2);\n    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 191,
              "startColumn": 42,
              "endLine": 191,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "IRubyObject value",
              "startLine": 104,
              "startColumn": 72,
              "endLine": 104,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "value",
              "startLine": 106,
              "startColumn": 68,
              "endLine": 106,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }"
            },
            {
              "step": 16,
              "variableName": "new IRubyObject[] { value }",
              "startLine": 106,
              "startColumn": 48,
              "endLine": 106,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }"
            },
            {
              "step": 17,
              "variableName": "new IRubyObject[] { value }",
              "startLine": 106,
              "startColumn": 48,
              "endLine": 106,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }"
            },
            {
              "step": 18,
              "variableName": "IRubyObject[] args",
              "startLine": 108,
              "startColumn": 75,
              "endLine": 108,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/InterpretedIRBlockBody.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    protected IRubyObject yieldDirect(ThreadContext context, Block block, IRubyObject[] args, IRubyObject self) {\n        ensureInstrsReady(); // so we get debugging output\n        return Interpreter.INTERPRET_BLOCK(context, block, self, fullInterpreterContext, args, block.getBinding().getMethod(), Block.NULL_BLOCK);\n    }"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 110,
              "startColumn": 90,
              "endLine": 110,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/InterpretedIRBlockBody.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "    @Override\n    protected IRubyObject yieldDirect(ThreadContext context, Block block, IRubyObject[] args, IRubyObject self) {\n        ensureInstrsReady(); // so we get debugging output\n        return Interpreter.INTERPRET_BLOCK(context, block, self, fullInterpreterContext, args, block.getBinding().getMethod(), Block.NULL_BLOCK);\n    }\n\n    // TODO: Duplicated in InterpretedIRBlockBody"
            },
            {
              "step": 20,
              "variableName": "IRubyObject[] args",
              "startLine": 117,
              "startColumn": 36,
              "endLine": 117,
              "endColumn": 54,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_BLOCK(ThreadContext context, Block block, IRubyObject self,\n            InterpreterContext ic, IRubyObject[] args, String name, Block blockArg) {\n        try {\n            ThreadContext.pushBacktrace(context, name, ic.getFileName(), ic.getLine());\n            return ic.getEngine().interpret(context, block, self, ic, null, name, args, blockArg);"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 120,
              "startColumn": 83,
              "endLine": 120,
              "endColumn": 87,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "            InterpreterContext ic, IRubyObject[] args, String name, Block blockArg) {\n        try {\n            ThreadContext.pushBacktrace(context, name, ic.getFileName(), ic.getLine());\n            return ic.getEngine().interpret(context, block, self, ic, null, name, args, blockArg);\n        } finally {\n            ThreadContext.popBacktrace(context);\n        }"
            },
            {
              "step": 22,
              "variableName": "IRubyObject[] args",
              "startLine": 111,
              "startColumn": 55,
              "endLine": 111,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();\n        Object[]  temp      = interpreterContext.allocateTemporaryVariables();\n        double[]  floats    = interpreterContext.allocateTemporaryFloatVariables();"
            },
            {
              "step": 23,
              "variableName": "args",
              "startLine": 190,
              "startColumn": 91,
              "endLine": 190,
              "endColumn": 95,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "                            args = IRRuntimeHelpers.prepareSingleBlockArgs(context, block, args);\n                            break;\n                        case PREPARE_FIXED_BLOCK_ARGS:\n                            args = IRRuntimeHelpers.prepareFixedBlockArgs(context, block, args);\n                            break;\n                        case PREPARE_BLOCK_ARGS:\n                            args = IRRuntimeHelpers.prepareBlockArgs(context, block, args, usesKeywords, ruby2Keywords);"
            },
            {
              "step": 24,
              "variableName": "IRubyObject[] args",
              "startLine": 2294,
              "startColumn": 91,
              "endLine": 2294,
              "endColumn": 109,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "    }\n\n    @Interp @JIT\n    public static IRubyObject[] prepareFixedBlockArgs(ThreadContext context, Block block, IRubyObject[] args) {\n        if (args == null) args = IRubyObject.NULL_ARRAY;\n\n        switch (block.type) {"
            },
            {
              "step": 25,
              "variableName": "args",
              "startLine": 2306,
              "startColumn": 39,
              "endLine": 2306,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "            default:\n                // If we need more than 1 reqd arg, convert a single value to an array if possible.\n                // If there are insufficient args, ReceivePreReqdInstr will return nil\n                return toAry(context, args);\n        }\n    }\n"
            },
            {
              "step": 26,
              "variableName": "IRubyObject[] args",
              "startLine": 2178,
              "startColumn": 62,
              "endLine": 2178,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "        return asFixnum(context, i);\n    }\n\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject[] args) {\n        IRubyObject ary;\n        if (args.length == 1 && (ary = Helpers.aryOrToAry(context, args[0])) != context.nil) {\n            if (!(ary instanceof RubyArray)) throw typeError(context, \"\", args[0], \"#to_ary should return Array\");"
            },
            {
              "step": 27,
              "variableName": "args",
              "startLine": 2180,
              "startColumn": 68,
              "endLine": 2180,
              "endColumn": 72,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "IRubyObject[] [[], metaClass] : RubyClass",
              "code": "\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject[] args) {\n        IRubyObject ary;\n        if (args.length == 1 && (ary = Helpers.aryOrToAry(context, args[0])) != context.nil) {\n            if (!(ary instanceof RubyArray)) throw typeError(context, \"\", args[0], \"#to_ary should return Array\");\n            args = ((RubyArray) ary).toJavaArray(context);\n        }"
            },
            {
              "step": 28,
              "variableName": "args[0]",
              "startLine": 2180,
              "startColumn": 68,
              "endLine": 2180,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    public static IRubyObject[] toAry(ThreadContext context, IRubyObject[] args) {\n        IRubyObject ary;\n        if (args.length == 1 && (ary = Helpers.aryOrToAry(context, args[0])) != context.nil) {\n            if (!(ary instanceof RubyArray)) throw typeError(context, \"\", args[0], \"#to_ary should return Array\");\n            args = ((RubyArray) ary).toJavaArray(context);\n        }"
            },
            {
              "step": 29,
              "variableName": "IRubyObject value",
              "startLine": 2000,
              "startColumn": 65,
              "endLine": 2000,
              "endColumn": 82,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public static IRubyObject aryOrToAry(ThreadContext context, IRubyObject value) {\n        if (value instanceof RubyArray) return value;\n\n        return respondsTo_to_ary(value) ?"
            },
            {
              "step": 30,
              "variableName": "value",
              "startLine": 2003,
              "startColumn": 34,
              "endLine": 2003,
              "endColumn": 39,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static IRubyObject aryOrToAry(ThreadContext context, IRubyObject value) {\n        if (value instanceof RubyArray) return value;\n\n        return respondsTo_to_ary(value) ?\n                TypeConverter.convertToTypeUnchecked(context, value, arrayClass(context), \"to_ary\", false) :\n                context.nil;\n    }"
            },
            {
              "step": 31,
              "variableName": "IRubyObject value",
              "startLine": 1990,
              "startColumn": 46,
              "endLine": 1990,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                newArray(context, value);\n    }\n\n    private static boolean respondsTo_to_ary(IRubyObject value) {\n        try {\n            return value.respondsTo(\"to_ary\");\n        } catch (NoMethodError e) {"
            },
            {
              "step": 32,
              "variableName": "value",
              "startLine": 1992,
              "startColumn": 20,
              "endLine": 1992,
              "endColumn": 25,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    private static boolean respondsTo_to_ary(IRubyObject value) {\n        try {\n            return value.respondsTo(\"to_ary\");\n        } catch (NoMethodError e) {\n            // A non-existent respond_to? should still end up calling method_missing but if m_m does not\n            // handle it then we should not raise."
            },
            {
              "step": 33,
              "variableName": "respondsTo",
              "startLine": 590,
              "startColumn": 26,
              "endLine": 590,
              "endColumn": 36,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * haven't been overridden.\n     */\n    @Override\n    public final boolean respondsTo(String name) {\n        final Ruby runtime = metaClass.runtime;\n        final CacheEntry entry = metaClass.searchWithCache(\"respond_to?\");\n        final DynamicMethod respondTo = entry.method;"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 606,
              "startColumn": 66,
              "endLine": 606,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        // respond_to? or respond_to_missing? is not defined, so we must dispatch to trigger method_missing\n        if ( respondTo.isUndefined() ) {\n            return sites(context).respond_to.call(context, this, this, mname).isTrue();\n        } else {\n            return respondTo.callRespondTo(context, this, \"respond_to?\", entry.sourceModule, mname);\n        }"
            },
            {
              "step": 35,
              "variableName": "IRubyObject self",
              "startLine": 237,
              "startColumn": 72,
              "endLine": 237,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 36,
              "variableName": "self",
              "startLine": 238,
              "startColumn": 43,
              "endLine": 238,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {"
            },
            {
              "step": 37,
              "variableName": "IRubyObject arg",
              "startLine": 496,
              "startColumn": 42,
              "endLine": 496,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n"
            },
            {
              "step": 38,
              "variableName": "(RubyBasicObject) arg",
              "startLine": 497,
              "startColumn": 17,
              "endLine": 497,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "((RubyBasicObject) arg).metaClass",
              "startLine": 497,
              "startColumn": 16,
              "endLine": 497,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "getMetaClass(self)",
              "startLine": 238,
              "startColumn": 30,
              "endLine": 238,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {"
            },
            {
              "step": 41,
              "variableName": "selfType",
              "startLine": 244,
              "startColumn": 52,
              "endLine": 244,
              "endColumn": 60,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName, arg1);\n        }\n        return cacheAndCall(context, caller, self, selfType, arg1);\n    }\n\n    public IRubyObject fcall(ThreadContext context, IRubyObject self, IRubyObject arg1) {"
            },
            {
              "step": 42,
              "variableName": "RubyClass selfType",
              "startLine": 464,
              "startColumn": 101,
              "endLine": 464,
              "endColumn": 119,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        return entry.method.call(context, self, entry.sourceModule, methodName, block);\n    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }"
            },
            {
              "step": 43,
              "variableName": "selfType",
              "startLine": 465,
              "startColumn": 55,
              "endLine": 465,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }\n"
            },
            {
              "step": 44,
              "variableName": "RubyClass selfType",
              "startLine": 494,
              "startColumn": 63,
              "endLine": 494,
              "endColumn": 81,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        return entry.method.call(context, self, entry.sourceModule, methodName, arg1, arg2, arg3, block);\n    }\n\n    private CacheEntry populateCacheEntry(IRubyObject caller, RubyClass selfType, ThreadContext context, IRubyObject self) {\n        CacheEntry entry = selfType.searchWithCache(methodName);\n        DynamicMethod method = entry.method;\n"
            },
            {
              "step": 45,
              "variableName": "selfType",
              "startLine": 499,
              "startColumn": 63,
              "endLine": 499,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (methodMissing(method, caller)) {\n            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n        }\n\n        entry = setCache(entry, self);"
            },
            {
              "step": 46,
              "variableName": "RubyClass selfClass",
              "startLine": 594,
              "startColumn": 78,
              "endLine": 594,
              "endColumn": 97,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return (int) length;\n    }\n\n    public static CacheEntry createMethodMissingEntry(ThreadContext context, RubyClass selfClass, CallType callType, Visibility visibility, int token, String methodName) {\n        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,"
            },
            {
              "step": 47,
              "variableName": "selfClass",
              "startLine": 598,
              "startColumn": 17,
              "endLine": 598,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,\n                selfClass,\n                token);\n    }\n"
            },
            {
              "step": 48,
              "variableName": "RubyModule source",
              "startLine": 20,
              "startColumn": 45,
              "endLine": 20,
              "endColumn": 62,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "RubyClass",
              "code": "        this.token = token;\n    }\n\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;"
            },
            {
              "step": 49,
              "variableName": "source",
              "startLine": 22,
              "startColumn": 29,
              "endLine": 22,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "RubyClass",
              "code": "\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;\n    }\n"
            },
            {
              "step": 50,
              "variableName": "this",
              "startLine": 22,
              "startColumn": 9,
              "endLine": 22,
              "endColumn": 13,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;\n    }\n"
            },
            {
              "step": 51,
              "variableName": "new Cac",
              "startLine": 596,
              "startColumn": 16,
              "endLine": 599,
              "endColumn": 23,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    public static CacheEntry createMethodMissingEntry(ThreadContext context, RubyClass selfClass, CallType callType, Visibility visibility, int token, String methodName) {\n        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,\n                selfClass,\n                token);"
            },
            {
              "step": 52,
              "variableName": "Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName)",
              "startLine": 499,
              "startColumn": 21,
              "endLine": 499,
              "endColumn": 131,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (methodMissing(method, caller)) {\n            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n        }\n\n        entry = setCache(entry, self);"
            },
            {
              "step": 53,
              "variableName": "entry",
              "startLine": 502,
              "startColumn": 26,
              "endLine": 502,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n        }\n\n        entry = setCache(entry, self);\n        return entry;\n    }\n"
            },
            {
              "step": 54,
              "variableName": "final CacheEntry entry",
              "startLine": 37,
              "startColumn": 35,
              "endLine": 37,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/BitAndCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "    }\n\n    @Override\n    protected CacheEntry setCache(final CacheEntry entry, final IRubyObject self) {\n        if (self instanceof RubyFixnum && entry.method.isBuiltin()) {\n            return cache = new FixnumEntry(entry); // tagged entry - do isBuiltin check once\n        }"
            },
            {
              "step": 55,
              "variableName": "cache = entry",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 29,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/BitAndCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        if (self instanceof RubyFixnum && entry.method.isBuiltin()) {\n            return cache = new FixnumEntry(entry); // tagged entry - do isBuiltin check once\n        }\n        return cache = entry;\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "setCache(entry, self)",
              "startLine": 502,
              "startColumn": 17,
              "endLine": 502,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n        }\n\n        entry = setCache(entry, self);\n        return entry;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "entry",
              "startLine": 503,
              "startColumn": 16,
              "endLine": 503,
              "endColumn": 21,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        }\n\n        entry = setCache(entry, self);\n        return entry;\n    }\n\n    protected boolean methodMissing(DynamicMethod method, IRubyObject caller) {"
            },
            {
              "step": 58,
              "variableName": "populateCacheEntry(caller, selfType, context, self)",
              "startLine": 465,
              "startColumn": 28,
              "endLine": 465,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "entry",
              "startLine": 466,
              "startColumn": 49,
              "endLine": 466,
              "endColumn": 54,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg, Block block) {"
            },
            {
              "step": 60,
              "variableName": "entry.sourceModule",
              "startLine": 466,
              "startColumn": 49,
              "endLine": 466,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg) {\n        CacheEntry entry = populateCacheEntry(caller, selfType, context, self);\n        return entry.method.call(context, self, entry.sourceModule, methodName, arg);\n    }\n\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg, Block block) {"
            },
            {
              "step": 61,
              "variableName": "RubyModule clazz",
              "startLine": 77,
              "startColumn": 70,
              "endLine": 77,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "clazz",
              "startLine": 78,
              "startColumn": 36,
              "endLine": 78,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 63,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 64,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 65,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 66,
              "variableName": "clazz",
              "startLine": 45,
              "startColumn": 88,
              "endLine": 45,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());\n        }"
            },
            {
              "step": 67,
              "variableName": "RubyModule clazz",
              "startLine": 126,
              "startColumn": 84,
              "endLine": 126,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    public static IRubyObject INTERPRET_CLASS(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name, null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 68,
              "variableName": "clazz",
              "startLine": 127,
              "startColumn": 89,
              "endLine": 127,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_CLASS(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name, null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {"
            },
            {
              "step": 69,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 70,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 71,
              "variableName": "IRubyObject self",
              "startLine": 24,
              "startColumn": 70,
              "endLine": 24,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/StartupInterpreterEngine.java",
              "type": "RubyClass",
              "code": " * This interpreter is meant to interpret the instructions generated directly from IRBuild.\n */\npublic class StartupInterpreterEngine extends InterpreterEngine {\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                 InterpreterContext interpreterContext, RubyModule implClass,\n                                 String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 72,
              "variableName": "self",
              "startLine": 66,
              "startColumn": 95,
              "endLine": 66,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/StartupInterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        break;\n                    case CALL_OP:\n                        if (profile) Profiler.updateCallSite(instr, interpreterContext.getScope(), scopeVersion);\n                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);"
            },
            {
              "step": 73,
              "variableName": "IRubyObject self",
              "startLine": 295,
              "startColumn": 161,
              "endLine": 295,
              "endColumn": 177,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    protected static void processCall(ThreadContext context, Instr instr, Operation operation, DynamicScope currDynScope, StaticScope currScope, Object[] temp, IRubyObject self, String name) {\n        Object result;\n\n        switch(operation) {"
            },
            {
              "step": 74,
              "variableName": "self",
              "startLine": 372,
              "startColumn": 76,
              "endLine": 372,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                break;\n            case CALL:\n            default:\n                result = instr.interpret(context, currScope, currDynScope, self, temp);\n                setResult(temp, currDynScope, instr, result);\n                break;\n        }"
            },
            {
              "step": 75,
              "variableName": "IRubyObject self",
              "startLine": 57,
              "startColumn": 102,
              "endLine": 57,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/DefineInstanceMethodInstr.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRRuntimeHelpers.defInterpretedInstanceMethod(context, method, currDynScope, self);\n\n        return null; // unused; symbol is propagated"
            },
            {
              "step": 76,
              "variableName": "self",
              "startLine": 58,
              "startColumn": 86,
              "endLine": 58,
              "endColumn": 90,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/DefineInstanceMethodInstr.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRRuntimeHelpers.defInterpretedInstanceMethod(context, method, currDynScope, self);\n\n        return null; // unused; symbol is propagated\n    }"
            },
            {
              "step": 77,
              "variableName": "IRubyObject self",
              "startLine": 1886,
              "startColumn": 119,
              "endLine": 1886,
              "endColumn": 135,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Interp\n    public static void defInterpretedInstanceMethod(ThreadContext context, IRScope method, DynamicScope currDynScope, IRubyObject self) {\n        context.setLine(method.getLine());\n        RubySymbol methodName = method.getName();\n        RubyModule rubyClass = findInstanceMethodContainer(context, currDynScope, self);"
            },
            {
              "step": 78,
              "variableName": "self",
              "startLine": 1889,
              "startColumn": 83,
              "endLine": 1889,
              "endColumn": 87,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    public static void defInterpretedInstanceMethod(ThreadContext context, IRScope method, DynamicScope currDynScope, IRubyObject self) {\n        context.setLine(method.getLine());\n        RubySymbol methodName = method.getName();\n        RubyModule rubyClass = findInstanceMethodContainer(context, currDynScope, self);\n\n        Visibility currVisibility = context.getCurrentVisibility();\n        Visibility newVisibility = Helpers.performNormalMethodChecksAndDetermineVisibility(context, rubyClass, methodName, currVisibility);"
            },
            {
              "step": 79,
              "variableName": "IRubyObject self",
              "startLine": 1198,
              "startColumn": 108,
              "endLine": 1198,
              "endColumn": 124,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    public static RubyModule findInstanceMethodContainer(ThreadContext context, DynamicScope currDynScope, IRubyObject self) {\n        boolean inBindingEval = currDynScope.inBindingEval();\n\n        // Top-level-scripts are special but, not if binding-evals are in force!"
            },
            {
              "step": 80,
              "variableName": "(RubyModule) self",
              "startLine": 1236,
              "startColumn": 73,
              "endLine": 1236,
              "endColumn": 90,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "                //     end\n                //   end\n                // -------------\n                case MODULE_EVAL  : return self instanceof RubyModule ? (RubyModule) self : self.getMetaClass();\n                case INSTANCE_EVAL: return self.singletonClass(context);\n                case BINDING_EVAL : ds = ds.getParentScope(); break;\n                case NONE:"
            },
            {
              "step": 81,
              "variableName": "self instanceof RubyModule ? (RubyModule) self : self.getMetaClass()",
              "startLine": 1236,
              "startColumn": 44,
              "endLine": 1236,
              "endColumn": 112,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "... : RubyClass",
              "code": "                //     end\n                //   end\n                // -------------\n                case MODULE_EVAL  : return self instanceof RubyModule ? (RubyModule) self : self.getMetaClass();\n                case INSTANCE_EVAL: return self.singletonClass(context);\n                case BINDING_EVAL : ds = ds.getParentScope(); break;\n                case NONE:"
            },
            {
              "step": 82,
              "variableName": "findInstanceMethodContainer(context, currDynScope, self)",
              "startLine": 1889,
              "startColumn": 32,
              "endLine": 1889,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    public static void defInterpretedInstanceMethod(ThreadContext context, IRScope method, DynamicScope currDynScope, IRubyObject self) {\n        context.setLine(method.getLine());\n        RubySymbol methodName = method.getName();\n        RubyModule rubyClass = findInstanceMethodContainer(context, currDynScope, self);\n\n        Visibility currVisibility = context.getCurrentVisibility();\n        Visibility newVisibility = Helpers.performNormalMethodChecksAndDetermineVisibility(context, rubyClass, methodName, currVisibility);"
            },
            {
              "step": 83,
              "variableName": "rubyClass",
              "startLine": 1899,
              "startColumn": 35,
              "endLine": 1899,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        DynamicMethod newMethod = instanceConfig(context).getCompileMode() == RubyInstanceConfig.CompileMode.OFF ?\n            new InterpretedIRMethod(method, newVisibility, rubyClass) : new MixedModeIRMethod(method, newVisibility, rubyClass);\n\n        Helpers.addInstanceMethod(rubyClass, methodName, newMethod, currVisibility, context);\n    }\n\n    @JIT"
            },
            {
              "step": 84,
              "variableName": "RubyModule containingClass",
              "startLine": 2076,
              "startColumn": 48,
              "endLine": 2076,
              "endColumn": 74,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return addInstanceMethod(containingClass, symbol, method, visibility, context);\n    }\n\n    public static RubySymbol addInstanceMethod(RubyModule containingClass, RubySymbol symbol, DynamicMethod method, Visibility visibility, ThreadContext context) {\n        containingClass.addMethod(context, symbol.idString(), method);\n\n        if (!containingClass.isRefinement()) callNormalMethodHook(containingClass, context, symbol);"
            },
            {
              "step": 85,
              "variableName": "containingClass",
              "startLine": 2077,
              "startColumn": 9,
              "endLine": 2077,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubySymbol addInstanceMethod(RubyModule containingClass, RubySymbol symbol, DynamicMethod method, Visibility visibility, ThreadContext context) {\n        containingClass.addMethod(context, symbol.idString(), method);\n\n        if (!containingClass.isRefinement()) callNormalMethodHook(containingClass, context, symbol);\n        if (visibility == Visibility.MODULE_FUNCTION) addModuleMethod(containingClass, method, context, symbol);"
            },
            {
              "step": 86,
              "variableName": "addMethod",
              "startLine": 156,
              "startColumn": 17,
              "endLine": 156,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/PrependedModule.java",
              "type": "PrependedModule",
              "code": "    }\n\n    @Override\n    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        super.addMethod(context, id, method);\n        method.setDefinedClass(origin);\n    }"
            },
            {
              "step": 87,
              "variableName": "super",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 14,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/PrependedModule.java",
              "type": "PrependedModule",
              "code": "\n    @Override\n    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        super.addMethod(context, id, method);\n        method.setDefinedClass(origin);\n    }\n"
            },
            {
              "step": 88,
              "variableName": "addMethod",
              "startLine": 1897,
              "startColumn": 17,
              "endLine": 1897,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "        addMethod(getCurrentContext(), id, method);\n    }\n\n    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        if (this instanceof MetaClass) {\n            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();"
            },
            {
              "step": 89,
              "variableName": "testFrozen(frozenType())",
              "startLine": 1902,
              "startColumn": 13,
              "endLine": 1902,
              "endColumn": 37,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "PrependedModule",
              "code": "            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();\n        } else {\n            testFrozen(frozenType());\n        }\n\n        RubyModule methodLocation = this.methodLocation;"
            },
            {
              "step": 90,
              "variableName": "testFrozen",
              "startLine": 293,
              "startColumn": 25,
              "endLine": 293,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "PrependedModule",
              "code": "     * throw an exception based on the message.\n     * @param message is frozen\n     */\n   protected final void testFrozen(String message) {\n       if (isFrozen()) {\n           throw getRuntime().newFrozenError(message, this);\n       }"
            },
            {
              "step": 91,
              "variableName": "this",
              "startLine": 295,
              "startColumn": 55,
              "endLine": 295,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "PrependedModule",
              "code": "     */\n   protected final void testFrozen(String message) {\n       if (isFrozen()) {\n           throw getRuntime().newFrozenError(message, this);\n       }\n   }\n"
            },
            {
              "step": 92,
              "variableName": "IRubyObject receiver",
              "startLine": 4259,
              "startColumn": 61,
              "endLine": 4259,
              "endColumn": 81,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "PrependedModule",
              "code": "        return loadError;\n    }\n\n    public RaiseException newFrozenError(String objectType, IRubyObject receiver) {\n        ThreadContext context = getCurrentContext();\n\n        IRubyObject inspected = context.safeRecurse(Ruby::inspectFrozenObject, this, receiver, \"inspect\", true);"
            },
            {
              "step": 93,
              "variableName": "receiver",
              "startLine": 4262,
              "startColumn": 86,
              "endLine": 4262,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "PrependedModule",
              "code": "    public RaiseException newFrozenError(String objectType, IRubyObject receiver) {\n        ThreadContext context = getCurrentContext();\n\n        IRubyObject inspected = context.safeRecurse(Ruby::inspectFrozenObject, this, receiver, \"inspect\", true);\n        String message = \"can't modify frozen \" + objectType + \": \" + inspected.convertToString().toString();\n\n        return newFrozenError(receiver, message);"
            },
            {
              "step": 94,
              "variableName": "IRubyObject obj",
              "startLine": 1431,
              "startColumn": 78,
              "endLine": 1431,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "PrependedModule",
              "code": "        IRubyObject call(ThreadContext context, T state, IRubyObject obj, boolean recur);\n    }\n\n    public <T> IRubyObject safeRecurse(RecursiveFunctionEx<T> func, T state, IRubyObject obj, String name, boolean outer) {\n        Map<IRubyObject, IRubyObject> guards = safeRecurseGetGuards(name);\n\n        boolean outermost = outer && !guards.containsKey(NEVER);"
            },
            {
              "step": 95,
              "variableName": "obj",
              "startLine": 1446,
              "startColumn": 54,
              "endLine": 1446,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "PrependedModule",
              "code": "            if (outermost) {\n                return safeRecurseOutermost(func, state, obj, guards);\n            } else {\n                return safeRecurseInner(func, state, obj, guards);\n            }\n        }\n    }"
            },
            {
              "step": 96,
              "variableName": "IRubyObject obj",
              "startLine": 1483,
              "startColumn": 84,
              "endLine": 1483,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "PrependedModule",
              "code": "        return guards;\n    }\n\n    private <T> IRubyObject safeRecurseInner(RecursiveFunctionEx<T> func, T state, IRubyObject obj, Map<IRubyObject, IRubyObject> guards) {\n        try {\n            guards.put(obj, obj);\n            return func.call(this, state, obj, false);"
            },
            {
              "step": 97,
              "variableName": "obj",
              "startLine": 1486,
              "startColumn": 43,
              "endLine": 1486,
              "endColumn": 46,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "PrependedModule",
              "code": "    private <T> IRubyObject safeRecurseInner(RecursiveFunctionEx<T> func, T state, IRubyObject obj, Map<IRubyObject, IRubyObject> guards) {\n        try {\n            guards.put(obj, obj);\n            return func.call(this, state, obj, false);\n        } finally {\n            guards.remove(obj);\n        }"
            },
            {
              "step": 98,
              "variableName": "self",
              "startLine": 145,
              "startColumn": 28,
              "endLine": 145,
              "endColumn": 32,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyComparable.java",
              "type": "PrependedModule",
              "code": "        if (recv == other) return context.tru;\n\n        var result = context.safeRecurse(\n                (ctx, obj, self, recur) -> recur ? ctx.nil : sites(ctx).op_cmp.call(ctx, self, self, obj),\n                other, recv, \"<=>\", true);\n\n        // This is only to prevent throwing exceptions by cmperr - it has poor performance"
            },
            {
              "step": 99,
              "variableName": "self",
              "startLine": 145,
              "startColumn": 96,
              "endLine": 145,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyComparable.java",
              "type": "PrependedModule",
              "code": "        if (recv == other) return context.tru;\n\n        var result = context.safeRecurse(\n                (ctx, obj, self, recur) -> recur ? ctx.nil : sites(ctx).op_cmp.call(ctx, self, self, obj),\n                other, recv, \"<=>\", true);\n\n        // This is only to prevent throwing exceptions by cmperr - it has poor performance"
            },
            {
              "step": 100,
              "variableName": "IRubyObject self",
              "startLine": 237,
              "startColumn": 72,
              "endLine": 237,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "PrependedModule",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 101,
              "variableName": "self",
              "startLine": 242,
              "startColumn": 47,
              "endLine": 242,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "PrependedModule",
              "code": "        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName, arg1);\n        }\n        return cacheAndCall(context, caller, self, selfType, arg1);\n    }"
            },
            {
              "step": 102,
              "variableName": "IRubyObject self",
              "startLine": 145,
              "startColumn": 52,
              "endLine": 145,
              "endColumn": 68,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRMethod.java",
              "type": "PrependedModule",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        if (callCount >= 0) promoteToFullBuild(context);"
            },
            {
              "step": 103,
              "variableName": "self",
              "startLine": 151,
              "startColumn": 69,
              "endLine": 151,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRMethod.java",
              "type": "PrependedModule",
              "code": "        if (callCount >= 0) promoteToFullBuild(context);\n\n        ensureInstrsReady();\n        return Interpreter.INTERPRET_METHOD(context, method, clazz, self, name, arg0, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 104,
              "variableName": "IRubyObject self",
              "startLine": 149,
              "startColumn": 48,
              "endLine": 149,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "PrependedModule",
              "code": "    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,\n                                               IRubyObject self, String name, IRubyObject arg0, Block block) {\n        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0), block);\n    }\n"
            },
            {
              "step": 105,
              "variableName": "self",
              "startLine": 150,
              "startColumn": 93,
              "endLine": 150,
              "endColumn": 97,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "PrependedModule",
              "code": "\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,\n                                               IRubyObject self, String name, IRubyObject arg0, Block block) {\n        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0), block);\n    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,"
            },
            {
              "step": 106,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "PrependedModule",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 107,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "PrependedModule",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 108,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "PrependedModule",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 109,
              "variableName": "self",
              "startLine": 159,
              "startColumn": 95,
              "endLine": 159,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "PrependedModule",
              "code": "                        break;\n                    case CALL_OP:\n                        if (profile) Profiler.updateCallSite(instr, interpreterContext.getScope(), scopeVersion);\n                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);"
            },
            {
              "step": 110,
              "variableName": "IRubyObject self",
              "startLine": 295,
              "startColumn": 161,
              "endLine": 295,
              "endColumn": 177,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "PrependedModule",
              "code": "        }\n    }\n\n    protected static void processCall(ThreadContext context, Instr instr, Operation operation, DynamicScope currDynScope, StaticScope currScope, Object[] temp, IRubyObject self, String name) {\n        Object result;\n\n        switch(operation) {"
            },
            {
              "step": 111,
              "variableName": "self",
              "startLine": 365,
              "startColumn": 67,
              "endLine": 365,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "PrependedModule",
              "code": "                break;\n            }\n            case NORESULT_CALL:\n                instr.interpret(context, currScope, currDynScope, self, temp);\n                break;\n            case FRAME_NAME_CALL:\n                setResult(temp, currDynScope, instr, ((FrameNameCallInstr) instr).getFrameName(context, self, name));"
            },
            {
              "step": 112,
              "variableName": "IRubyObject self",
              "startLine": 72,
              "startColumn": 102,
              "endLine": 72,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "PrependedModule",
              "code": "    }\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);"
            },
            {
              "step": 113,
              "variableName": "self",
              "startLine": 74,
              "startColumn": 76,
              "endLine": 74,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "PrependedModule",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 114,
              "variableName": "IRubyObject self",
              "startLine": 45,
              "startColumn": 51,
              "endLine": 45,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "PrependedModule",
              "code": "    }\n\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n"
            },
            {
              "step": 115,
              "variableName": "self",
              "startLine": 46,
              "startColumn": 16,
              "endLine": 46,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "PrependedModule",
              "code": "\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n\n    @Override"
            },
            {
              "step": 116,
              "variableName": "getValue().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 74,
              "startColumn": 47,
              "endLine": 74,
              "endColumn": 112,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "PrependedModule",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 117,
              "variableName": "(IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 74,
              "startColumn": 33,
              "endLine": 74,
              "endColumn": 112,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "PrependedModule",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 118,
              "variableName": "value",
              "startLine": 75,
              "startColumn": 54,
              "endLine": 75,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "PrependedModule",
              "code": "    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }\n"
            },
            {
              "step": 119,
              "variableName": "IRubyObject value",
              "startLine": 123,
              "startColumn": 41,
              "endLine": 123,
              "endColumn": 58,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/GlobalVariables.java",
              "type": "PrependedModule",
              "code": "        return createIfNotDefined(name);\n    }\n\n    public IRubyObject set(String name, IRubyObject value) {\n        GlobalVariable variable = getVariable(name);\n        IRubyObject result = variable.getAccessor().setValue(value);\n        variable.trace(value);"
            },
            {
              "step": 120,
              "variableName": "value",
              "startLine": 126,
              "startColumn": 24,
              "endLine": 126,
              "endColumn": 29,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/GlobalVariables.java",
              "type": "",
              "code": "    public IRubyObject set(String name, IRubyObject value) {\n        GlobalVariable variable = getVariable(name);\n        IRubyObject result = variable.getAccessor().setValue(value);\n        variable.trace(value);\n        variable.invalidate();\n        return result;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "passwdStruct",
              "startLine": 2190,
              "startColumn": 16,
              "endLine": 2190,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject getPasswdStruct() {\n        return passwdStruct;\n    }\n    public void setPasswdStruct(RubyClass passwdStruct) {\n        this.passwdStruct = passwdStruct;"
            },
            {
              "step": 1,
              "variableName": "context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 47,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 2,
              "variableName": "(RubyClass) context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 3,
              "variableName": "RubyClass structClass",
              "startLine": 485,
              "startColumn": 63,
              "endLine": 485,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @param block\n     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;"
            },
            {
              "step": 4,
              "variableName": "structClass",
              "startLine": 486,
              "startColumn": 53,
              "endLine": 486,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 5,
              "variableName": "RubyClass rubyClass",
              "startLine": 98,
              "startColumn": 46,
              "endLine": 98,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "        this(runtime.getCurrentContext(), rubyClass);\n    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));"
            },
            {
              "step": 6,
              "variableName": "rubyClass",
              "startLine": 99,
              "startColumn": 32,
              "endLine": 99,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 7,
              "variableName": "super(context.runtime, rubyClass);",
              "startLine": 99,
              "startColumn": 9,
              "endLine": 99,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 8,
              "variableName": "new RubyStruct(context, structClass)",
              "startLine": 486,
              "startColumn": 29,
              "endLine": 486,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 9,
              "variableName": "struct",
              "startLine": 488,
              "startColumn": 16,
              "endLine": 488,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }\n\n}"
            },
            {
              "step": 10,
              "variableName": "newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK)",
              "startLine": 149,
              "startColumn": 16,
              "endLine": 149,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 11,
              "variableName": "setupPasswd(context, pw)",
              "startLine": 300,
              "startColumn": 46,
              "endLine": 300,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                try {\n                    Passwd pw;\n                    while((pw = posix.getpwent()) != null) {\n                        block.yield(context, setupPasswd(context, pw));\n                    }\n                } finally {\n                    posix.endpwent();"
            },
            {
              "step": 12,
              "variableName": "IRubyObject value",
              "startLine": 190,
              "startColumn": 53,
              "endLine": 190,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return body.yieldSpecific(context, this, arg0, arg1, arg2);\n    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 191,
              "startColumn": 42,
              "endLine": 191,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "IRubyObject value",
              "startLine": 104,
              "startColumn": 72,
              "endLine": 104,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "value",
              "startLine": 108,
              "startColumn": 44,
              "endLine": 108,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "IRubyObject value",
              "startLine": 96,
              "startColumn": 71,
              "endLine": 96,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/CallBlock.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    protected IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        return callback.call(context, value, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "value",
              "startLine": 97,
              "startColumn": 39,
              "endLine": 97,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/CallBlock.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    @Override\n    protected IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        return callback.call(context, value, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "IRubyObject arg",
              "startLine": 553,
              "startColumn": 60,
              "endLine": 553,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyEnumerable.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                    return call(ctx, packEnumValues(ctx, args), unused);\n                }\n                @Override\n                public IRubyObject call(ThreadContext ctx, IRubyObject arg, Block unused) {\n                    IRubyObject converted = arg instanceof RubySymbol ? arg : TypeConverter.checkStringType(ctx.runtime, arg);\n\n                    if (((RubyRegexp) pattern).match_p(ctx, converted).isTrue() == isPresent) {"
            },
            {
              "step": 19,
              "variableName": "arg",
              "startLine": 554,
              "startColumn": 122,
              "endLine": 554,
              "endColumn": 125,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyEnumerable.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                }\n                @Override\n                public IRubyObject call(ThreadContext ctx, IRubyObject arg, Block unused) {\n                    IRubyObject converted = arg instanceof RubySymbol ? arg : TypeConverter.checkStringType(ctx.runtime, arg);\n\n                    if (((RubyRegexp) pattern).match_p(ctx, converted).isTrue() == isPresent) {\n                        synchronized (result) { result.append(context, arg); }"
            },
            {
              "step": 20,
              "variableName": "IRubyObject obj",
              "startLine": 332,
              "startColumn": 61,
              "endLine": 332,
              "endColumn": 76,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }"
            },
            {
              "step": 21,
              "variableName": "obj",
              "startLine": 334,
              "startColumn": 53,
              "endLine": 334,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }\n\n    // rb_check_string_type"
            },
            {
              "step": 22,
              "variableName": "IRubyObject obj",
              "startLine": 206,
              "startColumn": 54,
              "endLine": 206,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param convertMethod is the method to be called to try and convert to targeType\n     * @return the converted value\n     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;"
            },
            {
              "step": 23,
              "variableName": "obj",
              "startLine": 208,
              "startColumn": 41,
              "endLine": 208,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;\n        if (!target.isInstance(val)) {\n            throw newTypeErrorMismatch(obj.getRuntime(), obj, target, convertMethod, val);"
            },
            {
              "step": 24,
              "variableName": "IRubyObject obj",
              "startLine": 82,
              "startColumn": 45,
              "endLine": 82,
              "endColumn": 60,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param raise will throw an Error if conversion does not work\n     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "obj",
              "startLine": 83,
              "startColumn": 76,
              "endLine": 83,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {"
            },
            {
              "step": 26,
              "variableName": "IRubyObject obj",
              "startLine": 86,
              "startColumn": 68,
              "endLine": 86,
              "endColumn": 83,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }"
            },
            {
              "step": 27,
              "variableName": "obj",
              "startLine": 87,
              "startColumn": 25,
              "endLine": 87,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n"
            },
            {
              "step": 28,
              "variableName": "checkCallMethod",
              "startLine": 354,
              "startColumn": 30,
              "endLine": 354,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * method missing exists. Otherwise returns null. 1.9: rb_check_funcall\n     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 355,
              "startColumn": 47,
              "endLine": 355,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "IRubyObject self",
              "startLine": 831,
              "startColumn": 68,
              "endLine": 831,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "self",
              "startLine": 832,
              "startColumn": 29,
              "endLine": 832,
              "endColumn": 33,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 32,
              "variableName": "IRubyObject arg",
              "startLine": 496,
              "startColumn": 42,
              "endLine": 496,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n"
            },
            {
              "step": 33,
              "variableName": "(RubyBasicObject) arg",
              "startLine": 497,
              "startColumn": 17,
              "endLine": 497,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 34,
              "variableName": "((RubyBasicObject) arg).metaClass",
              "startLine": 497,
              "startColumn": 16,
              "endLine": 497,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "getMetaClass(self)",
              "startLine": 832,
              "startColumn": 16,
              "endLine": 832,
              "endColumn": 34,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 36,
              "variableName": "finvokeChecked",
              "startLine": 723,
              "startColumn": 30,
              "endLine": 723,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     *\n     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n"
            },
            {
              "step": 37,
              "variableName": "checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY)",
              "startLine": 724,
              "startColumn": 16,
              "endLine": 724,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n\n    /**"
            },
            {
              "step": 38,
              "variableName": "checkFuncallDefault",
              "startLine": 755,
              "startColumn": 25,
              "endLine": 755,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall_default\n    private IRubyObject checkFuncallDefault(ThreadContext context, IRubyObject self, String name, IRubyObject[] args) {\n        final RubyClass klass = this;\n        if (!checkFuncallRespondTo(context, klass, self, name)) return null; // return def;\n"
            },
            {
              "step": 39,
              "variableName": "klass",
              "startLine": 763,
              "startColumn": 43,
              "endLine": 763,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        if (!checkFuncallCallable(context, method, CallType.FUNCTIONAL, self)) {\n            return checkFuncallMissing(context, klass, self, name, args);\n        }\n        return method.call(context, self, klass, name, args);\n    }\n\n    // MRI: rb_check_funcall_default"
            },
            {
              "step": 40,
              "variableName": "RubyModule clazz",
              "startLine": 67,
              "startColumn": 70,
              "endLine": 67,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 41,
              "variableName": "clazz",
              "startLine": 68,
              "startColumn": 36,
              "endLine": 68,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 43,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 44,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 45,
              "variableName": "clazz",
              "startLine": 46,
              "startColumn": 96,
              "endLine": 46,
              "endColumn": 101,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());\n        }\n    }"
            },
            {
              "step": 46,
              "variableName": "RubyModule clazz",
              "startLine": 134,
              "startColumn": 88,
              "endLine": 134,
              "endColumn": 104,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "clazz",
              "startLine": 135,
              "startColumn": 103,
              "endLine": 135,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,"
            },
            {
              "step": 48,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 49,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 50,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 51,
              "variableName": "self",
              "startLine": 162,
              "startColumn": 102,
              "endLine": 162,
              "endColumn": 106,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);\n                    case BRANCH_OP:\n                        switch (operation) {\n                            case JUMP: ipc = ((JumpInstr)instr).getJumpTarget().getTargetPC(); break;"
            },
            {
              "step": 52,
              "variableName": "IRubyObject self",
              "startLine": 441,
              "startColumn": 92,
              "endLine": 441,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "    }\n\n    protected static IRubyObject processReturnOp(ThreadContext context, Block block, Instr instr, Operation operation,\n                                                 DynamicScope currDynScope, Object[] temp, IRubyObject self,\n                                                 StaticScope currScope) {\n        switch(operation) {\n            // --------- Return flavored instructions --------"
            },
            {
              "step": 53,
              "variableName": "self",
              "startLine": 446,
              "startColumn": 95,
              "endLine": 446,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        switch(operation) {\n            // --------- Return flavored instructions --------\n            case RETURN: {\n                return (IRubyObject)retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp);\n            }\n            case BREAK: {\n                BreakInstr bi = (BreakInstr)instr;"
            },
            {
              "step": 54,
              "variableName": "IRubyObject self",
              "startLine": 582,
              "startColumn": 74,
              "endLine": 582,
              "endColumn": 90,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        }\n    }\n\n    protected static Object retrieveOp(Operand r, ThreadContext context, IRubyObject self, DynamicScope currDynScope, StaticScope currScope, Object[] temp) {\n        Object res;\n        if (r instanceof Self) {\n            return self;"
            },
            {
              "step": 55,
              "variableName": "self",
              "startLine": 585,
              "startColumn": 20,
              "endLine": 585,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "    protected static Object retrieveOp(Operand r, ThreadContext context, IRubyObject self, DynamicScope currDynScope, StaticScope currScope, Object[] temp) {\n        Object res;\n        if (r instanceof Self) {\n            return self;\n        } else if (r instanceof TemporaryLocalVariable) {\n            res = temp[((TemporaryLocalVariable)r).offset];\n            return res == null ? context.nil : res;"
            },
            {
              "step": 56,
              "variableName": "retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp)",
              "startLine": 446,
              "startColumn": 37,
              "endLine": 446,
              "endColumn": 131,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        switch(operation) {\n            // --------- Return flavored instructions --------\n            case RETURN: {\n                return (IRubyObject)retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp);\n            }\n            case BREAK: {\n                BreakInstr bi = (BreakInstr)instr;"
            },
            {
              "step": 57,
              "variableName": "(IRubyObject)retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp)",
              "startLine": 446,
              "startColumn": 24,
              "endLine": 446,
              "endColumn": 131,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        switch(operation) {\n            // --------- Return flavored instructions --------\n            case RETURN: {\n                return (IRubyObject)retrieveOp(((ReturnBase)instr).getReturnValue(), context, self, currDynScope, currScope, temp);\n            }\n            case BREAK: {\n                BreakInstr bi = (BreakInstr)instr;"
            },
            {
              "step": 58,
              "variableName": "processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope)",
              "startLine": 162,
              "startColumn": 32,
              "endLine": 162,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);\n                    case BRANCH_OP:\n                        switch (operation) {\n                            case JUMP: ipc = ((JumpInstr)instr).getJumpTarget().getTargetPC(); break;"
            },
            {
              "step": 59,
              "variableName": "ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block)",
              "startLine": 174,
              "startColumn": 24,
              "endLine": 174,
              "endColumn": 110,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 60,
              "variableName": "interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK)",
              "startLine": 135,
              "startColumn": 16,
              "endLine": 135,
              "endColumn": 146,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,"
            },
            {
              "step": 61,
              "variableName": "Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility())",
              "startLine": 46,
              "startColumn": 41,
              "endLine": 46,
              "endColumn": 125,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());\n        }\n    }"
            },
            {
              "step": 62,
              "variableName": "callInternal(context, clazz)",
              "startLine": 37,
              "startColumn": 16,
              "endLine": 37,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 63,
              "variableName": "call(context, self, clazz, name, Block.NULL_BLOCK)",
              "startLine": 68,
              "startColumn": 16,
              "endLine": 68,
              "endColumn": 66,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 64,
              "variableName": "method.call(context, self, klass, name, args)",
              "startLine": 763,
              "startColumn": 16,
              "endLine": 763,
              "endColumn": 61,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        if (!checkFuncallCallable(context, method, CallType.FUNCTIONAL, self)) {\n            return checkFuncallMissing(context, klass, self, name, args);\n        }\n        return method.call(context, self, klass, name, args);\n    }\n\n    // MRI: rb_check_funcall_default"
            },
            {
              "step": 65,
              "variableName": "checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY)",
              "startLine": 724,
              "startColumn": 16,
              "endLine": 724,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "getMetaClass(self).finvokeChecked(context, self, name)",
              "startLine": 832,
              "startColumn": 16,
              "endLine": 832,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 67,
              "variableName": "Helpers.invokeChecked(context, this, name)",
              "startLine": 355,
              "startColumn": 16,
              "endLine": 355,
              "endColumn": 58,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n\n    /**"
            },
            {
              "step": 68,
              "variableName": "obj.checkCallMethod(context, convertMethod)",
              "startLine": 87,
              "startColumn": 25,
              "endLine": 87,
              "endColumn": 68,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n"
            },
            {
              "step": 69,
              "variableName": "r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 92,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "... : RubyClass",
              "code": "\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n\n    // This is essentially convertToType but it is used when we already know the method we are going to call will exist"
            },
            {
              "step": 70,
              "variableName": "convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise)",
              "startLine": 83,
              "startColumn": 16,
              "endLine": 83,
              "endColumn": 110,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {"
            },
            {
              "step": 71,
              "variableName": "convertToType(obj, target, convertMethod, false)",
              "startLine": 208,
              "startColumn": 27,
              "endLine": 208,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;\n        if (!target.isInstance(val)) {\n            throw newTypeErrorMismatch(obj.getRuntime(), obj, target, convertMethod, val);"
            },
            {
              "step": 72,
              "variableName": "val",
              "startLine": 209,
              "startColumn": 33,
              "endLine": 209,
              "endColumn": 36,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;\n        if (!target.isInstance(val)) {\n            throw newTypeErrorMismatch(obj.getRuntime(), obj, target, convertMethod, val);\n        }"
            },
            {
              "step": 73,
              "variableName": "TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\")",
              "startLine": 334,
              "startColumn": 16,
              "endLine": 334,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyClass",
              "code": "    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }\n\n    // rb_check_string_type"
            },
            {
              "step": 74,
              "variableName": "IRubyObject obj",
              "startLine": 332,
              "startColumn": 61,
              "endLine": 332,
              "endColumn": 76,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }"
            },
            {
              "step": 75,
              "variableName": "obj",
              "startLine": 334,
              "startColumn": 53,
              "endLine": 334,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // rb_check_string_type\n    public static IRubyObject checkStringType(Ruby runtime, IRubyObject obj) {\n        if (obj instanceof RubyString) return obj;\n        return TypeConverter.convertToTypeWithCheck(obj, runtime.getString(), \"to_str\");\n    }\n\n    // rb_check_string_type"
            },
            {
              "step": 76,
              "variableName": "IRubyObject obj",
              "startLine": 206,
              "startColumn": 54,
              "endLine": 206,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param convertMethod is the method to be called to try and convert to targeType\n     * @return the converted value\n     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;"
            },
            {
              "step": 77,
              "variableName": "obj",
              "startLine": 208,
              "startColumn": 41,
              "endLine": 208,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    public static IRubyObject convertToTypeWithCheck(IRubyObject obj, RubyClass target, String convertMethod) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(obj, target, convertMethod, false);\n        if (val.isNil()) return val;\n        if (!target.isInstance(val)) {\n            throw newTypeErrorMismatch(obj.getRuntime(), obj, target, convertMethod, val);"
            },
            {
              "step": 78,
              "variableName": "IRubyObject obj",
              "startLine": 82,
              "startColumn": 45,
              "endLine": 82,
              "endColumn": 60,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param raise will throw an Error if conversion does not work\n     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n"
            },
            {
              "step": 79,
              "variableName": "obj",
              "startLine": 83,
              "startColumn": 76,
              "endLine": 83,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return the converted value\n     */\n    public static IRubyObject convertToType(IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {"
            },
            {
              "step": 80,
              "variableName": "IRubyObject obj",
              "startLine": 86,
              "startColumn": 68,
              "endLine": 86,
              "endColumn": 83,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return convertToType(target.getClassRuntime().getCurrentContext(), obj, target, convertMethod, raise);\n    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }"
            },
            {
              "step": 81,
              "variableName": "obj",
              "startLine": 87,
              "startColumn": 25,
              "endLine": 87,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, String convertMethod, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, convertMethod);\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }\n"
            },
            {
              "step": 82,
              "variableName": "checkCallMethod",
              "startLine": 354,
              "startColumn": 30,
              "endLine": 354,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * method missing exists. Otherwise returns null. 1.9: rb_check_funcall\n     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n"
            },
            {
              "step": 83,
              "variableName": "this",
              "startLine": 355,
              "startColumn": 47,
              "endLine": 355,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, String name) {\n        return Helpers.invokeChecked(context, this, name);\n    }\n\n    /**"
            },
            {
              "step": 84,
              "variableName": "IRubyObject self",
              "startLine": 831,
              "startColumn": 68,
              "endLine": 831,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n"
            },
            {
              "step": 85,
              "variableName": "self",
              "startLine": 832,
              "startColumn": 29,
              "endLine": 832,
              "endColumn": 33,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 86,
              "variableName": "IRubyObject arg",
              "startLine": 496,
              "startColumn": 42,
              "endLine": 496,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n"
            },
            {
              "step": 87,
              "variableName": "(RubyBasicObject) arg",
              "startLine": 497,
              "startColumn": 17,
              "endLine": 497,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 88,
              "variableName": "((RubyBasicObject) arg).metaClass",
              "startLine": 497,
              "startColumn": 16,
              "endLine": 497,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 89,
              "variableName": "getMetaClass(self)",
              "startLine": 832,
              "startColumn": 16,
              "endLine": 832,
              "endColumn": 34,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return getMetaClass(self).finvokeChecked(context, self, name);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 90,
              "variableName": "finvokeChecked",
              "startLine": 723,
              "startColumn": 30,
              "endLine": 723,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     *\n     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n"
            },
            {
              "step": 91,
              "variableName": "checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY)",
              "startLine": 724,
              "startColumn": 16,
              "endLine": 724,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, String name) {\n        return checkFuncallDefault(context, self, name, IRubyObject.NULL_ARRAY);\n    }\n\n    /**"
            },
            {
              "step": 92,
              "variableName": "checkFuncallDefault",
              "startLine": 755,
              "startColumn": 25,
              "endLine": 755,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall_default\n    private IRubyObject checkFuncallDefault(ThreadContext context, IRubyObject self, String name, IRubyObject[] args) {\n        final RubyClass klass = this;\n        if (!checkFuncallRespondTo(context, klass, self, name)) return null; // return def;\n"
            },
            {
              "step": 93,
              "variableName": "klass",
              "startLine": 763,
              "startColumn": 43,
              "endLine": 763,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        if (!checkFuncallCallable(context, method, CallType.FUNCTIONAL, self)) {\n            return checkFuncallMissing(context, klass, self, name, args);\n        }\n        return method.call(context, self, klass, name, args);\n    }\n\n    // MRI: rb_check_funcall_default"
            },
            {
              "step": 94,
              "variableName": "RubyModule clazz",
              "startLine": 67,
              "startColumn": 70,
              "endLine": 67,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 95,
              "variableName": "clazz",
              "startLine": 68,
              "startColumn": 36,
              "endLine": 68,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 96,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 97,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 98,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 99,
              "variableName": "clazz",
              "startLine": 46,
              "startColumn": 96,
              "endLine": 46,
              "endColumn": 101,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());\n        }\n    }"
            },
            {
              "step": 100,
              "variableName": "RubyModule clazz",
              "startLine": 134,
              "startColumn": 88,
              "endLine": 134,
              "endColumn": 104,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 101,
              "variableName": "clazz",
              "startLine": 135,
              "startColumn": 103,
              "endLine": 135,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {\n        return interpretFrameScope(context, null, body, clazz, context.getCurrentScope(), visibility, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,"
            },
            {
              "step": 102,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 103,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 104,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 105,
              "variableName": "self",
              "startLine": 196,
              "startColumn": 96,
              "endLine": 196,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                            args = IRRuntimeHelpers.prepareBlockArgs(context, block, args, usesKeywords, ruby2Keywords);\n                            break;\n                        default:\n                            processBookKeepingOp(context, block, instr, operation, name, args, self, blockArg, implClass, currDynScope, temp, currScope);\n                            break;\n                        }\n                        break;"
            },
            {
              "step": 106,
              "variableName": "IRubyObject self",
              "startLine": 379,
              "startColumn": 79,
              "endLine": 379,
              "endColumn": 95,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "    }\n\n    protected static void processBookKeepingOp(ThreadContext context, Block block, Instr instr, Operation operation,\n                                             String name, IRubyObject[] args, IRubyObject self, Block blockArg, RubyModule implClass,\n                                             DynamicScope currDynScope, Object[] temp, StaticScope currScope) {\n        switch(operation) {\n            case LABEL:"
            },
            {
              "step": 107,
              "variableName": "self",
              "startLine": 435,
              "startColumn": 67,
              "endLine": 435,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                context.setExceptionRequiresBacktrace(((ToggleBacktraceInstr) instr).requiresBacktrace());\n                break;\n            case TRACE:\n                instr.interpret(context, currScope, currDynScope, self, temp);\n                break;\n        }\n    }"
            },
            {
              "step": 108,
              "variableName": "IRubyObject self",
              "startLine": 96,
              "startColumn": 102,
              "endLine": 96,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/ClassSuperInstr.java",
              "type": "RubyClass",
              "code": "    */\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject[] args = prepareArguments(context, self, currScope, currDynScope, temp);\n        Block block = prepareBlock(context, self, currScope, currDynScope, temp);\n"
            },
            {
              "step": 109,
              "variableName": "self",
              "startLine": 105,
              "startColumn": 62,
              "endLine": 105,
              "endColumn": 66,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/ClassSuperInstr.java",
              "type": "RubyClass",
              "code": "        if (isLiteralBlock) {\n            return IRRuntimeHelpers.unresolvedSuperIter(context, self, args, block);\n        } else {\n            return IRRuntimeHelpers.unresolvedSuper(context, self, args, block);\n        }\n    }\n"
            },
            {
              "step": 110,
              "variableName": "IRubyObject self",
              "startLine": 1501,
              "startColumn": 70,
              "endLine": 1501,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Interp\n    public static IRubyObject unresolvedSuper(ThreadContext context, IRubyObject self, IRubyObject[] args, Block block) {\n        // We have to rely on the frame stack to find the implementation class\n        RubyModule klazz = context.getFrameKlazz();\n        String methodName = context.getFrameName();"
            },
            {
              "step": 111,
              "variableName": "self",
              "startLine": 1515,
              "startColumn": 47,
              "endLine": 1515,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        if (entry.method.isUndefined()) {\n            rVal = Helpers.callMethodMissing(context, self, entry.method.getVisibility(), methodName, CallType.SUPER, args, block);\n        } else {\n            rVal = entry.method.call(context, self, entry.sourceModule, methodName, args, block);\n        }\n\n        return rVal;"
            },
            {
              "step": 112,
              "variableName": "IRubyObject self",
              "startLine": 834,
              "startColumn": 62,
              "endLine": 834,
              "endColumn": 78,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/JavaMethod.java",
              "type": "RubyClass",
              "code": "            return call(context, self, clazz, name, new IRubyObject[] {arg0, arg1, arg2});\n        }\n\n        public final IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject[] args, Block block) {\n            switch (args.length) {\n                // still delegate to different arity calls as they might get overriden e.g. for native\n                // JRuby methods that use overloading for different kind arity of received arguments !"
            },
            {
              "step": 113,
              "variableName": "self",
              "startLine": 841,
              "startColumn": 42,
              "endLine": 841,
              "endColumn": 46,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/JavaMethod.java",
              "type": "RubyClass",
              "code": "                case 0:\n                    return call(context, self, clazz, name);\n                case 1:\n                    return call(context, self, clazz, name, args[0]);\n                case 2:\n                    return call(context, self, clazz, name, args[0], args[1]);\n                default:"
            },
            {
              "step": 114,
              "variableName": "IRubyObject self",
              "startLine": 224,
              "startColumn": 64,
              "endLine": 224,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/java/proxies/JavaInterfaceTemplate.java",
              "type": "RubyClass",
              "code": "            singleton.addMethod(context, \"implement\", new JavaMethodOne(clazz, Visibility.PRIVATE, \"implement\") {\n\n                @Override\n                public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject iface) {\n                    final RubyArray ifaces = getJavaInterfaces(self);\n                    if ( ifaces != null && ifaces.includes(context, iface) ) {\n                        return Helpers.invoke(context, iface, \"implement\", self);"
            },
            {
              "step": 115,
              "variableName": "self",
              "startLine": 227,
              "startColumn": 76,
              "endLine": 227,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/java/proxies/JavaInterfaceTemplate.java",
              "type": "RubyClass",
              "code": "                public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject iface) {\n                    final RubyArray ifaces = getJavaInterfaces(self);\n                    if ( ifaces != null && ifaces.includes(context, iface) ) {\n                        return Helpers.invoke(context, iface, \"implement\", self);\n                    }\n                    return context.nil;\n                }"
            },
            {
              "step": 116,
              "variableName": "IRubyObject arg0",
              "startLine": 790,
              "startColumn": 92,
              "endLine": 790,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name) {\n        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {\n        return self.getMetaClass().finvoke(context, self, name, arg0);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0, IRubyObject arg1) {"
            },
            {
              "step": 117,
              "variableName": "arg0",
              "startLine": 791,
              "startColumn": 65,
              "endLine": 791,
              "endColumn": 69,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return self.getMetaClass().finvoke(context, self, name);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0) {\n        return self.getMetaClass().finvoke(context, self, name, arg0);\n    }\n    public static IRubyObject invoke(ThreadContext context, IRubyObject self, String name, IRubyObject arg0, IRubyObject arg1) {\n        return self.getMetaClass().finvoke(context, self, name, arg0, arg1);"
            },
            {
              "step": 118,
              "variableName": "IRubyObject arg",
              "startLine": 916,
              "startColumn": 13,
              "endLine": 916,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject finvoke(ThreadContext context, IRubyObject self, String name,\n            IRubyObject arg) {\n        CacheEntry entry = searchWithCache(name);\n        DynamicMethod method = entry.method;\n        if (shouldCallMethodMissing(method)) {"
            },
            {
              "step": 119,
              "variableName": "arg",
              "startLine": 922,
              "startColumn": 69,
              "endLine": 922,
              "endColumn": 72,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "        if (shouldCallMethodMissing(method)) {\n            return Helpers.callMethodMissing(context, self, this, method.getVisibility(), name, CallType.FUNCTIONAL, arg, Block.NULL_BLOCK);\n        }\n        return method.call(context, self, entry.sourceModule, name, arg);\n    }\n\n    public IRubyObject finvoke(ThreadContext context, IRubyObject self, String name,"
            },
            {
              "step": 120,
              "variableName": "IRubyObject arg0",
              "startLine": 78,
              "startColumn": 101,
              "endLine": 78,
              "endColumn": 117,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/java/invokers/ConstructorInvoker.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0) {\n        if (javaVarargsCallables != null) return call(context, self, clazz, name, new IRubyObject[] {arg0});\n        JavaProxy proxy = castJavaProxy(self);\n        JavaConstructor constructor = (JavaConstructor) findCallableArityOne(self, name, arg0);"
            },
            {
              "step": 121,
              "variableName": "arg0",
              "startLine": 83,
              "startColumn": 24,
              "endLine": 83,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/java/invokers/ConstructorInvoker.java",
              "type": "RubyClass",
              "code": "        JavaProxy proxy = castJavaProxy(self);\n        JavaConstructor constructor = (JavaConstructor) findCallableArityOne(self, name, arg0);\n        final Class<?>[] paramTypes = constructor.getParameterTypes();\n        Object cArg0 = arg0.toJava(paramTypes[0]);\n\n        setAndCacheProxyObject(context, clazz, proxy, constructor.newInstanceDirect(context, cArg0));\n"
            },
            {
              "step": 122,
              "variableName": "toJava",
              "startLine": 850,
              "startColumn": 18,
              "endLine": 850,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "     * @see IRubyObject#toJava\n     */\n    @Override\n    public <T> T toJava(Class<T> target) {\n        return defaultToJava(target);\n    }\n"
            },
            {
              "step": 123,
              "variableName": "defaultToJava(target)",
              "startLine": 851,
              "startColumn": 16,
              "endLine": 851,
              "endColumn": 37,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "     */\n    @Override\n    public <T> T toJava(Class<T> target) {\n        return defaultToJava(target);\n    }\n\n    final <T> T defaultToJava(Class<T> target) {"
            },
            {
              "step": 124,
              "variableName": "defaultToJava",
              "startLine": 854,
              "startColumn": 17,
              "endLine": 854,
              "endColumn": 30,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "        return defaultToJava(target);\n    }\n\n    final <T> T defaultToJava(Class<T> target) {\n        // for callers that unconditionally pass null retval type (JRUBY-4737)\n        if (target == void.class) return null;\n"
            },
            {
              "step": 125,
              "variableName": "this",
              "startLine": 872,
              "startColumn": 90,
              "endLine": 872,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "                if (unwrap_java_object() != null) { // double check under lock\n                    return defaultToJava(target); // concurrent proxy interface impl initialization\n                }\n                return JavaUtil.convertProcToInterface(getRuntime().getCurrentContext(), this, target);\n            }\n        }\n        else if (!target.isAssignableFrom(getClass())) {"
            },
            {
              "step": 126,
              "variableName": "RubyBasicObject rubyObject",
              "startLine": 236,
              "startColumn": 71,
              "endLine": 236,
              "endColumn": 97,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/JavaUtil.java",
              "type": "RubyClass",
              "code": "    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T convertProcToInterface(ThreadContext context, RubyBasicObject rubyObject, Class<T> targetType) {\n        // Capture original class; we only detach the singleton for natural Proc instances\n        RubyClass procClass = rubyObject.getMetaClass();\n"
            },
            {
              "step": 127,
              "variableName": "rubyObject",
              "startLine": 250,
              "startColumn": 46,
              "endLine": 250,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/JavaUtil.java",
              "type": "RubyClass",
              "code": "        if ( rubyObject instanceof RubyProc ) {\n            // Proc implementing an interface, pull in the catch-all code that lets the proc get invoked\n            // no matter what method is called on the interface\n            final RubyClass singletonClass = rubyObject.singletonClass(context);\n\n            if (procClass == procClass(context)) {\n                // We reattach the singleton class to the Proc class object to prevent the method cache in the interface"
            },
            {
              "step": 128,
              "variableName": "singletonClass",
              "startLine": 515,
              "startColumn": 22,
              "endLine": 515,
              "endColumn": 36,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "\n    // MRI: rb_singleton_class\n    @JRubyAPI\n    public RubyClass singletonClass(ThreadContext context) {\n        RubyClass klass = metaClass.toSingletonClass(context, this);\n\n        if (isFrozen()) klass.setFrozen(true);"
            },
            {
              "step": 129,
              "variableName": "this",
              "startLine": 516,
              "startColumn": 63,
              "endLine": 516,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    // MRI: rb_singleton_class\n    @JRubyAPI\n    public RubyClass singletonClass(ThreadContext context) {\n        RubyClass klass = metaClass.toSingletonClass(context, this);\n\n        if (isFrozen()) klass.setFrozen(true);\n"
            },
            {
              "step": 130,
              "variableName": "RubyBasicObject target",
              "startLine": 607,
              "startColumn": 55,
              "endLine": 607,
              "endColumn": 77,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "    /**\n     * @see #singletonClass(ThreadContext)\n     */\n    RubyClass toSingletonClass(ThreadContext context, RubyBasicObject target) {\n        // replaced after makeMetaClass with MetaClass's toSingletonClass\n        return target.makeMetaClass(context, this);\n    }"
            },
            {
              "step": 131,
              "variableName": "target",
              "startLine": 609,
              "startColumn": 16,
              "endLine": 609,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyClass",
              "code": "     */\n    RubyClass toSingletonClass(ThreadContext context, RubyBasicObject target) {\n        // replaced after makeMetaClass with MetaClass's toSingletonClass\n        return target.makeMetaClass(context, this);\n    }\n\n    static boolean notVisibleAndNotMethodMissing(DynamicMethod method, String name, IRubyObject caller, CallType callType) {"
            },
            {
              "step": 132,
              "variableName": "makeMetaClass",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "     * @return singleton-class for this (singleton) class\n     */\n    @Override\n    public RubyClass makeMetaClass(ThreadContext context, RubyClass superClass) {\n        MetaClass klass = new MetaClass(context.runtime, getSuperSingletonMetaClass(context), this);\n        setMetaClass(klass);\n"
            },
            {
              "step": 133,
              "variableName": "this",
              "startLine": 109,
              "startColumn": 95,
              "endLine": 109,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "     */\n    @Override\n    public RubyClass makeMetaClass(ThreadContext context, RubyClass superClass) {\n        MetaClass klass = new MetaClass(context.runtime, getSuperSingletonMetaClass(context), this);\n        setMetaClass(klass);\n\n        // Foo.singleton_class.singleton_class: #<Class:#<Class:Foo>>"
            },
            {
              "step": 134,
              "variableName": "RubyBasicObject attached",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "    /**\n     * rb_class_boot for meta classes ({@link #makeMetaClass(ThreadContext, RubyClass)})\n     */\n    MetaClass(Ruby runtime, RubyClass superClass, RubyBasicObject attached) {\n        super(runtime, superClass, false);\n        metaClassInit(superClass, attached);\n"
            },
            {
              "step": 135,
              "variableName": "attached",
              "startLine": 54,
              "startColumn": 35,
              "endLine": 54,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "     */\n    MetaClass(Ruby runtime, RubyClass superClass, RubyBasicObject attached) {\n        super(runtime, superClass, false);\n        metaClassInit(superClass, attached);\n\n        if (LOG_SINGLETONS || LOG_SINGLETONS_VERBOSE) {\n            logSingleton(runtime, superClass, attached);"
            },
            {
              "step": 136,
              "variableName": "RubyBasicObject attached",
              "startLine": 74,
              "startColumn": 54,
              "endLine": 74,
              "endColumn": 78,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "        metaClassInit(superClass, attached);\n    }\n\n    private void metaClassInit(RubyClass superClass, RubyBasicObject attached) {\n        this.attached = attached;\n        // use same ClassIndex as metaclass, since we're technically still of that type\n        classIndex(superClass.getClassIndex());"
            },
            {
              "step": 137,
              "variableName": "attached",
              "startLine": 75,
              "startColumn": 25,
              "endLine": 75,
              "endColumn": 33,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "    }\n\n    private void metaClassInit(RubyClass superClass, RubyBasicObject attached) {\n        this.attached = attached;\n        // use same ClassIndex as metaclass, since we're technically still of that type\n        classIndex(superClass.getClassIndex());\n        superClass.addSubclass(this);"
            },
            {
              "step": 138,
              "variableName": "this",
              "startLine": 75,
              "startColumn": 9,
              "endLine": 75,
              "endColumn": 13,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "    }\n\n    private void metaClassInit(RubyClass superClass, RubyBasicObject attached) {\n        this.attached = attached;\n        // use same ClassIndex as metaclass, since we're technically still of that type\n        classIndex(superClass.getClassIndex());\n        superClass.addSubclass(this);"
            },
            {
              "step": 139,
              "variableName": "metaClassInit(superClass, attached)",
              "startLine": 54,
              "startColumn": 9,
              "endLine": 54,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "     */\n    MetaClass(Ruby runtime, RubyClass superClass, RubyBasicObject attached) {\n        super(runtime, superClass, false);\n        metaClassInit(superClass, attached);\n\n        if (LOG_SINGLETONS || LOG_SINGLETONS_VERBOSE) {\n            logSingleton(runtime, superClass, attached);"
            },
            {
              "step": 140,
              "variableName": "new MetaClass(context.runtime, getSuperSingletonMetaClass(context), this)",
              "startLine": 109,
              "startColumn": 27,
              "endLine": 109,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "     */\n    @Override\n    public RubyClass makeMetaClass(ThreadContext context, RubyClass superClass) {\n        MetaClass klass = new MetaClass(context.runtime, getSuperSingletonMetaClass(context), this);\n        setMetaClass(klass);\n\n        // Foo.singleton_class.singleton_class: #<Class:#<Class:Foo>>"
            },
            {
              "step": 141,
              "variableName": "klass",
              "startLine": 116,
              "startColumn": 16,
              "endLine": 116,
              "endColumn": 21,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "        // #<Class:#<Class:Foo>>'s singleton_class == #<Class:#<Class:Foo>>\n        klass.setMetaClass(klass);\n\n        return klass;\n    }\n\n    private RubyClass getSuperSingletonMetaClass(ThreadContext context) {"
            },
            {
              "step": 142,
              "variableName": "target.makeMetaClass(context, this)",
              "startLine": 609,
              "startColumn": 16,
              "endLine": 609,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "     */\n    RubyClass toSingletonClass(ThreadContext context, RubyBasicObject target) {\n        // replaced after makeMetaClass with MetaClass's toSingletonClass\n        return target.makeMetaClass(context, this);\n    }\n\n    static boolean notVisibleAndNotMethodMissing(DynamicMethod method, String name, IRubyObject caller, CallType callType) {"
            },
            {
              "step": 143,
              "variableName": "metaClass.toSingletonClass(context, this)",
              "startLine": 516,
              "startColumn": 27,
              "endLine": 516,
              "endColumn": 68,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "    // MRI: rb_singleton_class\n    @JRubyAPI\n    public RubyClass singletonClass(ThreadContext context) {\n        RubyClass klass = metaClass.toSingletonClass(context, this);\n\n        if (isFrozen()) klass.setFrozen(true);\n"
            },
            {
              "step": 144,
              "variableName": "klass",
              "startLine": 520,
              "startColumn": 16,
              "endLine": 520,
              "endColumn": 21,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "\n        if (isFrozen()) klass.setFrozen(true);\n\n        return klass;\n    }\n\n    @Deprecated(since = \"10.0\")"
            },
            {
              "step": 145,
              "variableName": "rubyObject.singletonClass(context)",
              "startLine": 250,
              "startColumn": 46,
              "endLine": 250,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/JavaUtil.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "        if ( rubyObject instanceof RubyProc ) {\n            // Proc implementing an interface, pull in the catch-all code that lets the proc get invoked\n            // no matter what method is called on the interface\n            final RubyClass singletonClass = rubyObject.singletonClass(context);\n\n            if (procClass == procClass(context)) {\n                // We reattach the singleton class to the Proc class object to prevent the method cache in the interface"
            },
            {
              "step": 146,
              "variableName": "singletonClass",
              "startLine": 259,
              "startColumn": 13,
              "endLine": 259,
              "endColumn": 27,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/javasupport/JavaUtil.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "            }\n\n            final Java.ProcToInterface procToIface = new Java.ProcToInterface(singletonClass);\n            singletonClass.addMethod(context, \"method_missing\", procToIface);\n            // similar to Iface.impl { ... } - bind interface method(s) to avoid Java-Ruby conflicts\n            // ... e.g. calling a Ruby implemented Predicate#test should not dispatch to Kernel#test\n            // getMethods for interface returns all methods (including ones from super-interfaces)"
            },
            {
              "step": 147,
              "variableName": "addMethod",
              "startLine": 1897,
              "startColumn": 17,
              "endLine": 1897,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "        addMethod(getCurrentContext(), id, method);\n    }\n\n    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        if (this instanceof MetaClass) {\n            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();"
            },
            {
              "step": 148,
              "variableName": "(MetaClass) this",
              "startLine": 1900,
              "startColumn": 14,
              "endLine": 1900,
              "endColumn": 30,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        if (this instanceof MetaClass) {\n            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();\n        } else {\n            testFrozen(frozenType());\n        }"
            },
            {
              "step": 149,
              "variableName": "getAttached",
              "startLine": 143,
              "startColumn": 28,
              "endLine": 143,
              "endColumn": 39,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "        return attached;\n    }\n\n    public RubyBasicObject getAttached() {\n        return attached;\n    }\n"
            },
            {
              "step": 150,
              "variableName": "attached",
              "startLine": 144,
              "startColumn": 16,
              "endLine": 144,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass [attached] : MetaClass",
              "code": "    }\n\n    public RubyBasicObject getAttached() {\n        return attached;\n    }\n\n    public void setAttached(RubyBasicObject attached) {"
            },
            {
              "step": 151,
              "variableName": "attached",
              "startLine": 144,
              "startColumn": 16,
              "endLine": 144,
              "endColumn": 24,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/MetaClass.java",
              "type": "MetaClass",
              "code": "    }\n\n    public RubyBasicObject getAttached() {\n        return attached;\n    }\n\n    public void setAttached(RubyBasicObject attached) {"
            },
            {
              "step": 152,
              "variableName": "((MetaClass) this).getAttached()",
              "startLine": 1900,
              "startColumn": 13,
              "endLine": 1900,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyModule.java",
              "type": "MetaClass",
              "code": "    public void addMethod(ThreadContext context, String id, DynamicMethod method) {\n        if (this instanceof MetaClass) {\n            // FIXME: Gross and not quite right. See MRI's rb_frozen_class_p logic\n            ((MetaClass) this).getAttached().testFrozen();\n        } else {\n            testFrozen(frozenType());\n        }"
            },
            {
              "step": 153,
              "variableName": "testFrozen",
              "startLine": 304,
              "startColumn": 25,
              "endLine": 304,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "MetaClass",
              "code": "     * Helper to test whether this object is frozen, and if it is will\n     * throw an exception based on the message.\n     */\n   protected final void testFrozen() {\n       if (isFrozen()) {\n           var context = getRuntime().getCurrentContext();\n           throw context.runtime.newFrozenError((isClass() ? \"Class: \" : (isModule() ? \"Module: \" : \"object: \")) + inspect(context), this);"
            },
            {
              "step": 154,
              "variableName": "this",
              "startLine": 307,
              "startColumn": 134,
              "endLine": 307,
              "endColumn": 138,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "MetaClass",
              "code": "   protected final void testFrozen() {\n       if (isFrozen()) {\n           var context = getRuntime().getCurrentContext();\n           throw context.runtime.newFrozenError((isClass() ? \"Class: \" : (isModule() ? \"Module: \" : \"object: \")) + inspect(context), this);\n       }\n   }\n"
            },
            {
              "step": 155,
              "variableName": "IRubyObject receiver",
              "startLine": 4259,
              "startColumn": 61,
              "endLine": 4259,
              "endColumn": 81,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "MetaClass",
              "code": "        return loadError;\n    }\n\n    public RaiseException newFrozenError(String objectType, IRubyObject receiver) {\n        ThreadContext context = getCurrentContext();\n\n        IRubyObject inspected = context.safeRecurse(Ruby::inspectFrozenObject, this, receiver, \"inspect\", true);"
            },
            {
              "step": 156,
              "variableName": "receiver",
              "startLine": 4262,
              "startColumn": 86,
              "endLine": 4262,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "MetaClass",
              "code": "    public RaiseException newFrozenError(String objectType, IRubyObject receiver) {\n        ThreadContext context = getCurrentContext();\n\n        IRubyObject inspected = context.safeRecurse(Ruby::inspectFrozenObject, this, receiver, \"inspect\", true);\n        String message = \"can't modify frozen \" + objectType + \": \" + inspected.convertToString().toString();\n\n        return newFrozenError(receiver, message);"
            },
            {
              "step": 157,
              "variableName": "IRubyObject obj",
              "startLine": 1431,
              "startColumn": 78,
              "endLine": 1431,
              "endColumn": 93,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "MetaClass",
              "code": "        IRubyObject call(ThreadContext context, T state, IRubyObject obj, boolean recur);\n    }\n\n    public <T> IRubyObject safeRecurse(RecursiveFunctionEx<T> func, T state, IRubyObject obj, String name, boolean outer) {\n        Map<IRubyObject, IRubyObject> guards = safeRecurseGetGuards(name);\n\n        boolean outermost = outer && !guards.containsKey(NEVER);"
            },
            {
              "step": 158,
              "variableName": "obj",
              "startLine": 1446,
              "startColumn": 54,
              "endLine": 1446,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "MetaClass",
              "code": "            if (outermost) {\n                return safeRecurseOutermost(func, state, obj, guards);\n            } else {\n                return safeRecurseInner(func, state, obj, guards);\n            }\n        }\n    }"
            },
            {
              "step": 159,
              "variableName": "IRubyObject obj",
              "startLine": 1483,
              "startColumn": 84,
              "endLine": 1483,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "MetaClass",
              "code": "        return guards;\n    }\n\n    private <T> IRubyObject safeRecurseInner(RecursiveFunctionEx<T> func, T state, IRubyObject obj, Map<IRubyObject, IRubyObject> guards) {\n        try {\n            guards.put(obj, obj);\n            return func.call(this, state, obj, false);"
            },
            {
              "step": 160,
              "variableName": "obj",
              "startLine": 1486,
              "startColumn": 43,
              "endLine": 1486,
              "endColumn": 46,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/ThreadContext.java",
              "type": "MetaClass",
              "code": "    private <T> IRubyObject safeRecurseInner(RecursiveFunctionEx<T> func, T state, IRubyObject obj, Map<IRubyObject, IRubyObject> guards) {\n        try {\n            guards.put(obj, obj);\n            return func.call(this, state, obj, false);\n        } finally {\n            guards.remove(obj);\n        }"
            },
            {
              "step": 161,
              "variableName": "self",
              "startLine": 145,
              "startColumn": 28,
              "endLine": 145,
              "endColumn": 32,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyComparable.java",
              "type": "MetaClass",
              "code": "        if (recv == other) return context.tru;\n\n        var result = context.safeRecurse(\n                (ctx, obj, self, recur) -> recur ? ctx.nil : sites(ctx).op_cmp.call(ctx, self, self, obj),\n                other, recv, \"<=>\", true);\n\n        // This is only to prevent throwing exceptions by cmperr - it has poor performance"
            },
            {
              "step": 162,
              "variableName": "self",
              "startLine": 145,
              "startColumn": 96,
              "endLine": 145,
              "endColumn": 100,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyComparable.java",
              "type": "MetaClass",
              "code": "        if (recv == other) return context.tru;\n\n        var result = context.safeRecurse(\n                (ctx, obj, self, recur) -> recur ? ctx.nil : sites(ctx).op_cmp.call(ctx, self, self, obj),\n                other, recv, \"<=>\", true);\n\n        // This is only to prevent throwing exceptions by cmperr - it has poor performance"
            },
            {
              "step": 163,
              "variableName": "IRubyObject self",
              "startLine": 237,
              "startColumn": 72,
              "endLine": 237,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "MetaClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 164,
              "variableName": "self",
              "startLine": 242,
              "startColumn": 47,
              "endLine": 242,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "MetaClass",
              "code": "        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName, arg1);\n        }\n        return cacheAndCall(context, caller, self, selfType, arg1);\n    }"
            },
            {
              "step": 165,
              "variableName": "IRubyObject self",
              "startLine": 145,
              "startColumn": 52,
              "endLine": 145,
              "endColumn": 68,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRMethod.java",
              "type": "MetaClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        if (callCount >= 0) promoteToFullBuild(context);"
            },
            {
              "step": 166,
              "variableName": "self",
              "startLine": 151,
              "startColumn": 69,
              "endLine": 151,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRMethod.java",
              "type": "MetaClass",
              "code": "        if (callCount >= 0) promoteToFullBuild(context);\n\n        ensureInstrsReady();\n        return Interpreter.INTERPRET_METHOD(context, method, clazz, self, name, arg0, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 167,
              "variableName": "IRubyObject self",
              "startLine": 149,
              "startColumn": 48,
              "endLine": 149,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "MetaClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,\n                                               IRubyObject self, String name, IRubyObject arg0, Block block) {\n        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0), block);\n    }\n"
            },
            {
              "step": 168,
              "variableName": "self",
              "startLine": 150,
              "startColumn": 93,
              "endLine": 150,
              "endColumn": 97,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "MetaClass",
              "code": "\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,\n                                               IRubyObject self, String name, IRubyObject arg0, Block block) {\n        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0), block);\n    }\n\n    public static IRubyObject INTERPRET_METHOD(ThreadContext context, IRScope body, RubyModule implClass,"
            },
            {
              "step": 169,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "MetaClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 170,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "MetaClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 171,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "MetaClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 172,
              "variableName": "self",
              "startLine": 159,
              "startColumn": 95,
              "endLine": 159,
              "endColumn": 99,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "MetaClass",
              "code": "                        break;\n                    case CALL_OP:\n                        if (profile) Profiler.updateCallSite(instr, interpreterContext.getScope(), scopeVersion);\n                        processCall(context, instr, operation, currDynScope, currScope, temp, self, name);\n                        break;\n                    case RET_OP:\n                        return processReturnOp(context, block, instr, operation, currDynScope, temp, self, currScope);"
            },
            {
              "step": 173,
              "variableName": "IRubyObject self",
              "startLine": 295,
              "startColumn": 161,
              "endLine": 295,
              "endColumn": 177,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "MetaClass",
              "code": "        }\n    }\n\n    protected static void processCall(ThreadContext context, Instr instr, Operation operation, DynamicScope currDynScope, StaticScope currScope, Object[] temp, IRubyObject self, String name) {\n        Object result;\n\n        switch(operation) {"
            },
            {
              "step": 174,
              "variableName": "self",
              "startLine": 365,
              "startColumn": 67,
              "endLine": 365,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "MetaClass",
              "code": "                break;\n            }\n            case NORESULT_CALL:\n                instr.interpret(context, currScope, currDynScope, self, temp);\n                break;\n            case FRAME_NAME_CALL:\n                setResult(temp, currDynScope, instr, ((FrameNameCallInstr) instr).getFrameName(context, self, name));"
            },
            {
              "step": 175,
              "variableName": "IRubyObject self",
              "startLine": 72,
              "startColumn": 102,
              "endLine": 72,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "MetaClass",
              "code": "    }\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);"
            },
            {
              "step": 176,
              "variableName": "self",
              "startLine": 74,
              "startColumn": 76,
              "endLine": 74,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "MetaClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 177,
              "variableName": "IRubyObject self",
              "startLine": 45,
              "startColumn": 51,
              "endLine": 45,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "MetaClass",
              "code": "    }\n\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n"
            },
            {
              "step": 178,
              "variableName": "self",
              "startLine": 46,
              "startColumn": 16,
              "endLine": 46,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "MetaClass",
              "code": "\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n\n    @Override"
            },
            {
              "step": 179,
              "variableName": "getValue().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 74,
              "startColumn": 47,
              "endLine": 74,
              "endColumn": 112,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "MetaClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 180,
              "variableName": "(IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 74,
              "startColumn": 33,
              "endLine": 74,
              "endColumn": 112,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "MetaClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }"
            },
            {
              "step": 181,
              "variableName": "value",
              "startLine": 75,
              "startColumn": 54,
              "endLine": 75,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/PutGlobalVarInstr.java",
              "type": "MetaClass",
              "code": "    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        GlobalVariable target = getTarget();\n        IRubyObject    value  = (IRubyObject) getValue().retrieve(context, self, currScope, currDynScope, temp);\n        globalVariables(context).set(target.getId(), value);\n        return null;\n    }\n"
            },
            {
              "step": 182,
              "variableName": "IRubyObject value",
              "startLine": 123,
              "startColumn": 41,
              "endLine": 123,
              "endColumn": 58,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/GlobalVariables.java",
              "type": "MetaClass",
              "code": "        return createIfNotDefined(name);\n    }\n\n    public IRubyObject set(String name, IRubyObject value) {\n        GlobalVariable variable = getVariable(name);\n        IRubyObject result = variable.getAccessor().setValue(value);\n        variable.trace(value);"
            },
            {
              "step": 183,
              "variableName": "value",
              "startLine": 126,
              "startColumn": 24,
              "endLine": 126,
              "endColumn": 29,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/GlobalVariables.java",
              "type": "",
              "code": "    public IRubyObject set(String name, IRubyObject value) {\n        GlobalVariable variable = getVariable(name);\n        IRubyObject result = variable.getAccessor().setValue(value);\n        variable.trace(value);\n        variable.invalidate();\n        return result;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "passwdStruct",
              "startLine": 2190,
              "startColumn": 16,
              "endLine": 2190,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/Ruby.java",
              "type": "RubyClass",
              "code": "    }\n\n    public IRubyObject getPasswdStruct() {\n        return passwdStruct;\n    }\n    public void setPasswdStruct(RubyClass passwdStruct) {\n        this.passwdStruct = passwdStruct;"
            },
            {
              "step": 1,
              "variableName": "context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 47,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 2,
              "variableName": "(RubyClass) context.runtime.getPasswdStruct()",
              "startLine": 149,
              "startColumn": 35,
              "endLine": 149,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 3,
              "variableName": "RubyClass structClass",
              "startLine": 485,
              "startColumn": 63,
              "endLine": 485,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @param block\n     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;"
            },
            {
              "step": 4,
              "variableName": "structClass",
              "startLine": 486,
              "startColumn": 53,
              "endLine": 486,
              "endColumn": 64,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 5,
              "variableName": "RubyClass rubyClass",
              "startLine": 98,
              "startColumn": 46,
              "endLine": 98,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "        this(runtime.getCurrentContext(), rubyClass);\n    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));"
            },
            {
              "step": 6,
              "variableName": "rubyClass",
              "startLine": 99,
              "startColumn": 32,
              "endLine": 99,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 7,
              "variableName": "super(context.runtime, rubyClass);",
              "startLine": 99,
              "startColumn": 9,
              "endLine": 99,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyStruct.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public RubyStruct(ThreadContext context, RubyClass rubyClass) {\n        super(context.runtime, rubyClass);\n\n        int size = toInt(context, getInternalVariable(context, rubyClass, SIZE_VAR));\n"
            },
            {
              "step": 8,
              "variableName": "new RubyStruct(context, structClass)",
              "startLine": 486,
              "startColumn": 29,
              "endLine": 486,
              "endColumn": 65,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return\n     */\n    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }"
            },
            {
              "step": 9,
              "variableName": "struct",
              "startLine": 488,
              "startColumn": 16,
              "endLine": 488,
              "endColumn": 22,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/api/Create.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    public static RubyStruct newStruct(ThreadContext context, RubyClass structClass, IRubyObject[] args, Block block) {\n        RubyStruct struct = new RubyStruct(context, structClass);\n        struct.callInit(args, block);\n        return struct;\n    }\n\n}"
            },
            {
              "step": 10,
              "variableName": "newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK)",
              "startLine": 149,
              "startColumn": 16,
              "endLine": 149,
              "endColumn": 105,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        };\n        \n        return newStruct(context, (RubyClass) context.runtime.getPasswdStruct(), args, Block.NULL_BLOCK);\n    }\n\n    "
            },
            {
              "step": 11,
              "variableName": "setupPasswd(context, pw)",
              "startLine": 300,
              "startColumn": 46,
              "endLine": 300,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ext/etc/RubyEtc.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "                try {\n                    Passwd pw;\n                    while((pw = posix.getpwent()) != null) {\n                        block.yield(context, setupPasswd(context, pw));\n                    }\n                } finally {\n                    posix.endpwent();"
            },
            {
              "step": 12,
              "variableName": "IRubyObject value",
              "startLine": 190,
              "startColumn": 53,
              "endLine": 190,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return body.yieldSpecific(context, this, arg0, arg1, arg2);\n    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 191,
              "startColumn": 42,
              "endLine": 191,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Block.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public IRubyObject yield(ThreadContext context, IRubyObject value) {\n        return body.yield(context, this, value);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "IRubyObject value",
              "startLine": 104,
              "startColumn": 72,
              "endLine": 104,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n    }\n\n    public final IRubyObject yield(ThreadContext context, Block block, IRubyObject value) {\n        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "value",
              "startLine": 108,
              "startColumn": 44,
              "endLine": 108,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/BlockBody.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        if (canCallDirect()) {\n            return yieldDirect(context, block, new IRubyObject[] { value }, null);\n        } else {\n            return doYield(context, block, value);\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "IRubyObject value",
              "startLine": 97,
              "startColumn": 71,
              "endLine": 97,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/CallBlock19.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    protected IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        return callback.call(context, value, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "value",
              "startLine": 98,
              "startColumn": 39,
              "endLine": 98,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/CallBlock19.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    @Override\n    protected IRubyObject doYield(ThreadContext context, Block block, IRubyObject value) {\n        return callback.call(context, value, Block.NULL_BLOCK);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "IRubyObject arg",
              "startLine": 2212,
              "startColumn": 56,
              "endLine": 2212,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyEnumerable.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        }\n\n        @Override\n        public IRubyObject call(ThreadContext context, IRubyObject arg, Block block) {\n            ThreadContext.resetCallInfo(context);\n            result.append(context, arg);\n            return context.nil;"
            },
            {
              "step": 19,
              "variableName": "arg",
              "startLine": 2214,
              "startColumn": 36,
              "endLine": 2214,
              "endColumn": 39,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyEnumerable.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        @Override\n        public IRubyObject call(ThreadContext context, IRubyObject arg, Block block) {\n            ThreadContext.resetCallInfo(context);\n            result.append(context, arg);\n            return context.nil;\n        }\n"
            },
            {
              "step": 20,
              "variableName": "IRubyObject item",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 81,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/collections/StringArraySet.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    public synchronized RubyArray append(ThreadContext context, IRubyObject item) {\n        RubyArray result = super.append(context, item);\n        set.add(convertToString(item));\n        return result;"
            },
            {
              "step": 21,
              "variableName": "item",
              "startLine": 68,
              "startColumn": 33,
              "endLine": 68,
              "endColumn": 37,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/collections/StringArraySet.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    @Override\n    public synchronized RubyArray append(ThreadContext context, IRubyObject item) {\n        RubyArray result = super.append(context, item);\n        set.add(convertToString(item));\n        return result;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "IRubyObject item",
              "startLine": 316,
              "startColumn": 43,
              "endLine": 316,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/collections/StringArraySet.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        synchronized (this) { return set.contains(element); }\n    }\n\n    private static String convertToString(IRubyObject item) {\n        return item.convertToString().asJavaString();\n    }\n"
            },
            {
              "step": 23,
              "variableName": "item",
              "startLine": 317,
              "startColumn": 16,
              "endLine": 317,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/collections/StringArraySet.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    private static String convertToString(IRubyObject item) {\n        return item.convertToString().asJavaString();\n    }\n\n    private void rehash() {"
            },
            {
              "step": 24,
              "variableName": "convertToString",
              "startLine": 778,
              "startColumn": 23,
              "endLine": 778,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return a string representation of this\n     */\n    @Override\n    public RubyString convertToString() {\n        Ruby runtime = metaClass.runtime;\n        ThreadContext context = runtime.getCurrentContext();\n        BasicObjectSites sites = sites(context);"
            },
            {
              "step": 25,
              "variableName": "this",
              "startLine": 782,
              "startColumn": 66,
              "endLine": 782,
              "endColumn": 70,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        Ruby runtime = metaClass.runtime;\n        ThreadContext context = runtime.getCurrentContext();\n        BasicObjectSites sites = sites(context);\n        return (RubyString) TypeConverter.convertToType(context, this, stringClass(context), sites.to_str_checked);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "IRubyObject obj",
              "startLine": 138,
              "startColumn": 68,
              "endLine": 138,
              "endColumn": 83,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param sites is the CheckedSites call sites to use to dispatch the convert method\n     * @return the converted value\n     */\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, JavaSites.CheckedSites sites) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(context, obj, target, sites, true);\n        if (!target.isInstance(val)) throw newTypeErrorMismatch(context.runtime, obj, target, sites.methodName, val);"
            },
            {
              "step": 27,
              "variableName": "obj",
              "startLine": 140,
              "startColumn": 50,
              "endLine": 140,
              "endColumn": 53,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, JavaSites.CheckedSites sites) {\n        if (target.isInstance(obj)) return obj;\n        IRubyObject val = convertToType(context, obj, target, sites, true);\n        if (!target.isInstance(val)) throw newTypeErrorMismatch(context.runtime, obj, target, sites.methodName, val);\n        return val;\n    }"
            },
            {
              "step": 28,
              "variableName": "IRubyObject obj",
              "startLine": 108,
              "startColumn": 68,
              "endLine": 108,
              "endColumn": 83,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @param raise will throw an Error if conversion does not work\n     * @return the converted value\n     */\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, JavaSites.CheckedSites sites, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, sites);\n\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;"
            },
            {
              "step": 29,
              "variableName": "obj",
              "startLine": 109,
              "startColumn": 25,
              "endLine": 109,
              "endColumn": 28,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/util/TypeConverter.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * @return the converted value\n     */\n    public static IRubyObject convertToType(ThreadContext context, IRubyObject obj, RubyClass target, JavaSites.CheckedSites sites, boolean raise) {\n        IRubyObject r = obj.checkCallMethod(context, sites);\n\n        return r == null ? handleUncoercibleObject(context.runtime, obj, target, raise) : r;\n    }"
            },
            {
              "step": 30,
              "variableName": "checkCallMethod",
              "startLine": 363,
              "startColumn": 30,
              "endLine": 363,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * method missing exists. Otherwise returns null. 1.9: rb_check_funcall\n     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, JavaSites.CheckedSites sites) {\n        return Helpers.invokeChecked(context, this, sites);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 47,
              "endLine": 364,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     */\n    @Override\n    public final IRubyObject checkCallMethod(ThreadContext context, JavaSites.CheckedSites sites) {\n        return Helpers.invokeChecked(context, this, sites);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "IRubyObject self",
              "startLine": 836,
              "startColumn": 68,
              "endLine": 836,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        return getMetaClass(self).finvokeChecked(context, self, sites);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "self",
              "startLine": 837,
              "startColumn": 59,
              "endLine": 837,
              "endColumn": 63,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    // MRI: rb_check_funcall\n    public static IRubyObject invokeChecked(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        return getMetaClass(self).finvokeChecked(context, self, sites);\n    }\n\n    // MRI: rb_check_funcall"
            },
            {
              "step": 34,
              "variableName": "IRubyObject self",
              "startLine": 732,
              "startColumn": 68,
              "endLine": 732,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     *\n     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        return checkFuncallDefault(context, self, sites);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "self",
              "startLine": 733,
              "startColumn": 45,
              "endLine": 733,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     * MRI: rb_check_funcall\n     */\n    public final IRubyObject finvokeChecked(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        return checkFuncallDefault(context, self, sites);\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "IRubyObject self",
              "startLine": 780,
              "startColumn": 68,
              "endLine": 780,
              "endColumn": 84,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    // MRI: rb_check_funcall_default\n    private IRubyObject checkFuncallDefault(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        final RubyClass klass = this;\n        if (!checkFuncallRespondTo(context, klass, self, sites.respond_to_X)) return null; // return def;\n"
            },
            {
              "step": 37,
              "variableName": "self",
              "startLine": 782,
              "startColumn": 52,
              "endLine": 782,
              "endColumn": 56,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    // MRI: rb_check_funcall_default\n    private IRubyObject checkFuncallDefault(ThreadContext context, IRubyObject self, JavaSites.CheckedSites sites) {\n        final RubyClass klass = this;\n        if (!checkFuncallRespondTo(context, klass, self, sites.respond_to_X)) return null; // return def;\n\n        CacheEntry entry = sites.site.retrieveCache(klass);\n        DynamicMethod method = entry.method;"
            },
            {
              "step": 38,
              "variableName": "IRubyObject recv",
              "startLine": 830,
              "startColumn": 90,
              "endLine": 830,
              "endColumn": 106,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "     *\n     * MRI: check_funcall_respond_to\n     */\n    private static boolean checkFuncallRespondTo(ThreadContext context, RubyClass klass, IRubyObject recv, RespondToCallSite respondToSite) {\n        DynamicMethod me = respondToSite.retrieveCache(klass).method;\n\n        // NOTE: isBuiltin here would be NOEX_BASIC in MRI, a flag only added to respond_to?, method_missing, and"
            },
            {
              "step": 39,
              "variableName": "recv",
              "startLine": 843,
              "startColumn": 57,
              "endLine": 843,
              "endColumn": 61,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyClass.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n        return required == 1 ?\n                respondToSite.respondsTo(context, recv, recv) :\n                respondToSite.respondsTo(context, recv, recv, true);\n    }\n\n    // MRI: check_funcall_callable"
            },
            {
              "step": 40,
              "variableName": "IRubyObject self",
              "startLine": 99,
              "startColumn": 74,
              "endLine": 99,
              "endColumn": 90,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return super.call(context, caller, self, getRespondToNameSym(context)).isTrue();\n    }\n\n    public boolean respondsTo(ThreadContext context, IRubyObject caller, IRubyObject self, boolean includePrivate) {\n        RubyClass klass = getMetaClass(self);\n        RespondToTuple tuple = respondToTuple;\n        if (tuple.cacheOk(klass)) {"
            },
            {
              "step": 41,
              "variableName": "self",
              "startLine": 107,
              "startColumn": 44,
              "endLine": 107,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "            if (strName.equals(tuple.name) && !includePrivate == tuple.checkVisibility) return tuple.respondsToBoolean;\n        }\n        // go through normal call logic, which will hit overridden cacheAndCall\n        return super.call(context, caller, self, getRespondToNameSym(context), asBoolean(context, includePrivate)).isTrue();\n    }\n\n    private RubySymbol getRespondToNameSym(ThreadContext context) {"
            },
            {
              "step": 42,
              "variableName": "IRubyObject self",
              "startLine": 286,
              "startColumn": 72,
              "endLine": 286,
              "endColumn": 88,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1, IRubyObject arg2) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;"
            },
            {
              "step": 43,
              "variableName": "self",
              "startLine": 287,
              "startColumn": 43,
              "endLine": 287,
              "endColumn": 47,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1, IRubyObject arg2) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {"
            },
            {
              "step": 44,
              "variableName": "IRubyObject arg",
              "startLine": 496,
              "startColumn": 42,
              "endLine": 496,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "        return metaClass;\n    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n"
            },
            {
              "step": 45,
              "variableName": "(RubyBasicObject) arg",
              "startLine": 497,
              "startColumn": 17,
              "endLine": 497,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyStruct [metaClass] : RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 46,
              "variableName": "((RubyBasicObject) arg).metaClass",
              "startLine": 497,
              "startColumn": 16,
              "endLine": 497,
              "endColumn": 49,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/RubyBasicObject.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static RubyClass getMetaClass(IRubyObject arg) {\n        return ((RubyBasicObject) arg).metaClass;\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "getMetaClass(self)",
              "startLine": 287,
              "startColumn": 30,
              "endLine": 287,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject caller, IRubyObject self, IRubyObject arg1, IRubyObject arg2) {\n        RubyClass selfType = getMetaClass(self);\n        // This must be retrieved *once* to avoid racing with other threads.\n        CacheEntry cache = this.cache;\n        if (cache.typeOk(selfType)) {"
            },
            {
              "step": 48,
              "variableName": "selfType",
              "startLine": 293,
              "startColumn": 52,
              "endLine": 293,
              "endColumn": 60,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "RubyClass",
              "code": "        if (cache.typeOk(selfType)) {\n            return cache.method.call(context, self, cache.sourceModule, methodName, arg1, arg2);\n        }\n        return cacheAndCall(context, caller, self, selfType, arg1, arg2);\n    }\n\n    public IRubyObject fcall(ThreadContext context, IRubyObject self, IRubyObject arg1, IRubyObject arg2) {"
            },
            {
              "step": 49,
              "variableName": "RubyClass selfType",
              "startLine": 138,
              "startColumn": 101,
              "endLine": 138,
              "endColumn": 119,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    protected IRubyObject cacheAndCall(ThreadContext context, IRubyObject caller, IRubyObject self, RubyClass selfType, IRubyObject arg0, IRubyObject arg1) {\n        CacheEntry entry = selfType.searchWithCache(methodName);\n        DynamicMethod method = entry.method;\n"
            },
            {
              "step": 50,
              "variableName": "selfType",
              "startLine": 143,
              "startColumn": 63,
              "endLine": 143,
              "endColumn": 71,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (methodMissing(method, caller)) {\n            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n            method = entry.method;\n        }\n"
            },
            {
              "step": 51,
              "variableName": "RubyClass selfClass",
              "startLine": 594,
              "startColumn": 78,
              "endLine": 594,
              "endColumn": 97,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        return (int) length;\n    }\n\n    public static CacheEntry createMethodMissingEntry(ThreadContext context, RubyClass selfClass, CallType callType, Visibility visibility, int token, String methodName) {\n        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,"
            },
            {
              "step": 52,
              "variableName": "selfClass",
              "startLine": 598,
              "startColumn": 17,
              "endLine": 598,
              "endColumn": 26,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "RubyClass",
              "code": "        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,\n                selfClass,\n                token);\n    }\n"
            },
            {
              "step": 53,
              "variableName": "RubyModule source",
              "startLine": 20,
              "startColumn": 45,
              "endLine": 20,
              "endColumn": 62,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "RubyClass",
              "code": "        this.token = token;\n    }\n\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;"
            },
            {
              "step": 54,
              "variableName": "source",
              "startLine": 22,
              "startColumn": 29,
              "endLine": 22,
              "endColumn": 35,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "RubyClass",
              "code": "\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;\n    }\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 22,
              "startColumn": 9,
              "endLine": 22,
              "endColumn": 13,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CacheEntry.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    public CacheEntry(DynamicMethod method, RubyModule source, int token) {\n        this.method = method;\n        this.sourceModule = source;\n        this.token = token;\n    }\n"
            },
            {
              "step": 56,
              "variableName": "new Cac",
              "startLine": 596,
              "startColumn": 16,
              "endLine": 599,
              "endColumn": 23,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/Helpers.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n    public static CacheEntry createMethodMissingEntry(ThreadContext context, RubyClass selfClass, CallType callType, Visibility visibility, int token, String methodName) {\n        DynamicMethod method = selectMethodMissing(context, selfClass, visibility, methodName, callType);\n        return new CacheEntry(\n                method,\n                selfClass,\n                token);"
            },
            {
              "step": 57,
              "variableName": "Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName)",
              "startLine": 143,
              "startColumn": 21,
              "endLine": 143,
              "endColumn": 131,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        DynamicMethod method = entry.method;\n\n        if (methodMissing(method, caller)) {\n            entry = Helpers.createMethodMissingEntry(context, selfType, callType, method.getVisibility(), entry.token, methodName);\n            method = entry.method;\n        }\n"
            },
            {
              "step": 58,
              "variableName": "entry",
              "startLine": 154,
              "startColumn": 26,
              "endLine": 154,
              "endColumn": 31,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        }\n\n        // normal logic if it's not the builtin respond_to? method\n        entry = setCache(entry, self); // cache = entry;\n        return method.call(context, self, entry.sourceModule, methodName, arg0, arg1);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "CacheEntry entry",
              "startLine": 31,
              "startColumn": 35,
              "endLine": 31,
              "endColumn": 51,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        return cache;\n    }\n\n    protected CacheEntry setCache(CacheEntry entry, IRubyObject self) {\n        return cache = entry;\n    }\n"
            },
            {
              "step": 60,
              "variableName": "cache = entry",
              "startLine": 32,
              "startColumn": 16,
              "endLine": 32,
              "endColumn": 29,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/CachingCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "    }\n\n    protected CacheEntry setCache(CacheEntry entry, IRubyObject self) {\n        return cache = entry;\n    }\n\n    public final boolean isOptimizable() {"
            },
            {
              "step": 61,
              "variableName": "setCache(entry, self)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 38,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "        }\n\n        // normal logic if it's not the builtin respond_to? method\n        entry = setCache(entry, self); // cache = entry;\n        return method.call(context, self, entry.sourceModule, methodName, arg0, arg1);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "entry",
              "startLine": 155,
              "startColumn": 43,
              "endLine": 155,
              "endColumn": 48,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "CacheEntry [sourceModule] : RubyClass",
              "code": "\n        // normal logic if it's not the builtin respond_to? method\n        entry = setCache(entry, self); // cache = entry;\n        return method.call(context, self, entry.sourceModule, methodName, arg0, arg1);\n    }\n\n    private IRubyObject fastRespondTo(ThreadContext context, IRubyObject arg, CacheEntry entry, RubyClass selfType, boolean checkVisibility) {"
            },
            {
              "step": 63,
              "variableName": "entry.sourceModule",
              "startLine": 155,
              "startColumn": 43,
              "endLine": 155,
              "endColumn": 61,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/runtime/callsite/RespondToCallSite.java",
              "type": "RubyClass",
              "code": "\n        // normal logic if it's not the builtin respond_to? method\n        entry = setCache(entry, self); // cache = entry;\n        return method.call(context, self, entry.sourceModule, methodName, arg0, arg1);\n    }\n\n    private IRubyObject fastRespondTo(ThreadContext context, IRubyObject arg, CacheEntry entry, RubyClass selfType, boolean checkVisibility) {"
            },
            {
              "step": 64,
              "variableName": "RubyModule clazz",
              "startLine": 82,
              "startColumn": 70,
              "endLine": 82,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0, IRubyObject arg1) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 65,
              "variableName": "clazz",
              "startLine": 83,
              "startColumn": 36,
              "endLine": 83,
              "endColumn": 41,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, IRubyObject arg0, IRubyObject arg1) {\n        return call(context, self, clazz, name, Block.NULL_BLOCK);\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "RubyModule clazz",
              "startLine": 34,
              "startColumn": 70,
              "endLine": 34,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);"
            },
            {
              "step": 67,
              "variableName": "clazz",
              "startLine": 37,
              "startColumn": 38,
              "endLine": 37,
              "endColumn": 43,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "    public IRubyObject call(ThreadContext context, IRubyObject self, RubyModule clazz, String name, Block block) {\n        if (IRRuntimeHelpers.isDebug()) doDebug();\n\n        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {"
            },
            {
              "step": 68,
              "variableName": "RubyModule clazz",
              "startLine": 40,
              "startColumn": 63,
              "endLine": 40,
              "endColumn": 79,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        return callInternal(context, clazz);\n    }\n\n    protected IRubyObject callInternal(ThreadContext context, RubyModule clazz) {\n        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {"
            },
            {
              "step": 69,
              "variableName": "clazz",
              "startLine": 44,
              "startColumn": 90,
              "endLine": 44,
              "endColumn": 95,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/methods/InterpretedIRBodyMethod.java",
              "type": "RubyClass",
              "code": "        ensureInstrsReady();\n\n        switch (getIRScope().getScopeType()) {\n            case MODULE_BODY: return Interpreter.INTERPRET_MODULE(context, getIRScope(), clazz, name);\n            case CLASS_BODY: return Interpreter.INTERPRET_CLASS(context, getIRScope(), clazz, name);\n            case METACLASS_BODY: return Interpreter.INTERPRET_METACLASS(context, getIRScope(), clazz, name, getVisibility());\n            default: throw new RuntimeException(\"invalid body method type: \" + getIRScope());"
            },
            {
              "step": 70,
              "variableName": "RubyModule clazz",
              "startLine": 130,
              "startColumn": 85,
              "endLine": 130,
              "endColumn": 101,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name, null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n"
            },
            {
              "step": 71,
              "variableName": "clazz",
              "startLine": 131,
              "startColumn": 89,
              "endLine": 131,
              "endColumn": 94,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "    }\n\n    public static IRubyObject INTERPRET_MODULE(ThreadContext context, IRScope body, RubyModule clazz, String name) {\n        return interpretFrameScope(context, null, body, clazz, null, Visibility.PUBLIC, clazz, null, name,  null, Block.NULL_BLOCK);\n    }\n\n    public static IRubyObject INTERPRET_METACLASS(ThreadContext context, IRScope body, RubyModule clazz, String name, Visibility visibility) {"
            },
            {
              "step": 72,
              "variableName": "IRubyObject self",
              "startLine": 163,
              "startColumn": 173,
              "endLine": 163,
              "endColumn": 189,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "        return interpretFrameScope(context, null, body, implClass, null, Visibility.PUBLIC, self, name, name, arrayOf(arg0, arg1, arg2), block);\n    }\n\n    private static IRubyObject interpretFrameScope(ThreadContext context, Block selfBlock, IRScope body, RubyModule clazz, DynamicScope parentScope, Visibility visibility, IRubyObject self, String frameName, String passedName, IRubyObject[] args, Block block) {\n        InterpreterContext ic = body.getInterpreterContext();\n        String id = body.getId();\n        boolean hasExplicitCallProtocol =  ic.hasExplicitCallProtocol();"
            },
            {
              "step": 73,
              "variableName": "self",
              "startLine": 174,
              "startColumn": 69,
              "endLine": 174,
              "endColumn": 73,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/Interpreter.java",
              "type": "RubyClass",
              "code": "            if (!hasExplicitCallProtocol) preFrameScope(ic, context, self, frameName, block, clazz, parentScope, visibility);\n\n            try {\n                return ic.getEngine().interpret(context, selfBlock, self, ic, clazz, passedName, args, block);\n            } finally {\n                body.cleanupAfterExecution();\n                if (!hasExplicitCallProtocol) postFrameScope(ic, context);"
            },
            {
              "step": 74,
              "variableName": "IRubyObject self",
              "startLine": 109,
              "startColumn": 70,
              "endLine": 109,
              "endColumn": 86,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "        return interpret(context, block, self, interpreterContext, implClass, name, new IRubyObject[] {arg1, arg2, arg3, arg4}, blockArg);\n    }\n\n    public IRubyObject interpret(ThreadContext context, Block block, IRubyObject self,\n                                         InterpreterContext interpreterContext, RubyModule implClass,\n                                         String name, IRubyObject[] args, Block blockArg) {\n        Instr[]   instrs    = interpreterContext.getInstructions();"
            },
            {
              "step": 75,
              "variableName": "self",
              "startLine": 201,
              "startColumn": 105,
              "endLine": 201,
              "endColumn": 109,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "                        }\n                        break;\n                    case OTHER_OP:\n                        processOtherOp(context, block, instr, operation, currDynScope, currScope, temp, self, floats, fixnums, booleans);\n                        break;\n                }\n            } catch (Throwable t) {"
            },
            {
              "step": 76,
              "variableName": "IRubyObject self",
              "startLine": 472,
              "startColumn": 80,
              "endLine": 472,
              "endColumn": 96,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "    }\n\n    protected static void processOtherOp(ThreadContext context, Block block, Instr instr, Operation operation, DynamicScope currDynScope,\n                                         StaticScope currScope, Object[] temp, IRubyObject self,\n                                         double[] floats, long[] fixnums, boolean[] booleans) {\n        Object result;\n        switch(operation) {"
            },
            {
              "step": 77,
              "variableName": "self",
              "startLine": 545,
              "startColumn": 76,
              "endLine": 545,
              "endColumn": 80,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/interpreter/InterpreterEngine.java",
              "type": "RubyClass",
              "code": "\n            // ---------- All the rest ---------\n            default:\n                result = instr.interpret(context, currScope, currDynScope, self, temp);\n                setResult(temp, currDynScope, instr, result);\n                break;\n        }"
            },
            {
              "step": 78,
              "variableName": "IRubyObject self",
              "startLine": 54,
              "startColumn": 102,
              "endLine": 54,
              "endColumn": 118,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/RescueEQQInstr.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject excType = (IRubyObject) getArg1().retrieve(context, self, currScope, currDynScope, temp);\n        Object excObj = getArg2().retrieve(context, self, currScope, currDynScope, temp);\n"
            },
            {
              "step": 79,
              "variableName": "self",
              "startLine": 56,
              "startColumn": 53,
              "endLine": 56,
              "endColumn": 57,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/RescueEQQInstr.java",
              "type": "RubyClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject excType = (IRubyObject) getArg1().retrieve(context, self, currScope, currDynScope, temp);\n        Object excObj = getArg2().retrieve(context, self, currScope, currDynScope, temp);\n\n        return IRRuntimeHelpers.isExceptionHandled(context, excType, excObj);\n    }"
            },
            {
              "step": 80,
              "variableName": "IRubyObject self",
              "startLine": 45,
              "startColumn": 51,
              "endLine": 45,
              "endColumn": 67,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "RubyClass",
              "code": "    }\n\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "self",
              "startLine": 46,
              "startColumn": 16,
              "endLine": 46,
              "endColumn": 20,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/operands/Self.java",
              "type": "RubyClass",
              "code": "\n    @Override\n    public Object retrieve(ThreadContext context, IRubyObject self, StaticScope currScope, DynamicScope currDynScope, Object[] temp) {\n        return self;\n    }\n\n    @Override"
            },
            {
              "step": 82,
              "variableName": "getArg2().retrieve(context, self, currScope, currDynScope, temp)",
              "startLine": 56,
              "startColumn": 25,
              "endLine": 56,
              "endColumn": 89,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/RescueEQQInstr.java",
              "type": "RubyClass",
              "code": "    @Override\n    public Object interpret(ThreadContext context, StaticScope currScope, DynamicScope currDynScope, IRubyObject self, Object[] temp) {\n        IRubyObject excType = (IRubyObject) getArg1().retrieve(context, self, currScope, currDynScope, temp);\n        Object excObj = getArg2().retrieve(context, self, currScope, currDynScope, temp);\n\n        return IRRuntimeHelpers.isExceptionHandled(context, excType, excObj);\n    }"
            },
            {
              "step": 83,
              "variableName": "excObj",
              "startLine": 58,
              "startColumn": 70,
              "endLine": 58,
              "endColumn": 76,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/instructions/RescueEQQInstr.java",
              "type": "RubyClass",
              "code": "        IRubyObject excType = (IRubyObject) getArg1().retrieve(context, self, currScope, currDynScope, temp);\n        Object excObj = getArg2().retrieve(context, self, currScope, currDynScope, temp);\n\n        return IRRuntimeHelpers.isExceptionHandled(context, excType, excObj);\n    }\n\n    @Override"
            },
            {
              "step": 84,
              "variableName": "Object excObj",
              "startLine": 445,
              "startColumn": 94,
              "endLine": 445,
              "endColumn": 107,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        return false;\n    }\n\n    public static IRubyObject isExceptionHandled(ThreadContext context, IRubyObject excType, Object excObj) {\n        // SSS FIXME: JIT should do an explicit unwrap in code just like in interpreter mode.\n        // This is called once for each RescueEQQ instr and unwrapping each time is unnecessary.\n        // This is not a performance issue, but more a question of where this belongs."
            },
            {
              "step": 85,
              "variableName": "excObj",
              "startLine": 452,
              "startColumn": 38,
              "endLine": 452,
              "endColumn": 44,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        // It seems more logical to (a) recv-exc (b) unwrap-exc (c) do all the rescue-eqq checks.\n        //\n        // Unwrap Ruby exceptions\n        excObj = unwrapRubyException(excObj);\n\n        boolean ret = IRRuntimeHelpers.isRubyExceptionHandled(context, excType, excObj)\n            || IRRuntimeHelpers.isJavaExceptionHandled(context, excType, excObj, false);"
            },
            {
              "step": 86,
              "variableName": "Object excObj",
              "startLine": 358,
              "startColumn": 46,
              "endLine": 358,
              "endColumn": 59,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        return v1 == v2;\n    }\n\n    public static Object unwrapRubyException(Object excObj) {\n        // Unrescuable:\n        //   IRBreakJump, IRReturnJump, ThreadKill, RubyContinuation, MainExitException, etc.\n        //   These cannot be rescued -- only run ensure blocks"
            },
            {
              "step": 87,
              "variableName": "(excObj instanceof RaiseException) ? ((RaiseException) excObj).getException() : excObj",
              "startLine": 367,
              "startColumn": 16,
              "endLine": 367,
              "endColumn": 102,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "... : RubyClass",
              "code": "        }\n        // Ruby exceptions, errors, and other java exceptions.\n        // These can be rescued -- run rescue blocks\n        return (excObj instanceof RaiseException) ? ((RaiseException) excObj).getException() : excObj;\n    }\n\n    private static boolean isJavaExceptionHandled(ThreadContext context, IRubyObject excType, Object excObj, boolean arrayCheck) {"
            },
            {
              "step": 88,
              "variableName": "unwrapRubyException(excObj)",
              "startLine": 452,
              "startColumn": 18,
              "endLine": 452,
              "endColumn": 45,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        // It seems more logical to (a) recv-exc (b) unwrap-exc (c) do all the rescue-eqq checks.\n        //\n        // Unwrap Ruby exceptions\n        excObj = unwrapRubyException(excObj);\n\n        boolean ret = IRRuntimeHelpers.isRubyExceptionHandled(context, excType, excObj)\n            || IRRuntimeHelpers.isJavaExceptionHandled(context, excType, excObj, false);"
            },
            {
              "step": 89,
              "variableName": "excObj",
              "startLine": 454,
              "startColumn": 81,
              "endLine": 454,
              "endColumn": 87,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        // Unwrap Ruby exceptions\n        excObj = unwrapRubyException(excObj);\n\n        boolean ret = IRRuntimeHelpers.isRubyExceptionHandled(context, excType, excObj)\n            || IRRuntimeHelpers.isJavaExceptionHandled(context, excType, excObj, false);\n\n        return asBoolean(context, ret);"
            },
            {
              "step": 90,
              "variableName": "Object excObj",
              "startLine": 422,
              "startColumn": 95,
              "endLine": 422,
              "endColumn": 108,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "        return exception;\n    }\n\n    private static boolean isRubyExceptionHandled(ThreadContext context, IRubyObject excType, Object excObj) {\n        if (excType instanceof RubyArray) {\n            RubyArray testTypes = (RubyArray)excType;\n            for (int i = 0, n = testTypes.getLength(); i < n; i++) {"
            },
            {
              "step": 91,
              "variableName": "(IRubyObject)excObj",
              "startLine": 428,
              "startColumn": 56,
              "endLine": 428,
              "endColumn": 75,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/ir/runtime/IRRuntimeHelpers.java",
              "type": "RubyClass",
              "code": "            for (int i = 0, n = testTypes.getLength(); i < n; i++) {\n                IRubyObject testType = testTypes.eltInternal(i);\n                if (IRRuntimeHelpers.isRubyExceptionHandled(context, testType, excObj)) {\n                    globalVariables(context).set(\"$!\", (IRubyObject)excObj);\n                    return true;\n                }\n            }"
            },
            {
              "step": 92,
              "variableName": "IRubyObject value",
              "startLine": 123,
              "startColumn": 41,
              "endLine": 123,
              "endColumn": 58,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/GlobalVariables.java",
              "type": "RubyClass",
              "code": "        return createIfNotDefined(name);\n    }\n\n    public IRubyObject set(String name, IRubyObject value) {\n        GlobalVariable variable = getVariable(name);\n        IRubyObject result = variable.getAccessor().setValue(value);\n        variable.trace(value);"
            },
            {
              "step": 93,
              "variableName": "value",
              "startLine": 126,
              "startColumn": 24,
              "endLine": 126,
              "endColumn": 29,
              "uri": "jruby-10.0.0.1/core/src/main/java/org/jruby/internal/runtime/GlobalVariables.java",
              "type": "",
              "code": "    public IRubyObject set(String name, IRubyObject value) {\n        GlobalVariable variable = getVariable(name);\n        IRubyObject result = variable.getAccessor().setValue(value);\n        variable.trace(value);\n        variable.invalidate();\n        return result;\n    }"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}